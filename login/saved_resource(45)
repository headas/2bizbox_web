app.controller("productPlanController", function($scope, $rootScope, $filter, getTeamtourPlanDetail, Pagination, addTeamByPlan,
  getTeamtourPlanList, findInnerObjIndex, _, getScheduleClass, addTeamtourProductPlanBatch, delProductPlanPriceById,
  editTeamtourProductPlanBatch, delProductPlanById, getCostListProduct, showWarningBox, getTeamListByPlanId, orderTransferTeam,
  addPlanCars, delPlanCars) {

  $scope.showDate = new Date();

  //日历的配置
  $scope.calendarOptions = {
    calendarClass: "fullcalendar",
    headClass: "calHead",
    bodyClass: "calBody",
    footClass: "calFoot",
    headDateClass: "calHeadDate",

    fillDay: function(day, date) {
      if (!$rootScope[position[2]].prductPlanList) {
        $rootScope[position[2]].prductPlanList = [];
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === date.getTime() / 1000;
      });
      var html = '';
      if (undefined !== planDetail) {
        var price = '价格无';
         if (undefined !== planDetail.ProductPlanPrice && null !== planDetail.ProductPlanPrice && planDetail.ProductPlanPrice.length > 0) {

          var tempPrice = 0;
          planDetail.ProductPlanPrice.forEach(function(thePrice, theIndex){
            if(0 === theIndex){
              tempPrice = thePrice.DefaultPrice;
            }
          });
          price = '￥' + tempPrice;
        }
        var tripProjectName = '无行程';
        if (undefined !== planDetail.TripProject && null !== planDetail.TripProject && planDetail.TripProject.Title) {
          tripProjectName = planDetail.TripProject.Title;
        }
        html = '<label class="label_inner"><div class="xc_l"><span>' + tripProjectName + '</span><font>' + price + '</font></div><div class="f_r"><span>' + $filter('date')(date, 'dd') + '</span></div></label>';
      } else {
        html = '<label class="label_inner"><div class="xc_l"></div><div class="f_r"><span>' + $filter('date')(date, 'dd') + '</span><input ng-if="operate.batchAdd && '+ date.getTime()  +'>='+ new Date().setHours(0,0,0,0) + '" type="checkbox" ng-model="operate.dateSelected[' + Date.parse(date) + ']"  ng-true-value="true" ng-false-value="false" ></div></label>';
      }
      return html;
    },

    monthChange: function(datetime) {
      $scope.showDate = datetime;
      if ($rootScope[position[2]].ProductID) {
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]].ProductID,
          StartTime: $filter('date')(datetime, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].operate.dateSelected = [];
          $rootScope[position[2]].planReFill = true;
        });
      }
    }
  };

  $rootScope[position[2]].operate = {
    showPlanDetail: function(planDetailId) {
      if (this.showPlanDetailId == planDetailId) {
        this.showPlanDetailId = "";
      } else {
        this.showPlanDetailId = planDetailId;
      }
    },
    showPlanDetailId: "",
    dateSelected: [],
    batchAdd: false
  };

  $scope.chooseCurrentMonth = function(){
    var dateTemp = new Date($scope.showDate.getTime());
    var dateNow = new Date();
    dateTemp.setDate(1);
    for(var i = 1; i <= 31; i++){
      if(dateTemp.getMonth() != $scope.showDate.getMonth()){
        break;
      }
      if(dateNow.getDate() > dateTemp.getDate()){
        dateTemp.setDate(dateTemp.getDate() + 1);
        continue;
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === dateTemp.getTime() / 1000;
      });
      if (undefined === planDetail) {
        if($rootScope[position[2]].hasSelectAll){
          $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = false;
        }else{
          $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = true;
        }
      }
      dateTemp.setDate(dateTemp.getDate() + 1);
    }
    $rootScope[position[2]].hasSelectAll = !$rootScope[position[2]].hasSelectAll;
    $rootScope[position[2]].addPlanDateList = [];
    $scope.showPlanDetail($scope.showDate.getDate());
  };

  $scope.batchAdd = function() {
    $rootScope[position[2]].showDetail = false;
    $rootScope[position[2]].operate.batchAdd = !$rootScope[position[2]].operate.batchAdd;
    if($rootScope[position[2]].operate.batchAdd){
      $rootScope[position[2]].addPlanDateList = [];
      $rootScope[position[2]].operate.dateSelected = [];
    }

    // if (!$rootScope[position[2]].editPlanInfo) {
      $rootScope[position[2]].editPlanInfo = {};
      $rootScope[position[2]].editPlanInfo.priceType = 1;
      $rootScope[position[2]].editPlanInfo.Cost = {};
      $rootScope[position[2]].editPlanInfo.pricePlanNormal = {};
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = [];
      $rootScope[position[2]].editPlanInfo.Allaccompanytourguide = false;
      $rootScope[position[2]].editPlanInfo.PlanTypeID = 1;
      $rootScope[position[2]].editPlanInfo.Lowestformation = 0;
      $rootScope[position[2]].editPlanInfo.Networkorder = 1;
      $rootScope[position[2]].editPlanInfo.AdultMachineBuildingFee = 0;
      $rootScope[position[2]].editPlanInfo.ChildMachineBuildingFee = 0;
      $rootScope[position[2]].editPlanInfo.ExitVisaFee = 0;
      $rootScope[position[2]].editPlanInfo.TourGuideServiceCharge = 0;
      $rootScope[position[2]].editPlanInfo.FinalorderDay = 0;
      $rootScope[position[2]].editPlanInfo.FinalorderHour = 0;
      $rootScope[position[2]].editPlanInfo.FinalreservationDay = 0;
      $rootScope[position[2]].editPlanInfo.FinalreservationHour = 0;
      $rootScope[position[2]].editPlanInfo.ReserveDay = 0;
      $rootScope[position[2]].editPlanInfo.ReserveHour = 0;
      $rootScope[position[2]].editPlanInfo.ShowStatus = 1;
      if(!$rootScope[position[2]].editPlanInfo.allCost){
        getCostListProduct({
          keyword: "",
          page: 1,
          limit: 10
        }, function(response) {
          $rootScope[position[2]].editPlanInfo.allCost = response.list;
        });
      }
      getScheduleClass($rootScope[position[2]].ProductID, function(response) {
        $rootScope[position[2]].editPlanInfo.tripList = response.list;
        if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
          $rootScope[position[2]].editPlanInfo.Trip = $rootScope[position[2]].editPlanInfo.tripList[0];
        }
      });
    // }
  };

  $scope.showPlanDetail = function(day) {
    if ($rootScope[position[2]].operate.batchAdd) {
      $rootScope[position[2]].addPlanDateList = [];
      var key;
      for (key in $rootScope[position[2]].operate.dateSelected) {
        if ($rootScope[position[2]].operate.dateSelected[key]) {
          var newDate = new Date();
          newDate.setTime(key);
          $rootScope[position[2]].addPlanDateList.push(newDate);
        }
      }
    } else {
      var index = findInnerObjIndex($rootScope[position[2]].prductPlanList, ['StartTime', 'sec'], day.date / 1000);
      if (index > -1) {
        var planDetail = $rootScope[position[2]].prductPlanList[index];
        getTeamtourPlanDetail(planDetail._id.$id, function(response) {
          $rootScope[position[2]].planInfo = response;
          $rootScope[position[2]].planInfo.planTime = day.date;
          $rootScope[position[2]].planInfo.FinalorderDay = Math.floor(($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalorder.sec) / 3600 / 24);
          $rootScope[position[2]].planInfo.FinalorderHour = (($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalorder.sec) / 3600) % 24;
          $rootScope[position[2]].planInfo.FinalreservationDay = Math.floor(($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalreservation.sec) / 3600 / 24);
          $rootScope[position[2]].planInfo.FinalreservationHour = (($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalreservation.sec) / 3600) % 24;
          $rootScope[position[2]].planInfo.ReserveDay = Math.floor($rootScope[position[2]].planInfo.ReserveTime / 24);
          $rootScope[position[2]].planInfo.ReserveHour = $rootScope[position[2]].planInfo.ReserveTime % 24;

          $rootScope[position[2]].planInfo.showNormalPrice = true;
           if ($rootScope[position[2]].planInfo.ProductPlanPrice_isDefault1.length>0) {
             $rootScope[position[2]].showNormalPrice = true;
           } else if ($rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0.length>0) {
             $rootScope[position[2]].showNormalPrice = false;
             $rootScope[position[2]].showUpgradePrice = true;
            $rootScope[position[2]].planInfo.showNormalPrice = false;
             $rootScope[position[2]].planInfo.showUpgradePrice = true;
           } else {
             $rootScope[position[2]].ProductPlanPrice_isDefault1 = [];
             $rootScope[position[2]].showNormalPrice = true;
           }



          if ($rootScope[position[2]].planInfo.ActivityPrices && $rootScope[position[2]].planInfo.ActivityPrices.length > 0) {
            $rootScope[position[2]].hasActivity = true;
          }
          $rootScope[position[2]].showDetail = true;
        });
      }
    }
  };

  $scope.changeShowPrice = function(type) {
    if (type == 1) {
      $rootScope[position[2]].planInfo.showNormalPrice = true;
      $rootScope[position[2]].planInfo.showUpgradePrice = false;
    } else {
      $rootScope[position[2]].planInfo.showNormalPrice = false;
      $rootScope[position[2]].planInfo.showUpgradePrice = true;
    }
  };

  $scope.delPlan = function(item) {
    showWarningBox('确定要删除该计划吗？', function() {
      delProductPlanById(item._id.$id, function(response) {
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]].ProductID,
          StartTime: $filter('date')(item.StartTime.sec * 1000, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].showDetail = false;
          $rootScope[position[2]].planInfo = {};
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].planReFill = true;
        });
      });
    });
  };

  $scope.changeToList = function() {
    var param = {
      ProductID: $rootScope[position[2]].ProductID
    };
    getTeamtourPlanList(param, function(response) {
      $rootScope[position[2]].allPlanList = response.list;
    });
    $scope.isListMode = true;
  };

  $scope.changeToCalendar = function() {
    $scope.isListMode = false;
  };

  $scope.editPlan = function() {
    $rootScope[position[2]].isEditMode = true;
    $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);

    $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].editPlanInfo.CostInfo;
    $rootScope[position[2]].editPlanInfo.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanTypeID.ID;
    $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;
    if ($rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1.length > 0) {
      $rootScope[position[2]].editPlanInfo.pricePlanNormal = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1[0];
    }
    $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault0;
    $rootScope[position[2]].editPlanInfo.priceType = 1;
    getScheduleClass($rootScope[position[2]].ProductID, function(response) {
      $rootScope[position[2]].editPlanInfo.tripList = response.list;
      if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
        var trip = _.find($rootScope[position[2]].editPlanInfo.tripList, function(item){
          return item._id.$id === $rootScope[position[2]].editPlanInfo.TripID.$id;
        });
        if(undefined !== trip){
          $rootScope[position[2]].editPlanInfo.Trip = trip;
        }
      }
    });
    if(!$rootScope[position[2]].editPlanInfo.allCost){
      getCostListProduct({
        keyword: "",
        page: 1,
        limit: 10
      }, function(response) {
        $rootScope[position[2]].editPlanInfo.allCost = response.list;
        if($rootScope[position[2]].editPlanInfo.PlanTheCost){
          $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
          return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
        });
        }
      });
    }else{
      $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
        return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
      });
    }
    if($rootScope[position[2]].editPlanInfo.pricePlanNormal._id){
         $rootScope[position[2]].editPlanInfo.pricePlanNormal.id = $rootScope[position[2]].editPlanInfo.pricePlanNormal._id.$id;
    }

    $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(price1){
      price1.id = price1._id.$id;
      price1.PlanID = price1.PlanID.$id;
    });
  };

  $scope.addCarArrange = function() {
    var carName = "";
    for(var i = 1; i < 99; i++){
      carName = i + '号车';
      var car = _.find($rootScope[position[2]].planInfo.Cars, function(item){
        return item.Name === carName;
      });
      if(undefined === car){
        break;
      }
    }
    $rootScope[position[2]].addCarInfo = {
      Name: carName,
      CarDepartures: [{}]
    };
    $rootScope[position[2]].isAddCar = !$rootScope[position[2]].isAddCar;
  };

  $scope.delCarArrange = function(car) {
    showWarningBox('确定要删除车辆吗', function(){
      delPlanCars($rootScope[position[2]].planInfo._id.$id, car.ForeignKeyID.$id, function(response){
        $rootScope[position[2]].planInfo.Cars = _.without($rootScope[position[2]].planInfo.Cars, car);
      });
    });
  };

  $scope.cancelCarArrange = function(){
    $rootScope[position[2]].isAddCar = false;
  };

  $scope.saveCarArrange = function(){
    var cars = [];
    if(($rootScope[position[2]].addCarInfo.DigitNumber - $rootScope[position[2]].addCarInfo.OpenUpNumber - $rootScope[position[2]].addCarInfo.GuideSiteNumber) < 0){
      $rootScope[position[2]].info = "座位数量设置错误，请重新设置";
      return;
    }
    cars.push($rootScope[position[2]].addCarInfo);
    addPlanCars($rootScope[position[2]].planInfo._id.$id, cars, function(response){
      $rootScope[position[2]].addCarInfo._id = {$id: response.data};
      $rootScope[position[2]].addCarInfo.ReservedNumber = $rootScope[position[2]].addCarInfo.DigitNumber - $rootScope[position[2]].addCarInfo.OpenUpNumber - $rootScope[position[2]].addCarInfo.GuideSiteNumber;
      $rootScope[position[2]].planInfo.Cars.push(angular.copy($rootScope[position[2]].addCarInfo));
      $rootScope[position[2]].isAddCar = false;
    });
  };

  $scope.arrangeCar = function() {
    if(!$rootScope[position[2]].planInfo.Cars){
      $rootScope[position[2]].planInfo.Cars = [];
    }
    $rootScope[position[2]].planInfo.isArrangeCar = !$rootScope[position[2]].planInfo.isArrangeCar;
  };

  $scope.teamSet = function(){
    if(!$rootScope[position[2]].planInfo.teamList){
      getTeamListByPlanId($rootScope[position[2]].planInfo._id.$id, function(teamList){
        $rootScope[position[2]].planInfo.teamList = teamList.data;
        $rootScope[position[2]].planInfo.teamList.OrderInfo = {
          OrderMoney: 0,
          PayPrice: 0,
          UnPayPrice: 0,
          AdultNumber: 0,
          ChildNumber: 0,
          BabyNumber: 0,
          Number: 0,
          SiteNumber: 0,
        };
        $rootScope[position[2]].planInfo.teamList.forEach(function(item){
          $rootScope[position[2]].planInfo.teamList.OrderInfo.OrderMoney += item.TeamOrderInfo.TotalOrderMoney;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.PayPrice += item.TeamOrderInfo.TotalPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.UnPayPrice += item.TeamOrderInfo.TotalUnPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.AdultNumber += item.TeamOrderInfo.TotalAdultNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.ChildNumber += item.TeamOrderInfo.TotalChildNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.BabyNumber += item.TeamOrderInfo.TotalBabyNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.Number += item.TeamOrderInfo.TotalNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.SiteNumber += item.TeamOrderInfo.TotalSiteNumber;
        });
        if($rootScope[position[2]].planInfo.teamList.length > 0){
          $rootScope[position[2]].planInfo.teamShow = $rootScope[position[2]].planInfo.teamList[0];
            if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
            $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
            $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
          }
        }
      });
    }
    $rootScope[position[2]].planInfo.isTeamSet = !$rootScope[position[2]].planInfo.isTeamSet;
  };

  $scope.teamPageChange = function(page){
    $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice((page - 1) * 5, page * 5);
    $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, page, 5);
  };

  $scope.changeTeam = function(team){
    $rootScope[position[2]].planInfo.teamShow = team;
    $rootScope[position[2]].planInfo.isSelectAllMember = false;
    if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
    }
  };

  $scope.addAssembly = function() {
    if(!$rootScope[position[2]].addCarInfo.CarDepartures){
      $rootScope[position[2]].addCarInfo.CarDepartures = [];
    }
    $rootScope[position[2]].addCarInfo.CarDepartures.push({});
  };

  $scope.removeAssembly = function(assembly){
    $rootScope[position[2]].addCarInfo.CarDepartures = _.without($rootScope[position[2]].addCarInfo.CarDepartures, assembly);
  };

  $scope.closeArrangeCar = function() {
    $scope.planInfo.isArrangeCar = false;
  };

  $scope.delUpgradePrice = function(price) {
    delProductPlanPriceById(price._id.$id, function(response) {
      $rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0 = _.without($rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0, price);
    });
  };

  $scope.savePlan = function(callBack) {
    var param = {};
    var pricePlanNormal = {};
    //计划信息
    param.CompanyInfoId = $rootScope.userinfo.CompanyID.$id;

    param.ProductName = $rootScope[position[2]].ProductName;
    param.TravelDay = $rootScope[position[2]].TravelDay;
    param.ProductID = $rootScope[position[2]].ProductID;
    param.ProductNo = $rootScope[position[2]].ProductNo;
    param.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanTypeID;
    if(param.PlanTypeID === 2){
      param.PeerCompanyName = $rootScope[position[2]].editPlanInfo.PeerCompanyName;
    }
    param.Allaccompanytourguide = $rootScope[position[2]].editPlanInfo.Allaccompanytourguide;
    param.Lowestformation = $rootScope[position[2]].editPlanInfo.Lowestformation;
    param.Networkorder = $rootScope[position[2]].editPlanInfo.Networkorder;
    param.AdultMachineBuildingFee = $rootScope[position[2]].editPlanInfo.AdultMachineBuildingFee;
    param.ChildMachineBuildingFee = $rootScope[position[2]].editPlanInfo.ChildMachineBuildingFee;
    param.ExitVisaFee = $rootScope[position[2]].editPlanInfo.ExitVisaFee;
    param.Note = $rootScope[position[2]].editPlanInfo.Note;
    param.TourGuideServiceCharge = $rootScope[position[2]].editPlanInfo.TourGuideServiceCharge;
    param.FinalorderDay = $rootScope[position[2]].editPlanInfo.FinalorderDay;
    param.FinalorderHour = $rootScope[position[2]].editPlanInfo.FinalorderHour;
    param.FinalreservationDay = $rootScope[position[2]].editPlanInfo.FinalreservationDay;
    param.FinalreservationHour = $rootScope[position[2]].editPlanInfo.FinalreservationHour;
    param.ReserveDay = $rootScope[position[2]].editPlanInfo.ReserveDay;
    param.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveHour;
    param.ShowStatus = $rootScope[position[2]].editPlanInfo.ShowStatus;


    if ($rootScope[position[2]].editPlanInfo.Cost&&$rootScope[position[2]].editPlanInfo.Cost.hasOwnProperty('_id')) {
      // $rootScope[position[2]].info = '请选择成本';
      // return;
      param.PlanTheCost = $rootScope[position[2]].editPlanInfo.Cost._id.$id;
    }else{

    }

    if (!$rootScope[position[2]].editPlanInfo.Trip._id) {
      $rootScope[position[2]].info = '请选择行程';
      //callBack();
      return;
    }else{
      param.TripID = $rootScope[position[2]].editPlanInfo.Trip._id.$id;
    }

 if (!param.FinalorderDay && !param.FinalorderHour) {
      $rootScope[position[2]].info = '请填写下单截止时间';
      //callBack();
      return;
    }

    if (!param.FinalreservationDay && !param.FinalreservationHour) {
      $rootScope[position[2]].info = '请填写预留时间';
      //callBack();
      return;
    }

    if (!param.Networkorder) {
      $rootScope[position[2]].info = '请选择网络订单';
      //callBack();
      return;
    }


  if (!param.Lowestformation) {
      $rootScope[position[2]].info = '请填写最低成员';
      //callBack();
      return;
    }

    if (!$rootScope[position[2]].editPlanInfo.ReserveDay && !$rootScope[position[2]].editPlanInfo.ReserveHour) {
      $rootScope[position[2]].info = '请填写暂留时间';
      //callBack();
      return;
    }

       param.productPlanPrice = [];
    //常规方案
    pricePlanNormal = $rootScope[position[2]].editPlanInfo.pricePlanNormal;
    pricePlanNormal.isDefault = 1;
    pricePlanNormal.Pricetitle = '';
    pricePlanNormal.Pricetitle = '常规方案';

    if (!$rootScope[position[2]].editPlanInfo.pricePlanNormal.PlanNumber) {
      $rootScope[position[2]].info = '请填写常规方案的收人总数';
      //callBack();
      return;
    }

    if ($rootScope[position[2]].editPlanInfo.pricePlanNormal.RetainNumber===null || $rootScope[position[2]].editPlanInfo.pricePlanNormal.RetainNumber === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的保留总数';
      //callBack();
      return;
    }

    if (!pricePlanNormal.DefaultPrice) {
      $rootScope[position[2]].info = '请填写常规方案的直客成人价';
      //callBack();
      return;
    }

    if (!pricePlanNormal.ChildPrice) {
      $rootScope[position[2]].info = '请填写常规方案的直客小孩价';
      //callBack();
      return;
    }

    if (!pricePlanNormal.BabyPrice) {
      // $rootScope[position[2]].info = '请填写常规方案的直客婴儿价';
      //callBack();
      // return;
      pricePlanNormal.BabyPrice = 0;
    }

    if (pricePlanNormal.SingleRoomDiff === undefined || pricePlanNormal.SingleRoomDiff === '') {
      $rootScope[position[2]].info = '请填写常规方案的单房差';
      //callBack();
      return;
    }

     if (pricePlanNormal.Deductiblevoucher===null || pricePlanNormal.Deductiblevoucher === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的抵用券';
      //callBack();
      return;
    }

    if (!pricePlanNormal.PeerDefaultPrice) {
      $rootScope[position[2]].info = '请填写常规方案的同行成人价';
      //callBack();
      return;
    }


    if (!pricePlanNormal.PeerChildPrice) {
      $rootScope[position[2]].info = '请填写常规方案的同行小孩价';
      //callBack();
      return;
    }

    if (!pricePlanNormal.PeerBabyPrice) {
      // $rootScope[position[2]].info = '请填写常规方案的同行婴儿价';
      //callBack();
      // return;
      pricePlanNormal.PeerBabyPrice = 0;
    }

    //升级方案
    if($rootScope[position[2]].isEditMode){
       $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
       item.PlanID = $rootScope[position[2]].editPlanInfo._id.$id;
      item.isDefault = 0;
      if (!item.Pricetitle) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        //callBack();
        return;
      }
      param.productPlanPrice.push(item);
    });
    }else{
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
      item.isDefault = 0;
      if (!item.Pricetitle) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        //callBack();
        return;
      }
      param.productPlanPrice.push(item);
    });
    }

    if(pricePlanNormal.PlanNumber && pricePlanNormal.PlanNumber > 0){
      param.productPlanPrice.push(pricePlanNormal);
    }


    if ($rootScope[position[2]].isEditMode) {
      var params1 = [];
      param.id = $rootScope[position[2]].editPlanInfo._id.$id;
      param.StartTime = $rootScope[position[2]].editPlanInfo.StartTime.sec;
      param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);
      param.Finalreservation = (param.StartTime - param.FinalreservationDay * 24 * 60 * 60 - param.FinalreservationHour * 60 * 60);
      param.ReserveTime = $rootScope[position[2]].editPlanInfo.ReserveDay * 24 + $rootScope[position[2]].editPlanInfo.ReserveHour;
      params1.push(angular.copy(param));
      editTeamtourProductPlanBatch(params1, function(response) {
        $rootScope[position[2]].isEditMode = false;
        $rootScope[position[2]].showDetail = false;
        $rootScope[position[2]].planInfo = param;
        //callBack();
      });
    } else if ($rootScope[position[2]].operate.batchAdd) {
      var params = [];
      var key;
      for (key in $rootScope[position[2]].addPlanDateList) {
        param.StartTime = $rootScope[position[2]].addPlanDateList[key].getTime() / 1000;
        param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);
        param.Finalreservation = (param.StartTime - param.FinalreservationDay * 24 * 60 * 60 - param.FinalreservationHour * 60 * 60);
        param.ReserveTime = param.ReserveDay * 24 + param.ReserveHour;
        params.push(angular.copy(param));
      }
      addTeamtourProductPlanBatch(params, function(response) {
        $rootScope[position[2]].operate.batchAdd = false;
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]].ProductID,
          StartTime: $filter('date')($scope.showDate, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].operate.dateSelected = [];
          $rootScope[position[2]].planReFill = true;
        });
        //callBack();
      });
    }
  };

  $scope.cancelPlan = function() {
    $rootScope[position[2]].operate.batchAdd = false;
    $rootScope[position[2]].isEditMode = false;
  };

  $scope.saveCopyInfo = function(item) {
    item.showCopy = false;
  };

  $scope.changePlanType = function(item, type) {
    item.planType = type;
    item.showOrder = false;
  };

  $scope.orderPlan = function(item) {
    item.showOrder = !item.showOrder;
  };

  $scope.listArrangeCar = function(item) {
    item.showCar = !item.showCar;
  };

  $scope.showTeam = function(item) {
    item.showTeam = !item.showTeam;
  };

  $scope.showCopyPlan = function(item) {
    item.showCopy = !item.showCopy;
  };

  $scope.editListPlan = function(item) {
    $rootScope[position[2]].listEdit = true;
    getTeamtourPlanDetail(item._id.$id, function(response) {
      $rootScope[position[2]].editPlanInfo = response;
      $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);
      $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].editPlanInfo.CostInfo;
      $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;
      $rootScope[position[2]].editPlanInfo.planTime = $rootScope[position[2]].editPlanInfo.StartTime.sec * 1000;
      $rootScope[position[2]].editPlanInfo.FinalorderDay = Math.floor(($rootScope[position[2]].editPlanInfo.Finalorder.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600 / 24);
      $rootScope[position[2]].editPlanInfo.FinalorderHour = (($rootScope[position[2]].editPlanInfo.Finalorder.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600) % 24;
      $rootScope[position[2]].editPlanInfo.FinalreservationDay = Math.floor(($rootScope[position[2]].editPlanInfo.Finalreservation.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600 / 24);
      $rootScope[position[2]].editPlanInfo.FinalreservationHour = (($rootScope[position[2]].editPlanInfo.Finalreservation.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600) % 24;
      $rootScope[position[2]].editPlanInfo.ReserveDay = Math.floor($rootScope[position[2]].editPlanInfo.ReserveTime / 24);
      $rootScope[position[2]].editPlanInfo.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveTime % 24;
      $rootScope[position[2]].editPlanInfo.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanTypeID.ID;
      $rootScope[position[2]].editPlanInfo.priceType = 1;
      if ($rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1.length > 0) {
        $rootScope[position[2]].editPlanInfo.pricePlanNormal = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1[0];
      }
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault0;
      getScheduleClass($rootScope[position[2]].ProductID, function(response) {
        $rootScope[position[2]].editPlanInfo.tripList = response.list;
        if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
          var index = findInnerObjIndex($rootScope[position[2]].editPlanInfo.tripList, ['_id', '$id'], $rootScope[position[2]].editPlanInfo.TripID.$id);
          if (index > -1) {
            $rootScope[position[2]].editPlanInfo.Trip = $rootScope[position[2]].editPlanInfo.tripList[index];
          }
        }
      });
      if(!$rootScope[position[2]].editPlanInfo.allCost){
        getCostListProduct({
          keyword: "",
          page: 1,
          limit: 10
        }, function(response) {
          $rootScope[position[2]].editPlanInfo.allCost = response.list;
          $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
            return item._id.$id === PlanTheCost.ForeignKeyID.$id;
          });
        });
      }else{
        $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
          return item._id.$id === PlanTheCost.ForeignKeyID.$id;
        });
      }
      $rootScope[position[2]].editPlanInfo.pricePlanNormal.forEach(function(price0){
        price0.id = price0._id.$id;
        price0.PlanID = price0.PlanID.$id;
      });
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(price1){
        price1.id = price1._id.$id;
        price1.PlanID = price1.PlanID.$id;
      });
    });
  };

  $scope.returnList = function() {
    $rootScope[position[2]].listEdit = false;
  };

  $scope.delListPlan = function(item) {
    item.showDel = !item.showDel;
  };

  $scope.showTeamTrans = function(order){
    order.isShowTeamTrans = !order.isShowTeamTrans;
  };

  $scope.saveTeamTrans = function(order){
    var OrderIdLists = [];
    OrderIdLists.push(order.OrderId);
    $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item){
      return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
    });
    if(!$rootScope[position[2]].planInfo.transTeam){
       $rootScope[position[2]].info = "请选择转移的团队";
      return;
    }
    var postData = {
      OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
      NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
      OrderIdLists: OrderIdLists
    };
    orderTransferTeam(postData, function(response){
      $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.push(order);
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.without($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, order);
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
      order.isShowTeamTrans = false;
      $rootScope[position[2]].planInfo.transTeam = null;
    });
  };

  $scope.cancelTeamTrans = function(order){
    order.isShowTeamTrans = false;
  };

  $scope.teamTransMulti = function(){
    $rootScope[position[2]].planInfo.isShowTeamTransMulti = !$rootScope[position[2]].planInfo.isShowTeamTransMulti;
  };

  $scope.saveTeamTransMulti = function(){
    var OrderIdLists = [];
    var transOrder = [];
    var pushOrder = [];
     $rootScope[position[2]].planInfo.isSelectAllMember = false;
    $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item){
      return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
    });
    $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
      if(order.isSelect){
        OrderIdLists.push(order.OrderId);
      transOrder.push(order);
      var data = angular.copy(order);
      data.isSelect = false;
      pushOrder.push(data);
    }
    });
      if(OrderIdLists.length===0){
      $rootScope[position[2]].info = "请选择转移的订单！";
      return;
    }
    if($rootScope[position[2]].planInfo.transTeamInfo === undefined || $rootScope[position[2]].planInfo.transTeamInfo === null){
       $rootScope[position[2]].info = "请选择转移的团队";
      return;
    }
    var postData = {
      OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
      NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
      OrderIdLists: OrderIdLists
    };
    orderTransferTeam(postData, function(response){
      $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list = $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.concat(pushOrder);
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.difference($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, transOrder);
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
      $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
       $rootScope[position[2]].planInfo.transTeamInfo = null;
    });
  };

  $scope.cancelTeamTransMulti = function(){
    $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
  };

  $scope.generateNewTeam = function(){
    addTeamByPlan($rootScope[position[2]].planInfo._id.$id, 1, function(response){
      $rootScope[position[2]].planInfo.teamList.push({
        TeamNo:response.data.TeamNo,
        TeamName:response.data.TeamName,
        ID:response.data.TeamId,
        TeamOrderInfo: {list: []}
      });
    });
  };

  $scope.checkAllTeamOrder = function(){
    if($rootScope[position[2]].planInfo.isSelectAllMember){
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
        order.isSelect = true;
      });
    }else{
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
        order.isSelect = false;
      });
    }
  };

});
app.controller("productCustomizedtourController", function(ngDialog, $scope, $rootScope, $timeout, getCustomizedtourExpand, addBaseCustomizedtour,
  saveBaseCustomizedtour, delCustomizedtourInsurance, addCustomizedtourInsurance, editCustomizedtourDistributing, editCustomizedtourExpand,
  customizedtour, getCustomizedtourInsurance, getCustomizedtourDistributing, addRefreshPageByID, closeSubView, showWarningBox,
  updateProductShowStatus, delCustomizedtourById, getCostListProduct, saveStepStatus, addCustomizedtourDistributing, addProductSyncInfo) {

  $scope.openDialog = function(item) {
    var new_dialog = ngDialog
      .open({
        id: 'fromAService',
        template: '/public/angularView/common/components/crop.html',
        controller: 'crop',
        className: 'ngdialog-theme-default w-800',
        data: {
          imgRatio: 33 / 56,
          resImgWidth: 560,
          resImgHight: 330,
          uploadPicCallBack: function(data) {
            if (item) {
              item.PicPath = data.url;
              item.Title = data.name;
            } else {
              $rootScope[position[2]].step1.DefaultPic = data.url;
            }
          }
        }
      });
  };

  $scope.searchPro = function() {
    $rootScope[position[1]].search = {
      page: 1,
      Title: $rootScope[position[1]].Title,
      EmployeeDepartmentID: $rootScope[position[1]].EmployeeDepartment ? $rootScope[position[1]].EmployeeDepartment._id.$id : '',
      StartGADDRId: $rootScope[position[1]].StartGADDR ? $rootScope[position[1]].StartGADDR.GADDRID.$id : '',
      ShowStatus: $rootScope[position[1]].ShowStatus ? $rootScope[position[1]].ShowStatus.value : '',
      AddTime: $rootScope[position[1]].orderType ? $rootScope[position[1]].orderType.value : '',
    };
    customizedtour.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, $rootScope[position[1]].search);
  };

  $scope.switchAddStep = function(step, type) {
    if ($rootScope[position[2]].finishedStatus < step && !type) {
      if ($rootScope[position[2]].finishedStatus === 0) {
        $rootScope[position[2]].info = '请先完成基本信息！';
      } else if ($rootScope[position[2]].finishedStatus == 1) {
        $rootScope[position[2]].info = '请先完成行程设置！';
      } else if ($rootScope[position[2]].finishedStatus == 2) {
        $rootScope[position[2]].info = '请先完成保险！';
      } else if ($rootScope[position[2]].finishedStatus == 3) {
        $rootScope[position[2]].info = '请先完成集散地！';
      } else if ($rootScope[position[2]].finishedStatus == 4) {
        $rootScope[position[2]].info = '请先完成扩展说明！';
      }
      return;
    }
    $rootScope[position[2]].addStep = step;
    if (step === 0) {

    } else if (step == 1) {


    } else if (step == 2) {
      if (!$rootScope[position[2]].step3) {
        $rootScope[position[2]].step3 = {};
      }
      getCustomizedtourInsurance($rootScope[position[2]]._id.$id, function(data) {
        $rootScope[position[2]].step3.Insurances = data.Insurances;
        $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
      });
      $rootScope[position[2]].step3.addData = [];
      $rootScope[position[2]].step3.removeData = [];

    } else if (step == 3) {
      if (!$rootScope[position[2]].step4) {
        $rootScope[position[2]].step4 = {};
      }
      getCustomizedtourDistributing($rootScope[position[2]]._id.$id, function(data) {
        if (data.Distributioncenters[0]) {
          var time = data.Distributioncenters[0].Distributiontime;
          data.Distributioncenters[0].hour = time.substring(0, time.indexOf(':'));
          data.Distributioncenters[0].minite = time.substring(time.indexOf(':') + 1, time.length);
          $rootScope[position[2]].step4.distributing = data.Distributioncenters[0];
        }
      });
    } else if (step == 4) {
      if (!$rootScope[position[2]].step5) {
        $rootScope[position[2]].step5 = [];
      }
      getCustomizedtourExpand($rootScope[position[2]]._id.$id, function(response) {
        $rootScope[position[2]].step5 = response;
      });
    }
  };

  $scope.step2Commit = function() {
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 2) {
      saveStepStatus($rootScope[position[2]]._id.$id, 2, 7, function() {
        $rootScope[position[2]].finishedStatus = 2;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(2, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(2, 1);
    }
    $scope.clearDetailInfo();
  };

  $scope.step3Commit = function() {
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 3) {
      saveStepStatus($rootScope[position[2]]._id.$id, 3, 7, function() {
        $rootScope[position[2]].finishedStatus = 3;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(3, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(3, 1);
    }
    $scope.clearDetailInfo();
  };

  $scope.step4Commit = function() {
    $rootScope[position[2]].isCommit = true;
    $scope.saveDistributing();
    if ($rootScope[position[2]].finishedStatus < 4) {
      saveStepStatus($rootScope[position[2]]._id.$id, 4, 7, function() {
        $rootScope[position[2]].finishedStatus = 4;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(4, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(4, 1);
    }
    $scope.clearDetailInfo();
  };

  $scope.step5Commit = function() {
    $rootScope[position[2]].isCommit = true;
    $scope.saveExpand();
    if ($rootScope[position[2]].finishedStatus < 5) {
      saveStepStatus($rootScope[position[2]]._id.$id, 5, 7, function() {
        $rootScope[position[2]].finishedStatus = 5;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(5, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(5, 1);
    }
    $scope.clearDetailInfo();
    $scope.changeToDetailPage();
  };

  $scope.removeInsurance = function(item) {
    delCustomizedtourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id,
      function(response) {
        getCustomizedtourInsurance($rootScope[position[2]]._id.$id, function(data) {
          $rootScope[position[2]].step3.Insurances = data.Insurances;
          $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
        });
      });
  };

  $scope.insuranceStatus = function(status) {
    if (status) {
      $rootScope[position[2]].step3.insuranceStatus = status;
    } else {
      $rootScope[position[2]].step3.insuranceStatus = false;
    }
  };

  //保险
  $scope.saveInsurance = function() {
    $rootScope[position[2]].step3.Insurances = angular.copy($rootScope[position[2]].step3.InsurancesTemp);
    if ($rootScope[position[2]]._id.$id && $rootScope[position[2]].step3.addData.length > 0) {
      addCustomizedtourInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step3.addData, function(data) {
        getCustomizedtourInsurance($rootScope[position[2]]._id.$id, function(data) {
          $rootScope[position[2]].step3.Insurances = data.Insurances;
          $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
        });
        $rootScope[position[2]].step3.insuranceStatus = false;
      });
    }
    $rootScope[position[2]].step3.removeData.forEach(function(item) {
      delCustomizedtourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {
        getCustomizedtourInsurance($rootScope[position[2]]._id.$id, function(data) {
          $rootScope[position[2]].step3.Insurances = data.Insurances;
          $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
        });
        $rootScope[position[2]].step3.insuranceStatus = false;
      });
    });
    $rootScope[position[2]].step3.addData = [];
    $rootScope[position[2]].step3.removeData = [];

    // if ($rootScope[position[2]].step3.InsurancesTemp.length > -1) {
    //   $rootScope[position[2]].step3.Insurances = angular.copy($rootScope[position[2]].step3.InsurancesTemp);
    // } else {
    //   $rootScope[position[2]].step3.Insurances = [];
    // }
    // $rootScope[position[2]].step3.insuranceStatus = false;
    //
    // addCustomizedtourInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step3.addData, function(data) {
    //   console.log(data);
    // });
    // $rootScope[position[2]].step3.addData = [];
    // $rootScope[position[2]].step3.removeData.forEach(function(item) {
    //   delCustomizedtourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {
    //     console.log(data);
    //   });
    // });
    // $rootScope[position[2]].step3.removeData = [];
  };

  //保存集散地
  $scope.saveDistributing = function() {
    if (!$rootScope[position[2]].step4.distributing) {
      return;
    }
    // $rootScope[position[2]].step4.distributing.baseid = $rootScope[position[2]].step4.distributing.ForeignKeyID.$id;
    var hour = $rootScope[position[2]].step4.distributing.hour;
    var minite = $rootScope[position[2]].step4.distributing.minite;
    $rootScope[position[2]].step4.distributing.Distributiontime = (hour.length > 1 ? hour : "0" + hour) + ":" + (minite.length > 1 ? minite : "0" + minite);
    var param = $rootScope[position[2]].step4.distributing;
    if ($rootScope[position[2]].step4.distributing.baseid) {
      param.baseid = $rootScope[position[2]].step4.distributing.baseid.$id;
      editCustomizedtourDistributing($rootScope[position[2]]._id.$id, param, function(response) {});
    } else {
      if (!param.Furthernotice) {
        param.Furthernotice = 0;
      }
      addCustomizedtourDistributing($rootScope[position[2]]._id.$id, param, function(response) {});
    }
  };

  //切换扩展信息编辑模块
  $scope.switchExpand = function(model) {
    $rootScope[position[2]].step5.model = model;
  };

  $scope.addSubTitle = function() {
    $rootScope[position[2]].step1.needSubTitle = true;
  };

  $scope.removeSubTitle = function() {
    $rootScope[position[2]].step1.needSubTitle = false;
    $rootScope[position[2]].step1.SubTitle = '';
  };

  // 组团游基本信息添加
  $scope.step1Commit = function() {
    var param = {};
    param.Title = $scope[position[2]].step1.Title;
    if (!param.Title) {
      $rootScope[position[2]].info = '线路名称不能为空！';
      return;
    }

    if ($scope[position[2]].step1.needSubTitle) {
      param.SubTitle = $scope[position[2]].step1.SubTitle;
    }


    if (!$scope[position[2]].step1.destination) {
      $rootScope[position[2]].info = '目的地不能为空！';
      return;
    }
    if (!$scope[position[2]].step1.MainDestination) {
      $rootScope[position[2]].info = '主目的地不能为空！';
      return;
    }
    if (!$scope[position[2]].step1.StartGADDR) {
      $rootScope[position[2]].info = '出发地不能为空！';
      return;
    }
    if (!$scope[position[2]].step1.GoTraffic) {
      $rootScope[position[2]].info = '去程交通不能为空！';
      return;
    }
    if (!$scope[position[2]].step1.ReturnTraffic) {
      $rootScope[position[2]].info = '回程交通不能为空！';
      return;
    }
    param.StartGADDR = $scope[position[2]].step1.StartGADDR.GADDRID.$id;
    param.ProductGADDR = $scope[position[2]].step1.MainDestination.GADDRID.$id;
    param.GADDRs = [];
    if ($scope[position[2]].step1.destination) {
      $scope[position[2]].step1.destination.forEach(function(item) {
        param.GADDRs.push(item.GADDRID.$id);
      });
    }
    param.TravelDays = $scope[position[2]].step1.TravelDays;
    param.LateNight = $scope[position[2]].step1.LateNight;
    param.GoTraffic = $scope[position[2]].step1.GoTraffic._id.$id;
    param.ReturnTraffic = $scope[position[2]].step1.ReturnTraffic._id.$id;
    param.LineType = $scope[position[2]].step1.LineType.ID;
    param.IsVisa = $scope[position[2]].step1.IsVisa;

    if (param.TravelDays === undefined || param.TravelDays === '' || param.TravelDays === '0') {
      $rootScope[position[2]].info = '出游天数不能为空！';
      return;
    }
    if (param.LateNight === undefined || param.LateNight === '' || param.LateNight === '0') {
      $rootScope[position[2]].info = '住宿天数不能为空！';
      return;
    }
    if ($scope[position[2]].step1.IsVisa == 1) {
      if ($scope[position[2]].step1.VisaList) {
        param.VisaCountry = [];
        $scope[position[2]].step1.VisaList.forEach(function(item) {
          param.VisaCountry.push(item.ForeignKeyID.$id);
        });
      }
    }

    param.MinPrice = '';
    if (!$scope[position[2]].step1.MinPrice) {
      $rootScope[position[2]].info = '最小价格不能为空！';
      return;
    }
    param.MinPrice = $scope[position[2]].step1.MinPrice;

    param.Keywords = '';
    if (!$rootScope[position[2]].step1.Keywords) {
      $rootScope[position[2]].info = '关键词不能为空！';
      return;
    }
    param.Keywords = $scope[position[2]].step1.Keywords;


     if($scope[position[2]].step1.Cost._id){
       param.Cost = $scope[position[2]].step1.Cost._id.$id;
     }

    param.Linefeatures = $scope[position[2]].step1.Linefeatures;
    if (!param.Linefeatures) {
      $rootScope[position[2]].info = '产品特色不能为空！';
      return;
    }
    param.Producttypes = [];
    if ($scope[position[2]].step1.ProductFormAll) {
      $scope[position[2]].step1.ProductFormAll.forEach(function(item) {
        if (item.isSelect) {
          param.Producttypes.push(item.ID);
        }
      });
    }
    param.LineBelongings = [];
    if ($scope[position[2]].step1.LineOwnership) {
      $scope[position[2]].step1.LineOwnership.forEach(function(item) {
        if (item.isSelect) {
          param.LineBelongings.push(item._id.$id);
        }
      });
    }
    param.Gift = [];
    if ($scope[position[2]].step1.TravelGoods) {
      $scope[position[2]].step1.TravelGoods.forEach(function(item) {
        if (item.isSelect) {
          param.Gift.push(item.ID);
        }
      });
    }
    param.LineAttribute = [];
    if ($scope[position[2]].step1.ProductLineAttribute) {
      $scope[position[2]].step1.ProductLineAttribute.forEach(function(item) {
        if (item.isSelect) {
          param.LineAttribute
            .push(item._id.$id);
        }
      });
    }

    param.DefaultPic = $scope[position[2]].step1.DefaultPic;
    param.Pics = [];
    var OrderBy = 0;
    $scope[position[2]].step1.Pics.forEach(function(pic) {
      if (pic.PicPath) {
        param.Pics.push({
          PicPath: pic.PicPath,
          Title: pic.Title,
          Notes: pic.PicPath,
          OrderBy: OrderBy
        });
        OrderBy++;
      }
    });

    if ($rootScope[position[2]]._id) {
      param.id = $rootScope[position[2]]._id.$id;
      saveBaseCustomizedtour(param, function(response) {
        $rootScope[position[2]].addStep = 1;
        var tour = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== tour) {
          tour.Title = $rootScope[position[2]].step1.Title;
        }
      });
    } else {
      addBaseCustomizedtour(param, function(response) {
        $rootScope[position[2]].addStep = 1;

        $rootScope[position[2]]._id = {
          $id: response.data[0]
        };
        saveStepStatus($rootScope[position[2]]._id.$id, 1, 7, function() {
          $rootScope[position[2]].finishedStatus = 1;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(1, 1);
        });
        var item = {
          _id: {
            $id: $rootScope[position[2]]._id.$id
          },
          showUrl: 'product/customizedtour/detail?id=' + $rootScope[position[2]]._id.$id,
          ProductNo: response.data[1],
          Title: $rootScope[position[2]].step1.Title,
          ShowStatus: 0,
          AddTime: {
            sec: new Date().getTime()/1000
          },
          AddInfo: {
            EmployeeName: $rootScope.userinfo.FullName
          }
        };
        $rootScope[position[2]].showUrl = item.showUrl;
        $rootScope[position[1]].needClearAddData = true;
        $rootScope[position[1]].list.unshift(item);
      });
    }
  };

  $scope.switchDestination = function(destination) {
    var index1 = _.findIndex($scope[position[2]].step1.destination, {
      Title: destination.Title
    });
    var index2 = _.findLastIndex($scope[position[2]].step1.destination, {
      Title: destination.Title
    });
    if (index1 != index2) {
      $scope[position[2]].step1.destination = _.uniq($scope[position[2]].step1.destination);
    }
    $scope[position[2]].step1.MainDestination = destination;
  };

  $scope.switchScheduleDetail = function(id) {
    $rootScope[position[2]].currentScheduleID = id;
    getSchedule(id, function(data) {
      $rootScope[position[2]].currentSchedule = data.list;
    });
  };

  $scope.unChooseSelectedVisa = function(item) {
    var index = _.findIndex($rootScope[position[2]].step1.VisaList, {
      VisaNo: item.VisaNo
    });
    $rootScope[position[2]].step1.VisaList = _.without($rootScope[position[2]].step1.VisaList, $rootScope[position[2]].step1.VisaList[index]);
    $rootScope[position[2]].step1.VisaTemp = angular.copy($rootScope[position[2]].step1.VisaList);
  };

  $scope.saveSelectedVisa = function() {
    $rootScope[position[2]].step1.VisaList = angular.copy($rootScope[position[2]].step1.VisaTemp);
    $scope.showVise();
  };

  $scope.showVise = function(status) {
    if (status === undefined) {
      $rootScope[position[2]].step1.isShowVise = false;
    } else {
      $rootScope[position[2]].step1.VisaTemp = angular.copy($rootScope[position[2]].step1.VisaList);
      $rootScope[position[2]].step1.isShowVise = true;
    }
  };

  $scope.loadListData = function(viewID) {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {};
    }
    $rootScope[position[1]].search.page += 1;
    customizedtour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, $rootScope[position[1]].search);
  };

  $scope.saveExpand = function() {
    editCustomizedtourExpand($rootScope[position[2]]._id.$id, $rootScope[position[2]].step5, function(data) {
      console.log(data);
    });
  };

  $scope.removeProduct = function() {
    showWarningBox('确定要删除该产品吗？', function() {
      delCustomizedtourById($rootScope[position[2]]._id.$id, function(response) {
        var pro = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== pro) {
          $rootScope[position[1]].list = _.without($rootScope[position[1]].list, pro);
          closeSubView();
        }
      });
    });
  };

  $scope.changeProductStatus = function() {
    var info = $rootScope[position[2]].ShowStatus === 1 ? '确定要下架该产品吗？' : '确定要上架该产品吗？';
    var param = {
      type: 7,
      id: $rootScope[position[2]]._id.$id,
      status: $rootScope[position[2]].ShowStatus === 1 ? 0 : 1
    };
    showWarningBox(info, function() {
      updateProductShowStatus(param, function(resp) {
        $rootScope[position[2]].ShowStatus = param.status;
        var pro = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== pro) {
          pro.ShowStatus = param.status;
        }
      });
    });
  };

  $scope.clearDetailInfo = function() {
    addRefreshPageByID('product-customizedtour-detail-id-' + $rootScope[position[2]]._id.$id);
  };

  $scope.changeToDetailPage = function() {
    $rootScope[position[2]].timeoutShow = $timeout(function() {
      $scope.fetch("product/customizedtour/detail?id=" + $rootScope[position[2]]._id.$id, '');
      $scope.hideSubHead();
      $scope.openItem();
      $scope.clearAddData();
    }, 5 * 1000);
  };

  $scope.showDetail = function() {
    $timeout.cancel($rootScope[position[2]].timeoutShow);
    $scope.hideSubHead();
    $scope.openItem();
    $scope.clearAddData();
    $scope.fetch("product/customizedtour/detail?id=" + $rootScope[position[2]]._id.$id, '');
  };

  $scope.clearAddData = function() {
    $scope.switchAddStep(0);
    if (!$rootScope[position[2]].isEditMode) {
      addRefreshPageByID('product-customizedtour-add-id-addCustomizedtourProduct');
    }
  };

  $scope.getAllCost = function(isLoad) {
    var param = {
      keyword: $rootScope[position[2]].step1.Cost ? $rootScope[position[2]].step1.Cost.Title : "",
      page: 1,
      limit: 10
    };
    if (isLoad) {
      param.keyword = "";
    }
    getCostListProduct(param, function(response) {
      $rootScope[position[2]].step1.allCost = response.list;
    });
  };

  $scope.CostFormatter = function(cost) {
    return cost.Title;
  };

  $scope.changeCost = function(value) {
    $rootScope[position[2]].step1.Cost = value;
  };

  $scope.printDetail = function(){
    var data = document.getElementById('detail_content').innerHTML;
    commitPrintData('POST', baseUrl + 'common/printing/convertToHtml', {content: data}, '_blank');
  };

  $scope.addToWebsite = function(){
    addProductSyncInfo({Model:'ProductCustomtour', ID:$rootScope[position[2]]._id.$id}, function(response){
      $rootScope[position[2]].info = "同步完成";
      console.log(response);
    });
  };

  $scope.addProduct = function(){
    if($rootScope[position[1]].needClearAddData){
      $scope.clearAddData();
    }
    $rootScope[position[1]].needClearAddData = false;
    $scope.fetch('product/customizedtour/add?id=addCustomizedtourProduct', '');
    $scope.hideSubHeadInList();
    $scope.openItem();
  };

});
app.controller("productTeamController", function($http, $scope, $rootScope, showWarningBox, closeSubView, ngDialog, _, $filter,
  addRefreshPageByID, $timeout, productTeamSaveTeamNotes, team, getPersonnel, productTeamChangeTeamDeploy, productTeamGuideArrange,
  getOperationTemplates, productTeamCancelTeam) {
  var param = {
    label: 1008,
    limit: 200
  };
  getPersonnel(param, function(data) {
    $scope.Dispatchers = data.list;
  });

  $scope.popPreConf = {
    arrow: {
      left: 715,
      useArrow: true
    },
    popconf: {
      left: 1,
      position: 'bottom'
    }
  };

  $scope.changePerson = function(data) {
    if (data) {
      $rootScope[position[1]].search.DeployID = data._id.$id;
    } else {
      $rootScope[position[1]].search.DeployID = '';
    }
    $scope.searchList();
  };

  $scope.searchList = function() {
    $rootScope[position[1]].search.iPageIndex = 1;
    $rootScope[position[1]].search.StartTime = $filter('date')($rootScope[position[1]].search.StartTime, 'yyyy-MM-dd');
    $rootScope[position[1]].search.EndTime = $filter('date')($rootScope[position[1]].search.EndTime, 'yyyy-MM-dd');
    team.list(function(data) {
      $rootScope[position[1]].list = data.list;
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, $rootScope[position[1]].search);
  };

  $scope.loadTeamListData = function() {
    $rootScope[position[1]].search.iPageIndex += 1;
    team.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, $rootScope[position[1]].search);
  };

  $scope.editTeamNote = function() {
    $rootScope[position[2]].isEditNote = !$rootScope[position[2]].isEditNote;
  };

  $scope.saveTeamNote = function() {
    var data = {
      TeamID: $rootScope[position[2]].TeamID,
      Notes: $rootScope[position[2]].EditNote
    };
    productTeamSaveTeamNotes(data, function(response) {
      $rootScope[position[2]].TeamNotes = $rootScope[position[2]].EditNote;
      $rootScope[position[2]].EditNote = "";
    });
  };


  $scope.status = {
    StartTime: false,
    EndTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };


  $scope.delTeam = function() {
    showWarningBox("确定要删除该团队吗", function() {
      productTeamCancelTeam($rootScope[position[2]].TeamID, function(response) {
        var target = _.find($rootScope[position[1]].list, function(item) {
          return item.ID === $rootScope[position[2]].TeamID;
        });
        if (undefined !== target) {
          $rootScope[position[1]].list = _.without($rootScope[position[1]].list, target);
          closeSubView();
        }
      });
    });
  };

  $scope.confirmTransDeploy = function() {
    var deploy = _.find($scope.Dispatchers, function(item){
      return item._id.$id === $rootScope[position[2]].transDeployDeployInfo;
    });
    showWarningBox("确认要转移给" + deploy.FullName + "吗", function() {
      var param = {
        Deploy: $rootScope[position[2]].transDeployDeployInfo,
        OrderNo: $rootScope[position[2]].transDeployOrderNo,
        TeamID: $rootScope[position[2]].TeamID
      };
      productTeamChangeTeamDeploy(param, function(response) {
        $rootScope[position[2]].showTransDeploy = false;
        //修改详情页计调信息
        $rootScope[position[2]].DeployInfo = {
          EmployeeDepartmentID: deploy.Department.ID.$id,
          EmployeeDepartmentName: "",
          EmployeeName: deploy.FullName,
          ForeignKeyID: $rootScope[position[2]].transDeployDeployInfo
        };
        var target = _.find($rootScope[position[1]].list, function(item){
          return item.ID === $rootScope[position[2]].TeamID;
        });
        if(undefined !== target && null !== target){
          target.DeployInfo = angular.copy($rootScope[position[2]].DeployInfo);
        }
      });
    });
  };

  $scope.confirmGuideApply = function() {
    showWarningBox("确定要申请导游吗", function() {
      var param = {
        TeamID: $rootScope[position[2]].TeamID,
        IsFull: parseInt($rootScope[position[2]].isNeedFullGuide),
        IsSend: parseInt($rootScope[position[2]].isNeedSendGuide),
        Notes: $rootScope[position[2]].guideApplyNotes,
        ResortAddress: $rootScope[position[2]].guideApplyResortAddress
      };
      productTeamGuideArrange(param, function(response) {
        $rootScope[position[2]].showGuideApply = false;
      });
    });
  };

  $scope.startSendMessage = function() {
    if (!$rootScope[position[2]].messageContent) {
      $rootScope[position[2]].messageContent = "";
    }
    if ($rootScope[position[2]].showSendMessage) {
      $rootScope[position[2]].showSendMessage = false;
      return;
    }
    $rootScope[position[2]].showSendMessage = true;
    if (!$scope.MessageTemplates) {
      getOperationTemplates({
        TemplateMainTypeID: 2
      }, function(response) {
        $scope.MessageTemplates = response;
      });
    }
  };

  $scope.changeMessageContent = function() {
    console.log($rootScope[position[2]].messageType);
  };

  $scope.applyGuide = function(){
    // if($rootScope[position[2]].showGuideApply){
    //   $rootScope[position[2]].showGuideApply = false;
    // }else{
    //   //判断是否已经申请导游了，已经申请了就不能申请了
    //   $rootScope[position[2]].showGuideApply = true;
    // }
    $rootScope[position[2]].showGuideApply = !$rootScope[position[2]].showGuideApply;
    if($rootScope[position[2]].isNeedFullGuide == 1){
      $rootScope[position[2]].GuideApplyInfo.isFull = 1;
    }
    if($rootScope[position[2]].isNeedSendGuide == 1){
      $rootScope[position[2]].GuideApplyInfo.IsSend = 1;
    }
    var target = _.find($rootScope[position[1]].list, function(item){
      return item.ID === $rootScope[position[2]].TeamID;
    });
    if(undefined !== target){
      target.GuideApplyInfo = angular.copy($rootScope[position[2]].GuideApplyInfo);
    }
  };

});
app.controller('productCruisePlanForeController',function(cruisePlanFore,$http, $scope, $rootScope, _, showWarningBox, closeSubView, teamtourPlanFore,
                                                          getTeamListByPlanId, Pagination, delProductPlanById, getCostListProduct, getScheduleClass, editTeamtourProductPlanBatch){

    $scope.status = {};

    $scope.searchTeamtourPlan = function(){
        $rootScope[position[1]].search.page = 1;
        var param = {
            page : 1
        };
        if($rootScope[position[1]].search && $rootScope[position[1]].search.keyword !== ''){
            param.keyword = $rootScope[position[1]].search.keyword;
        }
        if($rootScope[position[1]].search.Station && $rootScope[position[1]].search.Station._id){
            param.Station = $rootScope[position[1]].search.Station._id.$id;
        }
        if($rootScope[position[1]].search && $rootScope[position[1]].search.StartTimeDate){
            param.StartTime = "" + $rootScope[position[1]].search.StartTimeDate.getTime() / 1000;
            if(!$rootScope[position[1]].search.EndTimeDate){
                param.StartTime += ",9999999999";
            }
        }
        if($rootScope[position[1]].search && $rootScope[position[1]].search.EndTimeDate){
            if(!param.StartTime || param.StartTime === ""){
                param.StartTime = "0";
            }
            param.StartTime += "," + $rootScope[position[1]].search.EndTimeDate.getTime() / 1000;
        }
        cruisePlanFore.list(function(response){
            $rootScope[position[1]].list = response.list;
        }, param);
    };

    $scope.openDatePicker = function($event, type) {
        $scope.status[type] = true;
    };

    $scope.loadTeamourPlanListData = function(){
        if(!$rootScope[position[1]].search.page){
            $rootScope[position[1]].search.page = 1;
        }
        $rootScope[position[1]].search.page++;
        var param = {
            page : $rootScope[position[1]].search.page
        };
        if($rootScope[position[1]].search && $rootScope[position[1]].search.keyword !== ''){
            param.keyword = $rootScope[position[1]].search.keyword;
        }
        if($rootScope[position[1]].search.Station && $rootScope[position[1]].search.Station._id){
            param.Station = $rootScope[position[1]].search.Station._id.$id;
        }
        if($rootScope[position[1]].search && $rootScope[position[1]].search.StartTimeDate){
            param.StartTime = "" + $rootScope[position[1]].search.StartTimeDate.getTime() / 1000;
            if(!$rootScope[position[1]].search.EndTimeDate){
                param.StartTime += ",9999999999";
            }
        }
        if($rootScope[position[1]].search && $rootScope[position[1]].search.EndTimeDate){
            if(!param.StartTime || param.StartTime === ""){
                param.StartTime = "0";
            }
            param.StartTime += "," + $rootScope[position[1]].search.EndTimeDate.getTime() / 1000;
        }
        cruisePlanFore.list(function(response){
            $rootScope[position[1]].list = _.union($rootScope[position[1]].list, response.list);
            $rootScope.isloadList = false;
            $rootScope.showProcessBar = false;
        }, param);
    };
});
app.controller("productFreetourPlanController", function($scope, $rootScope, $filter, getTeamtourPlanDetail, Pagination, addTeamByPlan,
  getTeamtourPlanList, findInnerObjIndex, _, getScheduleClass, addIndependenttravelProductPlanBatch, delProductPlanPriceById,addTrafficScheme,addRefreshPageByID,deleteIndependenttravelProductPlanProject,editIndependenttravelProductPlanProject,getBasicsTrafficTypeAll,findTraffic,addIndependenttravelProductPlanProject,getBasicsHotelByNameOrGADDRTitle,
  editIndependenttravelProductPlanBatch, delProductPlanById, getCostListProduct, showWarningBox, getTeamListByPlanId, orderTransferTeam) {

  $scope.showDate = new Date();

  //日历的配置
  $scope.calendarOptions = {
    calendarClass: "fullcalendar",
    headClass: "calHead",
    bodyClass: "calBody",
    footClass: "calFoot",
    headDateClass: "calHeadDate",

    fillDay: function(day, date) {
      if (!$rootScope[position[2]].prductPlanList) {
        $rootScope[position[2]].prductPlanList = [];
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === date.getTime() / 1000;
      });
      var html = '';
      if (undefined !== planDetail) {
        var price = '价格无';
      //判断是否存在方案
        if (undefined !== planDetail.PlanProject) {
          //酒店方案最小价、交通方案最小价、交通合计价格(交通方案中交通价格相加)
             var minPriceHotel = 0;
             var minPriceTraffic = 0;
             var TrafficSchemePrice = 0;
          //循环方案并判断是交通方案还是酒店方案
          planDetail.PlanProject.forEach(function(project) {
            if (project.ProductType.ProductTypeName === '交通') {
              //循环交通方案中的交通(Traffics)字段,对其价格进行计算
              project.Traffics.forEach(function(traffic) {
                //如果字段中是否单买字段(IsSingleSold)字段为true，就不将价格加入其中
                if (traffic.IsSingleSold === true) {
                  return;
                }
                //交通合计价格
                TrafficSchemePrice += traffic.AdultSellingPrice;
              });
            //循环比较，取交通方案最小价
              if (minPriceTraffic === 0) {
                minPriceTraffic = TrafficSchemePrice;
              } else {
                if (TrafficSchemePrice < minPriceTraffic) {
                  minPriceTraffic = TrafficSchemePrice;
                }
              }
              TrafficSchemePrice = 0;
              //酒店同上类似
            } else if (project.ProductType.ProductTypeName === "酒店") {
              project.Hotels.forEach(function(hotel) {
                hotel.HotelRooms.forEach(function(room) {
                  if (hotel.IsSingleSold === true) {
                    return;
                  }
                  if (minPriceHotel === 0) {
                    minPriceHotel = room.SellingPrice;
                  } else {
                    if (room.SellingPrice < minPriceHotel) {
                      minPriceHotel = room.SellingPrice;
                    }
                  }
                });
              });
            }
          });
          //显示在日历上的价格
          price = minPriceHotel+minPriceTraffic + '元起';
        }
        var tripProjectName = '无行程';
        if (undefined !== planDetail.TripProject && null !== planDetail.TripProject && planDetail.TripProject.Title) {
          tripProjectName = planDetail.TripProject.Title;
        }
        html = '<label class="label_inner"><div class="xc_l"><span>' + tripProjectName + '</span><font>' + price + '</font></div><div class="f_r"><span>' + $filter('date')(date, 'dd') + '</span></div></label>';
      } else {
        html = '<label class="label_inner"><div class="xc_l"></div><div class="f_r"><span>' + $filter('date')(date, 'dd') + '</span><input ng-if="operate.batchAdd && '+ date.getTime()  +'>='+ new Date().setHours(0,0,0,0) + '" type="checkbox" ng-model="operate.dateSelected[' + Date.parse(date) + ']"  ng-true-value="true" ng-false-value="false" > </div></label>';
      }
      return html;
    },

    monthChange: function(datetime) {
      $scope.showDate = datetime;
      if ($rootScope[position[2]].ProductID) {
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]].ProductID,
          StartTime: $filter('date')(datetime, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].operate.dateSelected = [];
          $rootScope[position[2]].planReFill = true;
        });
      }
    }
  };

  $rootScope[position[2]].operate = {
    showPlanDetail: function(planDetailId) {
      if (this.showPlanDetailId == planDetailId) {
        this.showPlanDetailId = "";
      } else {
        this.showPlanDetailId = planDetailId;
      }
    },
    showPlanDetailId: "",
    dateSelected: [],
    batchAdd: false
  };

  $scope.batchAdd = function() {
    $rootScope[position[2]].showDetail = false;
    $rootScope[position[2]].operate.batchAdd = !$rootScope[position[2]].operate.batchAdd;
    // if (!$rootScope[position[2]].editPlanInfo) {
      $rootScope[position[2]].editPlanInfo = {};
      $rootScope[position[2]].editPlanInfo.ProductType = 4;
      $rootScope[position[2]].editPlanInfo.Cost = {};
      $rootScope[position[2]].editPlanInfo.PlanProject = [];
      $rootScope[position[2]].editPlanInfo.Networkorder = 1;
      $rootScope[position[2]].editPlanInfo.NetworkDefaultDisplayAdultNumber = 0;
      $rootScope[position[2]].editPlanInfo.NetworkDefaultDisplayChildNumber = 0;
      $rootScope[position[2]].editPlanInfo.VouchersPrice = 0;
      $rootScope[position[2]].editPlanInfo.FinalorderDay = 0;
      $rootScope[position[2]].editPlanInfo.FinalorderHour = 0;
      $rootScope[position[2]].editPlanInfo.ShowStatus = 1;

      if(!$rootScope[position[2]].editPlanInfo.allCost){
        getCostListProduct({
          keyword: "",
          page: 1,
          limit: 10
        }, function(response) {
          $rootScope[position[2]].editPlanInfo.allCost = response.list;
        });
      }
      getScheduleClass($rootScope[position[2]].ProductID, function(response) {
        $rootScope[position[2]].editPlanInfo.tripList = response.list;
        if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
          $rootScope[position[2]].editPlanInfo.Trip = $rootScope[position[2]].editPlanInfo.tripList[0];
        }
      });
    // }
  };

  $scope.chooseCurrentMonth = function(){
    var dateTemp = new Date($scope.showDate.getTime());
    dateTemp.setDate(1);
    for(var i = 1; i <= 31; i++){
      if(dateTemp.getMonth() != $scope.showDate.getMonth()){
        break;
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === dateTemp.getTime() / 1000;
      });
      if (undefined === planDetail) {
        if($rootScope[position[2]].hasSelectAll){
          $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = false;
        }else{
          $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = true;
        }
      }
      dateTemp.setDate(dateTemp.getDate() + 1);
    }
    $rootScope[position[2]].hasSelectAll = !$rootScope[position[2]].hasSelectAll;
    $rootScope[position[2]].addPlanDateList = [];
    $scope.showPlanDetail($scope.showDate.getDate());
  };

  $scope.showPlanDetail = function(day) {
    if ($rootScope[position[2]].operate.batchAdd) {
      $rootScope[position[2]].addPlanDateList = [];
      var key;
      for (key in $rootScope[position[2]].operate.dateSelected) {
        if ($rootScope[position[2]].operate.dateSelected[key]) {
          var newDate = new Date();
          newDate.setTime(key);
          $rootScope[position[2]].addPlanDateList.push(newDate);
        }
      }
    } else {
      var index = findInnerObjIndex($rootScope[position[2]].prductPlanList, ['StartTime', 'sec'], day.date / 1000);
      if (index > -1) {
        var planDetail = $rootScope[position[2]].prductPlanList[index];
        getTeamtourPlanDetail(planDetail._id.$id, function(response) {

          $rootScope[position[2]].planInfo = response;
          $rootScope[position[2]].planInfo.planTime = day.date;
          if ($rootScope[position[2]].planInfo.ReserveTime) {
            $rootScope[position[2]].planInfo.FinalorderDay = Math.floor($rootScope[position[2]].planInfo.ReserveTime / 24);
            $rootScope[position[2]].planInfo.FinalorderHour = $rootScope[position[2]].planInfo.ReserveTime % 24;
          } else {
            $rootScope[position[2]].planInfo.FinalorderDay = Math.floor(($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalorder.sec) / 3600 / 24);
            $rootScope[position[2]].planInfo.FinalorderHour = (($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalorder.sec) / 3600) % 24;
          }


          $rootScope[position[2]].planInfo.PlanProject.forEach(function(project) {
            project.AdultPriceTraffic = 0;
            project.ChildPriceTraffic = 0;
            project.AllHotelPrice = 0;
            if (project.ProductType.ProductTypeName === '交通') {
              project.Traffics.forEach(function(traffic) {
                if (traffic.IsSingleSold === true)
                  return;
                project.AdultPriceTraffic += traffic.AdultSellingPrice;
                project.ChildPriceTraffic += traffic.ChildSellingPrice;
              });
            } else if (project.ProductType.ProductTypeName === "酒店") {
              project.Hotels.forEach(function(hotel) {
                if (hotel.IsSingleSold === true)
                  return;
                hotel.Hotel.Rooms.forEach(function(room) {
                  project.AllHotelPrice += room.DefaultPrice;
                 });
              });
            }
          });

          $scope.SaveAndNext = false;
          $scope.hasSelectHotel = true;
          $scope.isClickHotelNumber = false;
          $scope.hasSelectTraffic = true;
          $scope.isClickTrafficNumber = false;
          $rootScope[position[2]].showTransportScheme = true;
          $rootScope[position[2]].showHotelScheme = false;
          $rootScope[position[2]].showDetail = true;

        });
      }
    }
  };

  $scope.TrafficSelect = function(value){
      if(value.ProductType.ForeignKeyID.$id == '000000000000000000000004') return true;
    };
    $scope.HotelSelect = function(value){
      if(value.ProductType.ForeignKeyID.$id == '000000000000000000000007') return true;
    };



  $scope.changeShowPrice = function(type) {
    if (type == 1) {
      $rootScope[position[2]].showTransportScheme = true;
      $rootScope[position[2]].showHotelScheme = false;
    } else {
      $rootScope[position[2]].showTransportScheme = false;
      $rootScope[position[2]].showHotelScheme = true;
    }
  };

  $scope.delPlan = function(item) {
    showWarningBox('确定要删除该计划吗？', function() {
      delProductPlanById(item._id.$id, function(response) {
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]].ProductID,
          StartTime: $filter('date')(item.StartTime.sec * 1000, 'yyyy-MM')
        }, function(response) {

          $rootScope[position[2]].showDetail = false;
          $rootScope[position[2]].planInfo = {};
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].planReFill = true;
           addRefreshPageByID(($rootScope[switchType[2]].id));
        });
      });
    });
  };

  $scope.changeToList = function() {
    var param = {
      ProductID: $rootScope[position[2]].ProductID
    };
    getTeamtourPlanList(param, function(response) {
      $rootScope[position[2]].allPlanList = response.list;
    });
    $scope.isListMode = true;
  };

  $scope.changeToCalendar = function() {
    $scope.isListMode = false;
  };

  $scope.editPlan = function() {
    $rootScope[position[2]].isEditMode = true;
    $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);
    $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].editPlanInfo.CostInfo;
    $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;

    $rootScope[position[2]].editPlanInfo.ProductType = 4;

    getScheduleClass($rootScope[position[2]].ProductID, function(response) {
      $rootScope[position[2]].editPlanInfo.tripList = response.list;
      if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
        var trip = _.find($rootScope[position[2]].editPlanInfo.tripList, function(item){
          return item._id.$id === $rootScope[position[2]].editPlanInfo.TripID.$id;
        });
        if(undefined !== trip){
          $rootScope[position[2]].editPlanInfo.Trip = trip;
        }
      }
    });
    if(!$rootScope[position[2]].editPlanInfo.allCost){
      getCostListProduct({
        keyword: "",
        page: 1,
        limit: 10
      }, function(response) {
        $rootScope[position[2]].editPlanInfo.allCost = response.list;
        if($rootScope[position[2]].editPlanInfo.PlanTheCost){
          $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
            return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
          });
        }
      });
    }else{
      if($rootScope[position[2]].editPlanInfo.PlanTheCost){
        $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
          return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
        });
      }
    }
    //在编辑的时候将酒店和交通方案拆开
    $rootScope[position[2]].editPlanInfo.Transport = [];
    $rootScope[position[2]].editPlanInfo.Hotel = [];
    //循环方案
    $rootScope[position[2]].editPlanInfo.PlanProject.forEach(function(item){

      if(item.ProductType.ForeignKeyID.$id === '000000000000000000000007'){
         //将酒店方案的数据放入editPlanInfo.Hotel中
        var data = {
          id:$rootScope[position[2]].editPlanInfo._id.$id,
          baseid: item.baseid.$id,
          ProductType: '000000000000000000000007',
          Description: item.Description,
          Title: item.Title,
          IsDefault: item.IsDefault,
          Hotels: []
        };

        item.Hotels.forEach(function(hotel){
          data.Hotels.push({
            Hotel_id : hotel.Hotel.ForeignKeyID.$id,
            ForeignKeyID: hotel.ForeignKeyID.$id,
            HotelInfo: hotel.Hotel.HotelName,
            $$departureTime: new Date(hotel.DepartureTime.sec * 1000),
            Days: hotel.Days,
            IsRemove: hotel.IsRemove,
            IsSingleSold: hotel.IsSingleSold,
            ProductRoomCount: hotel.ProductRoomCount,
            HotelRooms: hotel.HotelRooms
          });
        });

        $rootScope[position[2]].editPlanInfo.Hotel.push(data);
      }else{
        //将交通方案的数据放入editPlanInfo.traffic中
        var data = {
          id:$rootScope[position[2]].editPlanInfo._id.$id,
          baseid: item.baseid.$id,
          ProductType: '000000000000000000000004',
          Description: item.Description,
          Title: item.Title,
          IsDefault: item.IsDefault,
          Traffics: []
        };

        item.Traffics.forEach(function(traffic){
          traffic.Traffic_id = traffic.Traffic.ForeignKeyID.$id;
          traffic.ForeignKeyID = traffic.ForeignKeyID.$id;
          traffic.TrafficInfo = traffic.Traffic.TrafficCompany.Title + '/' + traffic.Traffic.Title;
          traffic.$$departureTime = new Date(traffic.DepartureTime.sec * 1000);
          traffic.DepartureInformation = traffic.Traffic.DepartureTime + " " + traffic.Traffic.StartAddress + "-----" + traffic.Traffic.ArriveTime + " " + traffic.Traffic.ArriveAddress;
          data.Traffics.push(traffic);
        });

        $rootScope[position[2]].editPlanInfo.Transport.push(data);
      }
    });
  };

  $scope.addCarArrange = function() {
    $rootScope[position[2]].isAddCar = !$rootScope[position[2]].isAddCar;
  };

  $scope.delCarArrange = function(car) {
    console.log(car);
  };

  $scope.arrangeCar = function() {
    $rootScope[position[2]].planInfo.isArrangeCar = !$rootScope[position[2]].planInfo.isArrangeCar;
  };

  $scope.teamSet = function(){
    if(!$rootScope[position[2]].planInfo.teamList){
      getTeamListByPlanId($rootScope[position[2]].planInfo._id.$id, function(teamList){
        $rootScope[position[2]].planInfo.teamList = teamList.data;
        $rootScope[position[2]].planInfo.teamList.OrderInfo = {
          OrderMoney: 0,
          PayPrice: 0,
          UnPayPrice: 0,
          AdultNumber: 0,
          ChildNumber: 0,
          BabyNumber: 0,
          Number: 0,
          SiteNumber: 0,
        };
        $rootScope[position[2]].planInfo.teamList.forEach(function(item){
          $rootScope[position[2]].planInfo.teamList.OrderInfo.OrderMoney += item.TeamOrderInfo.TotalOrderMoney;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.PayPrice += item.TeamOrderInfo.TotalPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.UnPayPrice += item.TeamOrderInfo.TotalUnPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.AdultNumber += item.TeamOrderInfo.TotalAdultNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.ChildNumber += item.TeamOrderInfo.TotalChildNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.BabyNumber += item.TeamOrderInfo.TotalBabyNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.Number += item.TeamOrderInfo.TotalNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.SiteNumber += item.TeamOrderInfo.TotalSiteNumber;
        });
        if($rootScope[position[2]].planInfo.teamList.length > 0){
          $rootScope[position[2]].planInfo.teamShow = $rootScope[position[2]].planInfo.teamList[0];
            if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
            $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
            $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
          }
        }
      });
    }
    $rootScope[position[2]].planInfo.isTeamSet = !$rootScope[position[2]].planInfo.isTeamSet;
  };

  $scope.teamPageChange = function(page){
    $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice((page - 1) * 5, page * 5);
    $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, page, 5);
  };

  $scope.changeTeam = function(team){
    $rootScope[position[2]].planInfo.teamShow = team;
    if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
    }
  };

  $scope.addAssembly = function() {

  };

  $scope.addCar = function() {

  };

  $scope.closeArrangeCar = function() {
    $scope.planInfo.isArrangeCar = false;
  };

  $scope.delUpgradePrice = function(price) {

    deleteIndependenttravelProductPlanProject($rootScope[position[2]].planInfo._id.$id,price.baseid.$id, function(response) {
      $rootScope[position[2]].planInfo.PlanProject = _.without($rootScope[position[2]].planInfo.PlanProject, price);
    });
  };

  $scope.savePlan = function() {
    var param = {};
    //计划信息
    param.CompanyInfoId = $rootScope.userinfo.CompanyID.$id;
    param.ProductName = $rootScope[position[2]].ProductName;
    param.ProductNo = $rootScope[position[2]].ProductNo;
    param.TravelDay = $rootScope[position[2]].TravelDay;
    param.ProductID = $rootScope[position[2]].ProductID;
    param.Networkorder = $rootScope[position[2]].editPlanInfo.Networkorder;
    param.NetworkDefaultDisplayAdultNumber = $rootScope[position[2]].editPlanInfo.NetworkDefaultDisplayAdultNumber;
    param.NetworkDefaultDisplayChildNumber = $rootScope[position[2]].editPlanInfo.NetworkDefaultDisplayChildNumber;
    param.VouchersPrice = $rootScope[position[2]].editPlanInfo.VouchersPrice;
    param.FinalorderDay = $rootScope[position[2]].editPlanInfo.FinalorderDay;
    param.FinalorderHour = $rootScope[position[2]].editPlanInfo.FinalorderHour;

    param.ShowStatus = $rootScope[position[2]].editPlanInfo.ShowStatus;

    param.PlanProject = [];
    //交通方案


    //酒店方案
    /*$rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
      item.isDefault = 0;
      if (!item.Pricetitle) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        return;
      }
      param.PlanProject.push(item);
    });*/

    //param.PlanProject.push(pricePlanNormal);
    if ($rootScope[position[2]].editPlanInfo.Cost&&$rootScope[position[2]].editPlanInfo.Cost.hasOwnProperty('_id')) {
      // $rootScope[position[2]].info = '请选择成本';
      // return;
      param.PlanTheCost = $rootScope[position[2]].editPlanInfo.Cost._id.$id;
    }else{

    }

   if ($rootScope[position[2]].editPlanInfo.Trip) {
      param.TripID = $rootScope[position[2]].editPlanInfo.Trip._id.$id;
    }

    if (!param.Networkorder) {
      $rootScope[position[2]].info = '请选择网络订单';
      //callBack();
      return;
    }

    if (!param.FinalorderDay && !param.FinalorderHour) {
      $rootScope[position[2]].info = '请填写预订提前时间';
      //callBack();
      return;
    }

    if (param.NetworkDefaultDisplayAdultNumber === null || param.NetworkDefaultDisplayAdultNumber===undefined) {
      $rootScope[position[2]].info = '请填写默认成人数';
      //callBack();
      return;
    }
    if (param.NetworkDefaultDisplayChildNumber === null || param.NetworkDefaultDisplayChildNumber===undefined) {
      $rootScope[position[2]].info = '请填写默认小孩数';
      //callBack();
      return;
    }


    if ($rootScope[position[2]].editPlanInfo.Transport) {
      $rootScope[position[2]].editPlanInfo.Transport.forEach(function(item) {
        if (!item.Title) {
          $rootScope[position[2]].info = '请填写交通方案标题';
          return;
        }
        console.log(item.IsDefaultEdit);

        item.Traffics.forEach(function(ele) {
          ele.DepartureTime = ('' + ele.$$departureTime.getTime()).slice(0, 10);
          if (ele.IsRemove == "true") {
            ele.IsRemove = true;
          } else {
            ele.IsRemove = false;
          }
          if (ele.IsSingleSold == "true") {
            ele.IsSingleSold = true;
          } else {
            ele.IsSingleSold = false;
          }
        });
        item.ProductType = 4;

        param.PlanProject.push(item);

      });
    }
    if ($rootScope[position[2]].editPlanInfo.Hotel) {
      $rootScope[position[2]].editPlanInfo.Hotel.forEach(function(item) {
        if (!item.Title) {
          $rootScope[position[2]].info = '请填写酒店方案标题';
          return;
        }
        item.Hotels.forEach(function(ele) {
          ele.DepartureTime = ('' + ele.$$departureTime.getTime()).slice(0, 10);
          if (ele.IsRemove == "true") {
            ele.IsRemove = true;
          } else {
            ele.IsRemove = false;
          }
          if (ele.IsSingleSold == "true") {
            ele.IsSingleSold = true;
          } else {
            ele.IsSingleSold = false;
          }
        });
        item.ProductType = 7;

        param.PlanProject.push(item);
      });
    }

    if(!$rootScope[position[2]].editPlanInfo.Hotel && !$rootScope[position[2]].editPlanInfo.Transport){
        $rootScope[position[2]].info = '请添加方案!';
        //callBack();
          return;
    }

    if ($rootScope[position[2]].isEditMode) {
      var params1 = [];
      param.id = $rootScope[position[2]].editPlanInfo._id.$id;
      param.StartTime = $rootScope[position[2]].editPlanInfo.StartTime.sec;
      param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);

      params1.push(angular.copy(param));

      console.log(params1);
      editIndependenttravelProductPlanBatch(params1, function(response) {
        $rootScope[position[2]].isEditMode = false;
        $rootScope[position[2]].showDetail = false;
        $rootScope[position[2]].planInfo = param;
        //callBack();
        //刷新订单页面
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID);
      });
    } else if ($rootScope[position[2]].operate.batchAdd) {
      var params = [];
      var key;
      for (key in $rootScope[position[2]].addPlanDateList) {
        param.StartTime = $rootScope[position[2]].addPlanDateList[key].getTime() / 1000;
        param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);
        params.push(angular.copy(param));
      }
      addIndependenttravelProductPlanBatch(params, function(response) {
        $rootScope[position[2]].operate.batchAdd = false;
        //callBack();
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID  + '&StartTime=' + $filter('date')($scope.showDate, 'yyyy-MM'));
      });
    }
  };


  $scope.cancelPlan = function() {
    $rootScope[position[2]].operate.batchAdd = false;
    $rootScope[position[2]].isEditMode = false;
  };

  $scope.saveCopyInfo = function(item) {
    item.showCopy = false;
  };

  $scope.changePlanType = function(item, type) {
    item.planType = type;
    item.showOrder = false;
  };

  $scope.orderPlan = function(item) {
    item.showOrder = !item.showOrder;
  };

  $scope.listArrangeCar = function(item) {
    item.showCar = !item.showCar;
  };

  $scope.showTeam = function(item) {
    item.showTeam = !item.showTeam;
  };

  $scope.showCopyPlan = function(item) {
    item.showCopy = !item.showCopy;
  };

  $scope.editListPlan = function(item) {
    $rootScope[position[2]].listEdit = true;
    getTeamtourPlanDetail(item._id.$id, function(response) {
      $rootScope[position[2]].editPlanInfo = response;
      $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);
      $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].editPlanInfo.CostInfo;
      $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;
      $rootScope[position[2]].editPlanInfo.planTime = $rootScope[position[2]].editPlanInfo.StartTime.sec * 1000;
      $rootScope[position[2]].editPlanInfo.FinalorderDay = Math.floor(($rootScope[position[2]].editPlanInfo.Finalorder.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600 / 24);
      $rootScope[position[2]].editPlanInfo.FinalorderHour = (($rootScope[position[2]].editPlanInfo.Finalorder.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600) % 24;
      $rootScope[position[2]].editPlanInfo.FinalreservationDay = Math.floor(($rootScope[position[2]].editPlanInfo.Finalreservation.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600 / 24);
      $rootScope[position[2]].editPlanInfo.FinalreservationHour = (($rootScope[position[2]].editPlanInfo.Finalreservation.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600) % 24;
      $rootScope[position[2]].editPlanInfo.ReserveDay = Math.floor($rootScope[position[2]].editPlanInfo.ReserveTime / 24);
      $rootScope[position[2]].editPlanInfo.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveTime % 24;

      $rootScope[position[2]].editPlanInfo.priceType = 1;
      if ($rootScope[position[2]].editPlanInfo.PlanProject_isDefault1.length > 0) {
        $rootScope[position[2]].editPlanInfo.pricePlanNormal = $rootScope[position[2]].editPlanInfo.PlanProject_isDefault1[0];
      }
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = $rootScope[position[2]].editPlanInfo.PlanProject_isDefault0;
      getScheduleClass($rootScope[position[2]].ProductID, function(response) {
        $rootScope[position[2]].editPlanInfo.tripList = response.list;
        if ($rootScope[position[2]].editPlanInfo.tripList.length > 0 && $rootScope[position[2]].editPlanInfo.TripID) {
          var index = findInnerObjIndex($rootScope[position[2]].editPlanInfo.tripList, ['_id', '$id'], $rootScope[position[2]].editPlanInfo.TripID.$id);
          if (index > -1) {
            $rootScope[position[2]].editPlanInfo.Trip = $rootScope[position[2]].editPlanInfo.tripList[index];
          }
        }
      });
      if(!$rootScope[position[2]].editPlanInfo.allCost){
        getCostListProduct({
          keyword: "",
          page: 1,
          limit: 10
        }, function(response) {
          $rootScope[position[2]].editPlanInfo.allCost = response.list;
          $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
            return item._id.$id === PlanTheCost.ForeignKeyID.$id;
          });
        });
      }else{
        $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
          return item._id.$id === PlanTheCost.ForeignKeyID.$id;
        });
      }
      $rootScope[position[2]].editPlanInfo.pricePlanNormal.forEach(function(price0){
        price0.id = price0._id.$id;
        price0.PlanID = price0.PlanID.$id;
      });
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(price1){
        price1.id = price1._id.$id;
        price1.PlanID = price1.PlanID.$id;
      });
    });
  };

  $scope.returnList = function() {
    $rootScope[position[2]].listEdit = false;
  };

  $scope.delListPlan = function(item) {
    item.showDel = !item.showDel;
  };

  $scope.showTeamTrans = function(order){
    order.isShowTeamTrans = !order.isShowTeamTrans;
  };

  $scope.saveTeamTrans = function(order){
    var OrderIdLists = [];
    OrderIdLists.push(order.OrderId);
    $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item){
      return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
    });
    var postData = {
      OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
      NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
      OrderIdLists: OrderIdLists
    };
    orderTransferTeam(postData, function(response){
      $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.push(order);
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.without($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, order);
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
      order.isShowTeamTrans = false;
      $rootScope[position[2]].planInfo.transTeam = null;
    });
  };

  $scope.cancelTeamTrans = function(order){
    order.isShowTeamTrans = false;
  };

  $scope.teamTransMulti = function(){
    $rootScope[position[2]].planInfo.isShowTeamTransMulti = !$rootScope[position[2]].planInfo.isShowTeamTransMulti;
  };

  $scope.saveTeamTransMulti = function(){
    var OrderIdLists = [];
    var transOrder = [];
    $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
      if(order.isSelect){
        OrderIdLists.push(order.OrderId);
      }
      transOrder.push(order);
    });
    var postData = {
      OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
      NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
      OrderIdLists: OrderIdLists
    };
    orderTransferTeam(postData, function(response){
      $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list = $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.concat(transOrder);
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.difference($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, transOrder);
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
      $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
      $rootScope[position[2]].planInfo.transTeam = null;
    });
  };

  $scope.cancelTeamTransMulti = function(){
    $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
  };

  $scope.generateNewTeam = function(){
    addTeamByPlan($rootScope[position[2]].planInfo._id.$id, 1, function(response){
      $rootScope[position[2]].planInfo.teamList.push({
        TeamNo:response.data.TeamNo,
        TeamName:response.data.TeamName,
        ID:response.data.TeamId,
        TeamOrderInfo: {list: []}
      });
    });
  };


  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.status = {
    trafficDepartureTime: false,
    hotelDepartureTime: false
  };
  $scope.showPackageDetail = function(item) {
    if (!item.showDetailStatus) {
      item.showDetailStatus = true;
    } else {
      item.showDetailStatus = !item.showDetailStatus;
    }
  };

});
app.controller("productCruisePlanController", function($scope, $rootScope, $filter, getTeamtourPlanDetail,
  getTeamtourPlanList, findInnerObjIndex, _, getScheduleClass, addCruiseProductPlanBatch, delProductPlanPriceById,
  editCruiseProductPlanBatch, delProductPlanById,getCostListProduct,showWarningBox,addRefreshPageByID,getTeamListByPlanId,addTeamByPlan,Pagination,orderTransferTeam,getShipPlanDetail,getCruiseDetail) {

  //日历的配置
  $scope.calendarOptions = {
    calendarClass: "fullcalendar",
    headClass: "calHead",
    bodyClass: "calBody",
    footClass: "calFoot",
    headDateClass: "calHeadDate",

      //changed by lzw -----start
      fillDay: function(day, date) {
      if (!$rootScope[position[2]].prductPlanList) {
        $rootScope[position[2]].prductPlanList = [];
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === date.getTime() / 1000;
      });
      var html = '';
      if (undefined !== planDetail) {

        var price = '价格无';
         if (undefined !== planDetail.ProductPlanPrice && null !== planDetail.ProductPlanPrice && planDetail.ProductPlanPrice.length > 0) {

          var tempPrice = 0;
          var hasDeduct = false;
          planDetail.ProductPlanPrice.forEach(function(thePrice, theIndex){
            if (null !== thePrice.Deductiblevoucher && "" !== thePrice.Deductiblevoucher && thePrice.Deductiblevoucher > 0) {
              if(!hasDeduct){
                html = '<span class="offset">抵</span>' + html;
                hasDeduct = true;
              }
            }
            if(0 === theIndex){
              tempPrice = thePrice.DefaultPrice;
            }else{
              if(thePrice.DefaultPrice < tempPrice){
                tempPrice = thePrice.DefaultPrice;
              }
            }
          });
          price = '￥' + tempPrice;
        }

        var tripProjectName = '无行程';
        if (undefined !== planDetail.TripProject && null !== planDetail.TripProject && planDetail.TripProject.Title) {
          tripProjectName = planDetail.TripProject.Title;
        }
        html = '<label class="label_inner"><div class="xc_l"><span>' + tripProjectName + '</span><font>' + price + '</font></div><div class="f_r"><span>' + $filter('date')(date, 'dd') + '</span></div></label>';
      } else {
        html = '<label class="label_inner"><div class="xc_l"></div><div class="f_r"><span>' + $filter('date')(date, 'dd') + '</span><input ng-if="operate.batchAdd && '+ date.getTime()  +'>='+ new Date().setHours(0,0,0,0) + '" type="checkbox" ng-model="operate.dateSelected[' + Date.parse(date) + ']"  ng-true-value="true" ng-false-value="false" > </div></label>';
      }
      return html;
    },
      //changed by lzw -----end

    monthChange: function(datetime) {
      $scope.showDate = datetime;
			if($rootScope[position[2]].ProductID){
				getTeamtourPlanList({
					ProductID: $rootScope[position[2]].ProductID,
					StartTime: $filter('date')(datetime, 'yyyy-MM')
				}, function(response) {
					$rootScope[position[2]].prductPlanList = response.list;
	        $rootScope[position[2]].operate.dateSelected = [];
	        $rootScope[position[2]].planReFill = true;
				});
			}
    }
  };

  $rootScope[position[2]].operate = {
    showPlanDetail: function(planDetailId) {
      if (this.showPlanDetailId == planDetailId) {
        this.showPlanDetailId = "";
      } else {
        this.showPlanDetailId = planDetailId;
      }
    },
    showPlanDetailId: "",
    dateSelected: [],
    batchAdd: false
  };


  $scope.chooseCurrentMonth = function(){
    var dateTemp = new Date($scope.showDate.getTime());
    dateTemp.setDate(1);
    for(var i = 1; i <= 31; i++){
      if(dateTemp.getMonth() != $scope.showDate.getMonth()){
        break;
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === dateTemp.getTime() / 1000;
      });
      if($rootScope[position[2]].hasSelectAll){
        $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = false;
      }else{
        $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = true;
      }
      dateTemp.setDate(dateTemp.getDate() + 1);
    }
    $rootScope[position[2]].hasSelectAll = !$rootScope[position[2]].hasSelectAll;
    $rootScope[position[2]].addPlanDateList = [];
    $scope.showPlanDetail($scope.showDate.getDate());
  };



  $scope.batchAdd = function() {
    $scope.showDetail = false;
    $scope.isSelectAll = true;
    $rootScope[position[2]].operate.batchAdd = !$rootScope[position[2]].operate.batchAdd;
    // if (!$rootScope[position[2]].editPlanInfo) {
      $rootScope[position[2]].editPlanInfo = {};
      $rootScope[position[2]].editPlanInfo.Cost = {};
      $rootScope[position[2]].editPlanInfo.priceType = 1;
      $rootScope[position[2]].editPlanInfo.pricePlanNormal = {};
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = [];
      $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault0 = [];
      $rootScope[position[2]].editPlanInfo.Allaccompanytourguide = false;
      $rootScope[position[2]].editPlanInfo.PlanTypeID = 1;
      $rootScope[position[2]].editPlanInfo.Lowestformation = 0;
      $rootScope[position[2]].editPlanInfo.Networkorder = 1;
      $rootScope[position[2]].editPlanInfo.AdultMachineBuildingFee = 0;
      $rootScope[position[2]].editPlanInfo.ChildMachineBuildingFee = 0;
      $rootScope[position[2]].editPlanInfo.ExitVisaFee = 0;
      $rootScope[position[2]].editPlanInfo.TourGuideServiceCharge = 0;
      $rootScope[position[2]].editPlanInfo.FinalorderDay = 0;
      $rootScope[position[2]].editPlanInfo.FinalorderHour = 0;
      $rootScope[position[2]].editPlanInfo.FinalreservationDay = 0;
      $rootScope[position[2]].editPlanInfo.FinalreservationHour = 0;
      $rootScope[position[2]].editPlanInfo.ReserveDay = 0;
      $rootScope[position[2]].editPlanInfo.ReserveHour = 0;

      $rootScope[position[2]].editPlanInfo.ShowStatus = 1;
      //add by lzw ---start
      getCostListProduct({
        keyword: "",
        page: 1,
        limit: 10
      }, function(response) {
        $rootScope[position[2]].editPlanInfo.allCost = response.list;
      });
      var CruiseID = "";
      getCruiseDetail($rootScope[position[2]].ProductID, function(response) {
        getShipPlanDetail(response.Cruise.ForeignKeyID.$id, function(item) {
          $rootScope[position[2]].editPlanInfo.ShippingSpaces = item.ShippingSpaces;
        });
      });

      //add by lzw ---end
      getScheduleClass($rootScope[position[2]].ProductID, function(response) {
        $rootScope[position[2]].editPlanInfo.tripList = response.list;
        if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
          $rootScope[position[2]].editPlanInfo.Trip = $rootScope[position[2]].editPlanInfo.tripList[0];
        }
      });
    // }
  };

  $scope.chooseCurrentMonth = function(){
    var dateTemp = new Date($scope.showDate.getTime());
    dateTemp.setDate(1);
    for(var i = 1; i <= 31; i++){
      if(dateTemp.getMonth() != $scope.showDate.getMonth()){
        break;
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === dateTemp.getTime() / 1000;
      });
      if (undefined === planDetail) {
        if($rootScope[position[2]].hasSelectAll){
          $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = false;
        }else{
          $rootScope[position[2]].operate.dateSelected[Date.parse(dateTemp)] = true;
        }
      }
      dateTemp.setDate(dateTemp.getDate() + 1);
    }
    $rootScope[position[2]].hasSelectAll = !$rootScope[position[2]].hasSelectAll;
    $rootScope[position[2]].addPlanDateList = [];
    $scope.showPlanDetail($scope.showDate.getDate());
  };


  $scope.showPlanDetail = function(day) {
    if ($rootScope[position[2]].operate.batchAdd) {
      $rootScope[position[2]].addPlanDateList = [];
      var key;
      for (key in $rootScope[position[2]].operate.dateSelected) {
        if ($rootScope[position[2]].operate.dateSelected[key]) {
          var newDate = new Date();
          newDate.setTime(key);
          $rootScope[position[2]].addPlanDateList.push(newDate);
        }
      }
    } else {
      var index = findInnerObjIndex($rootScope[position[2]].prductPlanList, ['StartTime', 'sec'], day.date / 1000);
      if (index > -1) {
        var planDetail = $rootScope[position[2]].prductPlanList[index];

        getTeamtourPlanDetail(planDetail._id.$id, function(response) {

          $rootScope[position[2]].planInfo = response;
          $rootScope[position[2]].planInfo.planTime = day.date;

          $rootScope[position[2]].planInfo.FinalorderDay = Math.floor(($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalorder.sec) / 3600 / 24);
          $rootScope[position[2]].planInfo.FinalorderHour = (($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalorder.sec) / 3600) % 24;
          $rootScope[position[2]].planInfo.FinalreservationDay = Math.floor(($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalreservation.sec) / 3600 / 24);
           $rootScope[position[2]].planInfo.FinalreservationHour = (($rootScope[position[2]].planInfo.StartTime.sec - $rootScope[position[2]].planInfo.Finalreservation.sec) / 3600) % 24;

          $rootScope[position[2]].planInfo.ReserveDay = Math.floor($rootScope[position[2]].planInfo.ReserveTime / 24);
          $rootScope[position[2]].planInfo.ReserveHour = $rootScope[position[2]].planInfo.ReserveTime % 24;

          /*$rootScope[position[2]].planInfo.PlanTypeID = $rootScope[position[2]].planInfo.PlanType ? $rootScope[position[2]].planInfo.PlanType.ID : $rootScope[position[2]].planInfo.PlanTypeID.ID;*/

          $rootScope[position[2]].showNormalPrice = true;

          if ($rootScope[position[2]].planInfo.ActivityPrices && $rootScope[position[2]].planInfo.ActivityPrices.length > 0) {
            $rootScope[position[2]].hasActivity = true;
          }

          $scope.showDetail = true;
        });
      }
    }
  };

   $scope.delPlan = function(item) {
    showWarningBox('确定要删除该计划吗？', function() {
      delProductPlanById(item._id.$id, function(response) {
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]].ProductID,
          StartTime: $filter('date')(item.StartTime.sec * 1000, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].showDetail = false;
          $rootScope[position[2]].planInfo = {};
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].planReFill = true;
            //刷新订单页面
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID);
        });
      });
    });
  };

  $scope.changeToList = function() {
    var param = {
      ProductID: $rootScope[position[2]].ProductID
    };
    getTeamtourPlanList(param, function(response) {
      $rootScope[position[2]].allPlanList = response.list;
    });
    $scope.isListMode = true;
  };

  $scope.changeToCalendar = function() {
    $scope.isListMode = false;
  };
  //编辑
  $scope.editPlan = function() {

    $rootScope[position[2]].isEditMode = true;

    $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);
    $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].planInfo.CostInfo;
    $rootScope[position[2]].editPlanInfo.PlanTypeID = $rootScope[position[2]].planInfo.PlanTypeID.ID;
    $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;
    $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = $rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0;
     $rootScope[position[2]].editPlanInfo.priceType = 1;

     getCruiseDetail($rootScope[position[2]].ProductID, function(response) {
        getShipPlanDetail(response.Cruise.ForeignKeyID.$id, function(item) {
          $rootScope[position[2]].editPlanInfo.ShippingSpaces = item.ShippingSpaces;
        });
      });


    getScheduleClass($rootScope[position[2]].ProductID, function(response) {
      $rootScope[position[2]].editPlanInfo.tripList = response.list;
      if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
         var trip = _.find($rootScope[position[2]].editPlanInfo.tripList, function(item){
          return item._id.$id === $rootScope[position[2]].editPlanInfo.TripID.$id;
        });
        if(undefined !== trip){
          $rootScope[position[2]].editPlanInfo.Trip = trip;
        }
      }
    });
     if(!$rootScope[position[2]].editPlanInfo.allCost){
      getCostListProduct({
        keyword: "",
        page: 1,
        limit: 10
      }, function(response) {
        $rootScope[position[2]].editPlanInfo.allCost = response.list;
        if ($rootScope[position[2]].editPlanInfo.PlanTheCost) {
          $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item) {
            return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
          });
        }
      });
    }else{
      $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
       return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
      });
    }
   $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(price1){
      price1.id = price1._id.$id;
      price1.PlanID = price1.PlanID.$id;

    });

  };

  $scope.addCar = function() {
    $scope.isAddCar = !$scope.isAddCar;
  };

  $scope.arrangeCar = function() {
    $scope.isArrangeCar = !$scope.isArrangeCar;
  };

  $scope.closeArrangeCar = function() {
    $scope.isArrangeCar = false;
  };

  $scope.delUpgradePrice = function(price) {
    showWarningBox('确定要删除该计划吗？', function() {
      delProductPlanPriceById(price._id.$id, function(response) {
        $rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0 = _.without($rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0, price);
      });
    });
  };

  $scope.savePlan = function(callBack) {
    var param = {};
    var pricePlanNormal = {};
    var pricePlanAdvanced = [];
    //计划信息
    param.CompanyInfoId = $rootScope.userinfo.CompanyID.$id;
    param.ProductID = $rootScope[position[2]].ProductID;
    param.ProductName =  $rootScope[position[2]].ProductName;
    param.ProductNo =  $rootScope[position[2]].ProductNo;
    param.TravelDay = $rootScope[position[2]].TravelDay;
    //param.Trip = $rootScope[position[2]].editPlanInfo.Trip;
    param.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanTypeID;
    param.PeerCompanyName = $rootScope[position[2]].editPlanInfo.PeerCompanyName;
    param.Allaccompanytourguide = $rootScope[position[2]].editPlanInfo.Allaccompanytourguide+"";
    param.Lowestformation = $rootScope[position[2]].editPlanInfo.Lowestformation;
    param.Networkorder = $rootScope[position[2]].editPlanInfo.Networkorder;
    param.AdultMachineBuildingFee = $rootScope[position[2]].editPlanInfo.AdultMachineBuildingFee;
    param.ChildMachineBuildingFee = $rootScope[position[2]].editPlanInfo.ChildMachineBuildingFee;
    param.AdultShipPortFee = 0;
    param.ChildShipPortFee = 0;
    param.ExitVisaFee = $rootScope[position[2]].editPlanInfo.ExitVisaFee;
    param.TourGuideServiceCharge = $rootScope[position[2]].editPlanInfo.TourGuideServiceCharge;
    param.FinalorderDay = $rootScope[position[2]].editPlanInfo.FinalorderDay;
    param.FinalorderHour = $rootScope[position[2]].editPlanInfo.FinalorderHour;
    param.FinalreservationDay = $rootScope[position[2]].editPlanInfo.FinalreservationDay;
    param.FinalreservationHour = $rootScope[position[2]].editPlanInfo.FinalreservationHour;
    param.ReserveDay = $rootScope[position[2]].editPlanInfo.ReserveDay;
    param.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveHour;
    param.ShowStatus = $rootScope[position[2]].editPlanInfo.ShowStatus;

    //舱位类型
    param.productPlanPrice = [];


     if($rootScope[position[2]].isEditMode){
        $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
      if (!item.ShippingSpace) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        return;
      }
      if(item.ShippingSpace.ForeignKeyID.$id){
        var idTemp = item.ShippingSpace.ForeignKeyID.$id;
        item.ShippingSpace.ForeignKeyID = idTemp;
      }
      item.Pricetitle=item.ShippingSpace.Title;
      if(item.id){
         param.productPlanPrice.push(item);
       }else{
         item.PlanID = $rootScope[position[2]].editPlanInfo._id.$id;
        param.productPlanPrice.push(item);
       }
    });
    }else if($rootScope[position[2]].operate.batchAdd){
       $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
      if (!item.ShippingSpace) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        return;
      }
      if(item.ShippingSpace.ForeignKeyID.$id){
        var idTemp = item.ShippingSpace.ForeignKeyID.$id;
        item.ShippingSpace.ForeignKeyID = idTemp;
      }
        item.Pricetitle = item.ShippingSpace.Title;
         param.productPlanPrice.push(item);
    });
    }



    if ($rootScope[position[2]].editPlanInfo.Cost && $rootScope[position[2]].editPlanInfo.Cost.hasOwnProperty('_id')) {
      param.PlanTheCost = $rootScope[position[2]].editPlanInfo.Cost._id.$id;
    }

    if (!$rootScope[position[2]].editPlanInfo.Trip) {
      $rootScope[position[2]].info = '请选择行程';
      return;
    }


    param.TripID = $rootScope[position[2]].editPlanInfo.Trip._id.$id;

    if (param.Lowestformation===undefined) {
      $rootScope[position[2]].info = '请填写最低成员';
      //callBack();
      return;
    }

    if (!param.Networkorder) {
      $rootScope[position[2]].info = '请选择网络订单';
      //callBack();
      return;
    }

    if (!param.FinalorderDay && !param.FinalorderHour) {
      $rootScope[position[2]].info = '请填写下单截止时间';
      return;
    }

    if (!param.FinalreservationDay && !param.FinalreservationHour) {
      $rootScope[position[2]].info = '请填写预留时间';
      //callBack();
      return;
    }

    if (!param.ReserveDay && !param.ReserveHour) {
      $rootScope[position[2]].info = '请填写暂留时间';
      //callBack();
      return;
    }

  if (param.productPlanPrice.length===0) {
      $rootScope[position[2]].info = '请添加舱位类型';
      //callBack();
      return;
    }
    if ($rootScope[position[2]].isEditMode) {
      var params1 = [];
      param.id = $rootScope[position[2]].editPlanInfo._id.$id;
      param.StartTime = $rootScope[position[2]].editPlanInfo.StartTime.sec;
      param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);
      param.Finalreservation = (param.StartTime - param.FinalreservationDay * 24 * 60 * 60 - param.FinalreservationHour * 60 * 60);
      param.ReserveTime = $rootScope[position[2]].editPlanInfo.ReserveDay * 24 + $rootScope[position[2]].editPlanInfo.ReserveHour;
      var newparams1 = angular.copy(param);
      params1.push(newparams1);
      editCruiseProductPlanBatch(params1, function(response) {
        //callBack();
        addRefreshPageByID(($rootScope[switchType[2]].id));
       $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID);
        $rootScope[position[2]].isEditMode = false;

      });
    } else if ($rootScope[position[2]].operate.batchAdd) {
      $rootScope[position[2]].operate.batchAdd = false;
      var params = [];
      var key;
      for(key in $rootScope[position[2]].addPlanDateList){
        param.StartTime = $rootScope[position[2]].addPlanDateList[key].getTime() / 1000;
        param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);
        param.Finalreservation = (param.StartTime - param.FinalreservationDay * 24 * 60 * 60 - param.FinalreservationHour * 60 * 60);
        param.ReserveTime = param.ReserveDay * 24 + param.ReserveHour;
        params.push(angular.copy(param));
      }
      addCruiseProductPlanBatch(params, function(response) {
        //callBack();
        $rootScope[position[2]].operate.batchAdd = false;
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]].ProductID,
          StartTime: $filter('date')($scope.showDate, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].prductPlanList = response.list;
         // $rootScope[position[2]].operate.dateSelected = [];
          $rootScope[position[2]].planReFill = true;
        });

        //刷新订单页面
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.fetch($rootScope[switchType[2]].targetUrl);
      });
    }
  };

  $scope.saveCopyInfo = function(item) {
    item.showCopy = false;
  };

  $scope.teamSet = function(){
    if(!$rootScope[position[2]].planInfo.teamList){
      getTeamListByPlanId($rootScope[position[2]].planInfo._id.$id, function(teamList){
        $rootScope[position[2]].planInfo.teamList = teamList.data;
        $rootScope[position[2]].planInfo.teamList.OrderInfo = {
          OrderMoney: 0,
          PayPrice: 0,
          UnPayPrice: 0,
          AdultNumber: 0,
          ChildNumber: 0,
          BabyNumber: 0,
          Number: 0,
          SiteNumber: 0,
        };
        $rootScope[position[2]].planInfo.teamList.forEach(function(item){
          $rootScope[position[2]].planInfo.teamList.OrderInfo.OrderMoney += item.TeamOrderInfo.TotalOrderMoney;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.PayPrice += item.TeamOrderInfo.TotalPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.UnPayPrice += item.TeamOrderInfo.TotalUnPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.AdultNumber += item.TeamOrderInfo.TotalAdultNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.ChildNumber += item.TeamOrderInfo.TotalChildNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.BabyNumber += item.TeamOrderInfo.TotalBabyNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.Number += item.TeamOrderInfo.TotalNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.SiteNumber += item.TeamOrderInfo.TotalSiteNumber;
        });
        if($rootScope[position[2]].planInfo.teamList.length > 0){
          $rootScope[position[2]].planInfo.teamShow = $rootScope[position[2]].planInfo.teamList[0];
            if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
            $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
            $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
          }
        }
      });
    }
    $rootScope[position[2]].planInfo.isTeamSet = !$rootScope[position[2]].planInfo.isTeamSet;
  };

 $scope.teamPageChange = function(page){
    $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice((page - 1) * 5, page * 5);
    $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, page, 5);
  };

  $scope.changeTeam = function(team){
    $rootScope[position[2]].planInfo.teamShow = team;
    if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
    }
  };

    $scope.showTeamTrans = function(order){
    order.isShowTeamTrans = !order.isShowTeamTrans;
  };


  $scope.saveTeamTrans = function(order){
    var OrderIdLists = [];
    OrderIdLists.push(order.OrderId);
    $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item){
      return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
    });
    var postData = {
      OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
      NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
      OrderIdLists: OrderIdLists
    };
    orderTransferTeam(postData, function(response){
      $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.push(order);
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.without($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, order);
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
      order.isShowTeamTrans = false;
      $rootScope[position[2]].planInfo.transTeam = null;
    });
  };

  $scope.changePlanType = function(item, type) {
    item.planType = type;
    item.showOrder = false;
  };

  $scope.orderPlan = function(item) {
    item.showOrder = !item.showOrder;
  };

  $scope.listArrangeCar = function(item) {
    item.showCar = !item.showCar;
  };

  $scope.showTeam = function(item) {
    item.showTeam = !item.showTeam;
  };

  $scope.showCopyPlan = function(item) {
    item.showCopy = !item.showCopy;
  };

  $scope.editListPlan = function(item) {
    $scope.listEdit = true;
    getTeamtourPlanDetail(item._id.$id, function(response) {
      $rootScope[position[2]].editPlanInfo = response;
      $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);
      $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].editPlanInfo.CostInfo;
     $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;
      $rootScope[position[2]].editPlanInfo.planTime = $rootScope[position[2]].editPlanInfo.StartTime.sec * 1000;
      $rootScope[position[2]].editPlanInfo.FinalorderDay = Math.floor(($rootScope[position[2]].editPlanInfo.Finalorder.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600 / 24);
      $rootScope[position[2]].editPlanInfo.FinalorderHour = (($rootScope[position[2]].editPlanInfo.Finalorder.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600) % 24;
      $rootScope[position[2]].editPlanInfo.FinalreservationDay = Math.floor(($rootScope[position[2]].editPlanInfo.Finalreservation.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600 / 24);
      $rootScope[position[2]].editPlanInfo.FinalreservationHour = (($rootScope[position[2]].editPlanInfo.Finalreservation.sec - $rootScope[position[2]].editPlanInfo.StartTime.sec) / 3600) % 24;
      $rootScope[position[2]].editPlanInfo.ReserveDay = Math.floor($rootScope[position[2]].editPlanInfo.ReserveTime / 24);
      $rootScope[position[2]].editPlanInfo.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveTime % 24;
      $rootScope[position[2]].editPlanInfo.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanType ? $rootScope[position[2]].editPlanInfo.PlanType.ID : $rootScope[position[2]].editPlanInfo.PlanTypeID.ID;
      if ($rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1.length > 0) {
        $rootScope[position[2]].editPlanInfo.pricePlanNormal = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1[0];
      }
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault0;
      getScheduleClass($rootScope[position[2]].ProductID, function(response) {
        $rootScope[position[2]].editPlanInfo.tripList = response.list;
        if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
          var index = findInnerObjIndex($rootScope[position[2]].editPlanInfo.tripList, ['_id', '$id'], $rootScope[position[2]].editPlanInfo.TripID.$id);
          if (index > -1) {
            $rootScope[position[2]].editPlanInfo.Trip = $rootScope[position[2]].editPlanInfo.tripList[index];
          }
        }
      });
    });

  };

  $scope.cancelTeamTrans = function(order){
    order.isShowTeamTrans = false;
  };

  $scope.cancelTeamTransMulti = function(){
    $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
  };

  $scope.generateNewTeam = function(){
    addTeamByPlan($rootScope[position[2]].planInfo._id.$id, 18, function(response){
      $rootScope[position[2]].planInfo.teamList.push({
        TeamNo:response.data.TeamNo,
        TeamName:response.data.TeamName,
        ID:response.data.TeamId,
        TeamOrderInfo: {list: []}
      });
    });
  };



  $scope.cancelPlan = function() {
    $rootScope[position[2]].operate.batchAdd = false;
    $rootScope[position[2]].isEditMode = false;
  };

  $scope.returnList = function() {
    $scope.listEdit = false;
  };

  $scope.delListPlan = function(item) {
    item.showDel = !item.showDel;
  };
});
app.controller("productVisaController", function($scope, $rootScope, _, ngDialog, $timeout, visa, delVisaById, addRefreshPageByID,
  getAllDestination, delVisaInsurance, addVisaInsurance, getBasicData, showWarningBox, closeSubView, saveStepStatus, updateProductBelong,
  editVisaExpand, addVisaProduct, saveVisaProduct, editVisaMaterials, getAllVisaTypes, getPersonnel, addProductSyncInfo) {

  $scope.openDialog = function(item) {
    var new_dialog = ngDialog
      .open({
        id: 'fromAService',
        template: '/public/angularView/common/components/crop.html',
        controller: 'crop',
        className: 'ngdialog-theme-default w-800',
        data: {
          imgRatio: 33 / 56,
          resImgWidth: 560,
          resImgHight: 330,
          uploadPicCallBack: function(data) {
            if (item) {
              item.PicPath = data.url;
              item.Title = data.name;
            } else {
              $rootScope[position[2]].step0.DefaultPic = data.url;
            }
          }
        }
      });
  };

  getPersonnel({
    label: 1008,
    limit: 200
  }, function(data) {
    $scope.Dispatchers = data.list;
  });

  //切换步骤，只有当前步骤填写完成后才能进行下一步
  $scope.switchStep = function(step) {
    var currentStep = $rootScope[position[2]].addVisaStep;
    if (step <= currentStep) {
      $rootScope[position[2]].addVisaStep = step;
      $scope.loadStepData(step);
    } else if (step == (currentStep + 1)) {
      if ($scope.isStepComplete(currentStep)) {
        $scope.addOneStep(true);
      }
    } else if ($scope.isStepComplete(step - 1, true)) {
      $scope.isStepComplete($rootScope[position[2]].addVisaStep);
      $rootScope[position[2]].addVisaStep = step;
      $scope.loadStepData(step);
    }
  };

  //进行下一步
  $scope.addOneStep = function(isSkip) {
    var currentStep = $rootScope[position[2]].addVisaStep;
    if (isSkip) {
      if ($rootScope[position[2]].finishedStatus < currentStep) {
        $rootScope[position[2]].finishedStatus = currentStep;
      }
      $rootScope[position[2]].addVisaStep++;
      $scope.loadStepData($rootScope[position[2]].addVisaStep);
    } else {
      if ($scope.isStepComplete(currentStep)) {
        if ($rootScope[position[2]].finishedStatus < currentStep) {
          $rootScope[position[2]].finishedStatus = currentStep;
        }
        $rootScope[position[2]].addVisaStep++;
        $scope.loadStepData($rootScope[position[2]].addVisaStep);
      }
    }
  };

  //判断当前步骤内容是否完成，未完成，提示相应信息
  $scope.isStepComplete = function(step, isSkip) {
    switch (step) {
      case 0:
        if ($rootScope[position[2]].step0.Title === null || $rootScope[position[2]].step0.Title === "") {
          $rootScope[position[2]].info = '请填写签证名称！';
          return false;
        }
        if (!isSkip) {
          return $scope.step0Commit();
        }
        break;
      case 1:
        if (!$rootScope[position[2]].StepStatus || $rootScope[position[2]].StepStatus[0].status !== 1) {
          $rootScope[position[2]].info = '请先完成前一步';
          return false;
        }

        if(!_.find($rootScope[position[2]].step1.targetMaterials, {isSelected: true})){
          $rootScope[position[2]].info = '请选择签证材料';
          return false;
        }

        if (!isSkip) {
          $scope.step1Commit();
        }
        break;
      case 2:
        if (!$rootScope[position[2]].StepStatus || $rootScope[position[2]].StepStatus[1].status !== 1) {
          $rootScope[position[2]].info = '请先完成前一步';
          return false;
        }
        if (!isSkip) {
          $scope.step2Commit();
        }
        break;
      case 3:
        if (!$rootScope[position[2]].StepStatus || $rootScope[position[2]].StepStatus[2].status !== 1) {
          $rootScope[position[2]].info = '请先完成前一步';
          return false;
        }
        if (!isSkip) {
          $scope.step3Commit();
        }
        break;
      default:
    }
    return true;
  };

  //加载相应步骤的数据
  $scope.loadStepData = function(step) {
    switch (step) {
      case 0:
        if (!$rootScope[position[2]].step0) {
          $rootScope[position[2]].step0 = {};
        }
        break;
      case 1:
        //签证材料
        if (!$rootScope[position[2]].step1) {
          $rootScope[position[2]].step1 = {};
          $rootScope[position[2]].step1.selectedMaterials = {};
        }
        if (!$rootScope[position[2]].isEditMode) {
          $rootScope[position[2]].Materials = [];
        }
        $rootScope[position[2]].Materials.forEach(function(item) {
          $rootScope[position[2]].step1.selectedMaterials[item.Typeid.$id] = angular.copy(item.NeedMaterialsList);
        });
        $scope.getVisaMaterialBySuit();
        break;
      case 2:
        //获取保险数据
        if (!$rootScope[position[2]].step2) {
          $rootScope[position[2]].step2 = {};
        }
        $rootScope[position[2]].step2.addData = [];
        $rootScope[position[2]].step2.removeData = [];
        if ($rootScope[position[2]].Insurances) {
          $rootScope[position[2]].step2.insurances = $rootScope[position[2]].Insurances;
        } else {
          $rootScope[position[2]].step2.insurances = [];
        }
        $timeout(function(){
          $rootScope[position[2]].step2.insurancesTemp = angular.copy($rootScope[position[2]].step2.insurances);
        }, 50);
        break;
      case 3:
        break;
      default:

    }
  };

  $scope.step0Commit = function() {

    if (!$rootScope[position[2]].step0.Title) {
      $rootScope[position[2]].info = '请输入签证名称';
      return false;
    }

    if (!$rootScope[position[2]].step0.VisaGADDR) {
      $rootScope[position[2]].info = '请输入签证国家';
      return false;
    }

    if (!$rootScope[position[2]].step0.VisaType) {
      $rootScope[position[2]].info = '请选择签证类型';
      return false;
    }

    if (!$rootScope[position[2]].step0.VisaUseful) {
      $rootScope[position[2]].info = '请输入有效期';
      return false;
    }

    if (!$rootScope[position[2]].step0.StopDate) {
      $rootScope[position[2]].info = '请输入最长停留';
      return false;
    }

    if ($rootScope[position[2]].step0.IsIncludeFee === undefined) {
      $rootScope[position[2]].info = '请选择是否含签证费用';
      return false;
    }

    if (!$rootScope[position[2]].step0.AgencyAddress) {
      $rootScope[position[2]].info = '请输入送签地点';
      return false;
    }

    if (!$rootScope[position[2]].step0.AgencyDate) {
      $rootScope[position[2]].info = '请输入办理时长';
      return false;
    }

    if (!$rootScope[position[2]].step0.Immigration) {
      $rootScope[position[2]].info = '请输入入境次数';
      return false;
    }

    if ($rootScope[position[2]].step0.Interview === undefined) {
      $rootScope[position[2]].info = '请选择是否面试';
      return false;
    }

    if (!$rootScope[position[2]].step0.DefaultPrice) {
      $rootScope[position[2]].info = '请输入销售价格';
      return false;
    }

    if ($rootScope[position[2]].step0.AgentDefaultPrice === null && $rootScope[position[2]].step0.AgentDefaultPrice === undefined) {
      $rootScope[position[2]].info = '请输入代理价格';
      return false;
    }

    if ($rootScope[position[2]].step0.CostDefaultPrice === null &&$rootScope[position[2]].step0.CostDefaultPrice === undefined) {
      $rootScope[position[2]].info = '请输入结算价格';
      return false;
    }

    if ($rootScope[position[2]].step0.BeforeHour === null &&$rootScope[position[2]].step0.BeforeHour === undefined) {
      $rootScope[position[2]].info = '请输入提前预定时间';
      return false;
    }

    if (!$rootScope[position[2]].step0.AgencyDate) {
      $rootScope[position[2]].info = '请输入提前预定时间';
      return false;
    }

    if (!$rootScope[position[2]].step0.BookingMin) {
      $rootScope[position[2]].info = '请输入最少预定数';
      return false;
    }

    if ($rootScope[position[2]].step0.VouchersPrice === null &&$rootScope[position[2]].step0.VouchersPrice === undefined) {
      $rootScope[position[2]].info = '请输入抵扣券';
      return false;
    }

    if ($rootScope[position[2]].step0.IsOpenBook === undefined) {
      $rootScope[position[2]].info = '请选择是否开放内部预定';
      return false;
    }

    if (!$rootScope[position[2]].step0.IncomeRange) {
      $rootScope[position[2]].info = '请输入受理范围';
      return false;
    }

    var commitData = {
      Title: $rootScope[position[2]].step0.Title,
      DefaultPic: $rootScope[position[2]].step0.DefaultPic,
      VisaGADDRID: $rootScope[position[2]].step0.VisaGADDR._id.$id,
      VisaTypeID: $rootScope[position[2]].step0.VisaType._id.$id,
      VisaUseful: $rootScope[position[2]].step0.VisaUseful,
      StopDate: $rootScope[position[2]].step0.StopDate,
      IsIncludeFee: $rootScope[position[2]].step0.IsIncludeFee,
      AgencyAddress: $rootScope[position[2]].step0.AgencyAddress,
      AgencyDate: $rootScope[position[2]].step0.AgencyDate,
      Immigration: $rootScope[position[2]].step0.Immigration,
      Interview: $rootScope[position[2]].step0.Interview,
      BeforeHour: $rootScope[position[2]].step0.BeforeHour,
      BookingMin: $rootScope[position[2]].step0.BookingMin,
      DefaultPrice: $rootScope[position[2]].step0.DefaultPrice,
      AgentDefaultPrice: $rootScope[position[2]].step0.AgentDefaultPrice,
      CostDefaultPrice: $rootScope[position[2]].step0.CostDefaultPrice,
      VouchersPrice: $rootScope[position[2]].step0.VouchersPrice,
      IsOpenBook: $rootScope[position[2]].step0.IsOpenBook,
      IncomeRange: $rootScope[position[2]].step0.IncomeRange,
      DelStatus: 0,
    };
    if ($rootScope[position[2]].isEditMode) {
      commitData.id = $rootScope[position[2]]._id.$id;
      saveVisaProduct(commitData, function(response) {
        saveStepStatus($rootScope[position[2]]._id.$id, 1, 6, function() {
          $rootScope[position[2]].StepStatus[0].status = 1;
        });
        $scope.clearDetailInfo();
      });
    } else {
      addVisaProduct(commitData, function(response) {
        $rootScope[position[2]]._id = {
          $id: response.data
        };
        saveStepStatus($rootScope[position[2]]._id.$id, 1, 6, function() {
          $rootScope[position[2]].StepStatus = [{
            status: 1
          }];
        });
        var item = {
          _id: {
            $id: $rootScope[position[2]]._id.$id
          },
          showUrl: 'product/visa/detail?id=' + $rootScope[position[2]]._id.$id,
          Title: $rootScope[position[2]].step0.Title,
          DefaultPrice: $rootScope[position[2]].step0.DefaultPrice,
          Immigration: $rootScope[position[2]].step0.Immigration,
          Interview: $rootScope[position[2]].step0.Interview,
          VisaGADDR: $rootScope[position[2]].step0.VisaGADDR,
          VisaType: $rootScope[position[2]].step0.VisaType,
          AddTime: {
            sec: new Date().getTime()
          },
          AddInfo: {
            EmployeeName: $rootScope.userinfo.FullName
          }
        };
        $rootScope[position[2]].showUrl = item.showUrl;
        $rootScope[position[1]].needClearAddData = true;
        $rootScope[position[1]].list.unshift(item);
      });
    }
    return true;
  };

  $scope.step1Commit = function() {
    var postData = [];
    for (var attr in $rootScope[position[2]].step1.selectedMaterials) {
      var data = {};
      var type = _.find($rootScope[position[2]].materialTypes, function(item) {
        return item.ID === attr;
      });
      data.TypeID = attr;
      data.Name = type.Name;
      //之后修改，目前没有字段
      data.Notes = type.Name;
      data.NeedMaterialsList = [];
      $rootScope[position[2]].step1.selectedMaterials[attr].forEach(function(item) {
        data.NeedMaterialsList.push({
          Explanation: item.Explanation,
          Name: item.Name,
          MaterialsID: item.MaterialsID.$id
        });
      });
      postData.push(data);
    }

    editVisaMaterials($rootScope[position[2]]._id.$id, postData, function(response) {
      saveStepStatus($rootScope[position[2]]._id.$id, 2, 6, function() {
        if ($rootScope[position[2]].StepStatus.length < 2) {
          $rootScope[position[2]].StepStatus.push({
            status: 1
          });
        } else {
          $rootScope[position[2]].StepStatus[1].status = 1;
        }
      });
      $scope.clearDetailInfo();
    });
  };

  $scope.step2Commit = function() {
    saveStepStatus($rootScope[position[2]]._id.$id, 3, 6, function() {
      if ($rootScope[position[2]].StepStatus.length < 3) {
        $rootScope[position[2]].StepStatus.push({
          status: 1
        });
      } else {
        $rootScope[position[2]].StepStatus[2].status = 1;
      }
    });
    $scope.clearDetailInfo();
  };

  $scope.step3Commit = function() {
    var postData = {
      UnBookingNotes: $rootScope[position[2]].UnBookingNotes,
      FeeNotes: $rootScope[position[2]].FeeNotes,
      Precautions: $rootScope[position[2]].Precautions,
      Reminder: $rootScope[position[2]].Reminder,
    };
    editVisaExpand($rootScope[position[2]]._id.$id, postData, function(resp) {
      saveStepStatus($rootScope[position[2]]._id.$id, 4, 6, function() {
        if ($rootScope[position[2]].StepStatus.length < 4) {
          $rootScope[position[2]].StepStatus.push({
            status: 1
          });
        }
      });
      $scope.clearDetailInfo();
      $scope.changeToDetailPage();
    });
  };

  $scope.changeMaterialStatus = function(material) {
    var target = _.find($rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId], function(item) {
      return item.MaterialsID.$id === material._id;
    });
    if (material.isSelected && undefined === target) {
      if (!$rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId]) {
        $rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId] = [];
      }
      $rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId].push({
        Explanation: material.Notes,
        Name: material.Title,
        MaterialsID: {
          $id: material._id
        }
      });
    } else if (!material.isSelected && undefined !== target) {
      $rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId] = _.without($rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId], target);
    }
  };

  $scope.getVisaMaterialBySuit = function(suit) {
    if (!suit) {
      suit = $rootScope[position[2]].materialTypes[0];
    }
    $rootScope[position[2]].step1.targetMaterialId = suit.ID;
    getBasicData.visaList(function(response) {
      $rootScope[position[2]].step1.targetMaterials = response.data.list;
      if ($rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId]) {
        $rootScope[position[2]].step1.selectedMaterials[$rootScope[position[2]].step1.targetMaterialId].forEach(function(data) {
          var target = _.find($rootScope[position[2]].step1.targetMaterials, function(item) {
            return item._id === data.MaterialsID.$id;
          });
          if (undefined !== target) {
            target.isSelected = true;
          }
        });
      }
    }, {
      iPageSize: 9999,
      MaterialType: suit.ID
    });
  };

  //列表页筛选搜索景点信息
  $scope.searchPro = function() {
    $rootScope[position[1]].search = {
      page: 1,
      Title: $rootScope[position[1]].Title,
      VisaGADDRID: $rootScope[position[1]].VisaGADDRID ? $rootScope[position[1]].VisaGADDRID._id.$id : '',
      VisaTypeID: $rootScope[position[1]].VisaTypeID ? $rootScope[position[1]].VisaTypeID._id.$id : '',
      AddTime: $rootScope[position[1]].orderType ? $rootScope[position[1]].orderType.value : '',
    };
    visa.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, $rootScope[position[1]].search);
  };

  //滚动到最后加载数据
  $scope.loadListData = function(viewID) {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {};
    }
    $rootScope[position[1]].search.page += 1;
    visa.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
    }, $rootScope[position[1]].search);
  };

  //点击添加保险
  $scope.addInsurance = function() {
    $rootScope[position[2]].isAddInsurance = true;
  };

  //删除保险
  $scope.removeInsurance = function(item) {
    showWarningBox('确定要删除保险吗', function(){
      delVisaInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(response) {
        $rootScope[position[2]].step2.insurances = _.without($rootScope[position[2]].step2.insurances, item);
        $rootScope[position[2]].step2.insurancesTemp = angular.copy($rootScope[position[2]].step2.insurances);
      });
    });
  };

  //取消添加保险
  $scope.cancelInsuranceAdd = function() {
    $rootScope[position[2]].isAddInsurance = false;
  };

  //确认添加保险
  $scope.confirmInsuranceAdd = function() {
    $rootScope[position[2]].isAddInsurance = false;
    //提交数据
    console.log($rootScope[position[2]].step2.insurancesTemp);
    if ($rootScope[position[2]].step2.insurancesTemp.length > 0) {
      $rootScope[position[2]].step2.insurances = angular.copy($rootScope[position[2]].step2.insurancesTemp);
    } else {
      $rootScope[position[2]].step2.insurances = [];
    }
    //添加保险
    addVisaInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step2.addData, function(data) {
      $rootScope[position[2]].step2.insurances.forEach(function(insurance) {
          data.forEach(function(item) {
            if (insurance.ProductInsuranceNo === item.ProductInsuranceNo) {
              insurance.baseid = {};
              insurance.baseid.$id = item.baseid.$id;
            }
          });
        });
    });
    $rootScope[position[2]].step2.addData = [];
    //删除保险
    $rootScope[position[2]].step2.removeData.forEach(function(item) {
      delVisaInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {
        console.log(data);
      });
    });
    $rootScope[position[2]].step2.removeData = [];
    $rootScope[position[2]].Insurances = $rootScope[position[2]].step2.insurances;
  };

  $scope.showPersonMaterial = function(material) {
    $rootScope[position[2]].showMaterialId = material.ID;
  };

  $scope.changeVisaCountry = function(value) {
    $rootScope[position[2]].step0.VisaGADDR = value;
  };

  $scope.removeProduct = function() {
    showWarningBox('确定要删除该签证吗？', function() {
      delVisaById($rootScope[position[2]]._id.$id, function(response) {
        var pro = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== pro) {
          $rootScope[position[1]].list = _.without($rootScope[position[1]].list, pro);
          closeSubView();
        }
      });
    });
  };

  $scope.clearAddData = function() {
    $scope.switchStep(0);
    if (!$rootScope[position[2]].isEditMode) {
      addRefreshPageByID('product-visa-add-id-addVisaProduct');
    }
  };

  $scope.clearDetailInfo = function() {
    addRefreshPageByID('product-visa-detail-id-' + $rootScope[position[2]]._id.$id);
  };

  $scope.changeToDetailPage = function() {
    $rootScope[position[2]].timeoutShow = $timeout(function() {
      $rootScope[position[2]].addVisaStep = 0;
      $scope.fetch("product/visa/detail?id=" + $rootScope[position[2]]._id.$id, '');
      $scope.hideSubHead();
      $scope.openItem();
      $scope.clearAddData();
    }, 5 * 1000);
  };

  $scope.showDetail = function() {
    $timeout.cancel($rootScope[position[2]].timeoutShow);
    $rootScope[position[2]].addVisaStep = 0;
    $scope.fetch("product/visa/detail?id=" + $rootScope[position[2]]._id.$id, '');
    $scope.hideSubHead();
    $scope.openItem();
    $scope.clearAddData();
  };

  $scope.getVisaTypes = function() {
    if (!$scope.visaTypes) {
      getAllVisaTypes(function(response) {
        $scope.visaTypes = response;
      });
    }
  };

  $scope.changeFromDepartment = function() {
    if ($rootScope[position[2]].step0.fromDepartment) {
      $rootScope[position[2]].step0.VisaUseful = '以领馆批出为准';
    } else {
      $rootScope[position[2]].step0.VisaUseful = '';
    }
  };

  $scope.printDetail = function(){
    var data = document.getElementById('detail_content').innerHTML;
    commitPrintData('POST', baseUrl + 'common/printing/convertToHtml', {content: data}, '_blank');
  };

  $scope.addToWebsite = function(){
    addProductSyncInfo({Model:'BasicsVisa', ID:$rootScope[position[2]]._id.$id}, function(response){
      $rootScope[position[2]].info = "同步完成";
      console.log(response);
    });
  };

  $scope.addProduct = function(){
    if($rootScope[position[1]].needClearAddData){
      $scope.clearAddData();
    }
    $rootScope[position[1]].needClearAddData = false;
    $scope.fetch('product/visa/add?id=addVisaProduct', '');
    $scope.hideSubHeadInList();
    $scope.openItem();
  };

  $scope.confirmTransDeploy = function() {
    var deploy = _.find($scope.Dispatchers, function(item){
      return item._id.$id === $rootScope[position[2]].transDeployDeployInfo;
    });
    showWarningBox("确认要转移给" + deploy.FullName + "吗", function() {
      var param = {
        type: 6,
        product_id: $rootScope[position[2]]._id.$id,
        person_id: $rootScope[position[2]].transDeployDeployInfo
      };
      updateProductBelong(param, function(response) {
        $rootScope[position[2]].showTransDeploy = false;
        //修改详情页计调信息
        $rootScope[position[2]].Belong = {
          EmployeeDepartmentID: {$id: deploy.Department.ID.$id},
          EmployeeDepartmentName: "",
          EmployeeName: deploy.FullName,
          ForeignKeyID: {$id: $rootScope[position[2]].transDeployDeployInfo}
        };
        var target = _.find($rootScope[position[1]].list, function(item){
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if(undefined !== target && null !== target){
          target.Belong = angular.copy($rootScope[position[2]].Belong);
        }
      });
    });
  };

});
app.controller("productTicketController", function($scope, $filter, _, $rootScope, getAllScenicTypes, getAddrList, ticket,
  delTicket, ngDialog, getTicketInsurance, delTicketInsurance, getScenicTickets, addRefreshPageByID, addTicketInsurance,
delScenicById, showWarningBox, closeSubView, getEnumeration, addScenicTicket, saveScinecBasicData, addScinecBasicData,
saveStepStatus, saveDetailDescription, addProductSyncInfo) {

  $scope.openDialog = function(item) {
    var new_dialog = ngDialog
      .open({
        id: 'fromAService',
        template: '/public/angularView/common/components/crop.html',
        controller: 'crop',
        className: 'ngdialog-theme-default w-800',
        data: {
          imgRatio: 33 / 56,
          resImgWidth: 560,
          resImgHight: 330,
          uploadPicCallBack: function(data) {
            if (item) {
              item.PicPath = data.url;
              item.Title = data.name;
            } else {
              $rootScope[position[2]].step0.DefaultPic = data.url;
            }
          }
        }
      });
  };

  $scope.CutTypeList = [
    {
      ID: 1,
      Name: "返利"
    }
  ];

	$scope.arrow = {
		left:173,
		useArrow:true
	};

	$scope.popconf = {
		left:13,
		position:'bottom'
	};

	$scope.delScenicInfo = function(){
		showWarningBox('是否确认删除景点信息？', function(){
			delScenicById(function(response){
				console.log(response);
				$rootScope[position[2]].info = '删除成功';
				$rootScope[position[1]].list = _.without($rootScope[position[1]].list, _.find($rootScope[position[1]].list, function(item){
					return item._id.$id == $rootScope[position[2]]._id.$id;
				}));
				closeSubView();
			}, $rootScope[position[2]]._id.$id);
		});
	};

  //切换步骤，只有当前步骤填写完成后才能进行下一步
  $scope.switchStep = function(step) {
    var currentStep = $rootScope[position[2]].addTicketStep;
    if (step <= currentStep) {
      $rootScope[position[2]].addTicketStep = step;
      $scope.loadStepData(step);
    } else if (step == (currentStep + 1)) {
      if ($scope.isStepComplete(currentStep)) {
        $scope.addOneStep();
      }
    } else if ($scope.isStepComplete(step - 1)) {
      $rootScope[position[2]].addTicketStep = step;
      $scope.loadStepData(step);
    }
  };

  //进行下一步
  $scope.addOneStep = function() {
    var currentStep = $rootScope[position[2]].addTicketStep;
    if ($scope.isStepComplete(currentStep)) {
      if ($rootScope[position[2]].finishedStatus < currentStep) {
        $rootScope[position[2]].finishedStatus = currentStep;
      }
      $rootScope[position[2]].addTicketStep++;
      $scope.loadStepData($rootScope[position[2]].addTicketStep);
    }
  };

  //判断当前步骤内容是否完成，未完成，提示相应信息
  $scope.isStepComplete = function(step) {
    var currentStep = $rootScope[position[2]].addTicketStep;
    switch (step) {
      case 0:
        if ($rootScope[position[2]].step0.Title === null || $rootScope[position[2]].step0.Title === "") {
          $rootScope[position[2]].info = '请填写景区名称！';
          return false;
        }
        if ($rootScope[position[2]].step0.Type === null || $rootScope[position[2]].step0.Type === "") {
          $rootScope[position[2]].info = '请选择景区级别！';
          return false;
        }
        if ($rootScope[position[2]].step0.country === null || $rootScope[position[2]].step0.country === "") {
          $rootScope[position[2]].info = '请选择国家！';
          return false;
        }
        if ($rootScope[position[2]].step0.region === null || $rootScope[position[2]].step0.region === "") {
          $rootScope[position[2]].info = '请选择省份！';
          return false;
        }
        // if($rootScope[position[2]].step0.city === null || $rootScope[position[2]].step0.city === ""){
        // 	$rootScope[position[2]].info = '请选择城市！';
        //   return false;
        // }
        if ($rootScope[position[2]].step0.Address === null || $rootScope[position[2]].step0.Address === "") {
          $rootScope[position[2]].info = '请填写详细地址！';
          return false;
        }
        if ($rootScope[position[2]].step0.BrieDescription === null || $rootScope[position[2]].step0.BrieDescription === "") {
          $rootScope[position[2]].info = '请填写简要描述！';
          return false;
        }
        if (!$rootScope[position[2]].StepStatus) {
          $rootScope[position[2]].StepStatus = [];
        }
        $rootScope[position[2]].StepStatus[0] = {
          status: 1
        };
        return $scope.saveScinecBasicData();
      case 1:
        if (!$rootScope[position[2]].StepStatus) {
          $rootScope[position[2]].StepStatus = [];
        }
        $rootScope[position[2]].StepStatus[1] = {
          status: 1
        };
        $scope.saveDetailDescription();
				saveStepStatus($rootScope[position[2]]._id.$id, 2, 5, function() {
				});
				$scope.clearDetailInfo();
        break;
      case 2:
        if (!$rootScope[position[2]].StepStatus) {
          $rootScope[position[2]].StepStatus = [];
        }
        $rootScope[position[2]].StepStatus[2] = {
          status: 1
        };
				saveStepStatus($rootScope[position[2]]._id.$id, 3, 5, function() {
				});
				$scope.clearDetailInfo();
        break;
      case 3:
        if (!$rootScope[position[2]].StepStatus) {
          $rootScope[position[2]].StepStatus = [];
        }
        $rootScope[position[2]].StepStatus[3] = {
          status: 1
        };
				saveStepStatus($rootScope[position[2]]._id.$id, 4, 5, function() {
				});
				$scope.clearDetailInfo();
        break;
      case 4:
        if (!$rootScope[position[2]].StepStatus) {
          $rootScope[position[2]].StepStatus = [];
        }
        $rootScope[position[2]].StepStatus[4] = {
          status: 1
        };
				saveStepStatus($rootScope[position[2]]._id.$id, 5, 5, function() {
				});
				$scope.clearDetailInfo();
				$scope.clearAddData();
        break;
      default:

    }
    return true;
  };

  //加载相应步骤的数据
  $scope.loadStepData = function(step) {
    switch (step) {
      case 0:
        break;
      case 1:
        if (!$rootScope[position[2]].step1) {
          $rootScope[position[2]].step1 = {};
        }

        break;
      case 2:
        //获取门票数据
        if (!$rootScope[position[2]].step2) {
          $rootScope[position[2]].step2 = {};
        }
				$rootScope[position[2]].step2.cooperateCom = {};
        if ($rootScope[position[2]]._id) {
          getScenicTickets(function(response) {
            if (response && response.length > 0) {
              $rootScope[position[2]].hasTickets = true;
              $rootScope[position[2]].tickets = response;
            } else {
              $rootScope[position[2]].hasTickets = false;
              $rootScope[position[2]].tickets = [];
            }
          }, $rootScope[position[2]]._id.$id);
					getEnumeration('EPayConfirm', function(response){
						$rootScope[position[2]].PayConfirm = response[0];
						$scope.EPayConfirms = response;
					});
        }
        break;
      case 3:
        //获取保险数据
        if (!$rootScope[position[2]].step3) {
          $rootScope[position[2]].step3 = {};
        }
        $rootScope[position[2]].step3.addData = [];
        $rootScope[position[2]].step3.removeData = [];
        $rootScope[position[2]].step3.insurancesTemp = [];
        if ($rootScope[position[2]].Insurances) {
          $rootScope[position[2]].step3.Insurances = $rootScope[position[2]].Insurances;
        } else {
          $rootScope[position[2]].step3.Insurances = [];
        }
        if ($rootScope[position[2]].step3.Insurances.length > 0) {
          $rootScope[position[2]].step3.insurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
        }
        break;
      case 4:
        if (!$rootScope[position[2]].step4) {
          $rootScope[position[2]].step4 = {};
        }
        break;
      default:

    }
  };

	//保存景点基本信息
  $scope.saveScinecBasicData = function(){
    var param = {};
    if(!$rootScope[position[2]].step0.Title){
      $rootScope[position[2]].info = '请输入景区名称';
      return false;
    }

    if(!$rootScope[position[2]].step0.Type){
      $rootScope[position[2]].info = '请选择景区级别';
      return false;
    }

    if(!$rootScope[position[2]].step0.city&&!$rootScope[position[2]].step0.region&&!$rootScope[position[2]].step0.country){
      $rootScope[position[2]].info = '请选择景区地址';
      return false;
    }

    if(!$rootScope[position[2]].step0.BrieDescription){
      $rootScope[position[2]].info = '请填写简要描述';
      return false;
    }

    param.Title = $rootScope[position[2]].step0.Title;
    param.Address = $rootScope[position[2]].step0.Address;
    param.BrieDescription = $rootScope[position[2]].step0.BrieDescription;
    param.TypeId = $rootScope[position[2]].step0.Type._id.$id;
    param.DefaultPic = $rootScope[position[2]].step0.DefaultPic;
		param.Theme = [];
		param.Pics = [];
		$rootScope[position[2]].ownerships.forEach(function(item){
			if(item.isSelected){
				param.Theme.push(item._id);
			}
		});
		var i = 1;
		$rootScope[position[2]].step0.Pics.forEach(function(pic){
			if(pic.PicPath){
				param.Pics.push({
					Title: pic.Title,
					PicPath: pic.PicPath,
					Notes: "",
					OrderBy: i
				});
				i++;
			}
		});
		if($rootScope[position[2]].step0.city && $rootScope[position[2]].step0.city.Title){
			param.ProductGADDRId = $rootScope[position[2]].step0.city._id.$id;
		}else if($rootScope[position[2]].step0.region && $rootScope[position[2]].step0.region.Title){
			param.ProductGADDRId = $rootScope[position[2]].step0.region._id.$id;
		}else if($rootScope[position[2]].step0.country && $rootScope[position[2]].step0.country.Title){
			param.ProductGADDRId = $rootScope[position[2]].step0.country._id.$id;
		}
		var countryName = "";
		// if($rootScope[position[2]].step0.country._id.$id == "000000000000000000000000" || $rootScope[position[2]].step0.country._id.$id == "000000000000000000000001"){
		// 	countryName = $rootScope[position[2]].step0.country.Title;
		// }else{
			countryName = $rootScope[position[2]].step0.region.Title;
		// }
		if($rootScope[position[2]]._id){
			param.id = $rootScope[position[2]]._id.$id;
			saveScinecBasicData(function(response){
				var scenic = _.find($rootScope[position[1]].list, function(item){
					return item._id.$id === $rootScope[position[2]]._id.$id;
				});
				if(undefined !== scenic){
					scenic.Title = param.Title;
					scenic.Type = $rootScope[position[2]].step0.Type;
					scenic.Address = param.Address;
					scenic.countryName = countryName;
				}
				saveStepStatus($rootScope[position[2]]._id.$id, 1, 5, function() {
				});
				$scope.clearDetailInfo();
			}, param);
		}else{
			addScinecBasicData(function(response){
				param._id = {$id: response.data[0]};
				$rootScope[position[2]]._id = {$id: response.data[0]};
				$rootScope[position[2]].showUrl = "product/ticket/detail?id=" + response.data[0];
				var item = {
					_id: {$id: response.data[0]},
          ProductNo: response.data[1],
					countryName: countryName,
					Title: param.Title,
					Type: {Name: $rootScope[position[2]].step0.Type.Name},
					Address: param.Address
				};
				saveStepStatus($rootScope[position[2]]._id.$id, 1, 5, function() {
				});
				item.showUrl = $rootScope[position[2]].showUrl;
				$rootScope[position[1]].list.unshift(item);
        $rootScope[position[1]].needClearAddData = true;
			}, param);
		}

    return true;

  };

  //获取所有景点级别
  $scope.getScenicTypes = function() {
    if (!$scope.scenicTypes) {
      getAllScenicTypes(function(response) {
        $scope.scenicTypes = response.list;
      });
    }
  };

  //获取选择国家的省份
  $scope.getRegions = function(country, pos) {
    if (country) {
      var contryId = country._id.$id;
      getAddrList(function(response) {
        if (pos) {
          $rootScope[position[pos]].step0.regions = response;
        } else {
          $scope.regions = response;
        }
      }, contryId);
    }
  };

  //获取选择省份的城市
  $scope.getCities = function(region, pos) {
    if (region) {
      var regionId = region._id.$id;
      getAddrList(function(response) {
        if (pos) {
          $rootScope[position[pos]].step0.cities = response;
        } else {
          $scope.cities = response;
        }
      }, regionId);
    }
  };

  //列表页筛选搜索景点信息
  $scope.searchPro = function(disType) {
    console.log($rootScope[position[1]].Title);
    if (disType == 1) {
      $rootScope[position[1]].ProductGADDR = $rootScope[position[1]].country;
      $rootScope[position[1]].region = null;
      $rootScope[position[1]].regions = null;
      $rootScope[position[1]].city = null;
      $rootScope[position[1]].cities = null;
    } else if (disType == 2) {
      $rootScope[position[1]].ProductGADDR = $rootScope[position[1]].region;
      $rootScope[position[1]].city = null;
      $rootScope[position[1]].cities = null;
    } else if (disType == 3) {
      $rootScope[position[1]].ProductGADDR = $rootScope[position[1]].city;
    }
    var scenicTypeId = "";
    if ($rootScope[position[1]].scenicType && $rootScope[position[1]].scenicType._id) {
      scenicTypeId = $rootScope[position[1]].scenicType._id.$id;
    }
    $rootScope[position[1]].search = {
      page: 1,
      Title: $rootScope[position[1]].Title,
      ProductGADDRId: $rootScope[position[1]].ProductGADDR ? $rootScope[position[1]].ProductGADDR._id.$id : '',
      TypeId: scenicTypeId,
    };
    ticket.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, $rootScope[position[1]].search);
  };

  //滚动到最后加载数据
  $scope.loadListData = function(viewID) {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {};
    }
    $rootScope[position[1]].search.page += 1;
    ticket.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
    }, $rootScope[position[1]].search);
  };

  //删除景点门票
  $scope.delTicket = function(item) {
		showWarningBox('确定要删除门票吗？', function(){
			delTicket(function(response) {
        $rootScope[position[2]].tickets = _.without($rootScope[position[2]].tickets, item);
	    }, item._id.$id);
		});
  };

  $scope.addTitle = function() {
    $rootScope[position[2]].showTitle = !$rootScope[position[2]].showTitle;
  };

  $scope.changeTitle = function() {
    $rootScope[position[2]].step1.title = $rootScope[position[2]].step1.tempTitle;
    $rootScope[position[2]].showTitle = false;
  };

  //点击添加门票
  $scope.addTickets = function() {
    $rootScope[position[2]].isAddTickets = true;
		$rootScope[position[2]].step2 = {};
		$rootScope[position[2]].step2.cooperateCom = {};
  };

  //点击添加保险
  $scope.addInsurance = function() {
    $rootScope[position[2]].isAddInsurance = true;
  };

  //删除保险
  $scope.removeInsurance = function(item) {
     showWarningBox('确定要删除保险吗', function(){
    delTicketInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(response) {
      $rootScope[position[2]].step3.insurances = _.without($rootScope[position[2]].step3.insurances, item);
      $rootScope[position[2]].step3.insurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
    });
    });
  };
  //取消添加保险
  $scope.cancelInsuranceAdd = function() {
    $rootScope[position[2]].isAddInsurance = false;
  };

  //确认添加保险
  $scope.confirmInsuranceAdd = function() {
    $rootScope[position[2]].isAddInsurance = false;
    //提交数据
    if ($rootScope[position[2]].step3.insurancesTemp.length > 0) {
      $rootScope[position[2]].step3.Insurances = angular.copy($rootScope[position[2]].step3.insurancesTemp);
    } else {
      $rootScope[position[2]].step3.Insurances = [];
    }
    //添加保险

    addTicketInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step3.addData, function(data) {
      $rootScope[position[2]].step3.insurances.forEach(function(insurance) {
        data.forEach(function(item) {
          if (insurance.ProductInsuranceNo === item.ProductInsuranceNo) {
            insurance.baseid = {};
            insurance.baseid.$id = item.baseid.$id;
          }
        });
      });
    });
    $rootScope[position[2]].step3.addData = [];
    //删除保险
    $rootScope[position[2]].step3.removeData.forEach(function(item) {
      delTicketInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {
        console.log(data);
      });
    });
    $rootScope[position[2]].step3.removeData = [];
    $rootScope[position[2]].Insurances = $rootScope[position[2]].step3.Insurances;

  };

  //取消添加门票
  $scope.cancelTicketAdd = function() {
    $rootScope[position[2]].isAddTickets = false;
  };

	$scope.openDatePicker = function($event, type) {
    if(!$rootScope[position[2]].status){
      $rootScope[position[2]].status = {};
    }
    $rootScope[position[2]].status[type] = true;
  };

  //确认添加门票
  $scope.confirmTicketAdd = function() {
    if ($scope.ticketComplete()) {
      //提交数据
      var data = {};
      data.Title= $rootScope[position[2]].step2.Title;
			data.PayConfirm = {};
			data.PayConfirm.ID= $rootScope[position[2]].step2.PayConfirm.Value;
			data.PayConfirm.Name= $rootScope[position[2]].step2.PayConfirm.Text;
			data.StartTime = $filter('date')($rootScope[position[2]].step2.StartTime, 'yyyy-MM-dd HH:mm:ss');
			data.EndTime = $filter('date')($rootScope[position[2]].step2.EndTime, 'yyyy-MM-dd HH:mm:ss');
			data.GCOMPID = $rootScope[position[2]].step2.cooperateCom.ID;
			data.GCOMPTitle = $rootScope[position[2]].step2.cooperateCom.Name;
      data.DefaultPrice= $rootScope[position[2]].step2.DefaultPrice;
      data.AgentDefaultPrice= $rootScope[position[2]].step2.AgentDefaultPrice;
      data.BeforeHour= $rootScope[position[2]].step2.BeforeHour;
      data.BookingMin= $rootScope[position[2]].step2.BookingMin;
      data.BookingMax= $rootScope[position[2]].step2.BookingMax;
      data.HoldCount= $rootScope[position[2]].step2.HoldCount;
      data.RemainCount= $rootScope[position[2]].step2.RemainCount;
      data.SaleCount= $rootScope[position[2]].step2.SaleCount;
      data.Number= $rootScope[position[2]].step2.Number;
      data.CostDefaultPrice= $rootScope[position[2]].step2.CostDefaultPrice;
      data.ParValue= $rootScope[position[2]].step2.ParValue;
      data.CutMoney= $rootScope[position[2]].step2.CutMoney;
      data.CutType = {ID: $rootScope[position[2]].step2.CutType.ID, Name: $rootScope[position[2]].step2.CutType.Name};
      data.ReservationDescription= $rootScope[position[2]].step2.ReservationDescription;
      data.UnsubscribeInstructions= $rootScope[position[2]].step2.UnsubscribeInstructions;
      //垃圾信息
			data.ThreeVerification = 0;
			data.ThreeNo = "";
			data.ThreeSource = "";
			data.ThreeName = "";
			data.ThreeDesc = "";
			data.ThreeVerificationNotes = "";
      $rootScope[position[2]].isAddTickets = false;
			addScenicTicket(function(response){
				$rootScope[position[2]].hasTickets = true;
				$rootScope[position[2]].tickets.push(response);
			}, $rootScope[position[2]]._id.$id, data);
    }
  };

  //判断门票是否完成
  $scope.ticketComplete = function() {
      if (!$rootScope[position[2]].step2.Title) {
        $rootScope[position[2]].info = "请填写门票标题";
        return false;
      }
      if (!$rootScope[position[2]].step2.StartTime) {
        $rootScope[position[2]].info = "请选择开始时间";
        return false;
      }
      if (!$rootScope[position[2]].step2.EndTime) {
        $rootScope[position[2]].info = "请选择结束时间";
        return false;
      }
      if (!$rootScope[position[2]].step2.DefaultPrice) {
        $rootScope[position[2]].info = "请填写销售价格";
        return false;
      }

      if (!$rootScope[position[2]].step2.AgentDefaultPrice) {
        $rootScope[position[2]].info = "请填写代理价格";
        return false;
      }
      if (!$rootScope[position[2]].step2.CostDefaultPrice) {
        $rootScope[position[2]].info = "请填写结算价格";
        return false;
      }
      if (!$rootScope[position[2]].step2.ParValue) {
        $rootScope[position[2]].info = "请填写票面价格";
        return false;
      }

      if (!$rootScope[position[2]].step2.Number) {
        $rootScope[position[2]].info = "请填写包含人数";
        return false;
      }
      if (!$rootScope[position[2]].step2.BeforeHour) {
        $rootScope[position[2]].info = "请填写提前预定";
        return false;
      }

      if (!$rootScope[position[2]].step2.BookingMin) {
        $rootScope[position[2]].info = "请填写最少预定";
        return false;
      }

      if (!$rootScope[position[2]].step2.BookingMax) {
        $rootScope[position[2]].info = "请填写最多预定";
        return false;
      }
      if (!$rootScope[position[2]].step2.PayConfirm) {
        $rootScope[position[2]].info = "请选择支付形式";
        return false;
      }



      if (!$rootScope[position[2]].step2.SaleCount) {
        $rootScope[position[2]].info = "请填写预售数量";
        return false;
      }

      if (!$rootScope[position[2]].step2.HoldCount) {
        $rootScope[position[2]].info = "请填写保留数量";
        return false;
      }


      if (!$rootScope[position[2]].step2.RemainCount) {
        $rootScope[position[2]].info = "请填写库存数量";
        return false;
      }

    return true;
  };

  //确认添加第三方认证
  $scope.confirmThirdAdd = function() {
    if ($scope.thirdComplete()) {
      $rootScope[position[2]].hasThirdPart = false;
      $rootScope[position[2]].step2.ThreeNo = $rootScope[position[2]].step2.ThreeNoTmp;
      $rootScope[position[2]].step2.ThreeName = $rootScope[position[2]].step2.ThreeNameTmp;
      $rootScope[position[2]].step2.ThreeDesc = $rootScope[position[2]].step2.ThreeDescTmp;
      $rootScope[position[2]].step2.ThreeVerificationNotes = $rootScope[position[2]].step2.ThreeVerificationNotesTmp;
    }
  };

  //改变三方认证状态
  $scope.thirdPartState = function(state) {
    if (!state) {
      $rootScope[position[2]].step2.ThreeNo = "";
      $rootScope[position[2]].step2.ThreeName = "";
      $rootScope[position[2]].step2.ThreeDesc = "";
      $rootScope[position[2]].step2.ThreeVerificationNotes = "";
    }
    $rootScope[position[2]].hasThirdPart = state;
  };

  //判断第三方认证是否完成
  $scope.thirdComplete = function() {

    return true;
  };

  //取消添加第三方认证
  $scope.cancelThirdAdd = function() {
    $rootScope[position[2]].hasThirdPart = false;
  };

  //新添加景点
  $scope.refreshScenicAdd = function() {
    $scope.fetch('product/ticket/add?id=addTicketProduct', '');
    $scope.openItem();
  };

	$scope.clearAddData = function() {
		$scope.switchStep(0);
		if (!$rootScope[position[2]].isEditMode) {
			addRefreshPageByID('product-ticket-add-id-addTicketProduct');
		}
	};

	$scope.clearDetailInfo = function() {
		addRefreshPageByID('product-ticket-detail-id-' + $rootScope[position[2]]._id.$id);
	};

  $scope.printDetail = function(){
    var data = document.getElementById('detail_content').innerHTML;
    commitPrintData('POST', baseUrl + 'common/printing/convertToHtml', {content: data}, '_blank');
  };

  $scope.addToWebsite = function(){
    addProductSyncInfo({Model:'BasicsScenic', ID:$rootScope[position[2]]._id.$id}, function(response){
      $rootScope[position[2]].info = "同步完成";
      console.log(response);
    });
  };

  $scope.addProduct = function(){
    if($rootScope[position[1]].needClearAddData){
      console.log('clear');
      $scope.clearAddData();
    }
    $rootScope[position[1]].needClearAddData = false;
    $scope.fetch('product/ticket/add?id=addTicketProduct', '');
    $scope.hideSubHeadInList();
    $scope.openItem();
  };

  $scope.saveDetailDescription = function(){
    saveDetailDescription($rootScope[position[2]]._id.$id, $rootScope[position[2]].step1.content, function(response){
      console.log(response);
    });
  };

});
app.controller("productCruiseController", function($scope, $rootScope, ngDialog, cruise, addRefreshPageByID, findInnerObjIndex, getPersonnel, addProductSyncInfo,
  delCruiseInsurance, addCruiseInsurance, showWarningBox, editCruiseExpand, AddSightseeing, saveStepStatus, delCruisePackage, saveBaseCruise, getCruiseExpand,
  getTeamtourPlanList, updateProductShowStatus, addBaseCruise, delCruiseProduct, closeSubView, $filter, editCruiseSightseeing, updateProductBelong) {
  $rootScope[position[2]].calendarOptions = {
    calendarClass: "datetimePicker",
    headClass: "calHead",
    bodyClass: "calBody",
    footClass: "calFoot",
    headDateClass: "calHeadDate",
    useShort: true,

    fillDay: function(day, date) {
      if (!$rootScope[position[2]].prductPlanList) {
        $rootScope[position[2]].prductPlanList = [];
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === date.getTime() / 1000;
      });
      var html = '<div class="cell_date">' + $filter('date')(date, 'dd') + '</div>';
      if (undefined !== planDetail) {
        html = '<div class="cell_date yw">' + $filter('date')(date, 'dd') + '</div>';
        var MorethanNumber = planDetail.MorethanNumber && planDetail.MorethanNumber !== '' ? planDetail.MorethanNumber : 0;
        MorethanNumber = parseInt(MorethanNumber);
        // MorethanNumber = MorethanNumber > 9 ? '<span class="gT">库存充足</span>' : '库存：<font>' + MorethanNumber + '</font>';
        MorethanNumber = '库存:<font>' + MorethanNumber + '</font>';
        var price = '价格无';
        if (undefined !== planDetail.ProductPlanPrice && null !== planDetail.ProductPlanPrice && planDetail.ProductPlanPrice.length > 0) {
          var tempPrice = 0;
          var hasexisted = false;
          planDetail.ProductPlanPrice.forEach(function(thePrice, theIndex){
          if (null !== thePrice.Deductiblevoucher && "" !== thePrice.Deductiblevoucher) {
              if(thePrice.Deductiblevoucher!==0){
                if(!hasexisted){
                  html = '<span class="offset">抵</span>' + html;
                  //已经出现过了的标志
                  hasexisted = true;
                }
              }
          }
            if(0 === theIndex){
              tempPrice = thePrice.DefaultPrice;
            }else{
              if(thePrice.DefaultPrice < tempPrice){
                tempPrice = thePrice.DefaultPrice;
              }
            }
          });
          price = '￥' + tempPrice;
        }
        html += '<div class="priceRow">' + price + '</div><div class="seatRow">' + MorethanNumber + '</div>';
      }
      return html;
    },

    monthChange: function(datetime) {
      if ($rootScope[position[2]]._id) {
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]]._id.$id,
          StartTime: $filter('date')(datetime, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].reFill = true;
        });
      }
    }
  };
  var BookingNotes="1.本产品不接受6个月以下婴儿及旅游行程结束前已怀孕24周的游客预订，不到24周的孕妇请提供1份医院证明；\n2.18周岁以下未成年人至少有1名家长或1名成年游客全程陪同，非父母陪同出行需提供父母委托书；\n3.65周岁以上的老年人，请自行准备1份本年三甲级医院体检报告证明。70周岁以上的老年人，不接受单人报名出行。80周岁以上的老年人，需直系亲属陪同前往；\n4.鉴于一般邮轮套房及以下的房间面积有限，如果您申请四人入住一间，建议为2成人2儿童，如均为成人，空间会相当拥挤，望您谅解；\n5.邮轮乘客必须每人占床位；\n6.本邮轮产品预订生效后，当旅客不适合开始或继续航行，或可能对船上其他人员的健康、安全造成危险的，船长有权利在任何时候，视情况作出以下决定：\n1）拒绝该旅客登船；\n2）在任意港口让该旅客下船；\n3）拒绝该旅客在任何特定港口下船；\n4）限制该旅客在邮轮的特定区域或不允许该旅客参与船上的某些活动；\n7.在下列情况下，船长有权自行对航行范围作出修改、变更停靠港口的顺序，变更或取消停靠港口：\n1）因不可抗力或其他超过船长或船主的控制范围的情形；\n2）为了旅客和邮轮的安全性而有必要的；\n3）为了使邮轮上的任何人获得岸上医疗或手术治疗；\n4）任何其他可能发生的紧急情况，包括因特殊情况引起的燃料问题，船长的决定是最终决定；\n8.在出发前或航程期间，邮轮公司有权根据天气、战争、罢工等不可抗力因素调整或改变行程，对此我社将不承担任何赔偿责任。游客应积极配合并接受对行程的合理调整，在调整过程中发生的额外费用，则由游客承担。如因此少停靠港口，我社将退还此港口的港务费。"
  getPersonnel({
    label: 1008,
    limit: 200
  }, function(data) {
    $scope.Dispatchers = data.list;
  });

  $scope.operate = {
    showPlanDetail: function(planDetailId) {
      if (this.showPlanDetailId == planDetailId) {
        this.showPlanDetailId = "";
      } else {
        this.showPlanDetailId = planDetailId;
      }

    },
    showPlanDetailId: ""
  };

  $scope.loadCruiseListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {};
    }
    $rootScope[position[1]].search.page += 1;
    cruise.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, $rootScope[position[1]].search);
  };

  $scope.openDialog = function(item) {
    var new_dialog = ngDialog
      .open({
        id: 'fromAService',
        template: '/public/angularView/common/components/crop.html',
        controller: 'crop',
        className: 'ngdialog-theme-default w-800',
        data: {
          imgRatio: 33 / 56,
          resImgWidth: 560,
          resImgHight: 330,
          uploadPicCallBack: function(data) {
            if (item) {
              item.PicPath = data.url;
              item.Title = data.name;
            } else {
              $rootScope[position[2]].step0.DefaultPic = data.url;
            }
          }
        }
      });
  };

  $scope.searchPro = function() {
    $rootScope[position[1]].search = {
      page: 1,
      Title: $rootScope[position[1]].Title,
      EmployeeDepartmentID: $rootScope[position[1]].EmployeeDepartment ? $rootScope[position[1]].EmployeeDepartment._id.$id : '',
      StartGADDRId: $rootScope[position[1]].StartGADDR ? $rootScope[position[1]].StartGADDR.GADDRID.$id : '',
      ShowStatus: $rootScope[position[1]].ShowStatus ? $rootScope[position[1]].ShowStatus.value : '',
      AddTime: $rootScope[position[1]].orderType ? $rootScope[position[1]].orderType.value : '',
    };
    cruise.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, $rootScope[position[1]].search);
  };

  //切换步骤，只有当前步骤填写完成后才能进行下一步
  $scope.switchStep = function(step) {
    if ($rootScope[position[2]].finishedStatus < step) {
      if ($rootScope[position[2]].finishedStatus === 0) {
        $rootScope[position[2]].info = '请先完成基本信息！';
      } else if ($rootScope[position[2]].finishedStatus == 1) {
        $rootScope[position[2]].info = '请先完成行程设置！';
      } else if ($rootScope[position[2]].finishedStatus == 2) {
        $rootScope[position[2]].info = '请先完成保险！';
      } else if ($rootScope[position[2]].finishedStatus == 3) {
        $rootScope[position[2]].info = '请先完成岸上观光套餐！';
      } else if ($rootScope[position[2]].finishedStatus == 4) {
        $rootScope[position[2]].info = '请先完成扩展说明！';
      }
      return;
    }

    var currentStep = $rootScope[position[2]].addCruiseStep;
    if (step <= currentStep) {
      $rootScope[position[2]].addCruiseStep = step;
      $scope.loadStepData(step);
    } else if (step == (currentStep + 1)) {
      if(currentStep===0){
        $scope.isSwitchStep = true;
      }

      if ($scope.isStepComplete(currentStep)) {
         $scope.addOneStep(true);
       }
    } else if ($scope.isStepComplete(step - 1)) {
      $rootScope[position[2]].addCruiseStep = step;
      $scope.loadStepData(step);
    }
  };

  //进行下一步
  $scope.addOneStep = function(isSkip) {
    var currentStep = $rootScope[position[2]].addCruiseStep;
    if (isSkip) {
      if ($rootScope[position[2]].finishedStatus < currentStep) {
        $rootScope[position[2]].finishedStatus = currentStep;
      }
      $rootScope[position[2]].addCruiseStep++;
      $scope.loadStepData($rootScope[position[2]].addCruiseStep);
    } else {
      if ($scope.isStepComplete(currentStep)) {
        if ($rootScope[position[2]].finishedStatus < currentStep) {
          $rootScope[position[2]].finishedStatus = currentStep;
        }
        if($rootScope[position[2]].addCruiseStep!==0){
          $rootScope[position[2]].addCruiseStep++;
        }
          $scope.loadStepData($rootScope[position[2]].addCruiseStep);
      }
    }
  };

  //判断当前步骤内容是否完成，未完成，提示相应信息，完成则调用接口保存内容
  $scope.isStepComplete = function(step) {
    if (!$rootScope[position[2]].StepStatus) {
      $rootScope[position[2]].StepStatus = [];
    }
    switch (step) {
      case 0:
        if (!$scope.step0Commit()){
        return false;
       }
        $rootScope[position[2]].StepStatus[0] = {
          status: 1
        };
        break;
      case 1:
        if (!$scope.step1Commit()){
        return false;
       }
        $rootScope[position[2]].StepStatus[1] = {
          status: 1
        };

        break;
      case 2:
       if (!$scope.step2Commit()) return false;
        $rootScope[position[2]].StepStatus[2] = {
          status: 1
        };
       break;
      case 3:
        if (!$scope.step3Commit()) return false;
        $rootScope[position[2]].StepStatus[3] = {
          status: 1
        };
        break;
      case 4:
      if (!$scope.step4Commit()) return false;
        $rootScope[position[2]].StepStatus[4] = {
          status: 1
        };

        break;
      case 5:
        $rootScope[position[2]].StepStatus[5] = {
          status: 1
        };
        break;
      default:

    }

    return true;
  };


  //加载相应步骤的数据
  $scope.loadStepData = function(step) {
    switch (step) {
      case 0:
        break;
      case 1:
        break;
      case 2:
        if (!$rootScope[position[2]].step2) {
          $rootScope[position[2]].step2 = {};
        }
        $rootScope[position[2]].step2.addData = [];
        $rootScope[position[2]].step2.removeData = [];
        $rootScope[position[2]].step2.insurancesTemp = [];
        if ($rootScope[position[2]].Insurances) {
          $rootScope[position[2]].step2.Insurances = $rootScope[position[2]].Insurances;
        } else {
          $rootScope[position[2]].step2.Insurances = [];
        }
        if ($rootScope[position[2]].step2.Insurances.length > 0) {
          $rootScope[position[2]].step2.insurancesTemp = angular.copy($rootScope[position[2]].step2.Insurances);
        }
        break;
      case 3:
        if (!$rootScope[position[2]].step3) {
          $rootScope[position[2]].step3 = {};
        }
        $rootScope[position[2]].step3.Packages = $rootScope[position[2]].Packages;
        break;
      case 4:
        if (!$rootScope[position[2]].step4) {
          $rootScope[position[2]].step4 = {};
        }
        getCruiseExpand($rootScope[position[2]]._id.$id, function(response) {
          $rootScope[position[2]].step4 = response;
          $rootScope[position[2]].step4.aboutShow = 0;
          if(!$rootScope[position[2]].isEditMode){
            $rootScope[position[2]].step4.BookingNotes=BookingNotes;
          }
        });
        break;
      default:

    }
  };

  $scope.step0Commit = function() {

    var commitData = {};
    if ($rootScope[position[2]]._id && $rootScope[position[2]]._id.$id) {
      commitData.id = $rootScope[position[2]]._id.$id;
    }
    if (!$rootScope[position[2]].step0.Title) {
      $rootScope[position[2]].info = '请填写线路名称';
      return false;
    }
    //标题
    commitData.Title = $rootScope[position[2]].step0.Title;
    //副标题
    commitData.SubTitle = $rootScope[position[2]].step0.SubTitle;
    //默认图片
    commitData.DefaultPic = $rootScope[position[2]].step0.DefaultPic;


    //选择邮轮
    if (!$rootScope[position[2]].step0.cruise) {
      $rootScope[position[2]].info = '请选择邮轮';
      return false;
    }
    commitData.CruiseID = $rootScope[position[2]].step0.cruise._id.$id;
      //选择线路
   if ($rootScope[position[2]].step0.CruiseLines) {
      //线路ID
      commitData.CruiseLineID = $rootScope[position[2]].step0.CruiseLines.ForeignKeyID.$id;
      //出游天数
      commitData.TravelDays = $rootScope[position[2]].step0.CruiseLines.Days;
      //住宿天数
      commitData.LateNight = $rootScope[position[2]].step0.CruiseLines.Nights;

    }else{
          $rootScope[position[2]].info = '请选择线路';
      return false;
    }
    //线路类别
    if($rootScope[position[2]].step0.RouteType){
      commitData.RouteTypeID = $rootScope[position[2]].step0.RouteType.ID;
    }else{
      commitData.RouteTypeID="";
    }
    //邮轮航线
    if (!$rootScope[position[2]].step0.CruiseRoute) {
      $rootScope[position[2]].info = '请选择邮轮航线';
      return false;
    }
    commitData.CruiseRouteID = $rootScope[position[2]].step0.CruiseRoute._id.$id;
    //出发地
    commitData.StartGADDR = $rootScope[position[2]].step0.StartGADDR.GADDRID.$id;
    if (!$rootScope[position[2]].step0.MainDestination) {
      $rootScope[position[2]].info = '请选择目的地';
      return false;
    }

    //主目的地
    commitData.ProductGADDR = $rootScope[position[2]].step0.MainDestination.GADDRID.$id;


    //线路类别
    commitData.LineType = $rootScope[position[2]].step0.LineType.ID;

    //是否签证
    commitData.IsVisa = $rootScope[position[2]].step0.IsVisa;
    //设计室寄语
    commitData.LineFeatures = $rootScope[position[2]].step0.LineFeatures;
    //详细页轮显图
    commitData.Pics = [];
    var OrderBy = 0;
    $scope[position[2]].step0.Pics.forEach(function(pic) {
      if (pic.PicPath) {
        commitData.Pics.push({
          PicPath: pic.PicPath,
          Title: pic.Title,
          Notes: pic.PicPath,
          OrderBy: OrderBy
        });
        OrderBy++;
      }
    });
    //签证
    if ($scope[position[2]].step0.IsVisa == 1) {
      if ($scope[position[2]].step0.VisaList) {
        commitData.VisaCountry = [];
        $scope[position[2]].step0.VisaList.forEach(function(item) {
          commitData.VisaCountry.push(item.ForeignKeyID.$id);
        });
      }
    }

    //目的地
    commitData.GADDRs = [];
    if ($scope[position[2]].step0.destination) {
      $scope[position[2]].step0.destination.forEach(function(item) {
        commitData.GADDRs.push(item.GADDRID.$id);
      });
    }
    //产品类型
    commitData.ProductForm = [];
    for (i = 0; i < $rootScope[position[2]].productFormAll.length; i++) {
      if ($rootScope[position[2]].productFormAll[i].isSelect) {
        commitData.ProductForm.push($rootScope[position[2]].productFormAll[i].ID);
      }
    }
    //线路归属
    commitData.LineOwnership = [];
    for (i = 0; i < $rootScope[position[2]].productLineOwnership.length; i++) {
      if ($rootScope[position[2]].productLineOwnership[i].isSelect) {
        commitData.LineOwnership.push($rootScope[position[2]].productLineOwnership[i]._id.$id);
      }
    }
    //赠送礼品
    commitData.Gift = [];
    for (i = 0; i < $rootScope[position[2]].travelGoodsAll.length; i++) {
      if ($rootScope[position[2]].travelGoodsAll[i].isSelect) {
        commitData.Gift.push($rootScope[position[2]].travelGoodsAll[i].ID);
      }
    }
    //线路标签
    commitData.LineAttribute = [];
    for (i = 0; i < $rootScope[position[2]].productLineAttribute.length; i++) {
      if ($rootScope[position[2]].productLineAttribute[i].isSelect) {
        commitData.LineAttribute.push($rootScope[position[2]].productLineAttribute[i]._id.$id);
      }
    }

    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]]._id) {
      if($scope.isSwitchStep===true){
           $scope.isSwitchStep=false;
           $rootScope[position[2]].isCommit = false;
        }else{
          saveBaseCruise(commitData, function(response) {
          // $rootScope[position[2]].step0.Title = commitData.Title;
          $rootScope[position[2]].isCommit = false;
            $rootScope[position[2]].addCruiseStep++;
          $scope.loadStepData($rootScope[position[2]].addCruiseStep);
        });
        }
    } else {
      addBaseCruise(commitData, function(response) {
        $rootScope[position[2]]._id = {
          $id: response.data[0]
        };
        saveStepStatus($rootScope[position[2]]._id.$id, 1, 4, function() {
          $rootScope[position[2]].finishedStatus = 1;
          $rootScope[position[2]].isCommit = false;
          // $scope.switchStep(1);
          $rootScope[position[2]].addCruiseStep++;
          $scope.loadStepData($rootScope[position[2]].addCruiseStep);
        });
        var item = {
          _id: {
            $id: $rootScope[position[2]]._id.$id
          },
          showUrl: 'product/cruise/detail?id=' + $rootScope[position[2]]._id.$id,
          planUrl: 'product/cruisePlan/list?ProductID=' + $rootScope[position[2]]._id.$id + '&ProductName=' + $rootScope[position[2]].step0.Title + '&TravelDay=' + $rootScope[position[2]].step0.CruiseLines.Days,
          ProductNo: response.data[1],
          Title: $rootScope[position[2]].step0.Title,
          StartGADDR: {
            Title: $scope[position[2]].step0.StartGADDR.Title
          },
          PlanCount: 0,
          ShowStatus: 0,
          AddTime: {
            sec: new Date().getTime() / 1000
          },
          AddInfo: {
            EmployeeName: $rootScope.userinfo.FullName
          }
        };
        $rootScope[position[2]].showUrl = item.showUrl;
        $rootScope[position[2]].planUrl = item.planUrl;
        $rootScope[position[1]].needClearAddData = true;
        $rootScope[position[1]].list.unshift(item);
      });
    }
    return true;
  };

  //行程设置
  $scope.step1Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 2) {
      saveStepStatus($rootScope[position[2]]._id.$id, 2, 4, function() {
        $rootScope[position[2]].finishedStatus = 2;
        $rootScope[position[2]].isCommit = false;
      });
    } else {
      $rootScope[position[2]].isCommit = false;
    }
    return true;
  };
  //保险
  $scope.step2Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 3) {
      saveStepStatus($rootScope[position[2]]._id.$id, 3, 4, function() {
        $rootScope[position[2]].finishedStatus = 3;
        $rootScope[position[2]].isCommit = false;
      });
    } else {
      $rootScope[position[2]].isCommit = false;
    }
    return true;
  };
  //观光套餐
  $scope.step3Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 4) {
      saveStepStatus($rootScope[position[2]]._id.$id, 4, 4, function() {
        $rootScope[position[2]].finishedStatus = 4;
        $rootScope[position[2]].isCommit = false;
      });
    } else {
      $rootScope[position[2]].isCommit = false;
    }
    return true;
  };
  //扩展说明
  $scope.step4Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    $scope.saveExpand();
    if ($rootScope[position[2]].finishedStatus < 5) {
      saveStepStatus($rootScope[position[2]]._id.$id, 5, 4, function() {
        $rootScope[position[2]].finishedStatus = 5;
        $rootScope[position[2]].isCommit = false;
      });
    } else {
      $rootScope[position[2]].isCommit = false;
    }
    return true;
  };
  //完成
  $scope.step5Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 6) {
      saveStepStatus($rootScope[position[2]]._id.$id, 6, 4, function() {
        $rootScope[position[2]].finishedStatus = 6;
        $rootScope[position[2]].isCommit = false;
      });
    } else {
      $rootScope[position[2]].isCommit = false;
    }
    return true;
  };



  //保存扩展信息
  $scope.saveExpand = function() {
    var param = {

      FeeService: $rootScope[position[2]].step4.FeeService || "",

      BookingNotes: $rootScope[position[2]].step4.BookingNotes || "",

      AboutDragoman: $rootScope[position[2]].step4.AboutDragoman || "",

      model: $rootScope[position[2]].step4.model || "",

      AboutEatery: $rootScope[position[2]].step4.AboutEatery || "",

      AboutBuy: $rootScope[position[2]].step4.AboutBuy || "",

      AboutQuarter: $rootScope[position[2]].step4.AboutQuarter || "",

      AboutVisit: $rootScope[position[2]].step4.AboutVisit || "",

      Abouttraffic: $rootScope[position[2]].step4.Abouttraffic || "",

      Reminder: $rootScope[position[2]].step4.Reminder || ""
    };
    editCruiseExpand($rootScope[position[2]]._id.$id, param, function(response) {});
  };

  $scope.clearAddData = function() {
    $scope.switchStep(0);
    if (!$rootScope[position[2]].isEditMode) {
      addRefreshPageByID('product-teamtour-add-id-addCruiseProduct');
    }
  };


  $scope.addSubTitle = function() {
    $rootScope[position[2]].step0.needSubTitle = true;
  };

  $scope.removeSubTitle = function() {
    $rootScope[position[2]].step0.needSubTitle = false;
    $rootScope[position[2]].step0.SubTitle = '';
  };

  $scope.switchDestination = function(destination) {
    var index1 = _.findIndex($scope[position[2]].step0.destination, {
      Title: destination.Title
    });
    var index2 = _.findLastIndex($scope[position[2]].step0.destination, {
      Title: destination.Title
    });
    if (index1 != index2) {
      $scope[position[2]].step0.destination = _.uniq($scope[position[2]].step0.destination);
    }
    $scope[position[2]].step0.MainDestination = destination;
  };

  //新添加邮轮
  $scope.refreshCruiseAdd = function() {
    addRefreshPageByID($rootScope, $rootScope[switchType[2]].id);
  };

  $scope.unChooseSelectedVisa = function(item) {
    var visa = _.find($rootScope[position[2]].step0.VisaList, function(data) {
      return item.ForeignKeyID.$id === data.ForeignKeyID.$id;
    });
    if (undefined !== visa) {
      $rootScope[position[2]].step0.VisaList = _.without($rootScope[position[2]].step0.VisaList, visa);
    }
    $rootScope[position[2]].step0.VisaTemp = angular.copy($rootScope[position[2]].step0.VisaList);
  };

  $scope.saveSelectedVisaGroupTravel = function() {
    $rootScope[position[2]].step0.VisaList = angular.copy($rootScope[position[2]].step0.VisaTemp);
    $scope.showVise();
  };

  $scope.loadTeamourListData = function(viewID) {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {};
    }
    $rootScope[position[1]].search.page += 1;
    teamtour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, $rootScope[position[1]].search);
  };

  $scope.showVise = function(status) {
    if (status === undefined) {
      $rootScope[position[2]].step0.isShowVise = false;
    } else {
      $rootScope[position[2]].step0.VisaTemp = angular.copy($rootScope[position[2]].step0.VisaList);
      $rootScope[position[2]].step0.isShowVise = true;
    }
  };



  //点击添加保险
  $scope.addInsurance = function() {
    $rootScope[position[2]].isAddInsurance = true;
  };

  //删除保险
  $scope.removeInsurance = function(item) {
    showWarningBox('是否确认要删除保险？', function() {
      delCruiseInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(response) {
        $rootScope[position[2]].step2.Insurances = _.without($rootScope[position[2]].step2.Insurances, item);
        $rootScope[position[2]].step2.insurancesTemp = angular.copy($rootScope[position[2]].step2.Insurances);
      });
    });
  };



  //取消添加保险
  $scope.cancelInsuranceAdd = function() {
    $rootScope[position[2]].isAddInsurance = false;
  };

  //确认添加保险
  $scope.confirmInsuranceAdd = function() {
    $rootScope[position[2]].isAddInsurance = false;
    //提交数据
    if ($rootScope[position[2]].step2.insurancesTemp.length > 0) {
      $rootScope[position[2]].step2.Insurances = angular.copy($rootScope[position[2]].step2.insurancesTemp);
    } else {
      $rootScope[position[2]].step2.Insurances = [];
    }
    //添加保险
    addCruiseInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step2.addData, function(data) {
         $rootScope[position[2]].step2.Insurances.forEach(function(insurance) {
          data.forEach(function(item) {
            if (insurance.ProductInsuranceNo === item.ProductInsuranceNo) {
              insurance.baseid = {};
              insurance.baseid.$id = item.baseid.$id;
            }
          });
        });
    });
    $rootScope[position[2]].step2.addData = [];
    //删除保险
    $rootScope[position[2]].step2.removeData.forEach(function(item) {
      delCruiseInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {
        console.log(data);
      });
    });
    $rootScope[position[2]].step2.removeData = [];
    $rootScope[position[2]].Insurances = $rootScope[position[2]].step2.Insurances;
  };

  $scope.showPackageDetail = function(item) {
    if (!item.showDetailStatus) {
      item.showDetailStatus = true;
    } else {
      item.showDetailStatus = !item.showDetailStatus;
    }
  };
  //添加岸上观光套餐
  $scope.addPackage = function() {
    $rootScope[position[2]].isAddPackage = true;
    $scope.step3 = {};
    $scope.step3.isEditMode = false;
  };
  $scope.editPackage = function(package) {
    $scope.step3 = angular.copy(package);
    $scope.step3.isEditMode = true;
    $rootScope[position[2]].isAddPackage = true;
  };
  //保存岸上观光套餐
  $scope.confirmAddPackage = function() {
    var commitData = {
      PackagesContent: $scope.step3.PackagesContent,
      PackagesPrice: $scope.step3.PackagesPrice,
      PackagesPeopleNo: $scope.step3.PackagesPeopleNo,
      PackagesType: $scope.step3.PackagesType
    };
    //保存数据
    if (!$scope.step3.isEditMode) {
      AddSightseeing($rootScope[position[2]]._id.$id, commitData, function(value) {
        //在列表添加一条观光信息
        commitData.ForeignKeyID = {
          $id: value.data.$addToSet.Packages.ForeignKeyID.$id
        };
        if (!$rootScope[position[2]].step3.Packages) {
          $rootScope[position[2]].step3.Packages = [];
        }
        $rootScope[position[2]].step3.Packages.push(commitData);
        $rootScope[position[2]].isAddPackage = false;
      });
    } else {
      editCruiseSightseeing($rootScope[position[2]]._id.$id, $scope.step3.ForeignKeyID.$id, commitData, function(response) {
        var origin = _.find($rootScope[position[2]].step3.Packages, function(package) {
          return $scope.step3.ForeignKeyID.$id == package.ForeignKeyID.$id;
        });
        origin = _.extend(origin, commitData);
        $rootScope[position[2]].isAddPackage = false;
      });
    }
  };



  //删除套餐
  $scope.delPackage = function(item) {
    showWarningBox('确定要删除该套餐吗？', function() {
      delCruisePackage($rootScope[position[2]]._id.$id, item.ForeignKeyID.$id, function(response) {
        $rootScope[position[2]].step3.Packages = _.without($rootScope[position[2]].step3.Packages, item);
      });
    });
  };

  //如果没有路线，则提示一下
  $scope.changeCruise = function(item) {
    if ($rootScope[position[2]]._id) {
      if (item.CruiseLines.length === 0) {
        $rootScope[position[2]].info = '您选择的邮轮没有线路';
      }
    } else {
      if (item.CruiseLines.length === 0) {
        $rootScope[position[2]].info = '您选择的邮轮没有线路';
      }
    }

  };


  $scope.cancelAddPackage = function() {
    $rootScope[position[2]].isAddPackage = false;
  };

  $scope.switchServiceStep = function(step) {
    $scope.aboutService = step;
  };

  $scope.removeProduct = function() {
    showWarningBox('确定要删除该产品吗？', function() {
      delCruiseProduct($rootScope[position[2]]._id.$id, function(response) {
        var pro = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== pro) {
          $rootScope[position[1]].list = _.without($rootScope[position[1]].list, pro);
          closeSubView();
        }
      });
    });
  };

  $scope.changeProductStatus = function() {
    var info = $rootScope[position[2]].ShowStatus === 1 ? '确定要下架该产品吗？' : '确定要上架该产品吗？';
    var param = {
      type: 1,
      id: $rootScope[position[2]]._id.$id,
      status: $rootScope[position[2]].ShowStatus === 1 ? 0 : 1
    };
    showWarningBox(info, function() {
      updateProductShowStatus(param, function(resp) {
        $rootScope[position[2]].ShowStatus = param.status;
        var pro = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== pro) {
          pro.ShowStatus = param.status;
        }
      });
    });
  };

  $scope.clearDetailInfo = function() {
    addRefreshPageByID('product-cruise-detail-id-' + $rootScope[position[2]]._id.$id);
  };

  //$scope.printDetail = function() {
  //  var data = document.getElementById('detail_content').innerHTML;
  //  commitPrintData('POST', baseUrl + 'common/printing/convertToHtml', {
  //    content: data
  //  }, '_blank');
  //};

  $scope.addToWebsite = function() {
    addProductSyncInfo({
      Model: 'ProductCruise',
      ID: $rootScope[position[2]]._id.$id
    }, function(response) {
      $rootScope[position[2]].info = "同步完成";
      console.log(response);
    });
  };

  $scope.addProduct = function() {
    if ($rootScope[position[1]].needClearAddData) {
      $scope.clearAddData();
    }
    $rootScope[position[1]].needClearAddData = false;
    $scope.fetch('product/cruise/add?id=addCruiseProduct', '');
    $scope.hideSubHeadInList();
    $scope.openItem();
  };

  $scope.confirmTransDeploy = function() {
    var deploy = _.find($scope.Dispatchers, function(item){
      return item._id.$id === $rootScope[position[2]].transDeployDeployInfo;
    });
    showWarningBox("确认要转移给" + deploy.FullName + "吗", function() {
      var param = {
        type: 4,
        product_id: $rootScope[position[2]]._id.$id,
        person_id: $rootScope[position[2]].transDeployDeployInfo
      };
      updateProductBelong(param, function(response) {
        $rootScope[position[2]].showTransDeploy = false;
        //修改详情页计调信息
        $rootScope[position[2]].Belong = {
          EmployeeDepartmentID: {$id: deploy.Department.ID.$id},
          EmployeeDepartmentName: "",
          EmployeeName: deploy.FullName,
          ForeignKeyID: {$id: $rootScope[position[2]].transDeployDeployInfo}
        };
        var target = _.find($rootScope[position[1]].list, function(item){
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if(undefined !== target && null !== target){
          target.Belong = angular.copy($rootScope[position[2]].Belong);
        }
      });
    });
  };

});
app.controller("productTeamtourPlanForeController", function($http, $scope, $rootScope, _, showWarningBox, closeSubView, teamtourPlanFore, addTeamByPlan, orderTransferTeam, addPlanCars, delPlanCars,addRefreshPageByID,
  getTeamListByPlanId, Pagination, delProductPlanById, getCostListProduct, getScheduleClass, editTeamtourProductPlanBatch) {

  $scope.status = {};

  $scope.searchTeamtourPlan = function() {
    $rootScope[position[1]].search.page = 1;
    var param = {
      page: 1
    };
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.keyword !== '') {
      param.keyword = $rootScope[position[1]].search.keyword;
    }
    if ($rootScope[position[1]].search.Station && $rootScope[position[1]].search.Station._id) {
      param.Station = $rootScope[position[1]].search.Station._id.$id;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.order !== 2) {
      param.order = $rootScope[position[1]].search.order;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.expire) {
      param.expire = $rootScope[position[1]].search.expire;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.StartTimeDate) {
      param.StartTime = "" + $rootScope[position[1]].search.StartTimeDate.getTime() / 1000;
      if (!$rootScope[position[1]].search.EndTimeDate) {
        param.StartTime += ",9999999999";
      }
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.EndTimeDate) {
      if (!param.StartTime || param.StartTime === "") {
        param.StartTime = "0";
      }
      param.StartTime += "," + $rootScope[position[1]].search.EndTimeDate.getTime() / 1000;
    }
    teamtourPlanFore.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, param);
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.loadTeamourPlanListData = function() {
    if (!$rootScope[position[1]].search.page) {
      $rootScope[position[1]].search.page = 1;
    }
    $rootScope[position[1]].search.page++;
    var param = {
      page: $rootScope[position[1]].search.page
    };
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.keyword !== '') {
      param.keyword = $rootScope[position[1]].search.keyword;
    }
    if ($rootScope[position[1]].search.Station && $rootScope[position[1]].search.Station._id) {
      param.Station = $rootScope[position[1]].search.Station._id.$id;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.order !== 2) {
      param.order = $rootScope[position[1]].search.order;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.expire) {
      param.expire = $rootScope[position[1]].search.expire;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.StartTimeDate) {
      param.StartTime = "" + $rootScope[position[1]].search.StartTimeDate.getTime() / 1000;
      if (!$rootScope[position[1]].search.EndTimeDate) {
        param.StartTime += ",9999999999";
      }
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.EndTimeDate) {
      if (!param.StartTime || param.StartTime === "") {
        param.StartTime = "0";
      }
      param.StartTime += "," + $rootScope[position[1]].search.EndTimeDate.getTime() / 1000;
    }
    teamtourPlanFore.list(function(response) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, response.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, param);
  };

  $scope.delPlan = function() {
    showWarningBox('确定要删除该计划吗？', function() {
      delProductPlanById($rootScope[position[2]].planInfo._id.$id, function(response) {
        var target = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]].planInfo._id.$id;
        });
        if (undefined !== target) {
          $rootScope[position[1]].list = _.without($rootScope[position[1]].list, target);
        }
        closeSubView();
      });
    });
  };

  $scope.editPlan = function() {
    $rootScope[position[2]].isEditMode = true;
    $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);

    $rootScope[position[2]].editPlanInfo.FinalorderDay = Math.floor(($rootScope[position[2]].editPlanInfo.StartTime.sec - $rootScope[position[2]].editPlanInfo.Finalorder.sec) / 3600 / 24);
    $rootScope[position[2]].editPlanInfo.FinalorderHour = (($rootScope[position[2]].editPlanInfo.StartTime.sec - $rootScope[position[2]].editPlanInfo.Finalorder.sec) / 3600) % 24;
    $rootScope[position[2]].editPlanInfo.FinalreservationDay = Math.floor(($rootScope[position[2]].editPlanInfo.StartTime.sec - $rootScope[position[2]].editPlanInfo.Finalreservation.sec) / 3600 / 24);
    $rootScope[position[2]].editPlanInfo.FinalreservationHour = (($rootScope[position[2]].editPlanInfo.StartTime.sec - $rootScope[position[2]].editPlanInfo.Finalreservation.sec) / 3600) % 24;
    $rootScope[position[2]].editPlanInfo.ReserveDay = Math.floor($rootScope[position[2]].editPlanInfo.ReserveTime / 24);
    $rootScope[position[2]].editPlanInfo.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveTime % 24;

    $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].editPlanInfo.CostInfo;
    $rootScope[position[2]].editPlanInfo.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanTypeID.ID;
    $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;
    if ($rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1.length > 0) {
      $rootScope[position[2]].editPlanInfo.pricePlanNormal = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault1[0];
    }
    $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = $rootScope[position[2]].editPlanInfo.ProductPlanPrice_isDefault0;
    $rootScope[position[2]].editPlanInfo.priceType = 1;
    getScheduleClass($rootScope[position[2]].planInfo.ProductID.$id, function(response) {
      $rootScope[position[2]].editPlanInfo.tripList = response.list;
      if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
        var trip = _.find($rootScope[position[2]].editPlanInfo.tripList, function(item) {
          return item._id.$id === $rootScope[position[2]].editPlanInfo.TripID.$id;
        });
        if (undefined !== trip) {
          $rootScope[position[2]].editPlanInfo.Trip = trip;
        }
      }
    });
    if (!$rootScope[position[2]].editPlanInfo.allCost) {
      getCostListProduct({
        keyword: "",
        page: 1,
        limit: 9999
      }, function(response) {
        $rootScope[position[2]].editPlanInfo.allCost = response.list;
        if ($rootScope[position[2]].editPlanInfo.PlanTheCost) {
          $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item) {
            return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
          });
        }
      });
    } else {
      $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item) {
        return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
      });
    }
    if ($rootScope[position[2]].editPlanInfo.pricePlanNormal._id) {
      $rootScope[position[2]].editPlanInfo.pricePlanNormal.id = $rootScope[position[2]].editPlanInfo.pricePlanNormal._id.$id;
      $rootScope[position[2]].editPlanInfo.pricePlanNormal.ProductID = $rootScope[position[2]].editPlanInfo.pricePlanNormal.ProductID.$id;
      $rootScope[position[2]].editPlanInfo.pricePlanNormal.PlanID = $rootScope[position[2]].editPlanInfo.pricePlanNormal.PlanID.$id;
      $rootScope[position[2]].editPlanInfo.pricePlanNormal.ProductType.ForeignKeyID = $rootScope[position[2]].editPlanInfo.pricePlanNormal.ProductType.ForeignKeyID.$id;
    }
    $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(price1) {
      price1.id = price1._id.$id;
      price1.PlanID = price1.PlanID.$id;
    });
  };

  $scope.changeShowPrice = function(type) {
    if (type == 1) {
      $rootScope[position[2]].planInfo.showNormalPrice = true;
      $rootScope[position[2]].planInfo.showUpgradePrice = false;
    } else {
      $rootScope[position[2]].planInfo.showNormalPrice = false;
      $rootScope[position[2]].planInfo.showUpgradePrice = true;
    }
  };

  $scope.arrangeCar = function() {
    if (!$rootScope[position[2]].planInfo.Cars) {
      $rootScope[position[2]].planInfo.Cars = [];
    }
    $rootScope[position[2]].planInfo.isArrangeCar = !$rootScope[position[2]].planInfo.isArrangeCar;
  };

  $scope.closeArrangeCar = function() {
    $scope.planInfo.isArrangeCar = false;
  };

  $scope.savePlan = function() {
    var param = {};
    var pricePlanNormal = {};
    //计划信息
    param.CompanyInfoId = $rootScope.userinfo.CompanyID.$id;

    param.ProductName = $rootScope[position[2]].ProductName;
    param.TravelDay = $rootScope[position[2]].TravelDay;
    param.ProductID = $rootScope[position[2]].ProductID;
    param.ProductNo = $rootScope[position[2]].ProductNo;
    param.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanTypeID;
    if (param.PlanTypeID === 2) {
      param.PeerCompanyName = $rootScope[position[2]].editPlanInfo.PeerCompanyName;
    }
    param.Allaccompanytourguide = $rootScope[position[2]].editPlanInfo.Allaccompanytourguide;
    param.Lowestformation = $rootScope[position[2]].editPlanInfo.Lowestformation;
    param.Networkorder = $rootScope[position[2]].editPlanInfo.Networkorder;
    param.AdultMachineBuildingFee = $rootScope[position[2]].editPlanInfo.AdultMachineBuildingFee;
    param.ChildMachineBuildingFee = $rootScope[position[2]].editPlanInfo.ChildMachineBuildingFee;
    param.ExitVisaFee = $rootScope[position[2]].editPlanInfo.ExitVisaFee;
    param.TourGuideServiceCharge = $rootScope[position[2]].editPlanInfo.TourGuideServiceCharge;
    param.FinalorderDay = $rootScope[position[2]].editPlanInfo.FinalorderDay;
    param.FinalorderHour = $rootScope[position[2]].editPlanInfo.FinalorderHour;
    param.FinalreservationDay = $rootScope[position[2]].editPlanInfo.FinalreservationDay;
    param.FinalreservationHour = $rootScope[position[2]].editPlanInfo.FinalreservationHour;
    param.ReserveDay = $rootScope[position[2]].editPlanInfo.ReserveDay;
    param.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveHour;
    param.ShowStatus = $rootScope[position[2]].editPlanInfo.ShowStatus;

    if ($rootScope[position[2]].editPlanInfo.Cost && $rootScope[position[2]].editPlanInfo.Cost.hasOwnProperty('_id')) {
      param.PlanTheCost = $rootScope[position[2]].editPlanInfo.Cost._id.$id;
    }

    if (!$rootScope[position[2]].editPlanInfo.Trip._id) {
      $rootScope[position[2]].info = '请选择行程';
      //callBack();
      return;
    } else {
      param.TripID = $rootScope[position[2]].editPlanInfo.Trip._id.$id;
    }

    if (!param.FinalorderDay && !param.FinalorderHour) {
      $rootScope[position[2]].info = '请填写下单截止时间';
      //callBack();
      return;
    }

    if (!param.FinalreservationDay && !param.FinalreservationHour) {
      $rootScope[position[2]].info = '请填写预留时间';
      //callBack();
      return;
    }

    if (!param.Networkorder) {
      $rootScope[position[2]].info = '请选择网络订单';
      //callBack();
      return;
    }

    if (!param.Lowestformation) {
      $rootScope[position[2]].info = '请填写最低成员';
      //callBack();
      return;
    }

    if (!$rootScope[position[2]].editPlanInfo.ReserveDay && !$rootScope[position[2]].editPlanInfo.ReserveHour) {
      $rootScope[position[2]].info = '请填写暂留时间';
      //callBack();
      return;
    }

    param.productPlanPrice = [];
    //常规方案
    pricePlanNormal = $rootScope[position[2]].editPlanInfo.pricePlanNormal;
    pricePlanNormal.isDefault = 1;
    pricePlanNormal.Pricetitle = '常规方案';

    if (!$rootScope[position[2]].editPlanInfo.pricePlanNormal.PlanNumber) {
      $rootScope[position[2]].info = '请填写常规方案的收人总数';
      //callBack();
      return;
    }

    if ($rootScope[position[2]].editPlanInfo.pricePlanNormal.RetainNumber === null || $rootScope[position[2]].editPlanInfo.pricePlanNormal.RetainNumber === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的保留总数';
      //callBack();
      return;
    }

    if (pricePlanNormal.DefaultPrice === 0 && pricePlanNormal.DefaultPrice === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的直客成人价';
      //callBack();
      return;
    }

    if (pricePlanNormal.ChildPrice === 0 && pricePlanNormal.ChildPrice === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的直客小孩价';
      //callBack();
      return;
    }

    if (pricePlanNormal.BabyPrice === 0 && pricePlanNormal.BabyPrice === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的直客婴儿价';
      //callBack();
      return;
    }

    if (!pricePlanNormal.SingleRoomDiff) {
      $rootScope[position[2]].info = '请填写常规方案的单房差';
      //callBack();
      return;
    }

    if (pricePlanNormal.Deductiblevoucher === null || pricePlanNormal.Deductiblevoucher === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的抵用券';
      //callBack();
      return;
    }

    if (pricePlanNormal.PeerDefaultPrice === 0 && pricePlanNormal.PeerDefaultPrice === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的同行成人价';
      //callBack();
      return;
    }

    if (pricePlanNormal.PeerChildPrice === 0 && pricePlanNormal.PeerChildPrice === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的同行小孩价';
      //callBack();
      return;
    }

    if (pricePlanNormal.PeerBabyPrice === 0 && pricePlanNormal.PeerBabyPrice === undefined) {
      $rootScope[position[2]].info = '请填写常规方案的同行婴儿价';
      //callBack();
      return;
    }
    //升级方案
    if ($rootScope[position[2]].isEditMode) {
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
        item.PlanID = $rootScope[position[2]].editPlanInfo._id.$id;
        item.isDefault = 0;
        if (!item.Pricetitle) {
          $rootScope[position[2]].info = '请填写升级方案的价格标题';
          //callBack();
          return;
        }
        item._id = item._id.$id;
        item.PlanID = item.PlanID.$id;
        item.ProductID = item.ProductID.$id;
        item.ProductType.ForeignKeyID = item.ProductType.ForeignKeyID.$id;
        param.productPlanPrice.push(item);
      });
    } else {
      $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
        item.isDefault = 0;
        if (!item.Pricetitle) {
          $rootScope[position[2]].info = '请填写升级方案的价格标题';
          //callBack();
          return;
        }
        param.productPlanPrice.push(item);
      });
    }
    if (pricePlanNormal.PlanNumber && pricePlanNormal.PlanNumber > 0) {
      param.productPlanPrice.push(pricePlanNormal);
    }
    if ($rootScope[position[2]].isEditMode) {
      var params1 = [];
      param.id = $rootScope[position[2]].editPlanInfo._id.$id;
      param.StartTime = $rootScope[position[2]].editPlanInfo.StartTime.sec;
      param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);
      param.Finalreservation = (param.StartTime - param.FinalreservationDay * 24 * 60 * 60 - param.FinalreservationHour * 60 * 60);
      param.ReserveTime = $rootScope[position[2]].editPlanInfo.ReserveDay * 24 + $rootScope[position[2]].editPlanInfo.ReserveHour;
      params1.push(angular.copy(param));
      editTeamtourProductPlanBatch(params1, function(response) {
        $rootScope[position[2]].isEditMode = false;
        $rootScope[position[2]].planInfo = param;
        //callBack();
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.fetch($rootScope[switchType[2]].targetUrl);
      });
    }
  };

  $scope.cancelPlan = function() {
    $rootScope[position[2]].isEditMode = false;
  };


  $scope.showTeamTrans = function(order) {
    order.isShowTeamTrans = !order.isShowTeamTrans;
  };

  $scope.saveTeamTrans = function(order) {
    var OrderIdLists = [];
    OrderIdLists.push(order.OrderId);
    $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item) {
      return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
    });
    if (!$rootScope[position[2]].planInfo.transTeam) {
      $rootScope[position[2]].info = "请选择转移的团队";
      return;
    }
    var postData = {
      OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
      NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
      OrderIdLists: OrderIdLists
    };

    orderTransferTeam(postData, function(response) {
      $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.push(order);
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.without($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, order);
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
      order.isShowTeamTrans = false;
      $rootScope[position[2]].planInfo.transTeam = null;
    });
  };



  $scope.saveTeamTransMulti = function() {
    var OrderIdLists = [];
    var transOrder = [];
    var pushOrder = [];
    $rootScope[position[2]].planInfo.isSelectAllMember = false;


    $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order) {
      if (order.isSelect) {
        OrderIdLists.push(order.OrderId);
        transOrder.push(order);
        var data = angular.copy(order);
        data.isSelect = false;
        pushOrder.push(data);
      }
    });
    if (OrderIdLists.length === 0) {
      $rootScope[position[2]].info = "请选择转移的订单！";
      return;
    }
    $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item) {
      return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
    });

    if ($rootScope[position[2]].planInfo.transTeamInfo === undefined || $rootScope[position[2]].planInfo.transTeamInfo === null) {
      $rootScope[position[2]].info = "请选择转移的团队";
      return;
    }

    var postData = {
      OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
      NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
      OrderIdLists: OrderIdLists
    };
    orderTransferTeam(postData, function(response) {
      $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list = $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.concat(pushOrder);
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.difference($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, transOrder);
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
      $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
      $rootScope[position[2]].planInfo.transTeamInfo = null;
    });
  };

  $scope.cancelTeamTrans = function(order) {
    order.isShowTeamTrans = false;
  };

  $scope.teamTransMulti = function() {
    $rootScope[position[2]].planInfo.isShowTeamTransMulti = !$rootScope[position[2]].planInfo.isShowTeamTransMulti;
  };

  $scope.cancelTeamTransMulti = function() {
    $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
  };

  $scope.generateNewTeam = function() {
    addTeamByPlan($rootScope[position[2]].planInfo._id.$id, 1, function(response) {
      $rootScope[position[2]].planInfo.teamList.push({
        TeamNo: response.data.TeamNo,
        TeamName: response.data.TeamName,
        ID: response.data.TeamId,
        TeamOrderInfo: {
          list: []
        }
      });
    });
  };

  $scope.checkAllTeamOrder = function() {
    if ($rootScope[position[2]].planInfo.isSelectAllMember) {
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order) {
        order.isSelect = true;
      });
    } else {
      $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order) {
        order.isSelect = false;
      });
    }
  };

  $scope.addCarArrange = function() {
    var carName = "";
    for (var i = 1; i < 99; i++) {
      carName = i + '号车';
      var car = _.find($rootScope[position[2]].planInfo.Cars, function(item) {
        return item.Name === carName;
      });
      if (undefined === car) {
        break;
      }
    }
    $rootScope[position[2]].addCarInfo = {
      Name: carName,
      CarDepartures: [{}]
    };
    $rootScope[position[2]].isAddCar = !$rootScope[position[2]].isAddCar;
  };

  $scope.delCarArrange = function(car) {
    showWarningBox('确定要删除车辆吗', function() {
      delPlanCars($rootScope[position[2]].planInfo._id.$id, car.ForeignKeyID.$id, function(response) {
        $rootScope[position[2]].planInfo.Cars = _.without($rootScope[position[2]].planInfo.Cars, car);
      });
    });
  };

  $scope.cancelCarArrange = function() {
    $rootScope[position[2]].isAddCar = false;
  };

  $scope.saveCarArrange = function() {
    var cars = [];
    if (($rootScope[position[2]].addCarInfo.DigitNumber - $rootScope[position[2]].addCarInfo.OpenUpNumber - $rootScope[position[2]].addCarInfo.GuideSiteNumber) < 0) {
      $rootScope[position[2]].info = "座位数量设置错误，请重新设置";
      return;
    }
    cars.push($rootScope[position[2]].addCarInfo);
    addPlanCars($rootScope[position[2]].planInfo._id.$id, cars, function(response) {
      $rootScope[position[2]].addCarInfo._id = {
        $id: response.data
      };
      $rootScope[position[2]].addCarInfo.ReservedNumber = $rootScope[position[2]].addCarInfo.DigitNumber - $rootScope[position[2]].addCarInfo.OpenUpNumber - $rootScope[position[2]].addCarInfo.GuideSiteNumber;
      $rootScope[position[2]].planInfo.Cars.push(angular.copy($rootScope[position[2]].addCarInfo));
      $rootScope[position[2]].isAddCar = false;
    });
  };

  $scope.arrangeCar = function() {
    if (!$rootScope[position[2]].planInfo.Cars) {
      $rootScope[position[2]].planInfo.Cars = [];
    }
    $rootScope[position[2]].planInfo.isArrangeCar = !$rootScope[position[2]].planInfo.isArrangeCar;
  };

  $scope.teamSet = function() {
    if (!$rootScope[position[2]].planInfo.teamList) {
      getTeamListByPlanId($rootScope[position[2]].planInfo._id.$id, function(teamList) {
        $rootScope[position[2]].planInfo.teamList = teamList.data;
        $rootScope[position[2]].planInfo.teamList.OrderInfo = {
          OrderMoney: 0,
          PayPrice: 0,
          UnPayPrice: 0,
          AdultNumber: 0,
          ChildNumber: 0,
          BabyNumber: 0,
          Number: 0,
          SiteNumber: 0,
        };
        $rootScope[position[2]].planInfo.teamList.forEach(function(item) {
          $rootScope[position[2]].planInfo.teamList.OrderInfo.OrderMoney += item.TeamOrderInfo.TotalOrderMoney;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.PayPrice += item.TeamOrderInfo.TotalPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.UnPayPrice += item.TeamOrderInfo.TotalUnPayPrice;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.AdultNumber += item.TeamOrderInfo.TotalAdultNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.ChildNumber += item.TeamOrderInfo.TotalChildNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.BabyNumber += item.TeamOrderInfo.TotalBabyNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.Number += item.TeamOrderInfo.TotalNumber;
          $rootScope[position[2]].planInfo.teamList.OrderInfo.SiteNumber += item.TeamOrderInfo.TotalSiteNumber;
        });
        if ($rootScope[position[2]].planInfo.teamList.length > 0) {
          $rootScope[position[2]].planInfo.teamShow = $rootScope[position[2]].planInfo.teamList[0];
          if ($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0) {
            $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
            $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
          }
        }
      });
    }
    $rootScope[position[2]].planInfo.isTeamSet = !$rootScope[position[2]].planInfo.isTeamSet;
  };

  $scope.teamPageChange = function(page) {
    $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice((page - 1) * 5, page * 5);
    $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, page, 5);
  };

  $scope.changeTeam = function(team) {
    $rootScope[position[2]].planInfo.isSelectAllMember = false;
    $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order) {
      order.isSelect = false;
    });
    $rootScope[position[2]].planInfo.teamShow = team;
    if ($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0) {
      $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
      $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
    }
  };

  $scope.addAssembly = function() {
    if (!$rootScope[position[2]].addCarInfo.CarDepartures) {
      $rootScope[position[2]].addCarInfo.CarDepartures = [];
    }
    $rootScope[position[2]].addCarInfo.CarDepartures.push({});
  };

  $scope.removeAssembly = function(assembly) {
    $rootScope[position[2]].addCarInfo.CarDepartures = _.without($rootScope[position[2]].addCarInfo.CarDepartures, assembly);
  };

  $scope.closeArrangeCar = function() {
    $scope.planInfo.isArrangeCar = false;
  };

  $scope.delUpgradePrice = function(price) {
    delProductPlanPriceById(price._id.$id, function(response) {
      $rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0 = _.without($rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0, price);
    });
  };
});
app.controller("productFreetourController", function($scope, $rootScope, getFreetourList, freetour, ngDialog, addBaseFreetour, getPersonnel, addProductSyncInfo,
  saveBaseFreetour, getScheduleClass, addPackages, getTravelGoodsAll, delPackages, findInnerObjIndex, _, editFreetourExpand, getTeamtourPlanList, $filter,
  delFreetourInsurance, addFreetourInsurance, saveStepStatus, getFreetourInsurance, getFreetourExpand, getPackages, showWarningBox, getFreetourTravel,
  delFreetourProduct, updateProductShowStatus, closeSubView, addRefreshPageByID, addPackagesMulti, updateProductBelong, getFreetourCustomerTrip, saveFreetourCustomerTrip, getFreeTourPlanPrice) {

  //日历的配置
  $rootScope[position[2]].calendarOptions = {
    calendarClass: "datetimePicker",
    headClass: "calHead",
    bodyClass: "calBody",
    footClass: "calFoot",
    headDateClass: "calHeadDate",
    useShort: true,

    fillDay: function(day, date) {
      if (!$rootScope[position[2]].prductPlanList) {
        $rootScope[position[2]].prductPlanList = [];
      }
      var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
        return item.StartTime.sec === date.getTime() / 1000;
      });
      var html = '<div class="cell_date">' + $filter('date')(date, 'dd') + '</div>';
      if (undefined !== planDetail) {
        html = '<div class="cell_date yw">' + $filter('date')(date, 'dd') + '</div>';
        /*var MorethanNumber = planDetail.MorethanNumber && planDetail.MorethanNumber !== '' ? planDetail.MorethanNumber : 0;
        MorethanNumber = parseInt(MorethanNumber);
        MorethanNumber = MorethanNumber > 9 ? '<span class="gT">库存充足</span>' : '库存：<font>' + MorethanNumber + '</font>';*/
        var MorethanNumber = '<span class="gT">库存充足</span>';
        var price = '价格无';
        if (planDetail.PlanProject) price = '￥' + getFreeTourPlanPrice(planDetail.PlanProject);
        html += '<div class="priceRow">' + price + '</div><div class="seatRow">' + MorethanNumber + '</div>';
      }
      return html;
    },

    monthChange: function(datetime) {
      if ($rootScope[position[2]]._id) {
        getTeamtourPlanList({
          ProductID: $rootScope[position[2]]._id.$id,
          StartTime: $filter('date')(datetime, 'yyyy-MM')
        }, function(response) {
          $rootScope[position[2]].prductPlanList = response.list;
          $rootScope[position[2]].reFill = true;
        });
      }
    }
  };

  getPersonnel({
    label: 1008,
    limit: 200
  }, function(data) {
    $scope.Dispatchers = data.list;
  });

  $scope.operate = {
    showPlanDetail: function(planDetailId) {
      if (this.showPlanDetailId == planDetailId) {
        this.showPlanDetailId = "";
      } else {
        this.showPlanDetailId = planDetailId;
      }

    },
    showPlanDetailId: ""
  };

  $scope.loadFreetourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {};
    }
    $rootScope[position[1]].search.page += 1;
    freetour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, $rootScope[position[1]].search);
  };

  $scope.openDialog = function(item) {
    var new_dialog = ngDialog
      .open({
        id: 'fromAService',
        template: '/public/angularView/common/components/crop.html',
        controller: 'crop',
        className: 'ngdialog-theme-default w-800',
        data: {
          imgRatio: 33 / 56,
          resImgWidth: 560,
          resImgHight: 330,
          uploadPicCallBack: function(data) {
            if (item) {
              item.PicPath = data.url;
              item.Title = data.name;
            } else {
              $rootScope[position[2]].step1.DefaultPic = data.url;
            }
          }
        }
      });
  };

  $scope.searchPro = function() {
    $rootScope[position[1]].search = {
      page: 1,
      Title: $rootScope[position[1]].Title,
      EmployeeDepartmentID: $rootScope[position[1]].EmployeeDepartment ? $rootScope[position[1]].EmployeeDepartment._id.$id : '',
      StartGADDRId: $rootScope[position[1]].StartGADDR ? $rootScope[position[1]].StartGADDR.GADDRID.$id : '',
      ShowStatus: $rootScope[position[1]].ShowStatus ? $rootScope[position[1]].ShowStatus.value : '',
      AddTime: $rootScope[position[1]].orderType ? $rootScope[position[1]].orderType.value : '',
    };
    freetour.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, $rootScope[position[1]].search);
  };

  $scope.addSubTitle = function() {
    $rootScope[position[2]].step1.needSubTitle = true;
  };

  $scope.removeSubTitle = function() {
    $rootScope[position[2]].step1.needSubTitle = false;
    $rootScope[position[2]].step1.SubTitle = '';
  };

  $scope.switchDestination = function(destination) {
    var index1 = _.findIndex($scope[position[2]].step1.destination, {
      Title: destination.Title
    });
    var index2 = _.findLastIndex($scope[position[2]].step1.destination, {
      Title: destination.Title
    });
    if (index1 != index2) {
      $scope[position[2]].step1.destination = _.uniq($scope[position[2]].step1.destination);
    }
    $scope[position[2]].step1.MainDestination = destination;
  };

  $scope.unChooseSelectedVisa = function(item) {
    $rootScope[position[2]].step1.VisaList = _.without($rootScope[position[2]].step1.VisaList, item);
    $rootScope[position[2]].step1.VisaTemp = angular.copy($rootScope[position[2]].step1.VisaList);
  };

  $scope.saveSelectedVisa = function() {
    $rootScope[position[2]].step1.VisaList = angular.copy($rootScope[position[2]].step1.VisaTemp);
    $scope.showVise();
  };

  $scope.showVise = function(status) {
    if (status === undefined) {
      $rootScope[position[2]].step1.isShowVise = false;
    } else {
      $rootScope[position[2]].step1.isShowVise = true;
    }
  };

  // 自助游基本信息添加
  $scope.step1Commit = function() {
    var param = {};
    param.Title = $scope[position[2]].step1.Title;
    if (!param.Title) {
      $rootScope[position[2]].info = '线路名称不能为空！';
      return;
    }

    if ($scope[position[2]].step1.needSubTitle) {
      param.SubTitle = $scope[position[2]].step1.SubTitle;
    }
    param.DefaultPic = $scope[position[2]].step1.DefaultPic;
    param.Pics = [];
    var OrderBy = 0;
    $scope[position[2]].step1.Pics.forEach(function(pic) {
      if (pic.PicPath) {
        param.Pics.push({
          PicPath: pic.PicPath,
          Title: pic.Title,
          Notes: pic.PicPath,
          OrderBy: OrderBy
        });
        OrderBy++;
      }
    });

    param.GADDRs = [];
    if ($scope[position[2]].step1.destination) {
      $scope[position[2]].step1.destination.forEach(function(item) {
        param.GADDRs.push(item.GADDRID.$id);
      });
    }
    if (param.GADDRs.length === 0) {
      $rootScope[position[2]].info = '目的地不能为空！';
      return;
    }
    param.ProductGADDR = $scope[position[2]].step1.MainDestination.GADDRID.$id;
    if (!param.ProductGADDR) {
      $rootScope[position[2]].info = '主目的地不能为空！';
      return;
    }
    param.StartGADDR = $scope[position[2]].step1.StartGADDR.GADDRID.$id;
    if (!param.StartGADDR) {
      $rootScope[position[2]].info = '出发地不能为空！';
      return;
    }
    param.TravelDays = $scope[position[2]].step1.TravelDays;
    param.LateNight = $scope[position[2]].step1.LateNight;
    param.GoTraffic = $scope[position[2]].step1.GoTraffic._id.$id;
    param.ReturnTraffic = $scope[position[2]].step1.ReturnTraffic._id.$id;
    param.LineType = $scope[position[2]].step1.LineType.ID;
    param.IsVisa = $scope[position[2]].step1.IsVisa;
    if (param.TravelDays === undefined || param.TravelDays === '' || param.TravelDays === '0') {
      $rootScope[position[2]].info = '出游天数不能为空！';
      return;
    }
    if (param.LateNight === undefined || param.LateNight === '' || param.LateNight === '0') {
      $rootScope[position[2]].info = '住宿天数不能为空！';
      return;
    }
    if ($scope[position[2]].step1.IsVisa == 1) {
      if ($scope[position[2]].step1.VisaList) {
        param.VisaCountry = [];
        $scope[position[2]].step1.VisaList.forEach(function(item) {
          param.VisaCountry.push(item.ForeignKeyID.$id);
        });
      }
    }
    param.Productfeatures = $scope[position[2]].step1.Productfeatures;
    param.ProductForm = [];
    if ($scope[position[2]].step1.ProductFormAll) {
      $scope[position[2]].step1.ProductFormAll.forEach(function(item) {
        if (item.isSelect) {
          param.ProductForm.push(item.ID);
        }
      });
    }
    param.Keywords = $rootScope[position[2]].step1.Keywords;

    if (!param.Keywords) {
      $rootScope[position[2]].info = '关键词不能为空！';
      return;
    }
    if (!param.Productfeatures) {
      $rootScope[position[2]].info = '产品特色不能为空！';
      return;
    }
    param.LineOwnership = [];
    if ($scope[position[2]].step1.LineOwnership) {
      $scope[position[2]].step1.LineOwnership.forEach(function(item) {
        if (item.isSelect) {
          param.LineOwnership.push(item._id.$id);
        }
      });
    }
    param.Gift = [];
    if ($scope[position[2]].step1.TravelGoods) {
      $scope[position[2]].step1.TravelGoods.forEach(function(item) {
        if (item.isSelect) {
          param.Gift.push(item.ID);
        }
      });
    }
    param.LineLabels = [];
    if ($scope[position[2]].step1.ProductLineAttribute) {
      $scope[position[2]].step1.ProductLineAttribute.forEach(function(item) {
        if (item.isSelect) {
          param.LineLabels.push(item._id.$id);
        }
      });
    }
    param.StationID = $scope[position[2]].step1.station._id.$id;
    if (!param.StationID) {
      $rootScope[position[2]].info = '站点不能为空！';
      return;
    }
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]]._id) {
      param.id = $rootScope[position[2]]._id.$id;
      saveBaseFreetour(param, function(response) {
        $rootScope[position[2]].isCommit = false;
        var tour = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== tour) {
          tour.Title = $rootScope[position[2]].step1.Title;
          tour.StartGADDR = $rootScope[position[2]].step1.StartGADDR;
        }
        $scope.switchAddStep(1, 1);
      });
    } else {
      addBaseFreetour(param, function(response) {
        $rootScope[position[2]]._id = {
          $id: response.data[0]
        };
        saveStepStatus($rootScope[position[2]]._id.$id, 1, 2, function() {
          $rootScope[position[2]].finishedStatus = 1;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(1, 1);
        });
        var item = {
          _id: {
            $id: $rootScope[position[2]]._id.$id
          },
          showUrl: 'product/freetour/detail?id=' + $rootScope[position[2]]._id.$id,
          planUrl: 'product/freetourPlan/list?ProductID=' + $rootScope[position[2]]._id.$id + '&ProductName=' + $rootScope[position[2]].step1.Title + '&TravelDay=' + $rootScope[position[2]].step1.TravelDays,
          ProductNo: response.data[1],
          Title: $rootScope[position[2]].step1.Title,
          StartGADDR: {
            Title: $scope[position[2]].step1.StartGADDR.Title
          },
          ShowStatus: 0,
          AddTime: {
            sec: new Date().getTime() / 1000
          },
          AddInfo: {
            EmployeeName: $rootScope.userinfo.FullName
          }
        };
        $rootScope[position[2]].showUrl = item.showUrl;
        $rootScope[position[2]].planUrl = item.planUrl;
        $rootScope[position[1]].needClearAddData = true;
        $rootScope[position[1]].list.unshift(item);
      });
    }
  };

  $scope.step2Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 2) {
      saveStepStatus($rootScope[position[2]]._id.$id, 2, 2, function() {
        $rootScope[position[2]].finishedStatus = 2;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(2, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(2, 1);
    }
    if($rootScope[position[2]].step2.TripType == 2){
      saveFreetourCustomerTrip($rootScope[position[2]]._id.$id, $rootScope[position[2]].step2.customize, function(response){
        console.log(response);
      });
    }
    $scope.clearDetailInfo();
  };

  $scope.step3Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 3) {
      saveStepStatus($rootScope[position[2]]._id.$id, 3, 2, function() {
        $rootScope[position[2]].finishedStatus = 3;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(3, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(3, 1);
    }
  };

  $scope.step4Commit = function() {
    $scope.clearDetailInfo();
    var postData = [];
    $rootScope[position[2]].step4.Additionals.forEach(function(item, index) {
      var data = {
        "Title": item.Title,
        "OrderBy": index + 1,
        "ForeignKeyID": item.ForeignKeyID.$id,
        "AdultCostPrice": item.AdultCostPrice,
        "AdultSellingPrice": item.AdultSellingPrice,
        "ChildCostPrice": item.ChildCostPrice,
        "ChildSellingPrice": item.ChildSellingPrice,
        "IsAllowDeleted": item.IsAllowDeleted,
        "IsDefaultChecked": item.IsDefaultChecked,
        "IsSingleSold": item.IsSingleSold,
        "ProductType": item.ProductType,
      };
      var tempData = _.find($rootScope[position[2]].step4.AdditionalsStay, function(stay) {
        return stay.ForeignKeyID.$id === item.ForeignKeyID.$id;
      });
      if (undefined !== tempData) {
        data.actionType = "EDT";
      } else {
        data.actionType = "ADD";
      }
      postData.push(data);
    });
    $rootScope[position[2]].step4.removeData.forEach(function(item) {
      var data = {
        "Title": item.Title,
        "OrderBy": index + 1,
        "ForeignKeyID": item.ForeignKeyID.$id,
        "AdultCostPrice": item.AdultCostPrice,
        "AdultSellingPrice": item.AdultSellingPrice,
        "ChildCostPrice": item.ChildCostPrice,
        "ChildSellingPrice": item.ChildSellingPrice,
        "IsAllowDeleted": item.IsAllowDeleted,
        "IsDefaultChecked": item.IsDefaultChecked,
        "IsSingleSold": item.IsSingleSold,
        "ProductType": item.ProductType,
      };
      data.actionType = "DEL";
      postData.push(data);
    });
    addPackagesMulti($rootScope[position[2]]._id.$id, postData, function(data) {
      console.log(data);
    });
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 4) {
      saveStepStatus($rootScope[position[2]]._id.$id, 4, 2, function() {
        $rootScope[position[2]].finishedStatus = 4;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(4, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(4, 1);
    }
  };

  $scope.step5Commit = function() {
    $scope.clearDetailInfo();
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 5) {
      editFreetourExpand($rootScope[position[2]]._id.$id, $rootScope[position[2]].step5, function(data) {
        saveStepStatus($rootScope[position[2]]._id.$id, 5, 2, function() {
          $rootScope[position[2]].finishedStatus = 5;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(5, 1);
        });
      });
    } else {
      editFreetourExpand($rootScope[position[2]]._id.$id, $rootScope[position[2]].step5, function(data) {
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(5, 1);
      });
    }
  };

  $scope.switchAddStep = function(step, type) {
    if ($rootScope[position[2]].finishedStatus < step && !type) {
      if ($rootScope[position[2]].finishedStatus === 0) {
        $rootScope[position[2]].info = '请先完成基本信息！';
      } else if ($rootScope[position[2]].finishedStatus == 1) {
        $rootScope[position[2]].info = '请先完成推荐行程！';
      } else if ($rootScope[position[2]].finishedStatus == 2) {
        $rootScope[position[2]].info = '请先完成保险！';
      } else if ($rootScope[position[2]].finishedStatus == 3) {
        $rootScope[position[2]].info = '请先完成附加产品！';
      } else if ($rootScope[position[2]].finishedStatus == 4) {
        $rootScope[position[2]].info = '请先完成扩展说明！';
      }
      return;
    }
    // $scope.saveCurrentStep(step);
    $rootScope[position[2]].addStep = step;
    if (step === 0) {

    } else if (step == 1) {
      if (!$rootScope[position[2]].step2) {
        $rootScope[position[2]].step2 = {};
        $rootScope[position[2]].step2.TripType = 1;
      }
      /*   getFreetourTravel($rootScope[position[2]]._id.$id, function(data) {
          $rootScope[position[2]].step2.customize = data.Reminderiddescription;
        });*/
      getFreetourCustomerTrip($rootScope[position[2]]._id.$id, function(response){
        $rootScope[position[2]].step2.customize = response.Reminderiddescription;
      });
    } else if (step == 2) {
      if (!$rootScope[position[2]].step3) {
        $rootScope[position[2]].step3 = {};
      }
      getFreetourInsurance($rootScope[position[2]]._id.$id, function(data) {
        $rootScope[position[2]].step3.Insurances = data.Insurances;
        $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
      });
      $rootScope[position[2]].step3.addData = [];
      $rootScope[position[2]].step3.removeData = [];
    } else if (step == 3) {
      if (!$rootScope[position[2]].step4) {
        $rootScope[position[2]].step4 = {};
      }
      if (!$rootScope[position[2]].step4.switchAddition) {
        $scope.switchAddition(0);
      }
      $rootScope[position[2]].step4.addTicket = [];
      $rootScope[position[2]].step4.removeTicket = [];
      $rootScope[position[2]].step4.removeData = [];
      getPackages($rootScope[position[2]]._id.$id, function(data) {

        if (!data.Additionals) {
          $rootScope[position[2]].step4.Additionals = [];
        } else {
          $rootScope[position[2]].step4.Additionals = data.Additionals;
          $rootScope[position[2]].step4.AdditionalsStay = angular.copy(data.Additionals);
        }
      });
    } else if (step == 4) {
      if (!$rootScope[position[2]].step5) {
        $rootScope[position[2]].step5 = {};
      }
      getFreetourExpand($rootScope[position[2]]._id.$id, function(data) {
        $rootScope[position[2]].step5 = data;
      });
    } else if (step == 5) {

    }
  };

  $scope.saveCurrentStep = function(step) {
    if ($rootScope[position[2]].isEditMode) {
      switch ($rootScope[position[2]].addStep) {
        case 0:
          $scope.step1Commit();
          break;
        case 1:
          $scope.step2Commit();
          break;
        case 2:
          $scope.step3Commit();
          break;
        case 3:
          $scope.step4Commit();
          break;
        case 4:
          $scope.step5Commit();
          break;
      }
    }
    $rootScope[position[2]].addStep = step;
  };

  $scope.switchAddition = function(step) {
    if (step !== undefined) {
      $rootScope[position[2]].step4.switchAddition = step;
    } else {
      $rootScope[position[2]].step4.switchAddition = '';
    }
    if (step === 1) {
      if (!$rootScope[position[2]].step4.visa) {
        $rootScope[position[2]].step4.visa = [];
      }
    } else if (step === 2) {
      if (!$rootScope[position[2]].step4.Viewspots) {
        $rootScope[position[2]].step4.Viewspots = [];
      }
    } else if (step === 3) {
      if (!$rootScope[position[2]].step4.allGoods) {
        getTravelGoodsAll(function(data) {
          $rootScope[position[2]].step4.allGoods = data;
        });
      }
    }
  };

  $scope.saveAdditionVisa = function() {
    $rootScope[position[2]].step4.visa.forEach(function(item) {
      var param = {
        "Title": item.Name,
        "ForeignKeyID": item.ForeignKeyID,
        "AdultCostPrice": item.CostDefaultPrice,
        "AdultSellingPrice": item.DefaultPrice,
        "ChildCostPrice": item.CostDefaultPrice,
        "ChildSellingPrice": item.DefaultPrice,
        "IsAllowDeleted": false,
        "IsDefaultChecked": true,
        "IsSingleSold": true,
        "ProductType": "签证"
      };

      var temp = _.find($rootScope[position[2]].step4.Additionals, function(visa) {
        return visa.Title === item.Name;
      });
      if (undefined === temp) {
        $rootScope[position[2]].step4.Additionals.push(param);
      }
    });
    $scope.switchAddition();
  };

  $scope.saveAdditionViewspots = function() {
    $rootScope[position[2]].step4.Viewspots.forEach(function(item) {
      var param = {
        "Title": item.Title,
        "ForeignKeyID": item.ForeignKeyID,
        "AdultCostPrice": item.CostPrice,
        "AdultSellingPrice": item.OriginalPrice,
        "ChildCostPrice": item.CostPrice,
        "ChildSellingPrice": item.OriginalPrice,
        "IsAllowDeleted": false,
        "IsDefaultChecked": true,
        "IsSingleSold": true,
        "ProductType": "景点"
      };
      var temp = _.find($rootScope[position[2]].step4.Additionals, function(scenic) {
        return scenic.Title === item.Title;
      });
      if (undefined === temp) {
        $rootScope[position[2]].step4.Additionals.push(param);
      }
    });
    $rootScope[position[2]].step4.removeTicket.forEach(function(item) {
      var temp = _.find($rootScope[position[2]].step4.Additionals, function(scenic) {
        return scenic.Title === item.Title;
      });
      if (undefined !== temp) {
        $rootScope[position[2]].step4.Additionals = _.without($rootScope[position[2]].step4.Additionals, temp);
      }
    });
    $scope.switchAddition();
  };

  $scope.saveAdditionGoods = function() {
    $rootScope[position[2]].step4.allGoods.forEach(function(item) {
      if (item.isSelect) {
        var param = {
          "Title": item.TravelGoodName,
          "ForeignKeyID": item._id,
          "AdultCostPrice": item.CostPrice,
          "AdultSellingPrice": '无',
          "ChildCostPrice": item.CostPrice,
          "ChildSellingPrice": '无',
          "IsAllowDeleted": false,
          "IsDefaultChecked": true,
          "IsSingleSold": true,
          "ProductType": "商品"
        };
        var temp = _.find($rootScope[position[2]].step4.Additionals, function(good) {
          return good.Title === item.TravelGoodName;
        });
        if (undefined === temp) {
          $rootScope[position[2]].step4.Additionals.push(param);
        }
      }
    });
    $scope.switchAddition();
  };

  $scope.delAddition = function(index, item) {
    var tempData = _.find($rootScope[position[2]].step4.AdditionalsStay, function(stay) {
      return stay.ForeignKeyID.$id === item.ForeignKeyID.$id;
    });
    if (undefined !== tempData) {
      $rootScope[position[2]].step4.removeData.push(item);
    }
    $rootScope[position[2]].step4.Additionals.splice(index, 1);
    // delPackages($rootScope[position[2]]._id.$id, item.ForeignKeyID.$id, function(data) {
    //   var index = findInnerObjIndex($rootScope[position[2]].step4.Additionals, ['ForeignKeyID', '$id'], item.ForeignKeyID.$id);
    //   $rootScope[position[2]].step4.Additionals = _.without($rootScope[position[2]].step4.Additionals, $rootScope[position[2]].step4.Additionals[index]);
    // });
  };

  //保存扩展说明
  $scope.saveExpand = function() {
    editFreetourExpand($rootScope[position[2]]._id.$id, $rootScope[position[2]].step5, function(data) {
      console.log(data);
    });
  };

  $scope.removeInsurance = function(item) {
    showWarningBox('是否确认要删除保险？', function() {
      delFreetourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(response) {
        $rootScope[position[2]].step3.Insurances = _.without($rootScope[position[2]].step3.Insurances, item);
        $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
      });
    });
  };

  $scope.insuranceStatus = function(status) {
    if (status) {
      $rootScope[position[2]].step3.insuranceStatus = status;
    } else {
      $rootScope[position[2]].step3.insuranceStatus = false;
    }
  };

  //保险
  $scope.saveInsurance = function() {
    $rootScope[position[2]].step3.Insurances = angular.copy($rootScope[position[2]].step3.InsurancesTemp);
    $rootScope[position[2]].step3.insuranceStatus = false;
    if ($rootScope[position[2]]._id.$id && $rootScope[position[2]].step3.addData.length > 0) {
      addFreetourInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step3.addData, function(data) {
         $rootScope[position[2]].step3.Insurances.forEach(function(insurance) {
          data.forEach(function(item) {
            if (insurance.ProductInsuranceNo === item.ProductInsuranceNo) {
              insurance.baseid = {};
              insurance.baseid.$id = item.baseid.$id;
            }
          });
        });
      });
    }
    $rootScope[position[2]].step3.addData = [];
    $rootScope[position[2]].step3.removeData.forEach(function(item) {
      delFreetourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {
        console.log(data);
      });
    });
    $rootScope[position[2]].step3.removeData = [];
  };

  $scope.clearAddData = function() {
    $scope.switchAddStep(0);
    if (!$rootScope[position[2]].isEditMode) {
      addRefreshPageByID('product-freetour-add-id-addFreetourProduct');
    }
  };

  $scope.removeProduct = function() {
    showWarningBox('确定要删除该产品吗？', function() {
      delFreetourProduct($rootScope[position[2]]._id.$id, function(response) {
        var pro = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== pro) {
          $rootScope[position[1]].list = _.without($rootScope[position[1]].list, pro);
          closeSubView();
        }
      });
    });
  };

  $scope.changeProductStatus = function() {
    var info = $rootScope[position[2]].ShowStatus === 1 ? '确定要下架该产品吗？' : '确定要上架该产品吗？';
    var param = {
      type: 2,
      id: $rootScope[position[2]]._id.$id,
      status: $rootScope[position[2]].ShowStatus === 1 ? 0 : 1
    };
    showWarningBox(info, function() {
      updateProductShowStatus(param, function(resp) {
        $rootScope[position[2]].ShowStatus = param.status;
        var pro = _.find($rootScope[position[1]].list, function(item) {
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if (undefined !== pro) {
          pro.ShowStatus = param.status;
        }
      });
    });
  };

  $scope.clearDetailInfo = function() {
    addRefreshPageByID('product-freetour-detail-id-' + $rootScope[position[2]]._id.$id);
  };

  $scope.printDetail = function() {
    var data = document.getElementById('detail_content').innerHTML;
    commitPrintData('POST', baseUrl + 'common/printing/convertToHtml', {
      content: data
    }, '_blank');
  };

  $scope.addToWebsite = function() {
    addProductSyncInfo({
      Model: 'ProductIndependenttravel',
      ID: $rootScope[position[2]]._id.$id
    }, function(response) {
      $rootScope[position[2]].info = "同步完成";
      console.log(response);
    });
  };

  $scope.addProduct = function() {
    if ($rootScope[position[1]].needClearAddData) {
      $scope.clearAddData();
    }
    $rootScope[position[1]].needClearAddData = false;
    $scope.fetch('product/freetour/add?id=addFreetourProduct', '');
    $scope.hideSubHeadInList();
    $scope.openItem();
  };

  $scope.confirmTransDeploy = function() {
    var deploy = _.find($scope.Dispatchers, function(item){
      return item._id.$id === $rootScope[position[2]].transDeployDeployInfo;
    });
    showWarningBox("确认要转移给" + deploy.FullName + "吗", function() {
      var param = {
        type: 2,
        product_id: $rootScope[position[2]]._id.$id,
        person_id: $rootScope[position[2]].transDeployDeployInfo
      };
      updateProductBelong(param, function(response) {
        $rootScope[position[2]].showTransDeploy = false;
        //修改详情页计调信息
        $rootScope[position[2]].Belong = {
          EmployeeDepartmentID: {$id: deploy.Department.ID.$id},
          EmployeeDepartmentName: "",
          EmployeeName: deploy.FullName,
          ForeignKeyID: {$id: $rootScope[position[2]].transDeployDeployInfo}
        };
        var target = _.find($rootScope[position[1]].list, function(item){
          return item._id.$id === $rootScope[position[2]]._id.$id;
        });
        if(undefined !== target && null !== target){
          target.Belong = angular.copy($rootScope[position[2]].Belong);
        }
      });
    });
  };

});
app.controller('scheduleController',function($scope,$rootScope){
  
});
app.controller('productFreetourPlanForeController', function($rootScope, $scope, freetourPlanFore, showWarningBox,
  delProductPlanById, addRefreshPageByID, getScheduleClass, editIndependenttravelProductPlanProject,
  addIndependenttravelProductPlanProject, getBasicsTrafficTypeAll, findTraffic,
  getBasicsHotelByNameOrGADDRTitle, getCostListProduct, editIndependenttravelProductPlanBatch) {
  $scope.status = {};

  $scope.searchTeamtourPlan = function() {
    $rootScope[position[1]].search.page = 1;
    var param = {
      page: 1
    };
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.keyword !== '') {
      param.keyword = $rootScope[position[1]].search.keyword;
    }
    if ($rootScope[position[1]].search.Station && $rootScope[position[1]].search.Station._id) {
      param.Station = $rootScope[position[1]].search.Station._id.$id;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.order !== 2) {
      param.order = $rootScope[position[1]].search.order;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.expire) {
      param.expire = $rootScope[position[1]].search.expire;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.StartTimeDate) {
      param.StartTime = "" + $rootScope[position[1]].search.StartTimeDate.getTime() / 1000;
      if (!$rootScope[position[1]].search.EndTimeDate) {
        param.StartTime += ",9999999999";
      }
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.EndTimeDate) {
      if (!param.StartTime || param.StartTime === "") {
        param.StartTime = "0";
      }
      param.StartTime += "," + $rootScope[position[1]].search.EndTimeDate.getTime() / 1000;
    }
    freetourPlanFore.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, param);
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.loadTeamourPlanListData = function() {
    if (!$rootScope[position[1]].search.page) {
      $rootScope[position[1]].search.page = 1;
    }
    $rootScope[position[1]].search.page++;
    var param = {
      page: $rootScope[position[1]].search.page
    };
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.keyword !== '') {
      param.keyword = $rootScope[position[1]].search.keyword;
    }
    if ($rootScope[position[1]].search.Station && $rootScope[position[1]].search.Station._id) {
      param.Station = $rootScope[position[1]].search.Station._id.$id;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.order !== 2) {
      param.order = $rootScope[position[1]].search.order;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.expire) {
      param.expire = $rootScope[position[1]].search.expire;
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.StartTimeDate) {
      param.StartTime = "" + $rootScope[position[1]].search.StartTimeDate.getTime() / 1000;
      if (!$rootScope[position[1]].search.EndTimeDate) {
        param.StartTime += ",9999999999";
      }
    }
    if ($rootScope[position[1]].search && $rootScope[position[1]].search.EndTimeDate) {
      if (!param.StartTime || param.StartTime === "") {
        param.StartTime = "0";
      }
      param.StartTime += "," + $rootScope[position[1]].search.EndTimeDate.getTime() / 1000;
    }
    freetourPlanFore.list(function(response) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, response.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, param);
  };

  $scope.changeShowPrice = function(type) {
    if (type == 1) {
      $rootScope[position[2]].showTransportScheme = true;
      $rootScope[position[2]].showHotelScheme = false;
    } else {
      $rootScope[position[2]].showTransportScheme = false;
      $rootScope[position[2]].showHotelScheme = true;
    }
  };

  $scope.delPlan = function(item) {
    showWarningBox('确定要删除该计划吗？', function() {
      delProductPlanById($rootScope[position[2]].planInfo._id.$id, function(response) {
        $rootScope.showSubView = false;
        $scope.searchTeamtourPlan();
      });
    });
  };
  $scope.TrafficSelect = function(value) {
    if (value.ProductType.ForeignKeyID.$id == '000000000000000000000004') return true;
  };
  $scope.HotelSelect = function(value) {
    if (value.ProductType.ForeignKeyID.$id == '000000000000000000000007') return true;
  };

  $scope.clickTrafficNumber = function(item) {
    $rootScope[position[2]].addPlanInfo = angular.copy(item);
    $rootScope[position[2]].addPlanInfo.Traffics.forEach(function(project) {
      project.TrafficInfo = project.Traffic.TrafficCompany.Title + "/" + project.Traffic.Title;
      project.DepartureInformation = project.Traffic.DepartureTime + " " + project.Traffic.StartAddress + "-----" + project.Traffic.ArriveTime + " " + project.Traffic.ArriveAddress;
      project.DepartureTimeInfo = new Date(project.DepartureTime.sec * 1000);
    });
    $scope.isAddTrafficScheme = false;
    $scope.SaveAndNext = true;
    $scope.hasSelectTraffic = false;
    $scope.isClickTrafficNumber = true;
  };

  //保存交通方案 按钮
  $scope.savePlanTrafficScheme = function() {
    $scope.isAddTrafficScheme = false;
    $scope.SaveAndNext = true;
    $scope.hasSelectTraffic = false;
  };

  //取消交通方案 按钮
  $scope.cancelPlanTrafficScheme = function() {
    $scope.isAddTrafficScheme = false;
  };

  //交通返回
  $scope.trafficBack = function() {
    $scope.SaveAndNext = false;
    $scope.hasSelectTraffic = true;
    $scope.isClickTrafficNumber = false;
  };
  //改变交通默认方案
  $scope.changeDefault = function(item) {
    item.IsDefault = true;
    var items = _.find($scope.editPlanInfo.Transport, function(traffic) {
      if (traffic.baseid !== item.baseid) {
        traffic.IsDefault = false;
        return true;
      }
    });
  };
  //点击 添加交通  按钮,对交通的基本信息赋初值
  $scope.addTraffic = function() {
    $rootScope[position[2]].searchTrafficInfo = '';
    $rootScope[position[2]].trafficInfo = {
      AdultSellingPrice: 0,
      ChildSellingPrice: 0,
      AdultCostPrice: 0,
      ChildCostPrice: 0,
      AdultMachineBuildingFee: 0,
      ChildMachineBuildingFee: 0,
      IsRemove: "false",
      IsSingleSold: "false",
      ProductDays: 0,
      TrafficPattern: "1"
    };
    $scope.ClickAddTraffic = true;
  };
  //保存交通 按钮
  $scope.SavePlanAddTransport = function() {
    //判断是否是直接点击页面上的交通数量进入交通内容显示的，如果是则说明不是通过添加交通方案之后再添加交通的，需要用到单独修改交通方案的接口
    if ($scope.isClickTrafficNumber) {
      var traffic = {
        id: $rootScope[position[2]].planInfo._id.$id,
        baseid: $rootScope[position[2]].addPlanInfo.baseid.$id,
        ProductType: '000000000000000000000004',
        Description: $rootScope[position[2]].addPlanInfo.Description,
        Title: $rootScope[position[2]].addPlanInfo.Title,
        IsDefault: $rootScope[position[2]].addPlanInfo.IsDefault,
        Traffics: $rootScope[position[2]].addPlanInfo.Traffics
      };

      if ($rootScope[position[2]].addPlanInfo.Traffics.length > 0) {
        $rootScope[position[2]].addPlanInfo.Traffics.forEach(function(item) {
          item.Traffic_id = item.Traffic.ForeignKeyID.$id;
          item.DepartureTime = item.DepartureTime.sec;
          item.ForeignKeyID = item.ForeignKeyID.$id;
        });
      }
      $rootScope[position[2]].trafficInfo.DepartureTime = ('' + $rootScope[position[2]].trafficInfo.$$departureTime.getTime()).slice(0, 10);
      if ($rootScope[position[2]].trafficInfo.IsRemove == "true") {
        $rootScope[position[2]].trafficInfo.IsRemove = true;
      } else {
        $rootScope[position[2]].trafficInfo.IsRemove = false;
      }
      if ($rootScope[position[2]].trafficInfo.IsSingleSold == "true") {
        $rootScope[position[2]].trafficInfo.IsSingleSold = true;
      } else {
        $rootScope[position[2]].trafficInfo.IsSingleSold = false;
      }
      traffic.Traffics.push($rootScope[position[2]].trafficInfo);
      editIndependenttravelProductPlanProject(traffic, function(response) {
        $scope.isAddTrafficScheme = false;
        $scope.SaveAndNext = false;
        $scope.ClickAddTraffic = false;
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID);
      });

    } else {
      //判断是否是直接点击页面上的交通数量进入酒店内容显示的，如果'否'说明是通过添加交通方案之后再添加交通的，需要用到单独添加交通方案的接口
      var traffic = {
        id: $rootScope[position[2]].planInfo._id.$id,
        ProductType: '000000000000000000000004',
        Description: $rootScope[position[2]].addPlanInfo.Description,
        Title: $rootScope[position[2]].addPlanInfo.Title,
        IsDefault: $rootScope[position[2]].addPlanInfo.IsDefault,
        Traffics: []
      };
      $rootScope[position[2]].trafficInfo.DepartureTime = ('' + $rootScope[position[2]].trafficInfo.$$departureTime.getTime()).slice(0, 10);
      if ($rootScope[position[2]].trafficInfo.IsRemove == "true") {
        $rootScope[position[2]].trafficInfo.IsRemove = true;
      } else {
        $rootScope[position[2]].trafficInfo.IsRemove = false;
      }
      if ($rootScope[position[2]].trafficInfo.IsSingleSold == "true") {
        $rootScope[position[2]].trafficInfo.IsSingleSold = true;
      } else {
        $rootScope[position[2]].trafficInfo.IsSingleSold = false;
      }
      traffic.Traffics.push($rootScope[position[2]].trafficInfo);

      addIndependenttravelProductPlanProject(traffic, function(response) {
        $scope.isAddTrafficScheme = false;
        $scope.SaveAndNext = false;
        $scope.ClickAddTraffic = false;
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID);
      });
    }
  };
  //取消交通添加 按钮
  $scope.cancelPlanAddTransport = function() {
    $scope.ClickAddTraffic = false;
  };

  //选择交通
  $scope.selectTraffic = function(page) {
    if (!$rootScope[position[2]].planInfo.Traffic) {
      $rootScope[position[2]].planInfo.Traffic = {};
    }
    $rootScope[position[2]].planInfo.Traffic.Page = page;
    getBasicsTrafficTypeAll(function(response) {
      $scope.SelectTrafficType = response.list;
    });

    var TrafficTypeID = "";
    var AddressID = "";
    var ArriveAddressID = "";
    findTraffic(TrafficTypeID, $rootScope[position[2]].searchTrafficInfo, AddressID, ArriveAddressID, $rootScope[position[2]].planInfo.Traffic.Page, function(response) {
      $rootScope[position[2]].planInfo.Traffic = response.list;
      var page = new Pagination(response.count, response.page, 5);
      if (!$scope.Pagination) {
        $scope.Pagination = {};
      }
      $scope.Pagination.Traffic = page;
    });

    $scope.isSelectTraffic = true;
  };
  //选择交通
  $scope.chooseTraffic = function(item) {
    $rootScope[position[2]].trafficInfo.TrafficInfo = item.TrafficCompany.Title + "/" + item.Title;
    $rootScope[position[2]].trafficInfo.Traffic_id = item._id.$id;
    $rootScope[position[2]].trafficInfo.DepartureInformation = item.DepartureTime + " " + item.StartAddress + "-----" + item.ArriveTime + " " + item.ArriveAddress;

    $scope.hasSelectTraffic = true;
    $scope.isSelectTraffic = false;
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.status = {};

  //删除交通
  $scope.delTraffics = function(Traffic) {
    $rootScope[position[2]].addPlanInfo.Traffics = _.without($rootScope[position[2]].addPlanInfo.Traffics, Traffic);
  };

  //取消酒店房间选择
  $scope.cancelHotel = function() {
    $scope.ClickAddHotel = true;
    $scope.isSelectHotel = false;
  };
  //用于判断是直接进入酒店内容现实的还是通过新增方案之后进入酒店内容的
  $scope.clickHotelNumber = function(item) {
    $rootScope[position[2]].addPlanInfo = angular.copy(item);
    $rootScope[position[2]].addPlanInfo.Hotels.forEach(function(project) {
      project.HotelInfo = project.Hotel.HotelName;
      project.DepartureTimeInfo = new Date(project.DepartureTime.sec * 1000);
    });
    $scope.isAddHotelScheme = false;
    $scope.SaveAndNext = true;
    $scope.hasSelectHotel = false;
    $scope.isClickHotelNumber = true;
  };

  //保存酒店方案 按钮
  $scope.savePlanHotelScheme = function() {
    $scope.isAddHotelScheme = false;
    $scope.SaveAndNext = true;
    $scope.hasSelectHotel = false;
  };
  //取消酒店方案 按钮
  $scope.cancelPlanHotelScheme = function() {
    $scope.isAddHotelScheme = false;
  };

  //酒店返回按钮
  $scope.hotelBack = function() {
    $scope.SaveAndNext = false;
    $scope.hasSelectHotel = true;
    $scope.isClickHotelNumber = false;
  };

  //点击 添加酒店  按钮,对酒店的基本信息赋初值
  $scope.addHotel = function() {
    $rootScope[position[2]].searchInfo = '';
    $rootScope[position[2]].hotelInfo = {
      HotelInfo: '',
      IsRemove: "false",
      IsSingleSold: "false",
      Days: 0,
      ProductRoomCount: 0
    };
    $scope.ClickAddHotel = true;
  };
  //改变酒店默认方案
  $scope.changeDefaultHotel = function(item) {
    item.IsDefault = true;
    var items = _.find($scope.editPlanInfo.Hotel, function(hotel) {
      if (hotel.baseid !== item.baseid) {
        hotel.IsDefault = false;
        return true;
      }
    });
  };

  //点击选择酒店
  $scope.selectHotel = function(page) {
    if (!$rootScope[position[2]].planInfo.Hotels) {
      $rootScope[position[2]].planInfo.Hotels = {};
    }
    $rootScope[position[2]].planInfo.Hotels.Page = page;

    getBasicsHotelByNameOrGADDRTitle($rootScope[position[2]].searchInfo || " ", $rootScope[position[2]].planInfo.Hotels.Page, function(response) {
      $rootScope[position[2]].planInfo.Hotels = response.data;
      var page = new Pagination(response.count, response.page, 5);
      if (!$scope.Pagination) {
        $scope.Pagination = {};
      }
      $scope.Pagination.Hotel = page;
    });
    $scope.ClickAddHotel = false;
    $scope.isSelectHotel = true;
  };

  $scope.showPackageDetail = function(item) {
    if (!item.showDetailStatus) {
      item.showDetailStatus = true;
    } else {
      item.showDetailStatus = !item.showDetailStatus;
    }
  };

  //点击选择酒店房间
  $scope.chooseHotelRoom = function(items, room) {
    $rootScope[position[2]].hotelInfo.HotelInfo = items.HotelName;
    $rootScope[position[2]].hotelInfo.Hotel_id = items._id.$id;
    if ($rootScope[position[2]].hotelInfo.HotelRooms) {
      $rootScope[position[2]].hotelInfo.HotelRooms.push(room);
    } else {
      $rootScope[position[2]].hotelInfo.HotelRooms = [];
      $rootScope[position[2]].hotelInfo.HotelRooms.push(room);
    }
    $scope.hasSelectHotel = true;
    $scope.ClickAddHotel = true;
    $scope.isSelectHotel = false;
  };

  //取消酒店房间选择
  $scope.cancelHotel = function() {
    $scope.ClickAddHotel = true;
    $scope.isSelectHotel = false;
  };

  //保存酒店 按钮
  $scope.SavePlanAddHotel = function() {
    //判断是否是直接点击页面上的酒店数量进入酒店内容显示的，如果是则说明不是通过添加酒店方案之后再添加酒店的，需要用到单独修改酒店方案的接口
    if ($scope.isClickHotelNumber) {
      var hotel = {
        id: $rootScope[position[2]].planInfo._id.$id,
        baseid: $rootScope[position[2]].addPlanInfo.baseid.$id,
        ProductType: '000000000000000000000007',
        Description: $rootScope[position[2]].addPlanInfo.Description,
        Title: $rootScope[position[2]].addPlanInfo.Title,
        IsDefault: $rootScope[position[2]].addPlanInfo.IsDefault,
        Hotels: $rootScope[position[2]].addPlanInfo.Hotels
      };

      if ($rootScope[position[2]].addPlanInfo.Hotels.length > 0) {
        $rootScope[position[2]].addPlanInfo.Hotels.forEach(function(item) {
          item.Hotel_id = item.Hotel.ForeignKeyID.$id;
          item.DepartureTime = item.DepartureTime.sec;
          item.ForeignKeyID = item.ForeignKeyID.$id;
        });
      }
      $rootScope[position[2]].hotelInfo.DepartureTime = ('' + $rootScope[position[2]].hotelInfo.$$departureTime.getTime()).slice(0, 10);
      hotel.Hotels.push($rootScope[position[2]].hotelInfo);
      editIndependenttravelProductPlanProject(hotel, function(response) {
        $scope.isAddTrafficScheme = false;
        $scope.SaveAndNext = false;
        $scope.ClickAddTraffic = false;
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID);
      });

    } else {
      //判断是否是直接点击页面上的酒店数量进入酒店内容显示的，如果否说明是通过添加酒店方案之后再添加酒店的，需要用到单独添加店方案的接口
      var hotel = {
        id: $rootScope[position[2]].planInfo._id.$id,
        ProductType: '000000000000000000000007',
        Description: $rootScope[position[2]].addPlanInfo.Description,
        Title: $rootScope[position[2]].addPlanInfo.Title,
        IsDefault: $rootScope[position[2]].addPlanInfo.IsDefault,
        Hotels: []
      };
      $rootScope[position[2]].hotelInfo.DepartureTime = ('' + $rootScope[position[2]].hotelInfo.$$departureTime.getTime()).slice(0, 10);


      if ($rootScope[position[2]].hotelInfo.IsRemove == "true") {
        $rootScope[position[2]].hotelInfo.IsRemove = true;
      } else {
        $rootScope[position[2]].hotelInfo.IsRemove = false;
      }
      if ($rootScope[position[2]].hotelInfo.IsSingleSold == "true") {
        $rootScope[position[2]].hotelInfo.IsSingleSold = true;
      } else {
        $rootScope[position[2]].hotelInfo.IsSingleSold = false;
      }

      hotel.Hotels.push($rootScope[position[2]].hotelInfo);

      addIndependenttravelProductPlanProject(hotel, function(response) {
        $scope.isAddHotelScheme = false;
        $scope.SaveAndNext = false;
        $scope.ClickAddHotel = false;

        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].ProductID);
      });
    }
  };

  //取消酒店保存 按钮
  $scope.cancelPlanAddHotel = function() {
    $scope.ClickAddHotel = false;
  };

  $scope.editPlan = function() {
    $rootScope[position[2]].isEditMode = true;
    $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);
    $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].editPlanInfo.CostInfo;
    $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;

    $rootScope[position[2]].editPlanInfo.ProductType = 4;

    getScheduleClass($rootScope[position[2]].planInfo.ProductID.$id, function(response) {
      $rootScope[position[2]].editPlanInfo.tripList = response.list;
      if ($rootScope[position[2]].editPlanInfo.tripList.length > 0 && $rootScope[position[2]].editPlanInfo.TripID) {
        var trip = _.find($rootScope[position[2]].editPlanInfo.tripList, function(item) {
          return item._id.$id === $rootScope[position[2]].editPlanInfo.TripID.$id;
        });
        if (undefined !== trip) {
          $rootScope[position[2]].editPlanInfo.Trip = trip;
        }
      }
    });
    if (!$rootScope[position[2]].editPlanInfo.allCost) {
      getCostListProduct({
        keyword: "",
        page: 1,
        limit: 10
      }, function(response) {
        $rootScope[position[2]].editPlanInfo.allCost = response.list;
        if ($rootScope[position[2]].editPlanInfo.PlanTheCost) {
          $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item) {
            return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
          });
        }
      });
    } else {
      if ($rootScope[position[2]].editPlanInfo.PlanTheCost) {
        $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item) {
          return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
        });
      }
    }
    //在编辑的时候将酒店和交通方案拆开
    $rootScope[position[2]].editPlanInfo.Transport = [];
    $rootScope[position[2]].editPlanInfo.Hotel = [];
    //循环方案
    $rootScope[position[2]].editPlanInfo.PlanProject.forEach(function(item) {

      if (item.ProductType.ForeignKeyID.$id === '000000000000000000000007') {
        //将酒店方案的数据放入editPlanInfo.Hotel中
        var data = {
          id: $rootScope[position[2]].editPlanInfo._id.$id,
          baseid: item.baseid.$id,
          ProductType: '000000000000000000000007',
          Description: item.Description,
          Title: item.Title,
          IsDefault: item.IsDefault,
          Hotels: []
        };

        item.Hotels.forEach(function(hotel) {
          data.Hotels.push({
            Hotel_id: hotel.Hotel.ForeignKeyID.$id,
            ForeignKeyID: hotel.ForeignKeyID.$id,
            HotelInfo: hotel.Hotel.HotelName,
            $$departureTime: new Date(hotel.DepartureTime.sec * 1000),
            Days: hotel.Days,
            IsRemove: hotel.IsRemove,
            IsSingleSold: hotel.IsSingleSold,
            ProductRoomCount: hotel.ProductRoomCount,
            HotelRooms: hotel.HotelRooms
          });
        });

        $rootScope[position[2]].editPlanInfo.Hotel.push(data);
      } else {
        //将交通方案的数据放入editPlanInfo.traffic中
        var data = {
          id: $rootScope[position[2]].editPlanInfo._id.$id,
          baseid: item.baseid.$id,
          ProductType: '000000000000000000000004',
          Description: item.Description,
          Title: item.Title,
          IsDefault: item.IsDefault,
          Traffics: []
        };
        if (item.Traffics) {
          item.Traffics.forEach(function(traffic) {
            traffic.Traffic_id = traffic.Traffic.ForeignKeyID.$id;
            traffic.ForeignKeyID = traffic.ForeignKeyID.$id;
            traffic.TrafficInfo = traffic.Traffic.TrafficCompany.Title + '/' + traffic.Traffic.Title;
            traffic.$$departureTime = new Date(traffic.DepartureTime.sec * 1000);
            traffic.DepartureInformation = traffic.Traffic.DepartureTime + " " + traffic.Traffic.StartAddress + "-----" + traffic.Traffic.ArriveTime + " " + traffic.Traffic.ArriveAddress;
            data.Traffics.push(traffic);
          });
        }


        $rootScope[position[2]].editPlanInfo.Transport.push(data);
      }
    });
  };

  $scope.cancelPlan = function() {
    $rootScope[position[2]].isEditMode = false;
  };

  $scope.savePlan = function(callBack) {
    var param = {};
    //计划信息
    param.CompanyInfoId = $rootScope.userinfo.CompanyID.$id;
    param.ProductName = $rootScope[position[2]].ProductName;
    param.ProductNo = $rootScope[position[2]].ProductNo;
    param.TravelDay = $rootScope[position[2]].TravelDay;
    param.ProductID = $rootScope[position[2]].planInfo.ProductID.$id;
    param.Networkorder = $rootScope[position[2]].editPlanInfo.Networkorder;
    param.NetworkDefaultDisplayAdultNumber = $rootScope[position[2]].editPlanInfo.NetworkDefaultDisplayAdultNumber;
    param.NetworkDefaultDisplayChildNumber = $rootScope[position[2]].editPlanInfo.NetworkDefaultDisplayChildNumber;
    param.VouchersPrice = $rootScope[position[2]].editPlanInfo.VouchersPrice;
    param.FinalorderDay = $rootScope[position[2]].editPlanInfo.FinalorderDay;
    param.FinalorderHour = $rootScope[position[2]].editPlanInfo.FinalorderHour;
    param.ShowStatus = $rootScope[position[2]].editPlanInfo.ShowStatus;
    param.PlanProject = [];
    //交通方案


    //酒店方案
    /*$rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
      item.isDefault = 0;
      if (!item.Pricetitle) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        return;
      }
      param.PlanProject.push(item);
    });*/

    //param.PlanProject.push(pricePlanNormal);
    if ($rootScope[position[2]].editPlanInfo.Cost && $rootScope[position[2]].editPlanInfo.Cost.hasOwnProperty('_id')) {
      // $rootScope[position[2]].info = '请选择成本';
      // return;
      param.PlanTheCost = $rootScope[position[2]].editPlanInfo.Cost._id.$id;
    } else {

    }

    if ($rootScope[position[2]].editPlanInfo.Trip) {
      param.TripID = $rootScope[position[2]].editPlanInfo.Trip._id.$id;
    }



    if (!param.Networkorder) {
      $rootScope[position[2]].info = '请选择网络订单';
      callBack();
      return;
    }

    if (!param.FinalorderDay && !param.FinalorderHour) {
      $rootScope[position[2]].info = '请填写预订提前时间';
      callBack();
      return;
    }

    if (param.NetworkDefaultDisplayAdultNumber === null || param.NetworkDefaultDisplayAdultNumber === undefined) {
      $rootScope[position[2]].info = '请填写默认成人数';
      callBack();
      return;
    }
    if (param.NetworkDefaultDisplayChildNumber === null || param.NetworkDefaultDisplayChildNumber === undefined) {
      $rootScope[position[2]].info = '请填写默认小孩数';
      callBack();
      return;
    }


    if ($rootScope[position[2]].editPlanInfo.Transport) {
      $rootScope[position[2]].editPlanInfo.Transport.forEach(function(item) {
        if (!item.Title) {
          $rootScope[position[2]].info = '请填写交通方案标题';
          callBack();
          return;
        }
        item.Traffics.forEach(function(ele) {
          ele.DepartureTime = ('' + ele.$$departureTime.getTime()).slice(0, 10);
          if (ele.IsRemove == "true") {
            ele.IsRemove = true;
          } else {
            ele.IsRemove = false;
          }
          if (ele.IsSingleSold == "true") {
            ele.IsSingleSold = true;
          } else {
            ele.IsSingleSold = false;
          }
        });
        item.ProductType = 4;

        param.PlanProject.push(item);

      });
    }
    if ($rootScope[position[2]].editPlanInfo.Hotel) {
      $rootScope[position[2]].editPlanInfo.Hotel.forEach(function(item) {
        if (!item.Title) {
          $rootScope[position[2]].info = '请填写酒店方案标题';
          callBack();
          return;
        }
        item.Hotels.forEach(function(ele) {
          ele.DepartureTime = ('' + ele.$$departureTime.getTime()).slice(0, 10);
          if (ele.IsRemove == "true") {
            ele.IsRemove = true;
          } else {
            ele.IsRemove = false;
          }
          if (ele.IsSingleSold == "true") {
            ele.IsSingleSold = true;
          } else {
            ele.IsSingleSold = false;
          }
        });
        item.ProductType = 7;

        param.PlanProject.push(item);
      });
    }

    if (!$rootScope[position[2]].editPlanInfo.Hotel && !$rootScope[position[2]].editPlanInfo.Transport) {
      $rootScope[position[2]].info = '请添加方案!';
      callBack();
      return;
    }

    if ($rootScope[position[2]].isEditMode) {
      var params1 = [];
      param.id = $rootScope[position[2]].editPlanInfo._id.$id;
      param.StartTime = $rootScope[position[2]].editPlanInfo.StartTime.sec;
      param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);

      params1.push(angular.copy(param));
      console.log(params1);
      editIndependenttravelProductPlanBatch(params1, function(response) {
        //刷新订单页面
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.fetch($rootScope[switchType[2]].targetUrl);
      });
    }
  };
});app.controller('productCruisePlanDetailController',function($http, $scope, $rootScope, _,$filter, showWarningBox, closeSubView, cruisePlanFore,editCruiseProductPlanBatch,getCruiseDetail,getShipPlanDetail,
addRefreshPageByID,getTeamtourPlanList,delProductPlanPriceById,getTeamListByPlanId, Pagination, delProductPlanById, getCostListProduct, getScheduleClass, orderTransferTeam,editTeamtourProductPlanBatch,addTeamByPlan){

    $scope.delUpgradePrice = function(price) {
        showWarningBox('确定要删除该计划吗？', function() {
            delProductPlanPriceById(price._id.$id, function(response) {
                $rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0 = _.without($rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0, price);
            });
        });
    };

    $scope.delPlan = function() {
        showWarningBox('确定要删除该计划吗？', function() {
            delProductPlanById($rootScope[position[2]].planInfo._id.$id, function(response) {
                var target = _.find($rootScope[position[1]].list, function(item){
                    return item._id.$id === $rootScope[position[2]].planInfo._id.$id;
                });
                if(undefined !== target){
                    $rootScope[position[1]].list = _.without($rootScope[position[1]].list, target);
                }
                closeSubView();
            });
        });
    };

    $scope.editPlan = function() {
        $rootScope[position[2]].isEditMode = true;

        $rootScope[position[2]].editPlanInfo = angular.copy($rootScope[position[2]].planInfo);
        $rootScope[position[2]].editPlanInfo.Cost = $rootScope[position[2]].planInfo.CostInfo;
        $rootScope[position[2]].editPlanInfo.PlanTypeID = $rootScope[position[2]].planInfo.PlanTypeID.ID;
        $rootScope[position[2]].editPlanInfo.CompanyInfoId = $rootScope[position[2]].editPlanInfo.CompanyInfo.ForeignKeyID.$id;
        $rootScope[position[2]].editPlanInfo.pricePlanAdvanced = $rootScope[position[2]].planInfo.ProductPlanPrice_isDefault0;
        $rootScope[position[2]].editPlanInfo.priceType = 1;
        getScheduleClass($rootScope[position[2]].ProductID, function(response) {
            $rootScope[position[2]].editPlanInfo.tripList = response.list;
            if ($rootScope[position[2]].editPlanInfo.tripList.length > 0) {
                var trip = _.find($rootScope[position[2]].editPlanInfo.tripList, function(item){
                    return item._id.$id === $rootScope[position[2]].editPlanInfo.TripID.$id;
                });
                if(undefined !== trip){
                    $rootScope[position[2]].editPlanInfo.Trip = trip;
                }
            }
        });

     getCruiseDetail($rootScope[position[2]].ProductID, function(response) {
        getShipPlanDetail(response.Cruise.ForeignKeyID.$id, function(item) {
          $rootScope[position[2]].editPlanInfo.ShippingSpaces = item.ShippingSpaces;
        });
      });
        if(!$rootScope[position[2]].editPlanInfo.allCost){
            getCostListProduct({
                keyword: "",
                page: 1,
                limit: 10
            }, function(response) {
                $rootScope[position[2]].editPlanInfo.allCost = response.list;
                if ($rootScope[position[2]].editPlanInfo.PlanTheCost) {
                    $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item) {
                        return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
                    });
                }
            });
        }else{
            $rootScope[position[2]].editPlanInfo.Cost = _.find($rootScope[position[2]].editPlanInfo.allCost, function(item){
                return item._id.$id === $rootScope[position[2]].editPlanInfo.PlanTheCost.ForeignKeyID.$id;
            });
        }
        $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(price1){
            price1.id = price1._id.$id;
            price1.PlanID = price1.PlanID.$id;
        });
    };

    $scope.changeShowPrice = function(type) {
        if (type == 1) {
            $rootScope[position[2]].planInfo.showNormalPrice = true;
            $rootScope[position[2]].planInfo.showUpgradePrice = false;
        } else {
            $rootScope[position[2]].planInfo.showNormalPrice = false;
            $rootScope[position[2]].planInfo.showUpgradePrice = true;
        }
    };

    $scope.teamSet = function(){
        if(!$rootScope[position[2]].planInfo.teamList){
            getTeamListByPlanId($rootScope[position[2]].planInfo._id.$id, function(teamList){
                $rootScope[position[2]].planInfo.teamList = teamList.data;
                $rootScope[position[2]].planInfo.teamList.OrderInfo = {
                    OrderMoney: 0,
                    PayPrice: 0,
                    UnPayPrice: 0,
                    AdultNumber: 0,
                    ChildNumber: 0,
                    BabyNumber: 0,
                    Number: 0,
                    SiteNumber: 0,
                };
                $rootScope[position[2]].planInfo.teamList.forEach(function(item){
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.OrderMoney += item.TeamOrderInfo.TotalOrderMoney;
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.PayPrice += item.TeamOrderInfo.TotalPayPrice;
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.UnPayPrice += item.TeamOrderInfo.TotalUnPayPrice;
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.AdultNumber += item.TeamOrderInfo.TotalAdultNumber;
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.ChildNumber += item.TeamOrderInfo.TotalChildNumber;
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.BabyNumber += item.TeamOrderInfo.TotalBabyNumber;
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.Number += item.TeamOrderInfo.TotalNumber;
                    $rootScope[position[2]].planInfo.teamList.OrderInfo.SiteNumber += item.TeamOrderInfo.TotalSiteNumber;
                });
                if($rootScope[position[2]].planInfo.teamList.length > 0){
                    $rootScope[position[2]].planInfo.teamShow = $rootScope[position[2]].planInfo.teamList[0];
                    if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
                        $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                        $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                    }
                }
            });
        }
        $rootScope[position[2]].planInfo.isTeamSet = !$rootScope[position[2]].planInfo.isTeamSet;
    };

    $scope.savePlan = function() {
        var param = {};
        var pricePlanNormal = {};
        var pricePlanAdvanced = [];
        //计划信息
        param.CompanyInfoId = $rootScope.userinfo.CompanyID.$id;
        param.ProductID = $rootScope[position[2]].ProductID;
        param.ProductName =  $rootScope[position[2]].ProductName;
        param.ProductNo =  $rootScope[position[2]].ProductNo;
        param.TravelDay = $rootScope[position[2]].TravelDay;
        //param.Trip = $rootScope[position[2]].editPlanInfo.Trip;
        param.PlanTypeID = $rootScope[position[2]].editPlanInfo.PlanTypeID;
        param.PeerCompanyName = $rootScope[position[2]].editPlanInfo.PeerCompanyName;
        param.Allaccompanytourguide = $rootScope[position[2]].editPlanInfo.Allaccompanytourguide+"";
        param.Lowestformation = $rootScope[position[2]].editPlanInfo.Lowestformation;
        param.Networkorder = $rootScope[position[2]].editPlanInfo.Networkorder;
        param.AdultMachineBuildingFee = $rootScope[position[2]].editPlanInfo.AdultMachineBuildingFee;
        param.ChildMachineBuildingFee = $rootScope[position[2]].editPlanInfo.ChildMachineBuildingFee;
        param.AdultShipPortFee = 0;
        param.ChildShipPortFee = 0;
        param.ExitVisaFee = $rootScope[position[2]].editPlanInfo.ExitVisaFee;
        param.TourGuideServiceCharge = $rootScope[position[2]].editPlanInfo.TourGuideServiceCharge;
        param.FinalorderDay = $rootScope[position[2]].editPlanInfo.FinalorderDay;
        param.FinalorderHour = $rootScope[position[2]].editPlanInfo.FinalorderHour;
        param.FinalreservationDay = $rootScope[position[2]].editPlanInfo.FinalreservationDay;
        param.FinalreservationHour = $rootScope[position[2]].editPlanInfo.FinalreservationHour;
        param.ReserveDay = $rootScope[position[2]].editPlanInfo.ReserveDay;
        param.ReserveHour = $rootScope[position[2]].editPlanInfo.ReserveHour;
        param.ShowStatus = $rootScope[position[2]].editPlanInfo.ShowStatus;

        //舱位类型
        param.productPlanPrice = [];


     if($rootScope[position[2]].isEditMode){
        $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
      if (!item.ShippingSpace) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        return;
      }
      //
      var idTemp = item.ShippingSpace.ForeignKeyID.$id;
      item.ShippingSpace.ForeignKeyID = idTemp;

      item.Pricetitle=item.ShippingSpace.Title;
      if(item.id){
         param.productPlanPrice.push(item);
       }else{
         item.PlanID = $rootScope[position[2]].editPlanInfo._id.$id;
        param.productPlanPrice.push(item);
       }
    });
    }else if($rootScope[position[2]].operate.batchAdd){
       $rootScope[position[2]].editPlanInfo.pricePlanAdvanced.forEach(function(item) {
      if (!item.ShippingSpace) {
        $rootScope[position[2]].info = '请填写升级方案的价格标题';
        return;
      }
      var idTemp = item.ShippingSpace.ForeignKeyID.$id;
      item.ShippingSpace.ForeignKeyID = idTemp;
        item.Pricetitle=item.ShippingSpace.Title;
         param.productPlanPrice.push(item);
    });
    }


        if ($rootScope[position[2]].editPlanInfo.Cost&&$rootScope[position[2]].editPlanInfo.Cost.hasOwnProperty('_id')) {
            // $rootScope[position[2]].info = '请选择成本';
            // return;
            //
            param.PlanTheCost = $rootScope[position[2]].editPlanInfo.Cost._id.$id;
        }else{

        }

        if (!$rootScope[position[2]].editPlanInfo.Trip) {
            $rootScope[position[2]].info = '请选择行程';
            //callBack();
            return;
        }

        param.TripID = $rootScope[position[2]].editPlanInfo.Trip._id.$id;

        if (param.Lowestformation===undefined) {
            $rootScope[position[2]].info = '请填写最低成员';
            //callBack();
            return;
        }

        if (!param.Networkorder) {
            $rootScope[position[2]].info = '请选择网络订单';
            //callBack();
            return;
        }

        if (!param.FinalorderDay && !param.FinalorderHour) {
            $rootScope[position[2]].info = '请填写下单截止时间';
            //callBack();
            return;
        }

        if (!param.FinalreservationDay && !param.FinalreservationHour) {
            $rootScope[position[2]].info = '请填写预留时间';
            //callBack();
            return;
        }

        if (!param.ReserveDay && !param.ReserveHour) {
            $rootScope[position[2]].info = '请填写暂留时间';
            //callBack();
            return;
        }

        if (param.productPlanPrice.length===0) {
            $rootScope[position[2]].info = '请添加舱位类型';
            //callBack();
            return;
        }
        if ($rootScope[position[2]].isEditMode) {
            var params1 = [];
            param.id = $rootScope[position[2]].editPlanInfo._id.$id;
            param.StartTime = $rootScope[position[2]].editPlanInfo.StartTime.sec;
            param.Finalorder = (param.StartTime - param.FinalorderDay * 24 * 60 * 60 - param.FinalorderHour * 60 * 60);
            param.Finalreservation = (param.StartTime - param.FinalreservationDay * 24 * 60 * 60 - param.FinalreservationHour * 60 * 60);
            param.ReserveTime = $rootScope[position[2]].editPlanInfo.ReserveDay * 24 + $rootScope[position[2]].editPlanInfo.ReserveHour;
            var newparams1 = angular.copy(param);
            params1.push(newparams1);
            editCruiseProductPlanBatch(params1, function(response) {
                addRefreshPageByID(($rootScope[switchType[2]].id));
                //callBack();
                //$scope.fetch($rootScope[switchType[2]].httpUrl + '?ProductID=' + $rootScope[position[2]].planInfo._id.$id);
                $scope.fetch($rootScope[switchType[2]].targetUrl);
            });
        }
    };

    $scope.cancelPlan = function() {
        $rootScope[position[2]].isEditMode = false;
    };

    $scope.generateNewTeam = function(){
        addTeamByPlan($rootScope[position[2]].planInfo._id.$id, 18, function(response){
            $rootScope[position[2]].planInfo.teamList.push({
                TeamNo:response.data.TeamNo,
                TeamName:response.data.TeamName,
                ID:response.data.TeamId,
                TeamOrderInfo: {list: []}
            });
        });
    };

    $scope.saveTeamTransMulti = function(){
        var OrderIdLists = [];
        var transOrder = [];
        var pushOrder = [];
        $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item){
            return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
        });
        $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
            if(order.isSelect){
                OrderIdLists.push(order.OrderId);
                transOrder.push(order);
                var data = angular.copy(order);
                data.isSelect = false;
                pushOrder.push(data);
            }
        });
        if(OrderIdLists.length==0){
            $rootScope[position[2]].info = "请选择转移的订单！";
            return;
        }
        if($rootScope[position[2]].planInfo.transTeamInfo === undefined || $rootScope[position[2]].planInfo.transTeamInfo === null){
            $rootScope[position[2]].info = "请选择转移的团队";
            return;
        }

        var postData = {
            OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
            NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
            OrderIdLists: OrderIdLists
        };
        orderTransferTeam(postData, function(response){
            $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list = $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.concat(pushOrder);
            $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.difference($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, transOrder);
            $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
            $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
            $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
            $rootScope[position[2]].planInfo.transTeamInfo= null;
        });
    };

    $scope.cancelTeamTransMulti = function(){
        $rootScope[position[2]].planInfo.isShowTeamTransMulti = false;
    };

    $scope.showTeamTrans = function(order){
        order.isShowTeamTrans = !order.isShowTeamTrans;
    };

    $scope.saveTeamTrans = function(order){
        var OrderIdLists = [];
        OrderIdLists.push(order.OrderId);
        $rootScope[position[2]].planInfo.transTeam = _.find($rootScope[position[2]].planInfo.teamList, function(item){
            return item.TeamNo === $rootScope[position[2]].planInfo.transTeamInfo;
        });
        if(!$rootScope[position[2]].planInfo.transTeam){
            $rootScope[position[2]].info = "请选择转移的团队！";
            return;
        }
        var postData = {
            OldTeamId: $rootScope[position[2]].planInfo.teamShow.ID,
            NewTeamId: $rootScope[position[2]].planInfo.transTeam.ID,
            OrderIdLists: OrderIdLists
        };
        orderTransferTeam(postData, function(response){
            $rootScope[position[2]].planInfo.transTeam.TeamOrderInfo.list.push(order);
            $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list = _.without($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list, order);
            $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
            $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
            order.isShowTeamTrans = false;
            $rootScope[position[2]].planInfo.transTeam = null;
        });
    };

    $scope.cancelTeamTrans = function(order){
        order.isShowTeamTrans = false;
    };

    $scope.teamTransMulti = function(){
        $rootScope[position[2]].planInfo.isShowTeamTransMulti = !$rootScope[position[2]].planInfo.isShowTeamTransMulti;
    };

    $scope.checkAllTeamOrder = function(){
        if($rootScope[position[2]].planInfo.isSelectAllMember){
            $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                order.isSelect = true;
            });
        }else{
            $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                order.isSelect = false;
            });
        }
    };

    $scope.teamPageChange = function(page){
        $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice((page - 1) * 5, page * 5);
        $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, page, 5);
    };

    $scope.changeTeam = function(team){
        $rootScope[position[2]].planInfo.teamShow = team;
        if($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length > 0){
            $rootScope[position[2]].planInfo.teamShow.orderShow = $rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
            $rootScope[position[2]].planInfo.teamShow.OrderPagination = new Pagination($rootScope[position[2]].planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
        }
    };
});
app.controller("productTeamtourController",
  function($http, $scope, $rootScope, componentsDepartment, $window, addProductSyncInfo, getPersonnel, updateProductBelong,
    getBasicsVisaByName, getBasicsShopingByTitleOrGADDRName, getBasicsHotelByNameOrGADDRTitle, _, addBaseTeamtour, ngDialog, $timeout,
    getDistributing, editDistributing, getProductExpand, editTeamtourExpand, getAllStartDestionation, teamtour, addTeamtourInsurance,
    delTeamtourInsurance, saveBaseTeamtour, getScheduleDetailTraffic, getTeamtourPlanList, $filter, findInnerObjIndex, saveStepStatus,
    getTeamtourInsurance, addDistributing, delTeamtourProduct, showWarningBox, closeSubView, addRefreshPageByID, updateProductShowStatus) {
    //日历的配置
    $rootScope[position[2]].calendarOptions = {
      calendarClass: "datetimePicker",
      headClass: "calHead",
      bodyClass: "calBody",
      footClass: "calFoot",
      headDateClass: "calHeadDate",
      useShort: true,

      fillDay: function(day, date) {
        if (!$rootScope[position[2]].prductPlanList) {
          $rootScope[position[2]].prductPlanList = [];
        }
        var planDetail = _.find($rootScope[position[2]].prductPlanList, function(item) {
          return item.StartTime.sec === date.getTime() / 1000;
        });
        var html = '<div class="cell_date">' + $filter('date')(date, 'dd') + '</div>';
        if (undefined !== planDetail) {
          html = '<div class="cell_date yw">' + $filter('date')(date, 'dd') + '</div>';
          var MorethanNumber = planDetail.MorethanNumber && planDetail.MorethanNumber !== '' ? planDetail.MorethanNumber : 0;
          MorethanNumber = parseInt(MorethanNumber);
          // MorethanNumber = MorethanNumber > 9 ? '<span class="gT">库存充足</span>' : '库存：<font>' + MorethanNumber + '</font>';
          MorethanNumber = '库存:<font>' + MorethanNumber + '</font>';
          var price = '价格无';
           if (undefined !== planDetail.ProductPlanPrice && null !== planDetail.ProductPlanPrice && planDetail.ProductPlanPrice.length > 0) {

          var tempPrice = 0;
          planDetail.ProductPlanPrice.forEach(function(thePrice, theIndex){
            if(0 === theIndex){
              tempPrice = thePrice.DefaultPrice;
            }
          });
          price = '￥' + tempPrice;
        }
          html += '<div class="priceRow">' + price + '</div><div class="seatRow">' + MorethanNumber + '</div>';
        }
        return html;
      },

      monthChange: function(datetime) {
        if ($rootScope[position[2]]._id) {
          getTeamtourPlanList({
            ProductID: $rootScope[position[2]]._id.$id,
            StartTime: $filter('date')(datetime, 'yyyy-MM')
          }, function(response) {
            $rootScope[position[2]].prductPlanList = response.list;
            $rootScope[position[2]].reFill = true;
          });
        }
      }
    };

    $scope.operate = {
      showPlanDetail: function(planDetailId) {
        if (this.showPlanDetailId == planDetailId) {
          this.showPlanDetailId = "";
        } else {
          this.showPlanDetailId = planDetailId;
        }

      },
      showPlanDetailId: ""
    };

    getPersonnel({
      label: 1008,
      limit: 200
    }, function(data) {
      $scope.Dispatchers = data.list;
    });
    var BookingNotes="1、您可登陆爱飞扬旅游网在线预定，您预订的产品支持24小时无损退团服务。\n2、爱飞扬的私人旅游顾问在收到您的预定单后，会将电子合同将发送至您的电子邮箱，您可以登录邮箱查看，依据《中华人民共和国合同法》第二章合同的订立第十条、第十一条，在线签订的电子合同，和纸质合同一样具有同样的法律效力。请查看《中华人民共和国合同法》。\n3、在线签约支付完成后，爱飞扬的私人旅游顾问会在您出游前一天以邮件的形式发送出团通知书到您的邮箱，您只需耐心等待查收，即可开心出游；出团通知书说明您出游的交通时间、食宿安排和出游需要注意的事项。\n4、您预订成功后，该产品（同线路同团期）价格上升不再补收差价（若因航空公司燃油税费调整而引起的差价除外）；价格下降则退还差价；超值出游有保障。\n5、未成年人旅游者预定提示：未满18周岁的旅游者请由家属陪同参团。\n6、旅游者如是70岁以上参加旅游，须有亲属陪同出行，否则我公司谢绝参团，敬请谅解。";
    $scope.openDialog = function(item) {
      var new_dialog = ngDialog.open({
        id: 'fromAService',
        template: '/public/angularView/common/components/crop.html',
        controller: 'crop',
        className: 'ngdialog-theme-default w-800',
        data: {
          imgRatio: 33 / 56,
          resImgWidth: 560,
          resImgHight: 330,
          uploadPicCallBack: function(data) {
            if (item) {
              item.PicPath = data.url;
              item.Title = data.name;
            } else {
              $rootScope[position[2]].step1.DefaultPic = data.url;
            }
          }
        }
      });
    };

    $scope.searchPro = function() {
      $rootScope[position[1]].search = {
        page: 1,
        Title: $rootScope[position[1]].Title,
        EmployeeDepartmentID: $rootScope[position[1]].EmployeeDepartment ? $rootScope[position[1]].EmployeeDepartment._id.$id : '',
        StartGADDRId: $rootScope[position[1]].StartGADDR ? $rootScope[position[1]].StartGADDR.GADDRID.$id : '',
        ShowStatus: $rootScope[position[1]].ShowStatus ? $rootScope[position[1]].ShowStatus.value : '',
        AddTime: $rootScope[position[1]].orderType ? $rootScope[position[1]].orderType.value : '',
      };
      teamtour.list(function(response) {
        $rootScope[position[1]].list = response.list;
      }, $rootScope[position[1]].search);
    };

    $scope.switchAddStep = function(step, type) {
      if ($rootScope[position[2]].finishedStatus < step && !type) {
        if ($rootScope[position[2]].finishedStatus === 0) {
          $rootScope[position[2]].info = '请先完成基本信息！';
        } else if ($rootScope[position[2]].finishedStatus == 1) {
          $rootScope[position[2]].info = '请先完成行程设置！';
        } else if ($rootScope[position[2]].finishedStatus == 2) {
          $rootScope[position[2]].info = '请先完成保险！';
        } else if ($rootScope[position[2]].finishedStatus == 3) {
          $rootScope[position[2]].info = '请先完成集散地！';
        } else if ($rootScope[position[2]].finishedStatus == 4) {
          $rootScope[position[2]].info = '请先完成扩展说明！';
        }
        return;
      }
      // $scope.saveCurrentStep(step);
      $rootScope[position[2]].addStep = step;
      if (step === 0) {

      } else if (step == 1) {
        //组团游行程

      } else if (step == 2) {
        if (!$rootScope[position[2]].step3) {
          $rootScope[position[2]].step3 = {};
          $rootScope[position[2]].step3.Insurances = [];
          getTeamtourInsurance($rootScope[position[2]]._id.$id, function(data) {
            $rootScope[position[2]].step3.Insurances = data.Insurances;
            $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
          });
        }
        $rootScope[position[2]].step3.addData = [];
        $rootScope[position[2]].step3.removeData = [];
      } else if (step == 3) {
        if (!$rootScope[position[2]].step4) {
          $rootScope[position[2]].step4 = {};
        }
        getDistributing($rootScope[position[2]]._id.$id, function(data) {
          if(!data.Distributioncenters){
            data.Distributioncenters = [];
          }
          if (data.Distributioncenters[0]) {
            var time = data.Distributioncenters[0].Distributiontime;
            data.Distributioncenters[0].hour = time.substring(0, time.indexOf(':'));
            data.Distributioncenters[0].minite = time.substring(time.indexOf(':') + 1, time.length);
            $rootScope[position[2]].step4.distributing = data.Distributioncenters[0];
          }else{
            $rootScope[position[2]].step4.distributing = {};
          }
        });
      } else if (step == 4) {
        if (!$rootScope[position[2]].step5) {
          $rootScope[position[2]].step5 = [];
        }
        getProductExpand($rootScope[position[2]]._id.$id, function(response) {
          $rootScope[position[2]].step5 = response;
          if(!$rootScope[position[2]].isEditMode){
            $rootScope[position[2]].step5.BookingNotes=BookingNotes;
          }
        });
      }
    };

    $scope.saveCurrentStep = function(step) {
      if ($rootScope[position[2]].isEditMode) {
        switch ($rootScope[position[2]].addStep) {
          case 0:
            $scope.step1Commit();
            break;
          case 1:
            $scope.step2Commit();
            break;
          case 2:
            $scope.step3Commit();
            break;
          case 3:
            $scope.step4Commit();
            break;
          case 4:
            $scope.step5Commit();
            break;
        }
      }
      $rootScope[position[2]].addStep = step;
    };

    $scope.removeInsurance = function(item) {
      showWarningBox('是否确认要删除保险？', function() {
        delTeamtourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(response) {
          $rootScope[position[2]].step3.Insurances = _.without($rootScope[position[2]].step3.Insurances, item);
          $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
        });
      });
    };

    $scope.insuranceStatus = function(status) {
      if (status) {
        $rootScope[position[2]].step3.insuranceStatus = status;
      } else {
        $rootScope[position[2]].step3.insuranceStatus = false;
      }
    };

    //保险
    $scope.saveInsurance = function() {
      $rootScope[position[2]].step3.Insurances = angular.copy($rootScope[position[2]].step3.InsurancesTemp);
      $rootScope[position[2]].step3.insuranceStatus = false;
    if ($rootScope[position[2]]._id.$id && $rootScope[position[2]].step3.addData.length > 0) {
      addTeamtourInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step3.addData, function(data) {
        $rootScope[position[2]].step3.Insurances.forEach(function(insurance) {
          data.forEach(function(item) {
            if (insurance.ProductInsuranceNo === item.ProductInsuranceNo) {
              insurance.baseid = {};
              insurance.baseid.$id = item.baseid.$id;
            }
          });
        });
      });
    }
      $rootScope[position[2]].step3.addData = [];
      $rootScope[position[2]].step3.removeData.forEach(function(item) {
        delTeamtourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {
          console.log(data);
        });
      });
      $rootScope[position[2]].step3.removeData = [];
    };

    //保存集散地
    $scope.saveDistributing = function() {
      if (!$rootScope[position[2]].step4.distributing) {
        return;
      }
      var hour = '';
      if(undefined !== $rootScope[position[2]].step4.distributing.hour && null !== $rootScope[position[2]].step4.distributing.hour){
        hour = $rootScope[position[2]].step4.distributing.hour;
      }
      var minite = '';
      if(undefined !== $rootScope[position[2]].step4.distributing.minite && null !== $rootScope[position[2]].step4.distributing.minite){
        minite = $rootScope[position[2]].step4.distributing.minite;
      }
      if(undefined === $rootScope[position[2]].step4.distributing.Setaddress || null === $rootScope[position[2]].step4.distributing.Setaddress || '' === $rootScope[position[2]].step4.distributing.Setaddress){
        $rootScope[position[2]].step4.distributing.Setaddress = '无';
      }
      if(undefined === $rootScope[position[2]].step4.distributing.Addressdissolution || null === $rootScope[position[2]].step4.distributing.Addressdissolution || '' === $rootScope[position[2]].step4.distributing.Addressdissolution){
        $rootScope[position[2]].step4.distributing.Addressdissolution = '无';
      }
      if(undefined === $rootScope[position[2]].step4.distributing.Trafficplan || null === $rootScope[position[2]].step4.distributing.Trafficplan || '' === $rootScope[position[2]].step4.distributing.Trafficplan){
        $rootScope[position[2]].step4.distributing.Trafficplan = '无';
      }
      $rootScope[position[2]].step4.distributing.Distributiontime = (hour.length > 1 ? hour : "0" + hour) + ":" + (minite.length > 1 ? minite : "0" + minite);
      var param = $rootScope[position[2]].step4.distributing;
      if ($rootScope[position[2]].step4.distributing.baseid) {
        param.baseid = $rootScope[position[2]].step4.distributing.baseid.$id;
        editDistributing($rootScope[position[2]]._id.$id, param, function(response) {});
      } else {
        if (!param.Furthernotice) {
          param.Furthernotice = 0;
        }
        addDistributing($rootScope[position[2]]._id.$id, param, function(response) {});
      }

    };

    //保存扩展信息
    $scope.saveExpand = function() {


      var param = {

        FeeService: $rootScope[position[2]].step5.FeeService || "",

        BookingNotes: $rootScope[position[2]].step5.BookingNotes || "",

        AboutDragoman: $rootScope[position[2]].step5.AboutDragoman || "",

        model: $rootScope[position[2]].step5.model || "",

        AboutEatery: $rootScope[position[2]].step5.AboutEatery || "",

        AboutBuy: $rootScope[position[2]].step5.AboutBuy || "",

        AboutQuarter: $rootScope[position[2]].step5.AboutQuarter || "",

        AboutVisit: $rootScope[position[2]].step5.AboutVisit || "",

        Abouttraffic: $rootScope[position[2]].step5.Abouttraffic || "",

        Reminder: $rootScope[position[2]].step5.Reminder || ""
      };


      editTeamtourExpand($rootScope[position[2]]._id.$id, param, function(response) {});
    };

    //切换扩展信息编辑模块
    $scope.switchExpand = function(model) {
      $rootScope[position[2]].step5.model = model;
    };

    $scope.addSubTitle = function() {
      $rootScope[position[2]].step1.needSubTitle = true;
    };

    $scope.removeSubTitle = function() {
      $rootScope[position[2]].step1.needSubTitle = false;
      $rootScope[position[2]].step1.SubTitle = '';
    };

    // 组团游基本信息添加
    $scope.step1Commit = function() {
      var param = {};
      param.Title = $scope[position[2]].step1.Title;
      if (!param.Title) {
        $rootScope[position[2]].info = '线路名称不能为空！';
        return;
      }

      if ($scope[position[2]].step1.needSubTitle) {
        param.SubTitle = $scope[position[2]].step1.SubTitle;
      }
      param.DefaultPic = $scope[position[2]].step1.DefaultPic;
      param.Pics = [];
      var OrderBy = 0;
      $scope[position[2]].step1.Pics.forEach(function(pic) {
        if (pic.PicPath) {
          param.Pics.push({
            PicPath: pic.PicPath,
            Title: pic.Title,
            Notes: pic.PicPath,
            OrderBy: OrderBy
          });
          OrderBy++;
        }
      });

      param.GADDRs = [];
      if ($scope[position[2]].step1.destination) {
        $scope[position[2]].step1.destination.forEach(function(item) {
          param.GADDRs.push(item.GADDRID.$id);
        });
      }
      if (param.GADDRs.length === 0) {
        $rootScope[position[2]].info = '目的地不能为空！';
        return;
      }
      param.ProductGADDR = $scope[position[2]].step1.MainDestination.GADDRID.$id;
      if (!param.ProductGADDR) {
        $rootScope[position[2]].info = '主目的地不能为空！';
        return;
      }
      param.StartGADDR = $scope[position[2]].step1.StartGADDR.GADDRID.$id;
      if (!param.StartGADDR) {
        $rootScope[position[2]].info = '出发地不能为空！';
        return;
      }

      param.TravelDays = $scope[position[2]].step1.TravelDays;
      param.LateNight = $scope[position[2]].step1.LateNight;
      param.GoTraffic = $scope[position[2]].step1.GoTraffic._id.$id;
      param.ReturnTraffic = $scope[position[2]].step1.ReturnTraffic._id.$id;
      param.LineType = $scope[position[2]].step1.LineType.ID;
      param.IsVisa = $scope[position[2]].step1.IsVisa;
      if (param.TravelDays === undefined || param.TravelDays === '' || param.TravelDays === '0') {
        $rootScope[position[2]].info = '出游天数不能为空！';
        return;
      }
      if (param.LateNight === undefined || param.LateNight === '' || param.LateNight === '0') {
        $rootScope[position[2]].info = '住宿天数不能为空！';
        return;
      }
      if ($scope[position[2]].step1.IsVisa == 1) {
        if ($scope[position[2]].step1.VisaList) {
          param.VisaCountry = [];
          $scope[position[2]].step1.VisaList.forEach(function(item) {
            param.VisaCountry.push(item.ForeignKeyID.$id);
          });
        }
      }
      param.LineFeatures = $scope[position[2]].step1.LineFeatures;
      param.ProductForm = [];
      if ($scope[position[2]].step1.ProductFormAll) {
        $scope[position[2]].step1.ProductFormAll.forEach(function(item) {
          if (item.isSelect) {
            param.ProductForm.push(item.ID);
          }
        });
      }
      if (!param.LineFeatures) {
        $rootScope[position[2]].info = '产品特色不能为空！';
        return;
      }
      param.LineOwnership = [];
      if ($scope[position[2]].step1.LineOwnership) {
        $scope[position[2]].step1.LineOwnership.forEach(function(item) {
          if (item.isSelect) {
            param.LineOwnership.push(item._id.$id);
          }
        });
      }
      param.Gift = [];
      if ($scope[position[2]].step1.TravelGoods) {
        $scope[position[2]].step1.TravelGoods.forEach(function(item) {
          if (item.isSelect) {
            param.Gift.push(item.ID);
          }
        });
      }
      param.LineAttribute = [];
      if ($scope[position[2]].step1.ProductLineAttribute) {
        $scope[position[2]].step1.ProductLineAttribute.forEach(function(item) {
          if (item.isSelect) {
            param.LineAttribute
              .push(item._id.$id);
          }
        });
      }
      param.StationID = $scope[position[2]].step1.station._id.$id;
      if (!param.StationID) {
        $rootScope[position[2]].info = '站点不能为空！';
        return;
      }
      if ($rootScope[position[2]]._id) {
        param.id = $rootScope[position[2]]._id.$id;
        saveBaseTeamtour(param, function(response) {
          $rootScope[position[2]].isCommit = false;
          var tour = _.find($rootScope[position[1]].list, function(item) {
            return item._id.$id === $rootScope[position[2]]._id.$id;
          });
          if (undefined !== tour) {
            tour.Title = $rootScope[position[2]].step1.Title;
            tour.StartGADDR = $rootScope[position[2]].step1.StartGADDR;
          }
          $scope.switchAddStep(1, 1);
        });
      } else {
        addBaseTeamtour(param, function(response) {
          $rootScope[position[2]]._id = {
            $id: response.data[0]
          };
          saveStepStatus($rootScope[position[2]]._id.$id, 1, 1, function() {
            $rootScope[position[2]].finishedStatus = 1;
            $rootScope[position[2]].isCommit = false;
            $scope.switchAddStep(1, 1);
          });
          var item = {
            _id: {
              $id: $rootScope[position[2]]._id.$id
            },
            showUrl: 'product/teamtour/detail?id=' + $rootScope[position[2]]._id.$id,
            planUrl: 'product/teamtourPlan/list?ProductID=' + $rootScope[position[2]]._id.$id + '&ProductName=' + $rootScope[position[2]].step1.Title + '&TravelDay=' + $rootScope[position[2]].step1.TravelDays,
            ProductNo: response.data[1],
            Title: $rootScope[position[2]].step1.Title,
            StartGADDR: {
              Title: $scope[position[2]].step1.StartGADDR.Title
            },
            ShowStatus: 0,
            AddTime: {
              sec: new Date().getTime() / 1000
            },
            AddInfo: {
              EmployeeName: $rootScope.userinfo.FullName
            }
          };
          $rootScope[position[2]].showUrl = item.showUrl;
          $rootScope[position[2]].planUrl = item.planUrl;
          $rootScope[position[1]].list.unshift(item);
          $rootScope[position[1]].needClearAddData = true;
        });
      }
    };

    $scope.step2Commit = function() {
      $scope.clearDetailInfo();
      $rootScope[position[2]].isCommit = true;
      if ($rootScope[position[2]].finishedStatus < 2) {
        saveStepStatus($rootScope[position[2]]._id.$id, 2, 1, function() {
          $rootScope[position[2]].finishedStatus = 2;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(2, 1);
        });
      } else {
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(2, 1);
      }
    };

    $scope.step3Commit = function() {
      $scope.clearDetailInfo();
      $rootScope[position[2]].isCommit = true;
      if ($rootScope[position[2]].finishedStatus < 3) {
        saveStepStatus($rootScope[position[2]]._id.$id, 3, 1, function() {
          $rootScope[position[2]].finishedStatus = 3;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(3, 1);
        });
      } else {
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(3, 1);
      }
    };

    $scope.step4Commit = function() {
      $scope.clearDetailInfo();
      $rootScope[position[2]].isCommit = true;
      $scope.saveDistributing();
      if ($rootScope[position[2]].finishedStatus < 4) {
        saveStepStatus($rootScope[position[2]]._id.$id, 4, 1, function() {
          $rootScope[position[2]].finishedStatus = 4;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(4, 1);
        });
      } else {
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(4, 1);
      }
    };

    $scope.step5Commit = function() {
      $scope.clearDetailInfo();
      $rootScope[position[2]].isCommit = true;
      $scope.saveExpand();
      if ($rootScope[position[2]].finishedStatus < 5) {
        saveStepStatus($rootScope[position[2]]._id.$id, 5, 1, function() {
          $rootScope[position[2]].finishedStatus = 5;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(5, 1);
        });
      } else {
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(5, 1);
      }
    };

    $scope.switchDestination = function(destination) {
      var index1 = _.findIndex($scope[position[2]].step1.destination, {
        Title: destination.Title
      });
      var index2 = _.findLastIndex($scope[position[2]].step1.destination, {
        Title: destination.Title
      });
      if (index1 != index2) {
        $scope[position[2]].step1.destination = _.uniq($scope[position[2]].step1.destination);
      }
      $scope[position[2]].step1.MainDestination = destination;
    };

    $scope.switchScheduleDetail = function(id) {
      $rootScope[position[2]].currentScheduleID = id;
      getSchedule(id, function(data) {
        $rootScope[position[2]].currentSchedule = data.list;
      });
    };

    $scope.unChooseSelectedVisa = function(item) {
      var visa = _.find($rootScope[position[2]].step1.VisaList, function(data) {
        return item.ForeignKeyID.$id === data.ForeignKeyID.$id;
      });
      if (undefined !== visa) {
        $rootScope[position[2]].step1.VisaList = _.without($rootScope[position[2]].step1.VisaList, visa);
      }
      $rootScope[position[2]].step1.VisaTemp = angular.copy($rootScope[position[2]].step1.VisaList);
    };

    $scope.saveSelectedVisaGroupTravel = function() {
      $rootScope[position[2]].step1.VisaList = angular.copy($rootScope[position[2]].step1.VisaTemp);
      $scope.showVise();
    };

    $scope.loadTeamourListData = function(viewID) {
      if (!$rootScope[position[1]].search) {
        $rootScope[position[1]].search = {};
      }
      $rootScope[position[1]].search.page += 1;
      teamtour.list(function(data) {
        $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
        $rootScope.isloadList = false;
        $rootScope.showProcessBar = false;
      }, $rootScope[position[1]].search);
    };

    $scope.showVise = function(status) {
      if (status === undefined) {
        $rootScope[position[2]].step1.isShowVise = false;
      } else {
        $rootScope[position[2]].step1.VisaTemp = angular.copy($rootScope[position[2]].step1.VisaList);
        $rootScope[position[2]].step1.isShowVise = true;
      }
    };

    $scope.clearAddData = function() {
      $scope.switchAddStep(0);
      if (!$rootScope[position[2]].isEditMode) {
        addRefreshPageByID('product-teamtour-add-id-addTeamtourProduct');
      }
    };

    $scope.removeProduct = function() {
      showWarningBox('确定要删除该产品吗？', function() {
        delTeamtourProduct($rootScope[position[2]]._id.$id, function(response) {
          var pro = _.find($rootScope[position[1]].list, function(item) {
            return item._id.$id === $rootScope[position[2]]._id.$id;
          });
          if (undefined !== pro) {
            $rootScope[position[1]].list = _.without($rootScope[position[1]].list, pro);
            closeSubView();
          }
        });
      });
    };

    $scope.changeProductStatus = function() {
      var info = $rootScope[position[2]].ShowStatus === 1 ? '确定要下架该产品吗？' : '确定要上架该产品吗？';
      var param = {
        type: 1,
        id: $rootScope[position[2]]._id.$id,
        status: $rootScope[position[2]].ShowStatus === 1 ? 0 : 1
      };
      showWarningBox(info, function() {
        updateProductShowStatus(param, function(resp) {
          $rootScope[position[2]].ShowStatus = param.status;
          var pro = _.find($rootScope[position[1]].list, function(item) {
            return item._id.$id === $rootScope[position[2]]._id.$id;
          });
          if (undefined !== pro) {
            pro.ShowStatus = param.status;
          }
        });
      });
    };

    $scope.clearDetailInfo = function() {
      addRefreshPageByID('product-teamtour-detail-id-' + $rootScope[position[2]]._id.$id);
    };

    //$scope.printDetail = function() {
    //  var data = document.getElementById('detail_content').innerHTML;
    //  commitPrintData('POST', baseUrl + 'common/printing/convertToHtml', {
    //    content: data
    //  }, '_blank');
    //};

    $scope.addToWebsite = function() {
      addProductSyncInfo({
        Model: 'ProductTeamtour',
        ID: $rootScope[position[2]]._id.$id
      }, function(response) {
        $rootScope[position[2]].info = "同步完成";
        console.log(response);
      });
    };

    $scope.addProduct = function() {
      if ($rootScope[position[1]].needClearAddData) {
        $scope.clearAddData();
      }
      $rootScope[position[1]].needClearAddData = false;
      $scope.fetch('product/teamtour/add?id=addTeamtourProduct', '');
      $scope.hideSubHeadInList();
      $scope.openItem();
    };
    $scope.confirmTransDeploy = function() {
      var deploy = _.find($scope.Dispatchers, function(item){
        return item._id.$id === $rootScope[position[2]].transDeployDeployInfo;
      });
      showWarningBox("确认要转移给" + deploy.FullName + "吗", function() {
        var param = {
          type: 1,
          product_id: $rootScope[position[2]]._id.$id,
          person_id: $rootScope[position[2]].transDeployDeployInfo
        };
        updateProductBelong(param, function(response) {
          $rootScope[position[2]].showTransDeploy = false;
          //修改详情页计调信息
          $rootScope[position[2]].Belong = {
            EmployeeDepartmentID: {$id: deploy.Department.ID.$id},
            EmployeeDepartmentName: "",
            EmployeeName: deploy.FullName,
            ForeignKeyID: {$id: $rootScope[position[2]].transDeployDeployInfo}
          };
          var target = _.find($rootScope[position[1]].list, function(item){
            return item._id.$id === $rootScope[position[2]]._id.$id;
          });
          if(undefined !== target && null !== target){
            target.Belong = angular.copy($rootScope[position[2]].Belong);
          }
          //转让团队
          if($rootScope[position[2]].isTransTeam == 1){

          }
          //转让订单
          if($rootScope[position[2]].isTransOrder == 1){

          }
          //转让三清单
          if($rootScope[position[2]].isTransFinance == 1){

          }
        });
      });
    };

  });
app.controller("productDrivingtourController", function($scope, $rootScope, $filter, $timeout, drivingtour, getDrivingtourPackages, delDrivingtourPackage,ngDialog,
  findInnerObjIndex, _, addDrivingtourInsurance, delDrivingtourtourInsurance, getDrivingtourInsurance, addDrivingtourExpand,
  addBaseDrivingtour, saveBaseDrivingtour, editDriningtourExpand, getCostListProduct, saveStepStatus, editDriningtourPackages,
	addDriningtourPackages, delDriningtourById, showWarningBox, addRefreshPageByID, closeSubView, updateProductShowStatus, addProductSyncInfo,
  saveDrivingCustomerTrip, getDrivingCustomerTrip) {

  $scope.loadDrivingtourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {};
    }
    $rootScope[position[1]].search.page += 1;
    drivingtour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, $rootScope[position[1]].search);
  };

  $scope.searchPro = function() {
    $rootScope[position[1]].search = {
      page: 1,
      Title: $rootScope[position[1]].Title,
      EmployeeDepartmentID: $rootScope[position[1]].EmployeeDepartment ? $rootScope[position[1]].EmployeeDepartment._id.$id : '',
      StartGADDRId: $rootScope[position[1]].StartGADDR ? $rootScope[position[1]].StartGADDR.GADDRID.$id : '',
      ShowStatus: $rootScope[position[1]].ShowStatus ? $rootScope[position[1]].ShowStatus.value : '',
      AddTime: $rootScope[position[1]].orderType ? $rootScope[position[1]].orderType.value : '',
    };
    drivingtour.list(function(response) {
      $rootScope[position[1]].list = response.list;
    }, $rootScope[position[1]].search);
  };

  $scope.openDialog = function(item) {
    var new_dialog = ngDialog.open({
      id: 'fromAService',
      template: '/public/angularView/common/components/crop.html',
      controller: 'crop',
      className: 'ngdialog-theme-default w-800',
      data: {
        imgRatio: 33 / 56,
        resImgWidth: 560,
        resImgHight: 330,
        uploadPicCallBack: function(data) {
          if (item) {
            item.PicPath = data.url;
            item.Title = data.name;
          } else {
            $rootScope[position[2]].step1.DefaultPic = data.url;
          }
        }
      }
    });
  };

  $scope.switchAddStep = function(step, type) {
    if ($rootScope[position[2]].finishedStatus < step && !type) {
      if ($rootScope[position[2]].finishedStatus === 0) {
        $rootScope[position[2]].info = '请先完成基本信息！';
      } else if ($rootScope[position[2]].finishedStatus == 1) {
        $rootScope[position[2]].info = '请先完成推荐行程！';
      } else if ($rootScope[position[2]].finishedStatus == 2) {
        $rootScope[position[2]].info = '请先完成保险！';
      } else if ($rootScope[position[2]].finishedStatus == 3) {
        $rootScope[position[2]].info = '请先完成套餐！';
      } else if ($rootScope[position[2]].finishedStatus == 4) {
        $rootScope[position[2]].info = '请先完成扩展说明！';
      }
      return;
    }
    $rootScope[position[2]].addStep = step;
    if (step === 0) {

    } else if (step == 1) {
      if (!$rootScope[position[2]].step2) {
        $rootScope[position[2]].step2 = {};
        $rootScope[position[2]].step2.TripType = 1;
      }
      getDrivingCustomerTrip($rootScope[position[2]]._id.$id, function(response){
        $rootScope[position[2]].step2.customize = response.Reminderiddescription;
      });
    } else if (step == 2) {
      if (!$rootScope[position[2]].step3) {
        $rootScope[position[2]].step3 = {};
      }
      getDrivingtourInsurance($rootScope[position[2]]._id.$id, function(data) {
        $rootScope[position[2]].step3.Insurances = data.Insurances;
        $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
      });
      $rootScope[position[2]].step3.addData = [];
      $rootScope[position[2]].step3.removeData = [];
    } else if (step == 3) {
      if (!$rootScope[position[2]].step4) {
        $rootScope[position[2]].step4 = {};
      }
      getDrivingtourPackages($rootScope[position[2]]._id.$id, function(data) {
        $rootScope[position[2]].step4.packageList = data;
      });
			$scope.getAllCost();
    } else if (step == 4) {
      if (!$rootScope[position[2]].step5) {
        $rootScope[position[2]].step5 = {};
      }
      addDrivingtourExpand($rootScope[position[2]]._id.$id, function(data) {
        $rootScope[position[2]].step5 = data;
      });
    } else if (step == 5) {
      $rootScope[position[2]].showUrl = 'product/drivingtour/detail?id=' + $rootScope[position[2]]._id.$id;
    }
  };

  // 自助游基本信息添加
  $scope.step1Commit = function() {
    var param = {};
    param.Title = $scope[position[2]].step1.Title;
    if (!param.Title) {
      $rootScope[position[2]].info = '线路名称不能为空！';
      return;
    }


    if ($scope[position[2]].step1.needSubTitle) {
      param.SubTitle = $scope[position[2]].step1.SubTitle;
    }
    param.DefaultPic = $scope[position[2]].step1.DefaultPic;
    param.Pics = [];
    $scope[position[2]].step1.Pics.forEach(function(pic) {
        if (pic.PicPath) {
          param.Pics.push({
            PicPath: pic.PicPath,
            Title: pic.Title,
            Notes: pic.PicPath,
            OrderBy: OrderBy
          });
          OrderBy++;
        }
      });

    param.GADDRs = [];
    if ($scope[position[2]].step1.destination) {
      $scope[position[2]].step1.destination.forEach(function(item) {
        param.GADDRs.push(item.GADDRID.$id);
      });
    }
    if (param.GADDRs.length === 0) {
      $rootScope[position[2]].info = '目的地不能为空！';
      return;
    }
      param.ProductGADDR = $scope[position[2]].step1.MainDestination.GADDRID.$id;
    if (!param.ProductGADDR) {
      $rootScope[position[2]].info = '主目的地不能为空！';
      return;
    }
      param.StartGADDR = $scope[position[2]].step1.StartGADDR.GADDRID.$id;
    if (!param.StartGADDR) {
      $rootScope[position[2]].info = '出发地不能为空！';
      return;
    }
    param.TravelDays = $scope[position[2]].step1.TravelDays;
    param.LateNight = $scope[position[2]].step1.LateNight;
    param.GoTraffic = $scope[position[2]].step1.GoTraffic._id.$id;
    param.ReturnTraffic = $scope[position[2]].step1.ReturnTraffic._id.$id;
    param.LineType = $scope[position[2]].step1.LineType.ID;
    param.IsVisa = $scope[position[2]].step1.IsVisa;
    if (param.TravelDays === undefined || param.TravelDays === '' || param.TravelDays === '0') {
      $rootScope[position[2]].info = '出游天数不能为空！';
      return;
    }
    if (param.LateNight === undefined || param.LateNight === '' || param.LateNight === '0') {
      $rootScope[position[2]].info = '住宿天数不能为空！';
      return;
    }
    if ($scope[position[2]].step1.IsVisa == 1) {
      if ($scope[position[2]].step1.VisaList) {
        param.VisaCountry = [];
        $scope[position[2]].step1.VisaList.forEach(function(item) {
          param.VisaCountry.push(item.ForeignKeyID.$id);
        });
      }
    }
    param.Productfeatures = $scope[position[2]].step1.Productfeatures;
    param.ProductForm = [];
    if ($scope[position[2]].step1.ProductFormAll) {
      $scope[position[2]].step1.ProductFormAll.forEach(function(item) {
        if (item.isSelect) {
          param.ProductForm.push(item.ID);
        }
      });
    }
    param.Keywords = $rootScope[position[2]].step1.Keywords;

    if (!param.Keywords) {
      $rootScope[position[2]].info = '关键词不能为空！';
      return;
    }
    if (!param.Productfeatures) {
      $rootScope[position[2]].info = '产品特色不能为空！';
      return;
    }
    param.LineOwnership = [];
    if ($scope[position[2]].step1.LineOwnership) {
      $scope[position[2]].step1.LineOwnership.forEach(function(item) {
        if (item.isSelect) {
          param.LineOwnership.push(item._id.$id);
        }
      });
    }
    param.Gift = [];
    if ($scope[position[2]].step1.TravelGoods) {
      $scope[position[2]].step1.TravelGoods.forEach(function(item) {
        if (item.isSelect) {
          param.Gift.push(item.ID);
        }
      });
    }
    param.LineLabels = [];
    if ($scope[position[2]].step1.ProductLineAttribute) {
      $scope[position[2]].step1.ProductLineAttribute.forEach(function(item) {
        if (item.isSelect) {
          param.LineLabels.push(item._id.$id);
        }
      });
    }
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]]._id) {
      param.id = $rootScope[position[2]]._id.$id;
      saveBaseDrivingtour(param, function(response) {
        $rootScope[position[2]].isCommit = false;
				var tour = _.find($rootScope[position[1]].list, function(item){
					return item._id.$id === $rootScope[position[2]]._id.$id;
				});
				if(undefined !== tour){
					tour.Title = $rootScope[position[2]].step1.Title;
				}
        $scope.switchAddStep(1, 1);
        $scope.clearDetailInfo();
      });
    } else {
      addBaseDrivingtour(param, function(response) {
        $rootScope[position[2]]._id = {
          $id: response.data[0]
        };
        saveStepStatus($rootScope[position[2]]._id.$id, 1, 3, function() {
          $rootScope[position[2]].finishedStatus = 1;
          $rootScope[position[2]].isCommit = false;
          $scope.switchAddStep(1, 1);
        });
        var item = {
          _id: {
            $id: $rootScope[position[2]]._id.$id
          },
          showUrl: 'product/drivingtour/detail?id=' + $rootScope[position[2]]._id.$id,
          ProductNo: response.data[1],
          Title: $rootScope[position[2]].step1.Title,
          ShowStatus: 0,
          AddTime: {
            sec: new Date().getTime()/1000
          },
          AddInfo: {
            EmployeeName: $rootScope.userinfo.FullName
          }
        };
        $rootScope[position[2]].showUrl = item.showUrl;
        $rootScope[position[1]].needClearAddData = true;
        $rootScope[position[1]].list.unshift(item);
      });
    }
  };

  $scope.step2Commit = function() {
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 2) {
      saveStepStatus($rootScope[position[2]]._id.$id, 2, 3, function() {
        $rootScope[position[2]].finishedStatus = 2;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(2, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(2, 1);
    }
    if($rootScope[position[2]].step2.TripType == 2){
      saveDrivingCustomerTrip($rootScope[position[2]]._id.$id, $rootScope[position[2]].step2.customize, function(response){
        console.log(response);
      });
    }
		$scope.clearDetailInfo();
  };

  $scope.step3Commit = function() {
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 3) {
      saveStepStatus($rootScope[position[2]]._id.$id, 3, 3, function() {
        $rootScope[position[2]].finishedStatus = 3;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(3, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(3, 1);
    }
		$scope.clearDetailInfo();
  };

  $scope.step4Commit = function() {
    $rootScope[position[2]].isCommit = true;
    if ($rootScope[position[2]].finishedStatus < 4) {
      saveStepStatus($rootScope[position[2]]._id.$id, 4, 3, function() {
        $rootScope[position[2]].finishedStatus = 4;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(4, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(4, 1);
    }
		$scope.clearDetailInfo();
  };

  $scope.step5Commit = function() {
    $rootScope[position[2]].isCommit = true;
    $scope.saveExpand();
    if ($rootScope[position[2]].finishedStatus < 5) {
      saveStepStatus($rootScope[position[2]]._id.$id, 5, 3, function() {
        $rootScope[position[2]].finishedStatus = 5;
        $rootScope[position[2]].isCommit = false;
        $scope.switchAddStep(5, 1);
      });
    } else {
      $rootScope[position[2]].isCommit = false;
      $scope.switchAddStep(5, 1);
    }
		$scope.clearDetailInfo();
		$scope.changeToDetailPage();
  };

  $scope.packageStatus = function(status) {
    $rootScope[position[2]].step4.packageStatus = status;
    $rootScope[position[2]].step4.editPackages = {};
    $rootScope[position[2]].step4.ticketTemp = [];
    $rootScope[position[2]].step4.addTicket = [];
    $rootScope[position[2]].step4.removeTicket = [];
		$rootScope[position[2]].step4.hotelTemp = [];
    $rootScope[position[2]].step4.addHotel = [];
    $rootScope[position[2]].step4.removeHotel = [];
  };

  $scope.editPackage = function(item) {
    $rootScope[position[2]].step4.ticketTemp = [];
    $rootScope[position[2]].step4.addTicket = [];
    $rootScope[position[2]].step4.removeTicket = [];
    $rootScope[position[2]].step4.hotelTemp = [];
    $rootScope[position[2]].step4.addHotel = [];
    $rootScope[position[2]].step4.removeHotel = [];
    $rootScope[position[2]].step4.editPackages = angular.copy(item);
    $rootScope[position[2]].step4.editPackages.cost = $rootScope[position[2]].step4.editPackages.PackagesTheCost.TheCostName;
    $rootScope[position[2]].step4.editPackages.packageCost = $rootScope[position[2]].step4.editPackages.PackagesTheCost;
    $rootScope[position[2]].step4.editPackages.StartTimeDate = new Date($rootScope[position[2]].step4.editPackages.StartTime.sec * 1000);
    $rootScope[position[2]].step4.editPackages.EndTimeDate = new Date($rootScope[position[2]].step4.editPackages.EndTime.sec * 1000);
    $rootScope[position[2]].step4.packageStatus = true;
  };

  $scope.delPackage = function(item) {
		showWarningBox('确定要删除套餐吗？', function(){
			delDrivingtourPackage(item._id.$id, function(data) {
	      var index = findInnerObjIndex($rootScope[position[2]].step4.packageList, ['_id', '$id'], item._id.$id);
	      if (index > -1) {
	        $rootScope[position[2]].step4.packageList = _.without($rootScope[position[2]].step4.packageList, $rootScope[position[2]].step4.packageList[index]);
	      }
	    });
		});
  };


  $scope.addSubTitle = function() {
      $rootScope[position[2]].step1.needSubTitle = true;
   };

  $scope.removeSubTitle = function() {
    $rootScope[position[2]].step1.needSubTitle = false;
    $rootScope[position[2]].step1.SubTitle = '';
  };


  $scope.savePackagesInfo = function() {
    if(!$rootScope[position[2]].step4.editPackages.Title){
         $rootScope[position[2]].info = '套餐名称不能为空！';
      return;
    }
    if(!$rootScope[position[2]].step4.editPackages.StartTimeDate){
         $rootScope[position[2]].info = '计划起始时间不能为空！';
      return;
    }
    if(!$rootScope[position[2]].step4.editPackages.EndTimeDate){
         $rootScope[position[2]].info = '计划结束时间不能为空！';
      return;
    }
    if(!$rootScope[position[2]].step4.editPackages.Number){
         $rootScope[position[2]].info = '包含人数不能为空！';
      return;
    }
     if(!$rootScope[position[2]].step4.editPackages.BeforeHour){
         $rootScope[position[2]].info = '提前预定不能为空！';
      return;
    }

    if(!$rootScope[position[2]].step4.editPackages.BookingMin){
         $rootScope[position[2]].info = '起订数不能为空！';
      return;
    }
    if(!$rootScope[position[2]].step4.editPackages.BookingMax){
         $rootScope[position[2]].info = '预定最大数不能为空！';
      return;
    }
    if(!$rootScope[position[2]].step4.editPackages.SaleCount){
         $rootScope[position[2]].info = '预售数量不能为空！';
      return;
    }

    if(!$rootScope[position[2]].step4.editPackages.HoldCount){
         $rootScope[position[2]].info = '保留数量不能为空！';
      return;
    }
     if(!$rootScope[position[2]].step4.editPackages.PayConfirm){
         $rootScope[position[2]].info = '支付确认不能为空！';
      return;
    }
     if(!$rootScope[position[2]].step4.editPackages.ParValue){
         $rootScope[position[2]].info = '原价不能为空！';
      return;
    }

    if(!$rootScope[position[2]].step4.editPackages.DefaultPrice){
         $rootScope[position[2]].info = '销售价格不能为空！';
      return;
    }
    if(!$rootScope[position[2]].step4.editPackages.CostDefaultPrice){
         $rootScope[position[2]].info = '成本价格不能为空！';
      return;
    }

     if(!$rootScope[position[2]].step4.editPackages.AgentDefaultPrice){
         $rootScope[position[2]].info = '代理价格不能为空！';
      return;
    }

  /*  if(!$rootScope[position[2]].step4.editPackages.cost){
         $rootScope[position[2]].info = '成本名称不能为空！';
      return;
    }*/




		var postData = {
			Title: $rootScope[position[2]].step4.editPackages.Title,
			StartTime: $filter('date')($rootScope[position[2]].step4.editPackages.StartTimeDate, 'yyyy-MM-dd HH:mm:ss'),
			EndTime: $filter('date')($rootScope[position[2]].step4.editPackages.EndTimeDate, 'yyyy-MM-dd HH:mm:ss'),
			DefaultPrice: $rootScope[position[2]].step4.editPackages.DefaultPrice,
			AgentDefaultPrice: $rootScope[position[2]].step4.editPackages.AgentDefaultPrice,
			CostDefaultPrice: $rootScope[position[2]].step4.editPackages.CostDefaultPrice,
			ParValue: $rootScope[position[2]].step4.editPackages.ParValue,
			Number: $rootScope[position[2]].step4.editPackages.Number,
			BeforeHour: $rootScope[position[2]].step4.editPackages.BeforeHour,
			BookingMin: $rootScope[position[2]].step4.editPackages.BookingMin,
			BookingMax: $rootScope[position[2]].step4.editPackages.BookingMax,
			SaleCount: $rootScope[position[2]].step4.editPackages.SaleCount,
			HoldCount: $rootScope[position[2]].step4.editPackages.HoldCount,
			PayConfirm: {ID: parseInt($rootScope[position[2]].step4.editPackages.PayConfirm.ID), Name: $rootScope[position[2]].step4.editPackages.PayConfirm.ID == 1?'直接付款':'网上付款'},
			Notes: $rootScope[position[2]].step4.editPackages.Notes,
			PackagesTheCost: {ForeignKeyID: $rootScope[position[2]].step4.editPackages.packageCost.ForeignKeyID.$id, TheCostName: $rootScope[position[2]].step4.editPackages.packageCost.TheCostName},
		};
		postData.IncludeTickets = [];
    if($rootScope[position[2]].step4.editPackages.IncludeTickets){
      $rootScope[position[2]].step4.editPackages.IncludeTickets.forEach(function(ticket){
      postData.IncludeTickets.push({
        ForeignKeyID: ticket.ForeignKeyID.$id,
        Notes: ticket.Notes,
        OriginalPrice: ticket.OriginalPrice,
        ProductAmount: ticket.ProductAmount,
        Title: ticket.Title,
        CostPrice: ticket.CostPrice
      });
    });
    }

		postData.IncludeHotel = [];
    if($rootScope[position[2]].step4.editPackages.IncludeHotel){
        $rootScope[position[2]].step4.editPackages.IncludeHotel.forEach(function(hotel){
      postData.IncludeHotel.push({
        HotelId: hotel.HotelId.$id,
        Notes: hotel.Notes,
        OriginalPrice: hotel.OriginalPrice,
        HotelName: hotel.HotelName,
        HotelRoomId: hotel.HotelRoomId.$id,
        HotelRoomName: hotel.HotelRoomName,
        ProductAmount: hotel.ProductAmount,
        CostPrice: hotel.CostPrice
      });
    });
    }

		if($rootScope[position[2]].step4.editPackages._id){
			editDriningtourPackages($rootScope[position[2]]._id.$id, $rootScope[position[2]].step4.editPackages._id.$id, postData, function(response){
				var package = _.find($rootScope[position[2]].step4.packageList, function(item){
					return item._id.$id === $rootScope[position[2]].step4.editPackages._id.$id;
				});
				package = _.extend(package, $rootScope[position[2]].step4.editPackages);
				package.StartTime = {sec:　$rootScope[position[2]].step4.editPackages.StartTimeDate.getTime() / 1000};
				package.EndTime = {sec: $rootScope[position[2]].step4.editPackages.EndTimeDate.getTime() / 1000};
			});
		}else{
			addDriningtourPackages($rootScope[position[2]]._id.$id, postData, function(response){
				$rootScope[position[2]].step4.packageList.push(response.data);
			});
		}
		$rootScope[position[2]].step4.packageStatus = false;
  };

  $scope.cancelSavePackagesInfo = function() {
		$rootScope[position[2]].step4.packageStatus = false;
  };

  $scope.showActivity = function(status) {
    $rootScope[position[2]].showAcitvityStatus = status;
  };

  $scope.showTicket = function() {
    $rootScope[position[2]].step4.isShowTicket = !$rootScope[position[2]].step4.isShowTicket;
  };

  $scope.showHotel = function(status) {
    $rootScope[position[2]].step4.showHotelStatus = status;
    if (status) {
      $rootScope[position[2]].step4.showTicketStatus = !status;
    }
  };

  $scope.closeHotel = function() {
    $rootScope[position[2]].step4.showHotelStatus = false;
  };

  $scope.cancelAddTicket = function() {
    $rootScope[position[2]].step4.isShowTicket = false;
  };

  $scope.saveAddTicket = function() {
		$rootScope[position[2]].step4.editPackages.IncludeTickets = angular.copy($rootScope[position[2]].step4.ticketTemp);
    $scope.cancelAddTicket();
  };

  $scope.saveAddHotel = function() {
		$rootScope[position[2]].step4.editPackages.IncludeHotel = angular.copy($rootScope[position[2]].step4.hotelTemp);
    $scope.closeHotel();
  };

	$scope.delPackageHotel = function(item){
		$rootScope[position[2]].step4.editPackages.IncludeHotel = _.without($rootScope[position[2]].step4.editPackages.IncludeHotel, item);
	};

	$scope.unchooseTicket = function(item){
		$rootScope[position[2]].step4.editPackages.IncludeTickets = _.without($rootScope[position[2]].step4.editPackages.IncludeTickets, item);
	};

  $scope.removeInsurance = function(item) {
    console.log(item);
    delDrivingtourtourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id,
      function(response) {
        $rootScope[position[2]].step3.Insurances = _.without($rootScope[position[2]].step3.Insurances, item);
        $rootScope[position[2]].step3.InsurancesTemp = angular.copy($rootScope[position[2]].step3.Insurances);
      });
  };

  $scope.insuranceStatus = function(status) {
    if (status) {
      $rootScope[position[2]].step3.insuranceStatus = status;
    } else {
      $rootScope[position[2]].step3.insuranceStatus = false;
    }
  };

  //保险
  $scope.saveInsurance = function() {
    $rootScope[position[2]].step3.Insurances = angular.copy($rootScope[position[2]].step3.InsurancesTemp);
    $rootScope[position[2]].step3.insuranceStatus = false;
    if ($rootScope[position[2]]._id.$id, $rootScope[position[2]].step3.addData.length > -1) {
      addDrivingtourInsurance($rootScope[position[2]]._id.$id, $rootScope[position[2]].step3.addData, function(data) {
          $rootScope[position[2]].step3.Insurances.forEach(function(insurance) {
          data.forEach(function(item) {
            if (insurance.ProductInsuranceNo === item.ProductInsuranceNo) {
              insurance.baseid = {};
              insurance.baseid.$id = item.baseid.$id;
            }
          });
        });

      });
    }
    $rootScope[position[2]].step3.addData = [];
    $rootScope[position[2]].step3.removeData.forEach(function(item) {
      delDrivingtourtourInsurance($rootScope[position[2]]._id.$id, item.baseid.$id, function(data) {});
    });
    $rootScope[position[2]].step3.removeData = [];
  };

  $scope.getDrivingtourPackages = function(id) {
    getDrivingtourPackages(id.$id, function(data) {
      $rootScope[position[2]].packages = data;
    });
  };

  $scope.saveExpand = function() {
    editDriningtourExpand($rootScope[position[2]]._id.$id, $rootScope[position[2]].step5, function(data) {
      console.log(data);
    });
  };

  $scope.switchDestination = function(destination) {
    var index1 = _.findIndex($scope[position[2]].step1.destination, {
      Title: destination.Title
    });
    var index2 = _.findLastIndex($scope[position[2]].step1.destination, {
      Title: destination.Title
    });
    if (index1 != index2) {
      $scope[position[2]].step1.destination = _.uniq($scope[position[2]].step1.destination);
    }
    $scope[position[2]].step1.MainDestination = destination;
  };

	$scope.CostFormatter = function(cost){
		return cost.Title;
	};

	$scope.getAllCost = function(){
		var param = {
			keyword: $rootScope[position[2]].step4.cost?$rootScope[position[2]].step4.cost:"",
			page: 1,
			limit: 10
		};
		getCostListProduct(param, function(response){
			$rootScope[position[2]].step4.allCost = response.list;
		});
	};

	$scope.changeCost = function(value){
		$rootScope[position[2]].step4.editPackages.packageCost = {
			ForeignKeyID: value._id,
			TheCostName: value.Title
		};
	};

	$scope.openDatePicker = function($event, type) {
		if(!$rootScope[position[2]].step4.status){
			$rootScope[position[2]].step4.status = {};
		}
    $rootScope[position[2]].step4.status[type] = true;
  };

	$scope.removeProduct = function() {
		showWarningBox('确定要删除该产品吗？', function() {
			delDriningtourById($rootScope[position[2]]._id.$id, function(response) {
				var pro = _.find($rootScope[position[1]].list, function(item) {
					return item._id.$id === $rootScope[position[2]]._id.$id;
				});
				if (undefined !== pro) {
					$rootScope[position[1]].list = _.without($rootScope[position[1]].list, pro);
					closeSubView();
				}
			});
		});
	};

	$scope.changeProductStatus = function() {
		var info = $rootScope[position[2]].ShowStatus === 1 ? '确定要下架该产品吗？' : '确定要上架该产品吗？';
		var param = {
			type: 3,
			id: $rootScope[position[2]]._id.$id,
			status: $rootScope[position[2]].ShowStatus === 1 ? 0 : 1
		};
		showWarningBox(info, function() {
			updateProductShowStatus(param, function(resp) {
				$rootScope[position[2]].ShowStatus = param.status;
				var pro = _.find($rootScope[position[1]].list, function(item) {
					return item._id.$id === $rootScope[position[2]]._id.$id;
				});
				if (undefined !== pro) {
					pro.ShowStatus = param.status;
				}
			});
		});
	};

	$scope.clearDetailInfo = function() {
		addRefreshPageByID('product-drivingtour-detail-id-' + $rootScope[position[2]]._id.$id);
	};

	$scope.changeToDetailPage = function(){
		$rootScope[position[2]].timeoutShow = $timeout(function(){
			$scope.fetch("product/drivingtour/detail?id=" + $rootScope[position[2]]._id.$id, '');
			$scope.hideSubHead();
			$scope.openItem();
			$scope.clearAddData();
		}, 5 * 1000);
	};

	$scope.clearAddData = function() {
		$scope.switchAddStep(0);
		if (!$rootScope[position[2]].isEditMode) {
			addRefreshPageByID('product-drivingtour-add-id-addDrivingtourProduct');
		}
	};

	$scope.saveSelectedVisa = function() {
		$rootScope[position[2]].step1.VisaList = angular.copy($rootScope[position[2]].step1.VisaTemp);
		$scope.showVise();
	};

	$scope.showVise = function(status) {
		if (status === undefined) {
			$rootScope[position[2]].step1.isShowVise = false;
		} else {
			$rootScope[position[2]].step1.VisaTemp = angular.copy($rootScope[position[2]].step1.VisaList);
			$rootScope[position[2]].step1.isShowVise = true;
		}
	};

	$scope.unChooseSelectedVisa = function(item) {
		var visa = _.find($rootScope[position[2]].step1.VisaList, function(data) {
			return item.ForeignKeyID.$id === data.ForeignKeyID.$id;
		});
		if (undefined !== visa) {
			$rootScope[position[2]].step1.VisaList = _.without($rootScope[position[2]].step1.VisaList, visa);
		}
		$rootScope[position[2]].step1.VisaTemp = angular.copy($rootScope[position[2]].step1.VisaList);
	};

  $scope.showDetail = function(){
    $timeout.cancel($rootScope[position[2]].timeoutShow);
    $scope.fetch("product/drivingtour/detail?id=" + $rootScope[position[2]]._id.$id, '');
    $scope.hideSubHead();
    $scope.openItem();
    $scope.clearAddData();
  };

  $scope.printDetail = function(){
    var data = document.getElementById('detail_content').innerHTML;
    commitPrintData('POST', baseUrl + 'common/printing/convertToHtml', {content: data}, '_blank');
  };

  $scope.addToWebsite = function(){
    addProductSyncInfo({Model:'ProductSelfdrivingtour', ID:$rootScope[position[2]]._id.$id}, function(response){
      $rootScope[position[2]].info = "同步完成";
      console.log(response);
    });
  };

  $scope.addProduct = function(){
    if($rootScope[position[1]].needClearAddData){
      $scope.clearAddData();
    }
    $rootScope[position[1]].needClearAddData = false;
    $scope.fetch('product/drivingtour/add?id=addDrivingtourProduct', '');
    $scope.hideSubHeadInList();
    $scope.openItem();
  };

});
