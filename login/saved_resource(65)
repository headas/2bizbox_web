//显示人员基本信息
app.directive("auditInfo", function(getCheckProcessRecordDetail, $rootScope, findInnerObjIndex, getAllLabels, getPersonDetail) {
  var showPersonInfoObj = {
    restrict: "AE",
    scope: {
      RecordID: '=recordId',
      html: '@html'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/audit/audit_info_pop.html?" + Math.random(),
  };
  return showPersonInfoObj;

  function linkFun($scope) {}

  function controllerFun($scope) {
    $scope.auditData = {};
    $scope.popoverIsOpen = false;

    $scope.$watch('RecordID', function(){
      $scope.popoverIsOpen = false;
    });

    getAllLabels(function(response){
      $scope.allLabels = response;
    });

    $scope.getAuditInfo = function() {
      var param = {};
      if($scope.RecordID){
        param.CheckProcessRecordID = $scope.RecordID;

        getCheckProcessRecordDetail(param, function(data) {
          $scope.auditData = data;

          data.record.forEach(function(item, index){
            // getCheckPerson(item.checkSetp, index);
            item.checkSetp.checkPerson = item.checkPersonInfo.Name;
          });

          if(!data.currentStep || Array.isArray(data.currentStep) && data.currentStep.length <= 0 || angular.equals(data.currentStep, {})) {
            $scope.over = true;
          }
          if(data.currentStep) getCheckPerson(data.currentStep, data.record.length);
        });
      }

    };


    function matchLabel(matchArr){
      var result = [];

      matchArr.forEach(function(item){
        var label = _.find($scope.allLabels, function(label){
          if(item == label.Label.NO) return true;
        });

        result.push(label.Label.name);
      });

      return result;
    }

    function matchDepartment(matchArr){
      var result = [];

      matchArr.forEach(function(item){
        var department = _.find($rootScope.Departments, function(department){
          if(item == department._id.$id) return true;
        });

        result.push(department.Name);
      });

      return result;
    }

    function getPersons(arr, callback){
      var result = [];

      var request = 0, requestNum = 0;

      arr.forEach(function(item){
        requestNum++;
        getPersonDetail(item, function(response){
          result.push(response.FullName);
          if(++request >= requestNum) callback(result);
        });
      });
    }

    function getCheckPerson(record, index) {
      switch (record.checkType) {
        case 1:
          record.checkPerson = matchLabel(record.label).join(',');
          break;
        case 2:
          record.checkPerson = matchDepartment(record.department).join(',');
          break;
        case 3:
          getPersons(record.personID, function(result) {
            record.checkPerson = result.join(',');
          });
          break;
        case 4:
          record.checkPerson = matchDepartment(record.department).join(',') + ' ' + matchLabel(record.label).join(',');
          break;
        case 5:
          if($scope.auditData.applyInfo)
            record.checkPerson = $scope.auditData.applyInfo.DepartmentName + ' ' + matchLabel(record.label).join(',');
          else
            record.checkPerson = matchLabel(record.label).join(',');
          break;
        case 6:
          if(index > 0)
            record.checkPerson = '管理' + $scope.auditData.record[index - 1].checkPersonInfo.DepartmentName + '的' + matchLabel(record.label).join(',');
          else
            record.checkPerson = '管理' + $scope.auditData.applyInfo.DepartmentName + '的' + matchLabel(record.label).join(',');

      }
    }

  }
});
angular.module("HY").directive("modifyAssessment", ModifyAssessment);

function ModifyAssessment(getPerformanceGroupList) {
  var MA = {
    restrict: "AE",
    scope: {
      data: "=?data",
      showapanel: "=showapanel"
    },
    controller: controller,
    link: linkFunc,
    templateUrl: "/public/angularView/intentionCustomer/ICCityAssignment/ICCityAssignmentGadgetAssessmentEditor.html" + "?" + Math.random()
  };

  return MA;

  function controller($scope) {
    //$scope.showAPanel=true;
    console.log("ShowAPanel  is :" + $scope.showapanel);
    var memberID = $scope.data.memberID;
    $scope.$watch("data.inAssessment", function() {
      if (!$scope.data.inAssessment) {
        $scope.selected = _.find($scope.groups, function(group) {
          if (group.members) {
            if (_.find(group.members, function(member) {
                return member.memberID == memberID;
              })) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        });

      }
    });
    $scope.cancel = cancel;
    $scope.save = save;

    function save() {
			console.log("TODO : save assessment");
			$scope.showapanel = false;
    }

    function cancel() {
      $scope.showapanel = false;
    }
  }

  function linkFunc($scope) {
    var memberID = $scope.data.memberID;
    getPerformanceGroupList([], activate);

    function activate(response) {
      $scope.groups = response.list;
      $scope.selected = _.find($scope.groups, function(group) {
        if (group.members) {
          if (_.find(group.members, function(member) {
              return member.memberID == memberID;
            })) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      });

    }

  }
}
/**
 * [selectPerson]
 * @param  {[Object]} "condition"         {query:"传查询职员的姓名或电话号码",label:"标签的名称或者NO","department":"部门ID","manager":"是否获取自己管理的部门,boolean类型"}
 * @param  {[Object]} "data"              {已选人员的数组}
 * @return {[Object]} "status"            {"000000000000000000000598": {"status": '本人已死'}}
 */
app.directive("selectPerson", function(getPersonnel, $rootScope, getFirstDepartment, findInnerObjIndex, _) {
  return {
    restrict: "ACE",
    scope: {
      condition: '=?condition',
      data: '=data',
      select: '=select',
      status: '=?status'
    },
    controller: function($scope) {

      $scope.changeMode = function() {
        if ($scope.query === '') {
          $scope.mode = 2;
        } else {
          $scope.mode = 1;
        }
      };

      $scope.choosePerson = function(person) {
        $scope.select(person);
        var index = _.findIndex($scope.data, person);
        if (index < 0) {
          $scope.data.push(person);
        }
      };

      $scope.showPeople = function(department) {
        if (department.class !== undefined && department.class == "active") {
          department.class = "";
        } else {
          department.class = "active";
        }
      };

    },
    link: function($scope) {
      $scope.picUrl = picUrl;

      if ($scope.mode === undefined) {
        $scope.mode = 2;
      }

      if ($scope.condition === undefined) {
        $scope.condition = {};
      }

      $scope.condition.limit = 99999;

      $scope.selectPerson = function() {
        getPersonnel($scope.condition, function(response) {
          $scope.person = response.list;
          getFirstDepartment(function(response1) {
            $scope.department = response1;
            $scope.person.forEach(function(person) {
              if (person.Structure && person.Structure.length > 0) {
                var firstDepartment = person.Structure[0].$id;
                var index = findInnerObjIndex($scope.department, ["_id", "$id"], firstDepartment);
                if (index > -1) {
                  if ($scope.department[index].people === undefined) {
                    $scope.department[index].people = [];
                  }
                  $scope.department[index].people.push(person);
                }
              }
            });
            console.log($scope.department);
          });
        });
      };

      $scope.selectPerson();

    },
    templateUrl: "/public/angularView/common/components/personnel.html?" + Math.random(),
  };
});

//显示人员基本信息
app.directive("personInfoPop", function(getPersonnel, $rootScope, findInnerObjIndex) {
  var showPersonInfoObj = {
    restrict: "AE",
    scope: {
      value: '=value',
      type: '=type',
      trigger: '=?trigger',
      name: '=name'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/person_info_pop.html?" + Math.random(),
  };
  return showPersonInfoObj;

  function linkFun($scope) {

    $scope.trigger = $scope.trigger ? $scope.trigger : 'mouseenter';

  }

  function controllerFun($scope) {

    $scope.hasGet = false;

    $scope.picUrl = picUrl;

    $scope.getInfo = function() {
      var param = {};
      if ($scope.type == 'id') {
        param.id = $scope.value;
      } else if ($scope.type == 'name') {
        param.query = $scope.value;
      }
      if (!$scope.hasGet) {
        getPersonnel(param, function(response) {
          if (response.list.length > 0) {
            $scope.info = response.list[0];
            $scope.hasGet = true;
          }
        });
      } else {
        if ($scope.type == 'id' && $scope.info._id.$id != $scope.value) {
          getPersonnel(param, function(response) {
            if (response.list.length > 0) {
              $scope.info = response.list[0];
            }
          });
        } else if ($scope.type == 'name' && $scope.info.FullName != $scope.value) {
          getPersonnel(param, function(response) {
            if (response.list.length > 0) {
              $scope.info = response.list[0];
            }
          });
        }
      }
    };

    $scope.getPositionByID = function(id) {
      var index = findInnerObjIndex($rootScope.Position, ['_id', '$id'], id);
      if (index > -1) {
        return $rootScope.Position[index].Name;
      } else {
        return;
      }
    };

    $scope.getDepartmentByID = function(id) {
      var index = findInnerObjIndex($rootScope.Departments, ['_id', '$id'], id);
      if (index > -1) {
        return $rootScope.Departments[index].Name;
      } else {
        return;
      }
    };
  }

});

app.directive('selectCustomer', function($rootScope, getCustomerList2, Pagination, getCustomerDetail, getCustomerLevels, findInnerObjIndex, addCustomer) {
  return {
    restrict: "AE",
    scope: {
      result: '=result',
      status: '=?status',
      action: '=action'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/select_customer.html?" + Math.random(),
  };

  function linkFun($scope) {

    $scope.selectCustomer = function(page) {

      $scope.detail = {
        GenderTypeID: 1
      };

      $scope.isLoading = true;
      if (!$scope.select) {
        $scope.select = {
          customer: {}
        };
      }
      $scope.select.customer.Page = page;
      var param = {
        key: $scope.select.key,
        page: page,
        limit: embeddedPageLimt
      };
      getCustomerList2(
        param,
        function(response) {
          $scope.isLoading = false;
          $scope.select.customer.List = response.data.list;
          var newPage = new Pagination(response.count, response.page);
          if (!$scope.Pagination) {
            $scope.Pagination = {};
          }
          $scope.Pagination.customer = newPage;
        });
    };

    $scope.getCustomerLevels = function() {
      getCustomerLevels(function(response) {
        $scope.levels = response;
      });
    };

    $scope.getCustomerLevels();

    $scope.selectCustomer(1);
  }

  function controllerFun($scope) {

    $scope.addNewCustomer = function(){
      $scope.isEditCustomer = true;
    };

    $scope.confirmAddCustomer = function(){
      var param = {};
      param.CustomerName = $scope.detail.CustomerName;
      param.GenderTypeID = $scope.detail.GenderTypeID;
      param.CustomerMobile = $scope.detail.CustomerMobile;
      param.CompanyCustomer = false;
      param.CustomerCompanyName = $scope.detail.CustomerCompanyName;
      param.CompanyId = $rootScope.userinfo.CompanyID.$id;
      param.CertificatesTypeId = '000000000000000000000001';

      if (param.CompanyCustomer === undefined) {
        $rootScope[position[2]].info = '请选择会员类型';
        return;
      }
      if (param.CustomerName === undefined) {
        $rootScope[position[2]].info = '请填写会员姓名';
        return;
      }

      if (param.GenderTypeID === undefined) {
        $rootScope[position[2]].info = '请选择会员性别';
        return;
      }

      if (param.CustomerMobile === undefined) {
        $rootScope[position[2]].info = '请填写会员手机号码';
        return;
      }

      addCustomer(param, function(response) {
        $scope.isEditCustomer = false;
        $scope.selectCustomer(1);
      });
    };

    $scope.cancelAddCustomer = function(){
      $scope.isEditCustomer = false;
    };

    // $scope.loadDetail = function(item) {
    //   getCustomerDetail(item._id.$id, function(response) {
    //     response.level = $scope.getLevel(response);
    //     item.detail = response;
    //   });
    // };

    $scope.getLevel = function(item) {
      if (item.Enlarge.CustomerLevelID) {
        var index = findInnerObjIndex($scope.levels, ['_id', '$id'], item.Enlarge.CustomerLevelID.$id);
        if (index > -1) {
          return $scope.levels[index];
        }
      }
    };
  }
});

//显示人员基本信息
app.directive("customerDetailPop", function($rootScope, findInnerObjIndex, getCustomerDetail, _,
  getCertificatesTypes, getCustomerLevels) {
  var showCustomerInfoObj = {
    restrict: "AE",
    scope: {
      info: '=info',
      id: '=id',
      arrow: '=arrow',
      popconf: '=popconf'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/customer_pop.html?" + Math.random(),
  };
  return showCustomerInfoObj;

  function linkFun($scope) {
    getCustomerDetail($scope.id, function(response) {
      console.log(response);
      $scope.customerInfo = response;
    });

    $scope.customerTabId = 0;

    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }

    if (!$scope.arrow.left) {
      $scope.arrow.left = 100;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 20;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'top';
    }
  }

  function controllerFun($scope) {

    $scope.showCustomerTab = function(tag) {
      switch (tag) {
        case 1:
          console.log(tag);
          break;
        case 2:
          console.log(tag);
          break;
        case 3:
          console.log(tag);
          break;
        case 4:
          console.log(tag);
          break;
        case 5:
          console.log(tag);
          break;
        case 6:
          console.log(tag);
          break;
      }
      $scope.customerTabId = tag;
    };

    $scope.editCustomerInfo = function() {
      $scope.customerInfoTmp = angular.copy($scope.customerInfo);
      $scope.customerInfoTmp.telRegion = $scope.customerInfoTmp.Enlarge.CustomerTel.substr(0, 4);
      $scope.customerInfoTmp.telNumber = $scope.customerInfoTmp.Enlarge.CustomerTel.substring(5);
      getCertificatesTypes(function(certificates) {
        $scope.certificatesTypes = certificates;
        $scope.customerInfoTmp.CertificatesType = $scope.certificatesTypes[findInnerObjIndex($scope.certificatesTypes, ['_id', '$id'], $scope.customerInfoTmp.Enlarge.CertificatesType.ForeignKeyID.$id)];
        getCustomerLevels(function(customerLevels) {
          $scope.customerLevels = customerLevels;
          $scope.customerInfoTmp.CustomerLevel = $scope.customerLevels[findInnerObjIndex($scope.customerLevels, ['_id', '$id'], $scope.customerInfoTmp.Enlarge.CustomerLevelID.$id)];
          console.log($scope.customerInfoTmp);
          $scope.isEditCustomer = true;
        });
      });
    };

    $scope.saveCustomerInfo = function() {
      console.log($scope.customerInfoTmp);
    };

    $scope.changeEditCustomer = function(value) {
      $scope.isEditCustomer = value;
    };

  }

});

//显示人员基本信息
app.directive("personnelSelectPop", function(getPersonnel, $rootScope, findInnerObjIndex, insertPersonSimple, Pagination) {
  var selectPersonObj = {
    restrict: "E",
    scope: {
      info: '=info',
      arrow: '=arrow',
      popconf: '=popconf',
      selectInfo: '=selectInfo',
      selectPerson: '=?mySelectPerson',
      personnelID: '=?personnelId'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/personnel_select_pop.html?" + Math.random(),
  };
  return selectPersonObj;

  function linkFun($scope) {
    $scope.search = {};
    $scope.personTmp = {};
    $scope.hasSelectPerson = false;
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 100;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 20;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    if ($scope.selectPerson.hasOwnProperty('FullName') && $scope.selectPerson.FullName !== '') {
      $scope.hasSelectPerson = true;
      $scope.showInfo = $scope.selectInfo;
    } else {
      $scope.showInfo = $scope.info;
    }

    if ($scope.personnelID) {
      getPersonnel({
        id: $scope.personnelID
      }, function(result) {
        if (result.list.length > 0) {
          $scope.selectPerson = result.list[0];
        }
      });
    }

    getPersonnel({
      limit: 5
    }, function(people) {
      $scope.comPersonnel = people.list;
      $scope.pageInfo = new Pagination(people.count, people.page);
      $scope.comPersonnel.forEach(function(person) {
        var department = _.find($rootScope.Departments, function(object) {
          return object._id.$id == person.Department.ID.$id;
        });
        if (department !== undefined) {
          person.Department.Name = department.Name;
        }
      });

    });

  }

  function controllerFun($scope) {

    $scope.findPersonnel = function(page) {
      if (!page) {
        page = 1;
      }
      getPersonnel({
        query: $scope.search.personQuery,
        limit: 5,
        page: page
      }, function(people) {
        $scope.comPersonnel = people.list;
        $scope.pageInfo = new Pagination(people.count, people.page);
        $scope.comPersonnel.forEach(function(person) {
          var department = _.find($rootScope.Departments, function(object) {
            return object._id.$id == person.Department.ID.$id;
          });
          if (department !== undefined) {
            person.Department.Name = department.Name;
          }
        });
      });
    };

    $scope.selectPersonnel = function(person) {
      $scope.showInfo = $scope.selectInfo;
      if ($scope.selectPerson.hasOwnProperty('FullName') && $scope.selectPerson.FullName !== '') {
        console.log('已经选择过业务员了');
        $scope.selectPerson = person;
      } else {
        $scope.selectPerson = person;
      }
      $scope.hasSelectPerson = true;
      $scope.popoverIsOpen = false;
    };

    $scope.deletePersonnel = function(person) {
      if ($scope.selectPerson._id.$id == person._id.$id) {
        $scope.selectPerson = {};
        $scope.hasSelectPerson = false;
      }
    };

    $scope.changeAddMode = function(value) {
      $scope.isAddMode = value;
    };

    $scope.savePersonnel = function() {
      insertPersonSimple({
        name: $scope.personTmp.Name,
        telPhone: $scope.personTmp.TelPhone
      }, function(response) {
        $scope.isAddMode = false;
        $scope.selectPerson = $scope.personTmp;
        $scope.personTmp = {};
      });
    };
  }

});

app.directive('selectCompanyCustomer', function($rootScope, getCustomerList2, Pagination, getCustomerDetail, getCustomerLevels, findInnerObjIndex, addCustomer) {
  return {
    restrict: "AE",
    scope: {
      result: '=result',
      status: '=?status',
      action: '=action'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/select_customer_company.html?" + Math.random(),
  };

  function linkFun($scope) {

    $scope.detail = {
      GenderTypeID: 1
    };

    $scope.selectCustomer = function(page) {
      $scope.isLoading = true;
      if (!$scope.select) {
        $scope.select = {
          customer: {}
        };
      }
      $scope.select.customer.Page = page;
      var param = {
        key: $scope.select.key,
        page: page,
        CompanyCustomer: true,
        limit: embeddedPageLimt
      };
      getCustomerList2(
        param,
        function(response) {
          $scope.isLoading = false;
          $scope.select.customer.List = response.data.list;
          var newPage = new Pagination(response.count, response.page);
          if (!$scope.Pagination) {
            $scope.Pagination = {};
          }
          $scope.Pagination.customer = newPage;
        });
    };

    $scope.getCustomerLevels = function() {
      getCustomerLevels(function(response) {
        $scope.levels = response;
      });
    };

    $scope.getCustomerLevels();

    $scope.selectCustomer(1);
  }

  function controllerFun($scope) {

    $scope.addNewCustomer = function(){
      $scope.isEditCustomer = true;
    };

    $scope.confirmAddCustomer = function(){
      var param = {};
      param.CustomerName = $scope.detail.CustomerName;
      param.GenderTypeID = $scope.detail.GenderTypeID;
      param.CustomerMobile = $scope.detail.CustomerMobile;
      param.CompanyCustomer = true;
      param.CustomerCompanyName = $scope.detail.CustomerCompanyName;
      param.CompanyId = $rootScope.userinfo.CompanyID.$id;

      if (param.CompanyCustomer === undefined) {
        $rootScope[position[2]].info = '请选择会员类型';
        return;
      }
      if (param.CustomerName === undefined) {
        $rootScope[position[2]].info = '请填写会员姓名';
        return;
      }
      if (param.GenderTypeID === undefined) {
        $rootScope[position[2]].info = '请选择会员性别';
        return;
      }
      if (param.CustomerMobile === undefined) {
        $rootScope[position[2]].info = '请填写会员手机号码';
        return;
      }
      if (param.CustomerCompanyName === undefined) {
        $rootScope[position[2]].info = '请填写公司名称';
        return;
      }

      addCustomer(param, function(response) {
        $scope.isEditCustomer = false;
        $scope.selectCustomer(1);
      });
    };

    $scope.cancelAddCustomer = function(){
      $scope.isEditCustomer = false;
    };

    $scope.getLevel = function(item) {
      if (item.Enlarge.CustomerLevelID) {
        var index = findInnerObjIndex($scope.levels, ['_id', '$id'], item.Enlarge.CustomerLevelID.$id);
        if (index > -1) {
          return $scope.levels[index];
        }
      }
    };
  }
});
//邮轮游计划弹窗
app.directive('productCarArrange', function($rootScope, getSeatInfoByPlanAndCar, _,
   showWarningBox, delProductPlanById) {
  return {
    restrict: "ACE",
    scope: {
      plan: '=plan',
      edit: '=edit',
      cars: '=cars',
    },
    controller: function($scope) {

      $scope.showPlanSeatInfo = function(){
        $scope.isLoading = true;
        $scope.nowCar = $scope.cars[0];
        $scope.showOrderSeatCarInfo($scope.cars[0]);
      };

      $scope.showOrderSeatCarInfo = function(car){
        $scope.nowCar = car;
        var param = {
          planID: $scope.plan,
          carID: car.ForeignKeyID.$id
        };
        getSeatInfoByPlanAndCar(param, function (response) {
          $scope.carId = param.carID;
          $scope.arrangeCarInfo = response;
          $scope.carSeatNumber = [];
          for(var SeatNumber = 1; SeatNumber <= car.DigitNumber; SeatNumber++){
            var tourist = {};
            var tRes = _.find($scope.arrangeCarInfo, function(item){
              return item.CarSeat.SeatNumber == SeatNumber;
            });
            if(SeatNumber == car.GuideSiteNumber){
              tourist.SeatNumber = SeatNumber;
              tourist.isGuide = true;
              tourist.hasTourist = true;
              tourist.TouristName = "导游";
            }else if(undefined !== tRes){
              tourist.SeatNumber = SeatNumber;
              tourist.isGuide = false;
              tourist.hasTourist = true;
              tourist.TouristName = tRes.TouristName;
            }else{
              tourist.SeatNumber = SeatNumber;
              tourist.isGuide = false;
              tourist.hasTourist = false;
              tourist.TouristName = "可安排";
            }
            $scope.carSeatNumber.push(tourist);
          }
          $scope.isLoading = false;
        });
      };

      $scope.refreshOrderSeatInfo = function(){
        $scope.showOrderSeatCarInfo($scope.nowCar);
      };

      $scope.delOrderTouristSeat = function(){

      };

    },
    templateUrl: "/public/angularView/productOrder/components/show_car_seat_pop.html?" + Math.random(),
  };
});
/**
 * 左侧边栏
 *
 */
sidebar.directive("sidebarpanel", function(sidebarshow) {
  return {
    restrict: "AE",
    link: sidebarshow,
    templateUrl: "/public/angularView/gadget/frame/sidebar.html?" + Math.random()
  };
});
/**
 * 顶部提醒浮框
 */
sidebar.directive("tippop", function(noticeList) {
  return {
    restrict: "AE",
    link: noticeList,
    templateUrl: "/public/angularView/gadget/frame/tip_pop.html?" + Math.random()
  };
});
/**
 * 通知提醒框
 */
sidebar.directive("warnbox", function() {
  return {
    restrict: "AE",
    templateUrl: "/public/angularView/gadget/frame/warn_box.html?" + Math.random()
  };
});
/**
 * 有右侧数字提示的菜单
 */
sidebar.directive(
  "tipmenu",
  function() {
    return {
      scope: {
        item: "=item",
        citem: '=citem',
        index: "=index"
      },
      restrict: "AE",
      templateUrl: "/public/angularView/gadget/frame/left_menu/tip_menu.html?" + Math.random()
    };
  });
/**
 * 交互菜单
 */
sidebar.directive(
  "interactivemenu",
  function() {
    return {
      scope: {
        item: "=item",
        citem: '=citem',
        index: "=index"
      },
      restrict: "AE",
      templateUrl: "/public/angularView/gadget/frame/left_menu/interactive_menu.html?" + Math.random()
    };
  });
/**
 * 交互菜单
 */
sidebar.directive(
  "interactivespeciallistitem",
  function() {
    return {
      scope: {
        item: "=item",
        citem: '=citem',
        index: "=index"
      },
      restrict: "AE",
      templateUrl: "/public/angularView/gadget/frame/left_menu/interactive_menu_special_item.html?" + Math.random()
    };
  });
/**
 * 普通菜单
 */
sidebar.directive(
  "defaultmenu",
  function() {
    return {
      scope: {
        fetch: "=fetch",
        RefreshData: "=RefreshData",
        item: "=item",
        citem: '=citem',
        index: "=index"
      },
      restrict: "AE",
      templateUrl: "/public/angularView/gadget/frame/left_menu/default_menu.html?" + Math.random()
    };
  });

/**
 * 折叠的菜单
 */
sidebar.directive(
  'foldmenu',
  function() {
    return {
      scope: {
        item: "=item",
        citem: '=citem',
        index: "=index"
      },
      restrict: "AE",
      templateUrl: "/public/angularView/gadget/frame/left_menu/fold_menu.html"
    };
  });

/**
 * 左侧菜单
 */
sidebar.directive("leftmenu", function(menu) {
  return {
    restrict: "AE",
    link: menu,
    templateUrl: "/public/angularView/gadget/frame/left_menu/left_menu.html?" + Math.random()
  };
});
/**
 * 用户面板
 */
sidebar.directive('userpanel', function(userInfo) {
  return {
    restrict: "AE",
    link: userInfo,
    templateUrl: "/public/angularView/gadget/frame/userpanel.html?" + Math.random()
  };
});
/**
 * 顶部按钮
 */
sidebar.directive("topbutton", function() {
  return {
    restrict: "AE",
    templateUrl: "/public/angularView/gadget/frame/top_button.html?" + Math.random()
  };
});
/**
 * 全局板块切换
 */
sidebar.directive('topnavi', function(erpMenus) {
  return {
    restrict: "E",
    link: erpMenus,
    templateUrl: "/public/angularView/gadget/frame/top_navi.html?" + Math.random()
  };
});
/**
 * [编辑常规行程]
 * @param  {[type]} 'eidtSchedule' [description]
 * @param  {[type]} function(      [description]
 * @return {[type]}                [description]
 */
app.directive('eidtStroke', function($filter, $anchorScroll, $location, $rootScope, getScheduleClass, getSchedule, getScheduleDetailFood, editScheduleDetailStrokeContent,
  addScheduleClass, editScheduleDetailTitle, addScheduleDetailHotel, delScheduleDetailHotel, addViewspots, delViewspots, addScheduleDetailShopping,
  delScheduleDetailShopping, editScheduleDetailCaterings, editScheduleDetailFood, addScheduleDetailTraffic, delScheduleDetailTraffic, addSchedule, showWarningBox,
  editPort, getPort, getHotelsByScehduleId, delSchedule, getTrafficMethods, delScheduleClass, addScheduleDetailOwnExpensesMulti, getScheduleDetail,
  delScheduleDetailOwnExpenses, getAllCruisePort,getTrafficListDatas, addViewspotsList, addScheduleDetailHotelList, cloneScheduleClass, editScheduleClass) {
  return {
    restrict: "ACE",
    scope: {
      productId: '=productId',
      travelDay: '=travelDay',
      travelNight: '=travelNight',
      productType: '=productType'
    },
    link: function($scope) {

      $scope.Schedule = [];
      $scope.ScheduleClass = [];
      $scope.currentSchedule = {};
      $scope.currentScheduleClass = {};
      $scope.currentScheduleTemp = {};
      $scope.leftSchedule = [];
      $scope.rightSchedule = [];

      $scope.trafficIcon = [{
        html: '<span class="tra_tool plane">&nbsp;</span>',
        text: "{飞机}"
      }, {
        html: '<span class="tra_tool bus">&nbsp;</span>',
        text: "{汽车}"
      }, {
        html: '<span class="tra_tool dongche">&nbsp;</span>',
        text: "{动车}"
      }, {
        html: '<span class="tra_tool train">&nbsp;</span>',
        text: "{火车}"
      }, {
        html: '<span class="tra_tool ship">&nbsp;</span>',
        text: "{船}"
      }];

      $scope.scheduleStyle = {
        position: "relative",
        cell: 35
      };

      var ProductType = {};

      $scope.changeScheduleStyle = function(direction) {
        //判断是否到了最值
        var leftTmp = $scope.scheduleStyle[$scope.currentScheduleID].left;
        leftTmp += direction * $scope.scheduleStyle.cell;
        var max = $scope.leftSchedule.length * $scope.scheduleStyle.cell + $scope.rightSchedule.length * $scope.scheduleStyle.cell + 100;
        if (leftTmp > 0 || leftTmp < -max) {
          return;
        }
        $scope.scheduleStyle[$scope.currentScheduleID].left = leftTmp;
      };

      //组团游=>1,自驾游=>2,自助游=>3,定制游=>4,邮轮=>5
      //txt,scenery,restaurant,hotel,shopping,selfPaying,traffic
      $scope.itemList = [];
      if ($scope.productType == 3) { //自助游
        ProductType = {
          "ID": 3,
          "Name": "自助游"
        };
        $scope.itemList = ['txt', 'scenery', 'restaurant', 'hotel', 'traffic'];
      } else if ($scope.productType == 4) { //定制游
        ProductType = {
          "ID": 4,
          "Name": "定制游"
        };
        $scope.itemList = ['txt', 'scenery', 'restaurant', 'hotel'];
      } else if ($scope.productType == 5) { //邮轮
        ProductType = {
          "ID": 5,
          "Name": "邮轮"
        };
        $scope.itemList = ['txt', 'port', 'restaurant', 'hotel', 'traffic', 'shopping', 'selfPaying'];
      } else if ($scope.productType == 1) {
        ProductType = {
          "ID": 1,
          "Name": "组团游"
        };
        $scope.itemList = ['txt', 'scenery', 'restaurant', 'hotel', 'traffic', 'shopping', 'selfPaying'];
      } else if ($scope.productType) {
        ProductType = {
          "ID": 2,
          "Name": "自驾游"
        };
        $scope.itemList = ['txt', 'scenery', 'restaurant', 'hotel', 'traffic', 'shopping', 'selfPaying'];
      }

      $scope.addIconToTitle = function(item) {
        $scope.currentSchedule.Title += item.text;
        $scope.saveTitle();
      };

      getScheduleClass($scope.productId, function(scheduleClassData) {
        $scope.ScheduleClass = [];
        $scope.currentScheduleID = "";
        if (scheduleClassData.list.length > 0) {
          $scope.ScheduleClass = scheduleClassData.list;
          var scheduleTmp = _.find(scheduleClassData.list, function(item) {
            return item.IsDefault == 1;
          });
          if (undefined !== scheduleTmp) {
            $scope.currentScheduleID = scheduleTmp._id.$id;
            $scope.currentScheduleClass = scheduleTmp;
          } else {
            $scope.currentScheduleID = scheduleClassData.list[0]._id.$id;
          }
          $scope.switchCurrentScheduleID($scope.currentScheduleID);
        } else {
          if($scope.productType != 3 && $scope.productType != 4){
            $scope.AddScheduleClass();
          }
        }
      });

      $scope.switchCurrentScheduleID = function(id) {
        if (id !== '') {
          if (!(id in $scope.scheduleStyle)) {
            $scope.scheduleStyle[id] = {
              left: 0
            };
          }
          getSchedule(id, function(schedule) {
            $scope.Schedule = schedule;
						$scope.currentScheduleID = id;
            $scope.currentScheduleClass = _.find($scope.ScheduleClass, function(item){
              return item._id.$id === $scope.currentScheduleID;
            });
            if (schedule.length > 0) {
              $scope.switchSchedule(1);
              $scope.leftSchedule = [];
              $scope.rightSchedule = [];
              $scope.Schedule.forEach(function(item) {
                if (item.Day <= 1) {
                  $scope.leftSchedule.push(item);
                } else {
                  $scope.rightSchedule.push(item);
                }
              });
            } else {
              $scope.addSchedule(true);
            }
          });
        } else {
          $scope.currentScheduleID = id;
          $scope.Schedule = [];
          $scope.currentSchedule = {};
          $scope.currentScheduleTemp = {};
          $scope.leftSchedule = [];
          $scope.rightSchedule = [];
        }
      };

      $scope.switchSchedule = function(day) {
        $scope.currentScheduleDay = day;
        $scope.currentSchedule = _.find($scope.Schedule, function(item) {
          return item.Day == $scope.currentScheduleDay;
        });
        console.log($scope.currentSchedule);
        if(null === $scope.currentSchedule.Hotels){
          $scope.currentSchedule.Hotels = [];
        }
        if(null === $scope.currentSchedule.Shoppings){
          $scope.currentSchedule.Shoppings = [];
        }
        if(null === $scope.currentSchedule.OwnExpenses){
          $scope.currentSchedule.OwnExpenses = [];
        }
        if(null === $scope.currentSchedule.Traffic){
          $scope.currentSchedule.Traffic = [];
        }
        if(null === $scope.currentSchedule.Viewspots){
          $scope.currentSchedule.Viewspots = [];
        }
        $scope.currentScheduleTemp = angular.copy($scope.currentSchedule);
				if(null === $scope.currentScheduleTemp.DelicacyInfos || $scope.currentScheduleTemp.DelicacyInfos.length === 0){
					$scope.currentScheduleTemp.DelicacyInfos = {};
				}
        if($scope.productType == 5){
          if(!$scope.allCruisePort){
            getAllCruisePort(1, 9999, function(response){
              $scope.allCruisePort = response.data.list;
            });
          }
        }
        $scope.currentSchedule.addViewspots = [];
        $scope.currentSchedule.removeViewspots = [];
        $scope.currentSchedule.addHotel = [];
        $scope.currentSchedule.removeHotel = [];
        $scope.currentSchedule.addShoppings = [];
        $scope.currentSchedule.removeShoppings = [];
        $scope.currentSchedule.addTraffic = [];
        $scope.currentSchedule.removeTraffic = [];
        $scope.currentSchedule.addSelfPay = [];
        $scope.currentSchedule.removeSelfPay = [];
      };

      $scope.delScheduleById = function(index) {
        showWarningBox('是否确认要删除当前行程吗', function() {
          delScheduleClass($scope.currentScheduleID, function(response) {
            $scope.ScheduleClass.splice(index, 1);
            if ($scope.ScheduleClass.length <= 0) {
              $scope.switchCurrentScheduleID('');
            } else {
              $scope.switchCurrentScheduleID($scope.ScheduleClass[0]._id.$id);
            }
          });
        });
      };

      $scope.setMultiTripClass = function() {
        if ($scope.multiTripClass == "active") {
          $scope.multiTripClass = "";
        } else {
          $scope.multiTripClass = "active";
        }
      };

      //复制行程
      $scope.copyScheduleClass = function() {
        var param = {};
        for (var i = 0; i < 26; i++) {
          if (_.findIndex($scope.ScheduleClass, {Title: $rootScope.letter[i] + '行程'}) < 0) {
            param.Title = $rootScope.letter[i] + '行程';
            break;
          }
        }
        param.Sort = $scope.ScheduleClass.length + 1;
        cloneScheduleClass($scope.productId, $scope.currentScheduleID, param, function(response){
          getScheduleClass($scope.productId, function(scheduleClassData) {
            $scope.ScheduleClass = [];
            $scope.currentScheduleID = response.clone_scheduleID;
            if (scheduleClassData.list.length > 0) {
              $scope.ScheduleClass = scheduleClassData.list;
            }
            $scope.switchCurrentScheduleID($scope.currentScheduleID);
          });
        });
      };

      // 添加行程
      $scope.AddScheduleClass = function() {
        var IsDefault = $scope.ScheduleClass.length > 0 ? 0 : 1;
        var param = {
          Days: $scope.travelDay,
          Night: $scope.travelNight,
          IsDefault: IsDefault
        };
        for (var i = 0; i < 26; i++) {
          if (_.findIndex($scope.ScheduleClass, {Title: $rootScope.letter[i] + '行程'}) < 0) {
            param.Title = $rootScope.letter[i] + '行程';
            break;
          }
        }
        addScheduleClass($scope.productId, param, function(response) {
          $scope.ScheduleClass.push(response.data);
          $scope.switchCurrentScheduleID(response.data._id.$id);
        });
      };

      // 保存文字
      $scope.saveWord = function() {
        var param = {
          Title: $scope.currentScheduleTemp.Title,
          StrokeContent: $scope.currentScheduleTemp.StrokeContent
        };
        editScheduleDetailStrokeContent($scope.currentSchedule._id.$id, param, function() {
          $scope.currentSchedule.StrokeContent = $scope.currentScheduleTemp.StrokeContent;
          $scope.switchEditSchedule();
        });
      };

      //修改标题
      $scope.saveTitle = function() {
        var param = {
          Title: $scope.currentSchedule.Title,
        };
        editScheduleDetailTitle($scope.currentSchedule._id.$id, param, function(data) {
          console.log(data);
        });
      };

      //保存停靠口岸
      $scope.savePort = function() {
        if(!$scope.currentScheduleTemp.CruisePort){
          return '未选择停靠口岸';
        }
        var param = {
          SailingTime: $scope.currentScheduleTemp.SailingHour + ':' + $scope.currentScheduleTemp.SailingMinute,
          SailingExplain: $scope.currentScheduleTemp.SailingExplain,
          ArrivalTime: $scope.currentScheduleTemp.ArrivalHour + ':' + $scope.currentScheduleTemp.ArrivalMinute,
          ArrivalExplain: $scope.currentScheduleTemp.ArrivalExplain,
          CruisePort: {
            "ForeignKeyID": $scope.currentScheduleTemp.CruisePort._id.$id,
            "DelStatus": 0,
            "ID": $scope.currentScheduleTemp.CruisePort.ID,
            "title_ZH": $scope.currentScheduleTemp.CruisePort.title_ZH,
            "title_EN": $scope.currentScheduleTemp.CruisePort.title_EN
          },
        };
        editPort($scope.currentSchedule._id.$id, param, function(data) {
          $scope.currentSchedule.SailingTime = param.SailingTime;
          $scope.currentSchedule.SailingExplain = param.SailingExplain;
          $scope.currentSchedule.ArrivalTime = param.ArrivalTime;
          $scope.currentSchedule.ArrivalExplain = param.ArrivalExplain;
          $scope.currentSchedule.CruisePort = angular.copy(param.CruisePort);
        });
        $scope.switchEditSchedule();

      };

      // 保存酒店
      $scope.saveHotel = function() {
        $scope.currentSchedule.Hotels = angular.copy($scope.currentScheduleTemp.Hotels);
        var param = [];
        $scope.currentSchedule.addHotel.forEach(function(item) {
          var result = {
            "ForeignKeyID": item.ForeignKeyID.$id,
            "HotelName": item.HotelName,
            "DelStatus": 0,
            "HotelNote": '',
            "ID": ''
          };
          param.push(result);
        });
        addScheduleDetailHotelList($scope.currentSchedule._id.$id, param, function(data) {
          console.log(data);
        });
        $scope.currentSchedule.addHotel = [];
        // $scope.currentSchedule.removeHotel.forEach(function(item) {
        //   delScheduleDetailHotel($scope.currentSchedule._id.$id, item.ForeignKeyID.$id, function(data) {
        //     console.log(data);
        //   });
        // });
        $scope.currentSchedule.removeHotel = [];

        $scope.switchEditSchedule();
      };

      //保存景点
      $scope.saveViewspots = function() {

        $scope.currentSchedule.Viewspots = angular.copy($scope.currentScheduleTemp.Viewspots);

        // $scope.currentSchedule.addViewspots.forEach(function(item) {
        //   addViewspots($scope.currentSchedule._id.$id, item, function(data) {});
        // });
        //
        //
        // $scope.currentSchedule.addViewspots = [];
        // $scope.currentSchedule.removeViewspots.forEach(function(item) {
        //   delViewspots($scope.currentSchedule._id.$id, item._id.$id, function(data) {});
        // });

        var postData = [];
        $scope.currentSchedule.Viewspots.forEach(function(item){
          postData.push({
            ID: item._id?item._id.$id:"",
            DelStatus: 0,
            ViewspotID: item.ViewspotID,
            ViewspotTitle: item.ViewspotTitle,
            ViewspotTitleEN: item.ViewspotTitleEN,
            Address: item.Address,
            Notes: item.Notes
          });
        });

        addViewspotsList($scope.currentSchedule._id.$id, postData, function(data) {});

        $scope.currentSchedule.removeViewspots = [];

        $scope.switchEditSchedule();
      };

      //保存购物
      $scope.saveShoppings = function() {

        $scope.currentSchedule.Shoppings = angular.copy($scope.currentScheduleTemp.Shoppings);

        $scope.currentSchedule.addShoppings.forEach(function(item) {
          var result = {
            "ForeignKeyID": item.ForeignKeyID.$id,
            "Shoping": item.Shoping,
            "Notes": item.Notes,
            "ReferMinute": item.ReferMinute
          };
          addScheduleDetailShopping($scope.currentSchedule._id.$id, result, function(data) {});
        });


        $scope.currentSchedule.addShoppings = [];
        $scope.currentSchedule.removeShoppings.forEach(function(item) {
          delScheduleDetailShopping($scope.currentSchedule._id.$id, item._id.$id, function(data) {});
        });
        $scope.currentSchedule.removeShoppings = [];
        $scope.switchEditSchedule();
      };

      $scope.delShopping = function(shopping, index) {
        showWarningBox('是否确定删除购物店？', function() {
          delScheduleDetailShopping($scope.currentSchedule._id.$id, shopping._id.$id, function(data) {
            $scope.currentSchedule.Shoppings.splice(index, 1);
            $scope.currentScheduleTemp.Shoppings = angular.copy($scope.currentSchedule.Shoppings);
          });
        });
      };

      $scope.delFoodPic = function(item) {
        $scope.currentSchedule.DelicacyInfos.CateringBasicsPic = _.without($scope.currentSchedule.DelicacyInfos.CateringBasicsPic, item);
      };

      $scope.saveFood = function() {
        //保存三餐
        $scope.currentScheduleTemp.Caterings.forEach(function(item) {
          if (item.Type.ID==1) {
            item.Type.Name = '不包含';
          } else {
            item.Type.Name = '包含';
          }
        });
        var param1 = $scope.currentScheduleTemp.Caterings;
        editScheduleDetailCaterings($scope.currentSchedule._id.$id, param1, function() {
          $scope.currentSchedule.Caterings = angular.copy($scope.currentScheduleTemp.Caterings);
        });
        var picTmp = [];
        if ($scope.currentScheduleTemp.DelicacyInfos.CateringBasicsPic) {
          $scope.currentScheduleTemp.DelicacyInfos.CateringBasicsPic.forEach(function(pic) {
            picTmp.push({
              ForeignKeyID: "000000000000000000000000",
              Title: pic.Title,
              PicPath: pic.PicPath,
              Notes: pic.Notes,
              OrderBy: pic.OrderBy
            });
          });
        }
        if(picTmp.length > 0){
            $scope.currentScheduleTemp.DelicacyInfos.CateringBasicsPic = picTmp;
        }
        if(($scope.currentScheduleTemp.DelicacyInfos.TripCateringNote && $scope.currentScheduleTemp.DelicacyInfos.TripCateringNote !== "") || picTmp.length !== 0){
            editScheduleDetailFood($scope.currentSchedule._id.$id, $scope.currentScheduleTemp.DelicacyInfos, function() {
                $scope.currentSchedule.DelicacyInfos = {
                    CateringBasicsPic: $scope.currentScheduleTemp.DelicacyInfos.CateringBasicsPic ? angular.copy($scope.currentScheduleTemp.DelicacyInfos.CateringBasicsPic) : [],
                    TripCateringNote: $scope.currentScheduleTemp.DelicacyInfos.TripCateringNote
                };
            });
        }
        $scope.switchEditSchedule();
      };

      //保存交通
      $scope.saveTraffic = function() {
        $scope.currentSchedule.Traffic = angular.copy($scope.currentScheduleTemp.Traffic);

        $scope.currentSchedule.addTraffic.forEach(function(item) {
          var result = {
            "ForeignKeyID": item.ForeignKeyID.$id,
            "Traffic": item.TrafficType.Name,
            "Note": item.Note
          };
          addScheduleDetailTraffic($scope.currentSchedule._id.$id, result, function(data) {});
        });

        $scope.currentSchedule.addTraffic = [];
        $scope.currentSchedule.removeTraffic.forEach(function(item) {
          console.log(item._id.$id);
          delScheduleDetailTraffic($scope.currentSchedule._id.$id, item._id.$id, function(data) {});
        });
        $scope.currentSchedule.removeTraffic = [];
        $scope.switchEditSchedule();
      };

      //保存自费项目
      $scope.saveOwnExpenses = function() {
        $scope.currentSchedule.OwnExpenses = angular.copy($scope.currentScheduleTemp.OwnExpenses);
        console.log($scope.currentSchedule.OwnExpenses);
        var postData = [];
        $scope.currentSchedule.addSelfPay.forEach(function(ownex) {
          if (!ownex.Title) {
            return true;
          }
          postData.push({
            "Title": ownex.Title,
            "Notes": ownex.Notes,
            "ReferPrice": ownex.ReferPrice,
            "ReferMinute": ownex.ReferMinute,
            "Address": ""
          });
        });
        if (postData.length > 0) {
          addScheduleDetailOwnExpensesMulti($scope.currentSchedule._id.$id, postData, function(response) {
            $scope.currentSchedule.addSelfPay = [];
          });
        }
        $scope.currentSchedule.removeSelfPay.forEach(function(item) {
          delScheduleDetailOwnExpenses($scope.currentSchedule._id.$id, item._id.$id, function(response) {});
        });
        $scope.currentSchedule.removeSelfPay = [];
        $scope.switchEditSchedule();
      };

      $scope.switchEditSchedule = function(ScheduleType) {
        if (ScheduleType) {
          $scope.editSchedule = ScheduleType;
          $location.hash(ScheduleType);
          $anchorScroll();
        } else {
          $scope.editSchedule = '';
        }
      };

      //添加日程
      $scope.addSchedule = function(isNew) {
        var AddInfo = {
          "ForeignKeyID": $rootScope.userinfo._id.$id,
          "EmployeeName": $rootScope.userinfo.FullName,
          "EmployeeDepartmentID": $rootScope.userinfo.Department.ID.$id,
          "EmployeeDepartmentName": $rootScope.userinfo.Department.Name
        };
        var CompanyInfo = {
          "CompanyDefaultContact": $rootScope.userinfo.CompanyInfo.CompanyDefaultContact,
          "CompanyDefaultContactMobile": $rootScope.userinfo.CompanyInfo.CompanyDefaultContactMobile,
          "CompanyName": $rootScope.userinfo.CompanyInfo.CompanyName,
          "CompanyNameSimplifiedSpelling": $rootScope.userinfo.CompanyInfo.CompanyNameSimplifiedSpelling,
          "CompanyStatus": $rootScope.userinfo.CompanyInfo.CompanyStatus,
          "DelStatus": $rootScope.userinfo.CompanyInfo.DelStatus,
          "ForeignKeyID": $rootScope.userinfo.CompanyInfo._id.$id,
          "ParentCompanyID": $rootScope.userinfo.CompanyInfo.ParentCompanyID.$id
        };
        addSchedule($scope.currentScheduleID, $scope.productId, AddInfo, CompanyInfo, ProductType, function(response) {
					if(isNew){
						$scope.leftSchedule = [];
					}else{
						$scope.leftSchedule = $scope.leftSchedule.concat($scope.rightSchedule);
						// gws
					}
					$scope.rightSchedule = [];
					$scope.Schedule.push(response);
					$scope.leftSchedule.push(response);
					$scope.switchSchedule(_.last($scope.leftSchedule).Day);
        });
      };

      $scope.delSchedule = function() {
        if ($scope.leftSchedule.length + $scope.rightSchedule.length <= 0) {
          return;
        }
        showWarningBox('确认要删除最后一个日程？', function() {
          var schedule = _.last($scope.Schedule);
          delSchedule(schedule._id.$id, function(response) {
            $scope.Schedule.pop();
            if ($scope.Schedule.length <= 17) {
              $scope.scheduleStyle[$scope.currentScheduleID].left = 0;
            }
            if ($scope.rightSchedule.length > 0) {
              $scope.rightSchedule.pop();
            } else if ($scope.leftSchedule.length > 0) {
              $scope.leftSchedule.pop();
            }
          });
        });
      };

      $scope.changeScheduleShow = function(index, isLeft) {
        var arrayTmp = [];
        if (isLeft) {
          arrayTmp = $scope.leftSchedule.slice(index + 1, $scope.leftSchedule.length);
          $scope.rightSchedule = arrayTmp.concat($scope.rightSchedule);
          $scope.leftSchedule = $scope.leftSchedule.slice(0, index + 1);
        } else {
          arrayTmp = $scope.rightSchedule.slice(0, index + 1);
          $scope.leftSchedule = $scope.leftSchedule.concat(arrayTmp);
          $scope.rightSchedule = $scope.rightSchedule.slice(index + 1, $scope.rightSchedule.length);
        }
      };

      $scope.changeScheduleInfo = function(){
        var postData = {};
        postData.Days = $socpe.currentScheduleClass.Days;
        postData.Night = $scope.currentScheduleClass.Night;
        editScheduleClass($scope.currentScheduleID, postData, function(response){
          console.log(response);
        });
      };

    },
    templateUrl: "/public/angularView/stroke/edit_stroke.html?" + Math.random(),
  };
});

app.directive("viewStroke", function(getScheduleClass, getSchedule, getScheduleDetailFood, getCompleteSchedule,
  getPort) {
  return {
    restrict: "ACE",
    scope: {
      productId: '=productId',
      productType: '=productType'
    },
    link: function($scope) {

      $scope.$watch("productId", function(value) {
        if (value !== undefined) {
          getScheduleClass(value, function(response2) {
            $scope.ScheduleClass = response2.list;
            if (response2.list.length > 0) {
              $scope.switchScheduleDetail(response2.list[0]._id.$id);
            }
          });
        }
      });

      $scope.switchScheduleDetail = function(currentScheduleID) {
        $scope.currentScheduleID = currentScheduleID;
        getCompleteSchedule($scope.currentScheduleID, function(scheduleResponse) {
          $scope.currentSchedule = scheduleResponse;
        });
      };

      $scope.titleReplace = function(item) {
        var title = item.Title;
        title = title.replace(/{飞机}/g, '<span class="tra_tool plane">&nbsp;</span>');
        title = title.replace(/{汽车}/g, '<span class="tra_tool bus">&nbsp;</span>');
        title = title.replace(/{动车}/g, '<span class="tra_tool dongche">&nbsp;</span>');
        title = title.replace(/{火车}/g, '<span class="tra_tool train">&nbsp;</span>');
        title = title.replace(/{船}/g, '<span class="tra_tool ship">&nbsp;</span>');
        item.newTitle = title;
      };
    },
    templateUrl: "/public/angularView/stroke/view_stroke.html?" + Math.random(),
  };
});
//编辑组团游计划插件
app.directive('editTeamtourPlan', function(_, getCostListProduct) {
  return {
    restrict: "ACE",
    scope: {
      batchAdd: '=batchAdd',
      addPlanDateList: '=addPlanDateList',
      editPlanInfo: '=editPlanInfo',
      savePlan: '&savePlan',
      cancelPlan: '&cancelPlan',
      dateSelected: '=dateSelected'
    },
    link: function($scope) {
      $scope.newPricePlanAdvanced = function() {
        $scope.editPlanInfo.pricePlanAdvanced.push({});
      };

      $scope.delPlanAdvancedPrice = function(item) {
        $scope.editPlanInfo.pricePlanAdvanced = _.without($scope.editPlanInfo.pricePlanAdvanced, item);
      };

      $scope.changeEditPriceType = function(type) {
        $scope.editPlanInfo.priceType = type;
      };

      $scope.unChooseDate = function(day) {
        $scope.addPlanDateList = _.without($scope.addPlanDateList, day);
        $scope.dateSelected[Date.parse(day)] = false;
      };

      $scope.CostFormatter = function(cost) {
        return cost.Title;
      };

      $scope.getAllCost = function() {
        var param = {
          keyword: $scope.editPlanInfo.Cost.Title ? $scope.editPlanInfo.Cost.Title : "",
          page: 1,
          limit: 10
        };
        getCostListProduct(param, function(response) {
          $scope.editPlanInfo.allCost = response.list;
        });
      };

      $scope.changeCost = function(value) {
        $scope.editPlanInfo.Cost = value;
      };

      $scope.saveProductPlan = function(){
        $scope.isSubmitting = true;
        $scope.savePlan(function(){
          console.log("callback");
          $scope.isSubmitting = false;
        });
      };

      $scope.clearCost = function(){
        $scope.editPlanInfo.Cost = undefined;
      };
    },
    templateUrl: "/public/angularView/common/components/edit_teamtour_plan.html?" + Math.random(),
  };
});

//编辑邮轮计划插件
app.directive('editCruisePlan', function() {
  return {
    restrict: "ACE",
    scope: {
      batchAdd: '=batchAdd',
      addPlanDateList: '=addPlanDateList',
      editPlanInfo: '=editPlanInfo',
      savePlan: '&savePlan',
      cancelPlan: '&cancelPlan',
      dateSelected: '=dateSelected'
    },
    link: function($scope) {
      $scope.newPrice = function() {
        $scope.editPlanInfo.pricePlanAdvanced.push({});
      };

      $scope.unChooseDate = function(day) {
        $scope.addPlanDateList = _.without($scope.addPlanDateList, day);
        $scope.dateSelected[Date.parse(day)] = false;
      };

      $scope.delPlanAdvancedPrice = function(item) {
        $scope.editPlanInfo.pricePlanAdvanced = _.without($scope.editPlanInfo.pricePlanAdvanced, item);
      };

      $scope.CostFormatter = function(cost) {
        return cost.Title;
      };

      $scope.getAllCost = function() {
        var param = {
          keyword: $scope.editPlanInfo.Cost.Title ? $scope.editPlanInfo.Cost.Title : "",
          page: 1,
          limit: 10
        };
        getCostListProduct(param, function(response) {
          $scope.editPlanInfo.allCost = response.list;
        });
      };

      $scope.saveProductPlan = function(){
        $scope.isSubmitting = true;
        $scope.savePlan(function(){
          $scope.isSubmitting = false;
        });
      };

      $scope.changeCost = function(value) {
        $scope.editPlanInfo.Cost = value;
      };
    },
    templateUrl: "/public/angularView/common/components/edit_cruise_plan.html?" + Math.random(),
  };
});


//编辑自助游计划插件
app.directive('editFreetourPlan', function(_, getCostListProduct, findTraffic, getBasicsTrafficTypeAll, Pagination, getBasicsHotelByNameOrGADDRTitle, $filter) {
  return {
    restrict: "ACE",
    scope: {
      batchAdd: '=batchAdd',
      addPlanDateList: '=addPlanDateList',
      editPlanInfo: '=editPlanInfo',
      savePlan: '&savePlan',
      cancelPlan: '&cancelPlan',
      dateSelected: '=dateSelected'
    },
    link: function($scope) {
      $scope.delPlanTransport = function(item) {
        $scope.editPlanInfo.Transport = _.without($scope.editPlanInfo.Transport, item);
      };
      $scope.delPlanHotel = function(item) {
        $scope.editPlanInfo.Hotel = _.without($scope.editPlanInfo.Hotel, item);
      };

      $scope.changeEditProductType = function(type) {
        $scope.editPlanInfo.ProductType = type;
      };
      /*
       *  交通控制
       */

      //交通方案添加方法
      $scope.AddTransportScheme = function() {
        $scope.addPlanInfo = {
          Title: "",
          IsDefault: false,
          Description: ""
        };

        $scope.AddTrafficScheme = true;
        $scope.isAddTransportScheme = true;
      };


      //改变交通默认方案
      $scope.changeDefault = function(item) {
        item.IsDefault = true;
        var items = _.find($scope.editPlanInfo.Transport, function(traffic) {
          if (traffic.baseid !== item.baseid) {
            traffic.IsDefault = false;
            return true;
          }
        });
      };
     
      //交通方案保存方法
      $scope.savePlanTransportScheme = function() {

        $scope.trafficInfo = {
          AdultSellingPrice: 0,
          ChildSellingPrice: 0,
          AdultCostPrice: 0,
          ChildCostPrice: 0,
          AdultMachineBuildingFee: 0,
          ChildMachineBuildingFee: 0,
          IsRemove: "false",
          IsSingleSold: "false",
          ProductDays: 0,
          TrafficPattern: "1"
        };

         if($scope.addPlanInfo.Title===""){
          $scope.editPlanInfo.info = "请填写方案名称";
            return false;
        }
        if($scope.addPlanInfo.Description===""){
          $scope.editPlanInfo.info = "请填写方案描述";
            return false;
        }
        $scope.backTrafficInfo = 1;
        $scope.isAddTransportScheme = false;
        $scope.isAddTransport = true;
        $scope.hasSelectTraffic = false;
      };
      //交通方案取消方法
      $scope.cancelPlanTransportScheme = function() {
        $scope.AddTrafficScheme = false;
        $scope.isAddTransportScheme = false;
      };

      $scope.addTraffic = function(item) {
        $scope.searchTrafficInfo = '';

        $scope.trafficInfo = {
          AdultSellingPrice: 0,
          ChildSellingPrice: 0,
          AdultCostPrice: 0,
          ChildCostPrice: 0,
          AdultMachineBuildingFee: 0,
          ChildMachineBuildingFee: 0,
          IsRemove: "false",
          IsSingleSold: "false",
          ProductDays: 0,
          TrafficPattern: "1"
        };

        $scope.editedPlanProject = item;

        $scope.hasSelectTraffic = false;
        $scope.isAddTransport = true;
        $scope.isSelectTransport = false;
      };


      //选择交通公司或交通班次页面保存方法
      $scope.SavePlanAddTransport = function() {
        if ($scope.isEditTransport) {
         $scope.editPlanInfo.Transport.forEach(function(obj) {
             var items = _.find(obj.Traffics, function(item) {
              if (item.ForeignKeyID === $scope.trafficInfo.ForeignKeyID) {
                item.Traffic_id = $scope.trafficInfo.Traffic_id;
                item.TrafficInfo = $scope.trafficInfo.TrafficInfo;
                item.DepartureInformation = $scope.trafficInfo.DepartureInformation;
                item.AdultSellingPrice = $scope.trafficInfo.AdultSellingPrice;
                item.ChildSellingPrice = $scope.trafficInfo.ChildSellingPrice;
                item.AdultCostPrice = $scope.trafficInfo.AdultCostPrice;
                item.ChildCostPrice = $scope.trafficInfo.ChildCostPrice;
                item.AdultMachineBuildingFee = $scope.trafficInfo.AdultMachineBuildingFee;
                item.ChildMachineBuildingFee = $scope.trafficInfo.ChildMachineBuildingFee;
                item.IsSingleSold = $scope.trafficInfo.IsSingleSold;
                item.IsRemove = $scope.trafficInfo.IsRemove;
                item.$$departureTime = $scope.trafficInfo.$$departureTime;
                item.ProductDays = $scope.trafficInfo.ProductDays;
                item.TrafficPattern = $scope.trafficInfo.TrafficPattern;
                return true;
              }
            });
         });
         $scope.isEditTransport = false;
        }else{
          if(!$scope.trafficInfo.TrafficInfo){
              $scope.editPlanInfo.info = "请选择交通";
            return false;
          }
           if(!$scope.trafficInfo.$$departureTime){
              $scope.editPlanInfo.info = "请选择日期";
            return false;
          }
          if ($scope.editedPlanProject) {
            $scope.editedPlanProject.Traffics.push($scope.trafficInfo);
          } else {
            if ($scope.addPlanInfo.Traffics) {
              $scope.addPlanInfo.Traffics.push($scope.trafficInfo);
            } else {
              $scope.addPlanInfo.Traffics = [];
              $scope.addPlanInfo.Traffics.push($scope.trafficInfo);
            }
            if ($scope.editPlanInfo.Transport) {
              $scope.editPlanInfo.Transport.push($scope.addPlanInfo);
            } else {
              $scope.editPlanInfo.Transport = [];
              $scope.editPlanInfo.Transport.push($scope.addPlanInfo);
            }
          }
        }


        $scope.isAddTraffic = false;
        $scope.isAddTransport = false;
        $scope.AddTrafficScheme = false;
      };

      //选择交通公司或交通班次页面取消方法
      $scope.cancelPlanAddTransport = function() {
        $scope.isAddTransport = false;
        $scope.AddTrafficScheme = false;
      };

      //选择交通信息页面保存方法
      $scope.saveTransport = function() {
        $scope.isSelectTransport = false;
      };

      //选择交通
      $scope.chooseTraffic = function(item) {
        /*
        $scope.addPlanInfo.Traffics.forEach(function(obj) {
          obj.TrafficInfo = item.TrafficCompany.Title + "/" + item.Title;
          obj.Traffic_id = item._id.$id;
          obj.DepartureInformation = item.DepartureTime + " " + item.StartAddress + "-----" + item.ArriveTime + " " + item.ArriveAddress;
        });
        */
        $scope.trafficInfo.TrafficInfo = item.TrafficCompany.Title + "/" + item.Title;
        $scope.trafficInfo.Traffic_id = item._id.$id;
        $scope.trafficInfo.DepartureInformation = item.DepartureTime + " " + item.StartAddress + "-----" + item.ArriveTime + " " + item.ArriveAddress;

        $scope.hasSelectTraffic = true;
        $scope.isSelectTransport = false;
      };

      //返回（交通）
      $scope.trafficBack = function() {
       if($scope.backTrafficInfo == 1){
        $scope.AddTrafficScheme = true;
        $scope.isAddTransportScheme = true;
        $scope.isAddTransport = false;
       }else{
        $scope.isAddTransport = false;
        $scope.AddTrafficScheme = false;
       }
      };


      $scope.editTraffics = function(item,Traffic) {
        $scope.isEditTransport = true;
        $scope.isAddTransport = true;
        $scope.isSelectTransport = false;
        $scope.hasSelectTraffic = true;
        $scope.trafficInfo={};
        $scope.trafficInfo.Traffic_id = Traffic.Traffic_id;
        $scope.trafficInfo.TrafficInfo = Traffic.TrafficInfo;
        $scope.trafficInfo.DepartureInformation = Traffic.DepartureInformation;
        $scope.trafficInfo.AdultSellingPrice = Traffic.AdultSellingPrice;
        $scope.trafficInfo.ChildSellingPrice = Traffic.ChildSellingPrice;
        $scope.trafficInfo.AdultCostPrice = Traffic.AdultCostPrice;
        $scope.trafficInfo.ChildCostPrice = Traffic.ChildCostPrice;
        $scope.trafficInfo.AdultMachineBuildingFee = Traffic.AdultMachineBuildingFee;
        $scope.trafficInfo.ChildMachineBuildingFee = Traffic.ChildMachineBuildingFee;
        $scope.trafficInfo.IsSingleSold = Traffic.IsSingleSold+"";
        $scope.trafficInfo.IsRemove = Traffic.IsRemove+"";
        $scope.trafficInfo.$$departureTime = Traffic.$$departureTime;
        $scope.trafficInfo.ProductDays = Traffic.ProductDays;
        $scope.trafficInfo.TrafficPattern = Traffic.TrafficPattern+"";
        $scope.trafficInfo.ForeignKeyID = Traffic.ForeignKeyID;
      };
      $scope.delTraffics = function(item,Traffic) {
        item.Traffics = _.without(item.Traffics, Traffic);
      };


      $scope.TrafficSelect = function(value) {
        if (value.ProductType.ForeignKeyID.$id == '000000000000000000000004') return true;
      };
      $scope.HotelSelect = function(value) {
        if (value.ProductType.ForeignKeyID.$id == '000000000000000000000007') return true;
      };


      //选择交通信息页面取消方法
      $scope.cancelTransport = function() {
        $scope.isSelectTransport = false;
      };

      //点击选择交通公司或交通班次
      $scope.selectTransport = function(page) {
        if (!$scope.editPlanInfo.Traffic) {
          $scope.editPlanInfo.Traffic = {};
        }
        $scope.editPlanInfo.Traffic.Page = page;
        getBasicsTrafficTypeAll(function(response) {
          $scope.SelectTrafficType = response.list;
        });
        var AddressID = "";
        var ArriveAddressID = "";
        findTraffic($scope.TrafficTypeID, $scope.searchTrafficInfo, AddressID, ArriveAddressID, $scope.editPlanInfo.Traffic.Page, function(response) {
          $scope.editPlanInfo.Traffic = response.list;
          var page = new Pagination(response.count, response.page, 5);
          if (!$scope.Pagination) {
            $scope.Pagination = {};
          }
          $scope.Pagination.Traffic = page;
        });

        $scope.isSelectTransport = true;
      };


      //选择交通信息页面返回方法
      $scope.back = function() {
        $scope.isSelectTransport = false;
      };


      ////选择交通信息页面添加交通方法
      $scope.AddTransport = function() {
        $scope.isAddTransport = true;
      };

      /*
       *酒店控制
       */

      $scope.AddHotelScheme = function() {

        $scope.addPlanInfo = {
          Title: "",
          IsDefault: false,
          Description: "",
        };

        $scope.AddScheme = true;
        $scope.isAddHotelScheme = true;
      };

      //酒店方案保存方法
      $scope.savePlanHotelScheme = function() {
        $scope.hotelInfo = {
          HotelInfo: "",
          IsRemove: "false",
          IsSingleSold: "false",
          ProductRoomCount: 0,
          Days: 0
        };

        if ($scope.addPlanInfo.Title === "") {
          $scope.editPlanInfo.info = "请填写方案名称";
          return false;
        }
        if ($scope.addPlanInfo.Description === "") {
          $scope.editPlanInfo.info = "请填写方案描述";
          return false;
        }
        $scope.backHotelInfo = 1;
        $scope.AddScheme = true;
        $scope.isAddHotelScheme = false;
        $scope.hasSelectHotel = false;
        $scope.isAddHotel = true;
      };
      //酒店方案取消方法
      $scope.cancelPlanHotelScheme = function() {
        $scope.AddScheme = false;
        $scope.isAddHotelScheme = false;
      };

      //改变酒店默认方案
      $scope.changeDefaultHotel = function(item) {
        item.IsDefault = true;
        var items = _.find($scope.editPlanInfo.Hotel, function(hotel) {
          if (hotel.baseid !== item.baseid) {
            hotel.IsDefault = false;
            return true;
          }
        });
      };

      //选择酒店页面保存方法
      $scope.SavePlanAddHotel = function() {
        if ($scope.isEditHotel) {
          $scope.editPlanInfo.Hotel.forEach(function(obj) {
            var items = _.find(obj.Hotels, function(item) {
              if (item.ForeignKeyID === $scope.hotelInfo.ForeignKeyID) {
                item.Hotel_id = $scope.hotelInfo.Hotel_id;
                item.HotelInfo = $scope.hotelInfo.HotelInfo;
                item.IsSingleSold = $scope.hotelInfo.IsSingleSold;
                item.IsRemove = $scope.hotelInfo.IsRemove;
                item.$$departureTime = $scope.hotelInfo.$$departureTime;
                item.ProductRoomCount = $scope.hotelInfo.ProductRoomCount;
                item.Days = $scope.hotelInfo.Days;
                item.HotelRooms = $scope.hotelInfo.HotelRooms;
                return true;
              }
            });
          });
          $scope.isEditHotel = false;
        } else {
          if (!$scope.hotelInfo.HotelInfo) {
            $scope.editPlanInfo.info = "请选择酒店";
            return false;
          }
          if (!$scope.hotelInfo.$$departureTime) {
            $scope.editPlanInfo.info = "请选择日期";
            return false;
          }
          if ($scope.editedHotelPlanProject) {
            $scope.editedHotelPlanProject.Hotels.push($scope.hotelInfo);
            $scope.editedHotelPlanProject = null;
          } else {
            if ($scope.addPlanInfo.Hotels) {
              $scope.addPlanInfo.Hotels.push($scope.hotelInfo);
            } else {
              $scope.addPlanInfo.Hotels = [];
              $scope.addPlanInfo.Hotels.push($scope.hotelInfo);
            }
            if ($scope.editPlanInfo.Hotel) {
              $scope.editPlanInfo.Hotel.push($scope.addPlanInfo);
            } else {

              $scope.editPlanInfo.Hotel = [];
              $scope.editPlanInfo.Hotel.push($scope.addPlanInfo);
            }
          }
        }
        $scope.isAddHotel = false;
        $scope.AddScheme = false;
      };

      $scope.editHotel = function(item, hotel) {
        $scope.isEditHotel = true;
        $scope.isAddHotel = true;
        $scope.isSelectHotel = false;
        $scope.hasSelectHotel = true;
        $scope.hotelInfo = {};
        $scope.hotelInfo.Hotel_id = hotel.Hotel_id;
        $scope.hotelInfo.HotelInfo = hotel.HotelInfo;
        $scope.hotelInfo.IsSingleSold = hotel.IsSingleSold + "";
        $scope.hotelInfo.IsRemove = hotel.IsRemove + "";
        $scope.hotelInfo.$$departureTime = hotel.$$departureTime;
        $scope.hotelInfo.ProductRoomCount = hotel.ProductRoomCount;
        $scope.hotelInfo.Days = hotel.Days;
        $scope.hotelInfo.ForeignKeyID = hotel.ForeignKeyID;
      };

      //添加酒店
      $scope.addHotel = function(item) {
        $scope.searchInfo = '';
        $scope.hotelInfo = {
          HotelInfo: "",
          IsRemove: "false",
          IsSingleSold: "false",
          ProductRoomCount: 0,
          Days: 0
        };
        $scope.editedHotelPlanProject = item;
        $scope.hasSelectHotel = false;
        $scope.isAddHotel = true;
        $scope.isSelectHotel = false;
      };

      //选择酒店页面取消方法
      $scope.cancelPlanAddHotel = function() {
        $scope.isAddHotel = false;
        $scope.AddScheme = false;
      };

      //选择酒店页面保存方法
      $scope.saveHotel = function() {
        $scope.isSelectHotel = false;
      };

      //选择酒店页面取消方法
      $scope.cancelHotel = function() {
        $scope.isAddHotel = true;
        $scope.AddScheme = false;
        $scope.isSelectHotel = false;
      };

      //酒店返回
      $scope.hotelBack = function() {
        $scope.isAddHotel = true;
        $scope.AddScheme = false;
        $scope.isSelectHotel = false;
      };
      //点击选择酒店
      $scope.selectHotel = function(page) {
        if (!$scope.editPlanInfo.Hotels) {
          $scope.editPlanInfo.Hotels = {};
        }
        $scope.editPlanInfo.Hotels.Page = page;
        getBasicsHotelByNameOrGADDRTitle($scope.searchInfo || " ", $scope.editPlanInfo.Hotels.Page, function(response) {
          $scope.editPlanInfo.Hotels = response.data;
          var page = new Pagination(response.count, response.page, 5);
          if (!$scope.Pagination) {
            $scope.Pagination = {};
          }
          $scope.Pagination.Hotel = page;
        });
        $scope.isSelectHotel = true;
      };

      $scope.chooseHotelRoom = function(items, room) {
        $scope.hotelInfo.HotelInfo = items.HotelName;
        $scope.hotelInfo.Hotel_id = items._id.$id;
        if ($scope.hotelInfo.HotelRooms) {
          $scope.hotelInfo.HotelRooms.push(room);
        } else {
          $scope.hotelInfo.HotelRooms = [];
          $scope.hotelInfo.HotelRooms.push(room);
        }
        $scope.hasSelectHotel = true;
        $scope.isSelectHotel = false;
      };

      $scope.delPlanHotelRoom = function(hotel, room) {
        hotel.HotelRooms = _.without(hotel.HotelRooms, room);
      };

      $scope.delHotel = function(item, Hotel) {
        item.Hotels = _.without(item.Hotels, Hotel);
      };
      //返回（酒店）
      $scope.hotelInfoBack = function() {
        if ($scope.backHotelInfo == 1) {
          $scope.AddScheme = true;
          $scope.isAddHotelScheme = true;
          $scope.isAddHotel = false;
        } else {
          $scope.isAddHotel = false;
          $scope.AddScheme = false;
        }
      };

      $scope.openDatePicker = function($event, type) {
        $scope.status[type] = true;
      };

      $scope.status = {
        trafficDepartureTime: false,
        hotelDepartureTime: false
      };

      $scope.showPackageDetail = function(item) {
        if (!item.showDetailStatus) {
          item.showDetailStatus = true;
        } else {
          item.showDetailStatus = !item.showDetailStatus;
        }
      };

      $scope.unChooseDate = function(day) {
        $scope.addPlanDateList = _.without($scope.addPlanDateList, day);
        $scope.dateSelected[Date.parse(day)] = false;
      };

      $scope.CostFormatter = function(cost) {
        return cost.Title;
      };

      $scope.getAllCost = function() {
        var param = {
          keyword: $scope.editPlanInfo.Cost.Title ? $scope.editPlanInfo.Cost.Title : "",
          page: 1,
          limit: 10
        };
        getCostListProduct(param, function(response) {
          $scope.editPlanInfo.allCost = response.list;
        });
      };

      $scope.saveProductPlan = function(){
        $scope.isSubmitting = true;
        $scope.savePlan(function(){
          $scope.isSubmitting = false;
        });
      };

      $scope.changeCost = function(value) {
        $scope.editPlanInfo.Cost = value;
      };
    },
    templateUrl: "/public/angularView/common/components/edit_freetour_plan.html?" + Math.random(),
  };
});

//组团游计划弹窗
app.directive('teamtourPlanList', function($rootScope, Pagination, getTeamtourPlanList, ngDialog, orderTransferTeam,
  _, getTeamListByPlanId, addTeamByPlan, getTeamtourPlanDetail, showWarningBox, addPlanCars, delPlanCars, delProductPlanById) {
  return {
    restrict: "ACE",
    scope: {
      product: '=product',
      count: '=count',
    },
    controller: function($scope) {

      $scope.showPlanList = function(product){
        ngDialog.open({
            id: 'ProductListPlanPop',
            className: 'big',
            width:500,
            template: '/public/angularView/product/components/teamtourPlanListPop.html??' + Math.random(),
            data: {
                ID: product
            },
            controller: function ($scope, getTeamtourPlanList) {
              getTeamtourPlanList({
                ProductID: product
              }, function(response){
                $scope.planList = response.list;
              });

              $scope.choosePlan = function(plan, isTeam){
                $scope.planInfo = plan;
                if(isTeam){
                  $scope.teamSet();
                }else{
                  $scope.getCarInfo();
                }
              };

              $scope.getCarInfo = function(){
                getTeamtourPlanDetail($scope.planInfo._id.$id, function(response){
                  $scope.planInfo.Cars = response.Cars;
                });
              };

              $scope.addCarArrange = function() {
                var carName = "";
                for(var i = 1; i < 99; i++){
                  carName = i + '号车';
                  var car = _.find($scope.planInfo.Cars, function(item){
                    return item.Name === carName;
                  });
                  if(undefined === car){
                    break;
                  }
                }
                $scope.addCarInfo = {
                  Name: carName,
                  CarDepartures: [{}]
                };
                $scope.isAddCar = !$scope.isAddCar;
              };

              $scope.cancelCarArrange = function(){
                $scope.isAddCar = false;
              };

              $scope.saveCarArrange = function(){
                var cars = [];
                if(($scope.addCarInfo.DigitNumber - $scope.addCarInfo.OpenUpNumber - $scope.addCarInfo.GuideSiteNumber) < 0){
                  $scope.info = "座位数量设置错误，请重新设置";
                  return;
                }
                cars.push($scope.addCarInfo);
                addPlanCars($scope.planInfo._id.$id, cars, function(response){
                  $scope.addCarInfo._id = {$id: response.data};
                  $scope.addCarInfo.ReservedNumber = $scope.addCarInfo.DigitNumber - $scope.addCarInfo.OpenUpNumber - $scope.addCarInfo.GuideSiteNumber;
                  $scope.planInfo.Cars.push(angular.copy($scope.addCarInfo));
                  $scope.isAddCar = false;
                });
              };

              $scope.addAssembly = function() {
                if(!$scope.addCarInfo.CarDepartures){
                  $scope.addCarInfo.CarDepartures = [];
                }
                $scope.addCarInfo.CarDepartures.push({});
              };

              $scope.removeAssembly = function(assembly){
                $scope.addCarInfo.CarDepartures = _.without($scope.addCarInfo.CarDepartures, assembly);
              };

              $scope.delCarArrange = function(car) {
                showWarningBox('确定要删除车辆吗', function(){
                  delPlanCars($scope.planInfo._id.$id, car.ForeignKeyID.$id, function(response){
                    $scope.planInfo.Cars = _.without($scope.planInfo.Cars, car);
                  });
                });
              };

              $scope.teamSet = function(){
                if(!$scope.planInfo.teamList){
                  getTeamListByPlanId($scope.planInfo._id.$id, function(teamList){
                    $scope.planInfo.teamList = teamList.data;
                    $scope.planInfo.teamList.OrderInfo = {
                      OrderMoney: 0,
                      PayPrice: 0,
                      UnPayPrice: 0,
                      AdultNumber: 0,
                      ChildNumber: 0,
                      BabyNumber: 0,
                      Number: 0,
                      SiteNumber: 0,
                    };
                    $scope.planInfo.teamList.forEach(function(item){
                      $scope.planInfo.teamList.OrderInfo.OrderMoney += item.TeamOrderInfo.TotalOrderMoney;
                      $scope.planInfo.teamList.OrderInfo.PayPrice += item.TeamOrderInfo.TotalPayPrice;
                      $scope.planInfo.teamList.OrderInfo.UnPayPrice += item.TeamOrderInfo.TotalUnPayPrice;
                      $scope.planInfo.teamList.OrderInfo.AdultNumber += item.TeamOrderInfo.TotalAdultNumber;
                      $scope.planInfo.teamList.OrderInfo.ChildNumber += item.TeamOrderInfo.TotalChildNumber;
                      $scope.planInfo.teamList.OrderInfo.BabyNumber += item.TeamOrderInfo.TotalBabyNumber;
                      $scope.planInfo.teamList.OrderInfo.Number += item.TeamOrderInfo.TotalNumber;
                      $scope.planInfo.teamList.OrderInfo.SiteNumber += item.TeamOrderInfo.TotalSiteNumber;
                    });
                    if($scope.planInfo.teamList.length > 0){
                      $scope.planInfo.teamShow = $scope.planInfo.teamList[0];
                        if($scope.planInfo.teamShow.TeamOrderInfo.list.length > 0){
                        $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                        $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                      }
                    }
                  });
                }
                $scope.isTeamSet = !$scope.isTeamSet;
              };

              $scope.teamPageChange = function(page){
                $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice((page - 1) * 5, page * 5);
                $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, page, 5);
              };

              $scope.changeTeam = function(team){
                $scope.planInfo.teamShow = team;
                $scope.isSelectAllMember = false;
                if($scope.planInfo.teamShow.TeamOrderInfo.list.length > 0){
                  $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                  $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                }
              };

              $scope.checkAllTeamOrder = function(){
                if($scope.planInfo.isSelectAllMember){
                  $scope.planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                    order.isSelect = true;
                  });
                }else{
                  $scope.planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                    order.isSelect = false;
                  });
                }
              };

              $scope.showTeamTrans = function(order){
                order.isShowTeamTrans = !order.isShowTeamTrans;
              };

              $scope.generateNewTeam = function(){
                addTeamByPlan($scope.planInfo._id.$id, 1, function(response){
                  $scope.planInfo.teamList.push({
                    TeamNo:response.data.TeamNo,
                    TeamName:response.data.TeamName,
                    ID:response.data.TeamId,
                    TeamOrderInfo: {list: []}
                  });
                });
              };

              $scope.teamTransMulti = function(){
                $scope.planInfo.isShowTeamTransMulti = !$scope.planInfo.isShowTeamTransMulti;
              };

              $scope.cancelTeamTrans = function(order){
                order.isShowTeamTrans = false;
              };

              $scope.saveTeamTrans = function(order){
                var OrderIdLists = [];
                OrderIdLists.push(order.OrderId);
                $scope.planInfo.transTeam = _.find($scope.planInfo.teamList, function(item){
                  return item.TeamNo === $scope.planInfo.transTeamInfo;
                });
                if(!$scope.planInfo.transTeam){
                   $scope.info = "请选择转移的团队";
                  return;
                }
                var postData = {
                  OldTeamId: $scope.planInfo.teamShow.ID,
                  NewTeamId: $scope.planInfo.transTeam.ID,
                  OrderIdLists: OrderIdLists
                };
                orderTransferTeam(postData, function(response){
                  $scope.planInfo.transTeam.TeamOrderInfo.list.push(order);
                  $scope.planInfo.teamShow.TeamOrderInfo.list = _.without($scope.planInfo.teamShow.TeamOrderInfo.list, order);
                  $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                  $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                  order.isShowTeamTrans = false;
                  $scope.planInfo.transTeam = null;
                });
              };

              $scope.saveTeamTransMulti = function(){
                var OrderIdLists = [];
                var transOrder = [];
                var pushOrder = [];
                 $scope.planInfo.isSelectAllMember = false;
                $scope.planInfo.transTeam = _.find($scope.planInfo.teamList, function(item){
                  return item.TeamNo === $scope.planInfo.transTeamInfo;
                });
                $scope.planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                  if(order.isSelect){
                    OrderIdLists.push(order.OrderId);
                  transOrder.push(order);
                  var data = angular.copy(order);
                  data.isSelect = false;
                  pushOrder.push(data);
                }
                });
                  if(OrderIdLists.length===0){
                  $scope.info = "请选择转移的订单！";
                  return;
                }
                if($scope.planInfo.transTeamInfo === undefined || $scope.planInfo.transTeamInfo === null){
                   $scope.info = "请选择转移的团队";
                  return;
                }
                var postData = {
                  OldTeamId: $scope.planInfo.teamShow.ID,
                  NewTeamId: $scope.planInfo.transTeam.ID,
                  OrderIdLists: OrderIdLists
                };
                orderTransferTeam(postData, function(response){
                  $scope.planInfo.transTeam.TeamOrderInfo.list = $scope.planInfo.transTeam.TeamOrderInfo.list.concat(pushOrder);
                  $scope.planInfo.teamShow.TeamOrderInfo.list = _.difference($scope.planInfo.teamShow.TeamOrderInfo.list, transOrder);
                  $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                  $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                  $scope.planInfo.isShowTeamTransMulti = false;
                   $scope.planInfo.transTeamInfo = null;
                });
              };

              $scope.cancelTeamTransMulti = function(){
                $scope.planInfo.isShowTeamTransMulti = false;
              };

              $scope.delListPlan = function(plan){
                showWarningBox('确定要删除该计划吗？', function() {
                  delProductPlanById(plan._id.$id, function(response) {
                    $scope.planList = _.without($scope.planList, plan);
                  });
                });
              };

            }
        });
      };

    },
    templateUrl: "/public/angularView/product/components/planPop.html?" + Math.random(),
  };
});

//邮轮游计划弹窗
app.directive('cruisePlanList', function($rootScope, Pagination, getTeamtourPlanList, ngDialog, orderTransferTeam,
  _, getTeamListByPlanId, addTeamByPlan, getTeamtourPlanDetail, showWarningBox, delProductPlanById) {
  return {
    restrict: "ACE",
    scope: {
      product: '=product',
      count: '=count',
    },
    controller: function($scope) {

      $scope.showPlanList = function(product){
        ngDialog.open({
            id: 'ProductListPlanPop',
            className: 'big',
            width:500,
            template: '/public/angularView/product/components/cruisePlanListPop.html??' + Math.random(),
            data: {
                ID: product
            },
            controller: function ($scope, getTeamtourPlanList) {
              getTeamtourPlanList({
                ProductID: product
              }, function(response){
                $scope.planList = response.list;
              });

              $scope.choosePlan = function(plan){
                $scope.planInfo = plan;
                if(isTeam){
                  $scope.teamSet();
                }
              };

              $scope.teamSet = function(){
                if(!$scope.planInfo.teamList){
                  getTeamListByPlanId($scope.planInfo._id.$id, function(teamList){
                    $scope.planInfo.teamList = teamList.data;
                    $scope.planInfo.teamList.OrderInfo = {
                      OrderMoney: 0,
                      PayPrice: 0,
                      UnPayPrice: 0,
                      AdultNumber: 0,
                      ChildNumber: 0,
                      BabyNumber: 0,
                      Number: 0,
                      SiteNumber: 0,
                    };
                    $scope.planInfo.teamList.forEach(function(item){
                      $scope.planInfo.teamList.OrderInfo.OrderMoney += item.TeamOrderInfo.TotalOrderMoney;
                      $scope.planInfo.teamList.OrderInfo.PayPrice += item.TeamOrderInfo.TotalPayPrice;
                      $scope.planInfo.teamList.OrderInfo.UnPayPrice += item.TeamOrderInfo.TotalUnPayPrice;
                      $scope.planInfo.teamList.OrderInfo.AdultNumber += item.TeamOrderInfo.TotalAdultNumber;
                      $scope.planInfo.teamList.OrderInfo.ChildNumber += item.TeamOrderInfo.TotalChildNumber;
                      $scope.planInfo.teamList.OrderInfo.BabyNumber += item.TeamOrderInfo.TotalBabyNumber;
                      $scope.planInfo.teamList.OrderInfo.Number += item.TeamOrderInfo.TotalNumber;
                      $scope.planInfo.teamList.OrderInfo.SiteNumber += item.TeamOrderInfo.TotalSiteNumber;
                    });
                    if($scope.planInfo.teamList.length > 0){
                      $scope.planInfo.teamShow = $scope.planInfo.teamList[0];
                        if($scope.planInfo.teamShow.TeamOrderInfo.list.length > 0){
                        $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                        $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                      }
                    }
                  });
                }
                $scope.isTeamSet = !$scope.isTeamSet;
              };

              $scope.teamPageChange = function(page){
                $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice((page - 1) * 5, page * 5);
                $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, page, 5);
              };

              $scope.changeTeam = function(team){
                $scope.planInfo.teamShow = team;
                $scope.isSelectAllMember = false;
                if($scope.planInfo.teamShow.TeamOrderInfo.list.length > 0){
                  $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                  $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                }
              };

              $scope.checkAllTeamOrder = function(){
                if($scope.planInfo.isSelectAllMember){
                  $scope.planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                    order.isSelect = true;
                  });
                }else{
                  $scope.planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                    order.isSelect = false;
                  });
                }
              };

              $scope.showTeamTrans = function(order){
                order.isShowTeamTrans = !order.isShowTeamTrans;
              };

              $scope.generateNewTeam = function(){
                addTeamByPlan($scope.planInfo._id.$id, 1, function(response){
                  $scope.planInfo.teamList.push({
                    TeamNo:response.data.TeamNo,
                    TeamName:response.data.TeamName,
                    ID:response.data.TeamId,
                    TeamOrderInfo: {list: []}
                  });
                });
              };

              $scope.teamTransMulti = function(){
                $scope.planInfo.isShowTeamTransMulti = !$scope.planInfo.isShowTeamTransMulti;
              };

              $scope.cancelTeamTrans = function(order){
                order.isShowTeamTrans = false;
              };

              $scope.saveTeamTrans = function(order){
                var OrderIdLists = [];
                OrderIdLists.push(order.OrderId);
                $scope.planInfo.transTeam = _.find($scope.planInfo.teamList, function(item){
                  return item.TeamNo === $scope.planInfo.transTeamInfo;
                });
                if(!$scope.planInfo.transTeam){
                   $scope.info = "请选择转移的团队";
                  return;
                }
                var postData = {
                  OldTeamId: $scope.planInfo.teamShow.ID,
                  NewTeamId: $scope.planInfo.transTeam.ID,
                  OrderIdLists: OrderIdLists
                };
                orderTransferTeam(postData, function(response){
                  $scope.planInfo.transTeam.TeamOrderInfo.list.push(order);
                  $scope.planInfo.teamShow.TeamOrderInfo.list = _.without($scope.planInfo.teamShow.TeamOrderInfo.list, order);
                  $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                  $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                  order.isShowTeamTrans = false;
                  $scope.planInfo.transTeam = null;
                });
              };

              $scope.saveTeamTransMulti = function(){
                var OrderIdLists = [];
                var transOrder = [];
                var pushOrder = [];
                 $scope.planInfo.isSelectAllMember = false;
                $scope.planInfo.transTeam = _.find($scope.planInfo.teamList, function(item){
                  return item.TeamNo === $scope.planInfo.transTeamInfo;
                });
                $scope.planInfo.teamShow.TeamOrderInfo.list.forEach(function(order){
                  if(order.isSelect){
                    OrderIdLists.push(order.OrderId);
                  transOrder.push(order);
                  var data = angular.copy(order);
                  data.isSelect = false;
                  pushOrder.push(data);
                }
                });
                  if(OrderIdLists.length===0){
                  $scope.info = "请选择转移的订单！";
                  return;
                }
                if($scope.planInfo.transTeamInfo === undefined || $scope.planInfo.transTeamInfo === null){
                   $scope.info = "请选择转移的团队";
                  return;
                }
                var postData = {
                  OldTeamId: $scope.planInfo.teamShow.ID,
                  NewTeamId: $scope.planInfo.transTeam.ID,
                  OrderIdLists: OrderIdLists
                };
                orderTransferTeam(postData, function(response){
                  $scope.planInfo.transTeam.TeamOrderInfo.list = $scope.planInfo.transTeam.TeamOrderInfo.list.concat(pushOrder);
                  $scope.planInfo.teamShow.TeamOrderInfo.list = _.difference($scope.planInfo.teamShow.TeamOrderInfo.list, transOrder);
                  $scope.planInfo.teamShow.orderShow = $scope.planInfo.teamShow.TeamOrderInfo.list.slice(0, 5);
                  $scope.planInfo.teamShow.OrderPagination = new Pagination($scope.planInfo.teamShow.TeamOrderInfo.list.length, 1, 5);
                  $scope.planInfo.isShowTeamTransMulti = false;
                   $scope.planInfo.transTeamInfo = null;
                });
              };

              $scope.cancelTeamTransMulti = function(){
                $scope.planInfo.isShowTeamTransMulti = false;
              };

              $scope.delListPlan = function(plan){
                showWarningBox('确定要删除该计划吗？', function() {
                  delProductPlanById(plan._id.$id, function(response) {
                    $scope.planList = _.without($scope.planList, plan);
                  });
                });
              };

            }
        });
      };

    },
    templateUrl: "/public/angularView/product/components/planPop.html?" + Math.random(),
  };
});

//邮轮游计划弹窗
app.directive('freetourPlanList', function($rootScope, Pagination, ngDialog, _, getTeamListByPlanId, getTeamtourPlanDetail,
   showWarningBox, delProductPlanById) {
  return {
    restrict: "ACE",
    scope: {
      product: '=product',
      count: '=count',
    },
    controller: function($scope) {

      $scope.showPlanList = function(product){
        ngDialog.open({
            id: 'ProductListPlanPop',
            className: 'big',
            width:400,
            template: '/public/angularView/product/components/freetourPlanListPop.html??' + Math.random(),
            data: {
                ID: product
            },
            controller: function ($scope, getTeamtourPlanList) {
              getTeamtourPlanList({
                ProductID: product
              }, function(response){
                $scope.planList = response.list;
                $scope.planList.forEach(function(item){
                  item.HotelNumber = 0;
                  item.TrafficsNumber = 0;
                  item.PlanProject.forEach(function(project){
                    if(project.ProductType.ProductTypeName == '交通'){
                      item.TrafficsNumber++;
                    }else if(project.ProductType.ProductTypeName == '酒店'){
                      item.HotelNumber++;
                    }
                  });
                });
              });

              $scope.delListPlan = function(plan){
                showWarningBox('确定要删除该计划吗？', function() {
                  delProductPlanById(plan._id.$id, function(response) {
                    $scope.planList = _.without($scope.planList, plan);
                  });
                });
              };

            }
        });
      };

    },
    templateUrl: "/public/angularView/product/components/planPop.html?" + Math.random(),
  };
});
//restrict 指定使用的方式  'A': 允许作为一个属性；'E': 允许作为一个元素；'C': 作为一个类名；'M': 作为一个注释
app.directive("expenditureSettlementListTemplateUrl", function() {
	return {
		restrict: 'A',
		scope: {
			template: '=template'
		},
		link: function($scope, element, attrs) {
			if (!$scope.template)
				$scope.template = {};
			if (!$scope.template.baseUrl || $scope.template.baseUrl.length <= 0)
				$scope.template.baseUrl = '/public/angularView/finances/expenditureSettlement/';
			var tabTag = attrs.urltag;
			var urlName = 'list_' + tabTag + '.html';
			$scope.template[tabTag] = $scope.template.baseUrl + 'list_extend/' + urlName;
			// var tabConditionTag = attrs.urltag + 'condition';
			// var urlConditionName = 'list_condition_' + tabTag + '.html';
			// $scope.template[tabConditionTag] = $scope.template.baseUrl + 'list_condition_extend/' + urlConditionName;
			var tabHeadTag = attrs.urltag + 'head';
			var urlHeadName = 'list_head_' + tabTag + '.html';
			$scope.template[tabHeadTag] = $scope.template.baseUrl + 'list_head_extend/' + urlHeadName;
			//console.log($scope);
		}
	};
});

app.directive("censusInfoPop", function(getCensusDetail, ngDialog) {
	return {
		restrict: "AE",
		scope: {
			CensusID: '=censusId',
			CensusNo: '=censusNo'
		},
		link: linkFun,
		controller: controllerFun,
		templateUrl: '/public/angularView/finances/Census/CensusBasicDetailPop.html' + "?" + Math.random()
	};

	function linkFun($scope) {

	}

	function controllerFun($scope) {
		$scope.getCensusDetail = function() {
			ngDialog.open({
				id: 'fOrderThreeSingleList',
				className: 'big',
				template: '/public/angularView/finances/Census/CensusBasicDetail.html?' + Math.random(),
				data: {
					CensusID: $scope.CensusID
				},
				controller: function($scope, getCensusDetail) {
					$scope.showDetail = false;
					getCensusDetail({
						ID: $scope.ngDialogData.CensusID
					}, function(detail) {
						$scope.showDetail = true;
						$scope.detail = detail;
					});
				}
			});
		};
	};
});
app.directive("addOrderCustomer", function() {
  return {
    restrict: "AE",
    scope: {
      customers: '=customers',
      price: '=price',
      orderType: '=?orderType',
      offeredPrice: '=offeredPrice',
      type: '=type' //1：组团游，2：邮轮，3：没有价格
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/add_order_customer.html?" + Math.random(),
  };

  function linkFun($scope) {

    $scope.mode = 'list';

    $scope.needPrice = true;
    $scope.needRoomType = true;
    if ($scope.type == 3) {
      $scope.needPrice = false;
      $scope.needRoomType = false;
    }

    if ($scope.customers === undefined) {
      $scope.customers = [];
    }
  }

  function controllerFun($scope) {

    $scope.Certificates = [{
      id: 1,
      value: '身份证'
    }, {
      id: 2,
      value: '户口本'
    }, {
      id: 3,
      value: '护照'
    }, {
      id: 4,
      value: '军官证'
    }, {
      id: 5,
      value: '边境通行证'
    }, {
      id: 6,
      value: '港澳通行证'
    }, {
      id: 7,
      value: '其他'
    }];

    $scope.TouristType = [{
      id: 1,
      value: '老人'
    }, {
      id: 2,
      value: '成人'
    }, {
      id: 3,
      value: '小孩'
    }, {
      id: 4,
      value: '婴儿'
    }];

    $scope.TouristSingleRoomType = [{
      id: 1,
      value: '无'
    }, {
      id: 2,
      value: '拼房'
    }, {
      id: 3,
      value: '补差'
    }, {
      id: 4,
      value: '退差'
    }];

    $scope.addCustomer = function() {
      $scope.mode = 'add';
      $scope.customer = {};
      $scope.customer.TouristSingleRoomType = $scope.TouristSingleRoomType[0];
      $scope.customer.TouristType = $scope.TouristType[0];
      $scope.customer.Certificate = $scope.Certificates[0];
      $scope.customer.GenderTypeID = 1;
    };

    $scope.editCustomer = function(item) {
      $scope.mode = 'edit';
      $scope.customer = item;
      if ($scope.needRoomType) {
        $scope.customer.TouristSingleRoomType = $scope.TouristSingleRoomType[_.findIndex($scope.TouristSingleRoomType, {
          id: $scope.customer.TouristSingleRoomType.id
        })];
      }

      $scope.customer.TouristType = $scope.TouristType[_.findIndex($scope.TouristType, {
        id: $scope.customer.TouristType.id
      })];
      $scope.customer.Certificate = $scope.Certificates[_.findIndex($scope.Certificates, {
        id: $scope.customer.Certificate.id
      })];
    };

    $scope.saveCustomer = function() {
      if ($scope.mode == 'add') {
        $scope.customers.push(angular.copy($scope.customer));
        $scope.customer = {};
      }
      $scope.mode = 'list';
    };

    $scope.cancel = function() {
      $scope.mode = 'list';
    };

    if ($scope.needPrice) {
      $scope.$watch('customer.ProductPlanPriceID', function(value) {
        if (value !== undefined) {
          var index = _.findIndex($scope.price, {
            _id: value
          });
          var price = $scope.price[index];
          if ($scope.orderType == 3) {
            if ($scope.customer.TouristType.id == 3) {
              $scope.customer.price = price.PeerChildPrice;
            } else if ($scope.customer.TouristType.id == 4) {
              $scope.customer.price = price.PeerBabyPrice;
            } else {
              $scope.customer.price = price.PeerDefaultPrice;
            }
          } else {
            if ($scope.customer.TouristType.id == 3) {
              $scope.customer.price = price.ChildPrice;
            } else if ($scope.customer.TouristType.id == 4) {
              $scope.customer.price = price.BabyPrice;
            } else {
              $scope.customer.price = price.DefaultPrice;
            }
          }
          if ($scope.customer.TouristSingleRoomType.id == 3) {
            $scope.customer.roomPrice = price.SingleRoomDiff;
          } else if ($scope.customer.TouristSingleRoomType.id == 4) {
            $scope.customer.roomPrice = -price.SingleRoomDiff;
          } else {
            $scope.customer.roomPrice = 0;
          }
        }
      });
    }

    if ($scope.needRoomType) {
      $scope.$watch('customer.TouristSingleRoomType.id', function(value) {
        if (value !== undefined) {
          var index = _.findIndex($scope.price, {
            _id: $scope.customer.ProductPlanPriceID
          });
          var price = $scope.price[index];
          if ($scope.orderType == 3) {
            if ($scope.customer.TouristType.id == 3) {
              $scope.customer.price = price.PeerChildPrice;
            } else if ($scope.customer.TouristType.id == 4) {
              $scope.customer.price = price.PeerBabyPrice;
            } else {
              $scope.customer.price = price.PeerDefaultPrice;
            }
          } else {
            if ($scope.customer.TouristType.id == 3) {
              $scope.customer.price = price.ChildPrice;
            } else if ($scope.customer.TouristType.id == 4) {
              $scope.customer.price = price.BabyPrice;
            } else {
              $scope.customer.price = price.DefaultPrice;
            }
          }
          if ($scope.customer.TouristSingleRoomType.id == 3) {
            $scope.customer.roomPrice = price.SingleRoomDiff;
          } else if ($scope.customer.TouristSingleRoomType.id == 4) {
            $scope.customer.roomPrice = -price.SingleRoomDiff;
          } else {
            $scope.customer.roomPrice = 0;
          }
        }
      });
    }

    $scope.getPriceTitle = function(item) {
      var index = _.findIndex($scope.price, {
        _id: item.ProductPlanPriceID
      });
      item.priceTitle = $scope.price[index].Pricetitle;
    };

  }
});

app.directive("orderDetailPop", function() {
  return {
    restrict: "AE",
    scope: {
      orderID: '=orderId',
      orderNo: '=orderNo',
      orderType: '=orderType',
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/orderdetail_dialog/order_info_pop.html?" + Math.random(),
  };

  function linkFun($scope) {}

  function controllerFun($scope, $rootScope, $filter, ngDialog, getTeamtourOrderDetail, getCustomerDetail, getSameProductPlanByPlanId, getTouristRelationTypes, Pagination, getCruiseOrderDetail, getCruiseDetail, getSameProductPlanByPlanId, getCustomerDetail, getVisaOrderDetail, getScenicOrderInfo, getPickUpOrderDetail, getCertificatesTypes, getFreeTourOrderDetail, getTeamtourPlanDetail, getFreetourDetail, getSelfdrivingtourOrderDetail, getCustomTourOrderDetail, getEnumeration, getOneTeamOrderByOrderID, getSameProductPlanByOrderID, getAirTicketOrderByOrderID) {
    var data = {};
    var templateUrl = "";
    $scope.getOrderDetail = function() {
      if ($scope.orderType == '000000000000000000000001') {
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/teamtour_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            var pageSize = 10;
            $scope.orderMemberPageChange = function(page) {
              if (!page) {
                page = 1;
              }
              var start = (page - 1) * pageSize;
              $scope.detail.scopeInfo.orderMemberInfo = $scope.detail.OrderTourists.slice(start, start + pageSize);
              $scope.detail.scopeInfo.Pagination.orderMemberPage = new Pagination($scope.detail.OrderTourists.length, page, pageSize);
            };
            $scope.touristInsPageChange = function(page) {
              if (!page) {
                page = 1;
              }
              var start = (page - 1) * pageSize;
              $scope.detail.scopeInfo.touristInsuranceInfo = $scope.detail.TouristInsurances.slice(start, start + pageSize);
              $scope.detail.scopeInfo.Pagination.touristInsurancesPage = new Pagination($scope.detail.TouristInsurances.length, page, pageSize);
            };
            $scope.showDetail = false;
            getTeamtourOrderDetail($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.scopeInfo = {
                showMoreFunc: false,
                isShowPlanPriceDetail: false,
                memberCheckAll: false,
                isSaleManEditMode: false,
                isOrderNoteEditMode: false,
                isContractEditMode: false,
                isHandleFee: {},
                feeCensus: 0
              };
              data.financePopData = {
                ProductTitle: data.OrderInfos.ProductTitle,
                CustomerName: data.OrderInfos.CustomerEnlarge.CustomerName,
                CustomerMobile: data.OrderInfos.CustomerEnlarge.CustomerMobile,
                TotalFinalPrice: data.OrderInfos.TotalFinalPrice,
                TotalUnpayPrice: data.OrderInfos.FinancesEnlarge.TotalUnPayPrice,
                contractID: data.OrderInfos.OrderNo,
                CustomerID: data.OrderInfos.CustomerEnlarge.ForeignKeyID
              };
              data.scopeInfo.saleMan = {
                FullName: data.OrderInfos.SalesmanName,
                _id: {
                  $id: data.OrderInfos.SalesmanID
                }
              };
              data.orderSeatInfo = {
                orderSeatShow: false
              };
              data.scopeInfo.customerInfo = data.OrderInfos.CustomerEnlarge;
              data.scopeInfo.delayTime = {
                time: $filter('limitTo')(data.OrderInfos.OrderExpireTime, 19).replace('T', ' ')
              };
              data.OrderInfos.CustomerEnlarge.TouristRelationTypes.forEach(function(item) {
                if (data.OrderInfos.TouristRelation) {
                  data.OrderInfos.TouristRelation = item.TouristRelationTypeName + " " + data.OrderInfos.TouristRelation;
                } else {
                  data.OrderInfos.TouristRelation = item.TouristRelationTypeName;
                }

              });
              data.scopeInfo.orderNoteTmp = {};
              data.scopeInfo.roomTmp = {};
              data.scopeInfo.Pagination = {};
              data.scopeInfo.feeInfo = {};
              data.scopeInfo.roomArrangeInfo = {
                isEditing: false
              };
              data.scopeInfo.signInfo = {
                isEmailEditMode: false
              };
              data.scopeInfo.orderMemberInfo = data.OrderTourists.slice(0, 10);
              data.scopeInfo.Pagination.orderMemberPage = new Pagination(data.OrderTourists.length, 1, 10);
              data.scopeInfo.touristInsuranceInfo = data.TouristInsurances.slice(0, 10);
              data.scopeInfo.Pagination.touristInsurancesPage = new Pagination(data.TouristInsurances.length, 1, 10);
              data.scopeInfo.fee = {
                insuranceType: []
              };
              data.TouristInsurances.forEach(function(insurance) {
                var ins = _.find(data.scopeInfo.fee.insuranceType, function(ins) {
                  return insurance.InsurancesName == ins.name;
                });
                if (ins === undefined) {
                  data.scopeInfo.fee.insuranceType.push({
                    count: 1,
                    name: insurance.InsurancesName
                  });
                } else {
                  ins.count++;
                }
              });
              data.OrderInfos.PriceRecord.forEach(function(fee) {
                fee.AdjustmentType ? (data.scopeInfo.feeCensus += fee.Price) : (data.scopeInfo.feeCensus -= fee.Price);
              });
              data.scopeInfo.saleManTmp = {};
              data.scopeInfo.customerInfoTmp = {};
              getSameProductPlanByPlanId({
                ProductPlanID: data.ProductPlanInfo._id
              }, function(plans) {
                data.orderSeatInfo.samePlans = plans;
                if (plans.length > 0)
                  data.orderSeatInfo.productPlan = _.find(data.orderSeatInfo.samePlans, {
                    IsChecked: true
                  }).ProductPlanID;
                getCustomerDetail(data.OrderInfos.CustomerEnlarge.ForeignKeyID, function(response) {
                  data.memberDetail = response;
                  getTouristRelationTypes(function(obj) {
                    data.TouristRelationTypesList = obj.data;
                    $scope.showDetail = true;
                    $scope.detail = data;
                  });
                });
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000018') { //邮轮
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/cruise_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            var pageSize = 10;
            $scope.orderMemberPageChange = function(page) {
              if (!page) {
                page = 1;
              }
              var start = (page - 1) * pageSize;
              $scope.detail.scopeInfo.orderMemberInfo = $scope.detail.OrderTourists.slice(start, start + pageSize);
              $scope.detail.scopeInfo.Pagination.orderMemberPage = new Pagination($scope.detail.OrderTourists.length, page, pageSize);
            };
            $scope.touristInsPageChange = function(page) {
              if (!page) {
                page = 1;
              }
              var start = (page - 1) * pageSize;
              $scope.detail.scopeInfo.touristInsuranceInfo = $scope.detail.TouristInsurances.slice(start, start + pageSize);
              $scope.detail.scopeInfo.Pagination.touristInsurancesPage = new Pagination($scope.detail.TouristInsurances.length, page, pageSize);
            };
            $scope.showDetail = false;
            //异步请求处理
            var request = 0,
              requestNum = 3;

            function requestOver() {
              if (++request >= requestNum) {
                $scope.showDetail = true;
                $scope.detail = data;
              }
            }
            //详情
            getCruiseOrderDetail($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.scopeInfo = {
                showMoreFunc: false,
                isShowPlanPriceDetail: false,
                memberCheckAll: false,
                isSelectAllPackage: false,
                isSaleManEditMode: false,
                isCruiseRoomsEditMode: false,
                isOrderNoteEditMode: false,
                isContractEditMode: false,
                isOrderConventionEditMode: false,
                isShoreSightseeingEditMode: false,
                isHandleFee: {},
                feeCensus: 0
              };
              //销售人员
              data.scopeInfo.saleMan = {
                FullName: data.OrderInfos.SalesmanName,
                _id: {
                  $id: data.OrderInfos.SalesmanID
                }
              };
              //订单占座
              data.orderSeatInfo = {
                orderSeatShow: false
              };
              //联系人信息
              data.scopeInfo.customerInfo = data.OrderInfos.CustomerEnlarge;
              //延期
              data.scopeInfo.delayTime = {
                time: $filter('limitTo')(data.OrderInfos.OrderExpireTime, 19).replace('T', ' ')
              };

              data.scopeInfo.signInfo = {
                isEmailEditMode: false
              };
              data.scopeInfo.roomArrangeInfo = {
                isEditing: false
              };
              //财务指令
              data.financePopData = {
                ProductTitle: data.OrderInfos.ProductTitle,
                CustomerName: data.OrderInfos.CustomerEnlarge.CustomerName,
                CustomerMobile: data.OrderInfos.CustomerEnlarge.CustomerMobile,
                TotalFinalPrice: data.OrderInfos.TotalFinalPrice,
                TotalUnpayPrice: data.OrderInfos.FinancesEnlarge.TotalUnPayPrice,
                contractID: data.OrderInfos.OrderNo
              };
              //订单备注
              data.scopeInfo.orderNoteTmp = {};
              //列表页数
              data.scopeInfo.Pagination = {};
              //游客列表
              data.scopeInfo.orderMemberInfo = data.OrderTourists.slice(0, 10);
              //游客列表页数相关
              data.scopeInfo.Pagination.orderMemberPage = new Pagination(data.OrderTourists.length, 1, 10);
              //游客投保相关
              data.scopeInfo.touristInsuranceInfo = data.TouristInsurances.slice(0, 10);
              //游客投保页数相关
              data.scopeInfo.Pagination.touristInsurancesPage = new Pagination(data.TouristInsurances.length, 1, 10);
              //费用清单
              data.scopeInfo.fee = {
                insuranceType: []
              };
              //循环游客投保
              data.TouristInsurances.forEach(function(insurance) {
                var ins = _.find(data.scopeInfo.fee.insuranceType, function(ins) {
                  return insurance.InsurancesName == ins.name;
                });
                if (ins === undefined) {
                  data.scopeInfo.fee.insuranceType.push({
                    count: 1,
                    name: insurance.InsurancesName
                  });
                } else {
                  ins.count++;
                }
              });
              //舱房选择
              data.CruiseRoomList.forEach(function(room) {
                room.allRoomNumber = room.OrderRoomTotalNumber + room.moreThanNumber;
                room.singleRoomPrice = room.RoomsPrice / room.OrderRoomTotalNumber;
              });

              //费用清单
              data.OrderInfos.PriceRecord.forEach(function(fee) {
                fee.AdjustmentType ? (data.scopeInfo.feeCensus += fee.Price) : (data.scopeInfo.feeCensus -= fee.Price);
              });
              data.scopeInfo.saleManTmp = {};
              data.scopeInfo.customerInfoTmp = {};

              //得到游客详情
              getCruiseDetail(data.OrderInfos.ProductID, function(response) {
                data.Packages = response.Packages;
                requestOver();
              });

              //得到产品通过计划ID
              getSameProductPlanByPlanId({
                ProductPlanID: data.ProductPlanInfo._id
              }, function(plans) {
                data.orderSeatInfo.samePlans = plans;

                if (plans.length > 0)
                  data.orderSeatInfo.productPlan = _.find(data.orderSeatInfo.samePlans, {
                    IsChecked: true
                  }).ProductPlanID;

                requestOver();
              });

              getCustomerDetail(data.OrderInfos.CustomerEnlarge.ForeignKeyID, function(response) {
                data.memberDetail = response;
                requestOver();
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000002') { //签证
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/visa_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            $scope.showDetail = false;
            getVisaOrderDetail($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.financePopData = {
                ProductTitle: data.OrderInfos.ProductTitle,
                CustomerName: data.OrderInfos.CustomerEnlarge.CustomerName,
                CustomerMobile: data.OrderInfos.CustomerEnlarge.CustomerMobile,
                TotalFinalPrice: data.OrderInfos.TotalFinalPrice,
                TotalUnpayPrice: data.OrderInfos.FinancesEnlarge.TotalUnPayPrice,
                contractID: data.OrderInfos.OrderNo
              };
              data.scopeInfo = {};

              getCustomerDetail(data.OrderInfos.CustomerEnlarge.ForeignKeyID, function(response) {
                data.memberDetail = response;
                $scope.showDetail = true;
                $scope.detail = data;
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000003') { //景区
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/attractionTicke_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            $scope.showDetail = false;
            getScenicOrderInfo($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.financePopData = {
                ProductTitle: data.OrderInfos.ProductTitle,
                CustomerName: data.OrderInfos.CustomerEnlarge.CustomerName,
                CustomerMobile: data.OrderInfos.CustomerEnlarge.CustomerMobile,
                TotalFinalPrice: data.OrderInfos.TotalFinalPrice,
                TotalUnpayPrice: data.OrderInfos.FinancesEnlarge.TotalUnPayPrice,
                contractID: data.OrderInfos.OrderNo
              };
              data.scopeInfo = {};

              getCustomerDetail(data.OrderInfos.CustomerEnlarge.ForeignKeyID, function(response) {
                data.memberDetail = response;
                $scope.showDetail = true;
                $scope.detail = data;
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000009') { //地接
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/pickUp_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            $scope.showDetail = false;
            getPickUpOrderDetail($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.scopeInfo = {};
              getCertificatesTypes(function(Certificates) {
                data.Certificates = Certificates;
                $scope.showDetail = true;
                $scope.detail = data;
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000012') { //自由行
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/freeTour_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            var pageSize = 10;
            $scope.orderMemberPageChange = function(page) {
              if (!page) {
                page = 1;
              }
              var start = (page - 1) * pageSize;
              $scope.detail.scopeInfo.orderMemberInfo = $scope.detail.OrderTourists.slice(start, start + pageSize);
              $scope.detail.scopeInfo.Pagination.orderMemberPage = new Pagination($scope.detail.OrderTourists.length, page, pageSize);
            };
            $scope.touristInsPageChange = function(page) {
              if (!page) {
                page = 1;
              }
              var start = (page - 1) * pageSize;
              $scope.detail.scopeInfo.touristInsuranceInfo = $scope.detail.TouristInsurances.slice(start, start + pageSize);
              $scope.detail.scopeInfo.Pagination.touristInsurancesPage = new Pagination($scope.detail.TouristInsurances.length, page, pageSize);
            };
            $scope.showDetail = false;
            var request = 0,
              requestNum = 2;

            function requestOver() {
              if (++request >= requestNum) {
                $scope.showDetail = true;
                $scope.detail = data;
              }
            }

            getFreeTourOrderDetail($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.financePopData = {
                ProductTitle: data.OrderInfos.ProductTitle,
                CustomerName: data.OrderInfos.CustomerEnlarge.CustomerName,
                CustomerMobile: data.OrderInfos.CustomerEnlarge.CustomerMobile,
                TotalFinalPrice: data.OrderInfos.TotalFinalPrice,
                TotalUnpayPrice: data.OrderInfos.FinancesEnlarge.TotalUnPayPrice,
                contractID: data.OrderInfos.OrderNo
              };
              getTeamtourPlanDetail(data.OrderInfos.ProductPlanID, function(response) {
                data.ProductPlanInfo = response;
                data.trafficProject = [];
                data.hotelProject = [];
                data.ProductPlanInfo.PlanProject.forEach(function(item) {
                  if (item.ProductType.ForeignKeyID.$id == '000000000000000000000004' && item.DelStatus === 0) {
                    item.Traffics.forEach(function(traffic) {
                      if (!traffic.IsSingleSold)
                        traffic.isSelected = true;
                    });
                    data.trafficProject.push(item);
                  } else if (item.ProductType.ForeignKeyID.$id == "000000000000000000000007" && item.DelStatus === 0) {
                    item.Hotels.forEach(function(hotel) {
                      if (!hotel.IsSingleSold)
                        hotel.HotelRooms.forEach(function(room) {
                          if (room.IsDefaultChecked) room.isSelected = true;
                        });
                    });
                    data.hotelProject.push(item);
                  }
                });

                requestOver();
              });

              getFreetourDetail(data.OrderInfos.ProductID, function(response) {
                data.Additionals = response.Additionals;
                requestOver();
              });

              getCustomerDetail(data.OrderInfos.CustomerEnlarge.ForeignKeyID, function(response) {
                data.memberDetail = response;

                requestOver();
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000013') { //自驾
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/driveTour_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            $scope.showDetail = false;
            getSelfdrivingtourOrderDetail($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.financePopData = {
                ProductTitle: data.OrderInfos.ProductTitle,
                CustomerName: data.OrderInfos.CustomerEnlarge.CustomerName,
                CustomerMobile: data.OrderInfos.CustomerEnlarge.CustomerMobile,
                TotalFinalPrice: data.OrderInfos.TotalFinalPrice,
                TotalUnpayPrice: data.OrderInfos.FinancesEnlarge.TotalUnPayPrice,
                contractID: data.OrderInfos.OrderNo
              };
              data.scopeInfo = {};

              getCustomerDetail(data.OrderInfos.CustomerEnlarge.ForeignKeyID, function(response) {
                data.memberDetail = response;
                $scope.showDetail = true;
                $scope.detail = data;
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000017') { //定制游
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/customTour_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            $scope.showDetail = false;
            getCustomTourOrderDetail($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.financePopData = {
                ProductTitle: data.OrderInfos.ProductTitle,
                CustomerName: data.OrderInfos.CustomerEnlarge.CustomerName,
                CustomerMobile: data.OrderInfos.CustomerEnlarge.CustomerMobile,
                TotalFinalPrice: data.OrderInfos.TotalFinalPrice,
                TotalUnpayPrice: data.OrderInfos.FinancesEnlarge.TotalUnPayPrice,
                contractID: data.OrderInfos.OrderNo
              };
              data.scopeInfo = {};
              getEnumeration("EInnerEntrustTypes", function(Entrust) {
                data.Additionals = Entrust;

                getCustomerDetail(data.OrderInfos.CustomerEnlarge.ForeignKeyID, function(response) {
                  data.memberDetail = response;
                  $scope.showDetail = true;
                  $scope.detail = data;
                });
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000023') { //一团一议
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/oneTeam_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            $scope.showDetail = false;
            getOneTeamOrderByOrderID($scope.ngDialogData.orderID, function(detail) {
              data = detail;
              data.status = {};
              data.orderSeatInfo = {
                orderSeatShow: false
              };
              data.financePopData = {
                ProductTitle: data.ProductTitle,
                CustomerName: data.CustomerName,
                CustomerMobile: data.CustomerMobile,
                TotalFinalPrice: data.TotalFinalPrice,
                TotalPaidPrice: data.TotalPaidPrice,
                TotalUnpayPrice: data.TotalUnpayPrice,
                contractID: data.OrderNo
              };
              data.OrderType = "000000000000000000000023";
              getCertificatesTypes(function(Certificates) {
                data.Certificates = Certificates;
                getSameProductPlanByOrderID({
                  OrderID: data.OrderID
                }, function(plans) {
                  data.orderSeatInfo.samePlans = plans;
                  if (plans.length > 0)
                    data.orderSeatInfo.productPlan = _.find(data.orderSeatInfo.samePlans, {
                      IsChecked: true
                    }).ProductPlanID;

                  getCustomerDetail(data.CustomerID, function(response) {
                    data.memberDetail = response;
                    $scope.showDetail = true;
                    $scope.detail = data;
                  });
                });
              });
            });
          }
        });
      } else if ($scope.orderType == '000000000000000000000024') { //机票
        templateUrl = '/public/angularView/common/components/orderdetail_dialog/planeTicketOrder_detail_info.html?' + Math.random();
        var data = {};
        ngDialog.open({
          id: 'fOrderThreeSingleList',
          className: 'big',
          template: templateUrl,
          data: {
            orderID: $scope.orderID
          },
          controller: function($scope) {
            $scope.showDetail = false;
            getAirTicketOrderByOrderID($scope.ngDialogData.orderID, function(response) {
              data = response;
              data.financePopData = {
                ProductTitle: data.ProductTitle,
                CustomerName: data.CustomerName,
                CustomerMobile: data.CustomerMobile,
                TotalFinalPrice: data.TotalFinalPrice,
                TotalUnpayPrice: data.TotalUnpayPrice,
                contractID: data.OrderNo
              };
              data.status = {};
              getCertificatesTypes(function(Certificates) {
                data.Certificates = Certificates;
                $scope.showDetail = true;
                $scope.detail = data;
              });
            });
          }
        });
      }
    };
  }
});

app.directive('customerInfoPop', function(getCustomerDetail, getCustomerLevels, $q,
  getOrderVisitingRecordListByCustomerId, getCustomerOrderList, getCustomerIntentionHistory,
  Pagination, getCustomerIntergralRecordList) {
  return {
    restrict: "AE",
    scope: {
      customerID: '=customerId',
      info: '@?info',
      arrow: '=?arrow',
      popconf: '=?popconf',
      arrowLeft: '@'
    },
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/customer_detail_pop.html?" + Math.random(),
    link: function($scope) {
      $scope.popoverIsOpen = false;

      $scope.status = {};

      if (!$scope.arrow) {
        $scope.arrow = {};
      }
      if (!$scope.popconf) {
        $scope.popconf = {};
      }
      if (!$scope.arrow.left) {
        $scope.arrow.left = $scope.arrowLeft || 220;
      }
      if (!$scope.arrow.useArrow) {
        $scope.arrow.useArrow = true;
      }
      if (!$scope.popconf.left) {
        $scope.popconf.left = 0;
      }
      if (!$scope.popconf.position) {
        $scope.popconf.position = 'bottom';
      }
    }
  };

  function controllerFun($scope) {
    $scope.$watch('customerID', function() {
      $scope.popoverIsOpen = false;
    });

    $scope.getCustomerInfo = function() {
      if (!$scope.detail && $scope.customerID) {
        $scope.getInfo();
      } else if ($scope.customerID != $scope.detail._id.$id) {
        $scope.getInfo();
      }
    };

    $scope.getInfo = function() {
      var promises = {
        detail: $q(function(res) {
          getCustomerDetail($scope.customerID, function(detail) {
            res(detail);
          });
        }),

        levels: $q(function(res) {
          getCustomerLevels(function(levels) {
            res(levels);
          });
        })
      };

      $q.all(promises).then(function(value) {
        var level = _.find(value.levels, function(item) {
          return item._id.$id === value.detail.Enlarge.CustomerLevelID.$id;
        });
        if (level) value.detail.CustomerLevelName = level.CustomerLevelName;
        $scope.detail = value.detail;
      });
    };

    $scope.showSubContent = function(showID) {
      console.log($scope.status.subContentID);
      if ($scope.status.subContentID == showID) {
        return;
      }
      $scope.status.subContentID = showID;
      if (showID == 1) {
        $scope.orderList(1);
      } else if (showID == 2) {
        $scope.getCustomerIntentionList(1);
      } else if(showID == 3){
				$scope.recordList(1);
			} else if (showID == 4) {
        $scope.returnVisitList(1);
      }
    };

    //订单列表
    $scope.orderList = function(page) {
      var limit = 5;
      getCustomerOrderList($scope.customerID, page, limit, function(response) {
        $scope.orderPagination = new Pagination(response.count, page, limit);
        $scope.orders = response.list;
      });
    };

    //充值记录
    $scope.recordList = function(page) {
      var limit = 10;
      getCustomerIntergralRecordList($scope.customerID, page, limit, function(response) {
        $scope.records = response.data.list;
        $scope.recordPagination = new Pagination(response.count, page, limit);
      });
    };

    $scope.getCustomerIntentionList = function(page) {
      var limit = 5;
      var param = {};
      param.customerID = $scope.customerID;
      param.top = 9999;
      if ($scope.customerIntentionList) {
        $scope.customerIntentionListShow = $scope.customerIntentionList.slice((page - 1) * 10, page * 10);
        $scope.intentionPagination = new Pagination($scope.customerIntentionList.length, page, 10);
        return;
      }
      getCustomerIntentionHistory(param, function(response) {
        $scope.customerIntentionList = response.data;
        $scope.customerIntentionListShow = response.data.slice((page - 1) * 10, page * 10);
        $scope.intentionPagination = new Pagination($scope.customerIntentionList.length, page, 10);
      });
    };

    $scope.returnVisitList = function(page) {
      var limit = 5;
      if ($scope.returnVisits) {
        $scope.returnVisitsShow = $scope.returnVisits.slice((page - 1) * 10, page * 10);
        $scope.visitPagination = new Pagination($scope.returnVisits.length, page, 10);
        return;
      }
      getOrderVisitingRecordListByCustomerId($scope.customerID, function(response) {
        $scope.returnVisits = response.data;
        $scope.returnVisitsShow = response.data.slice(0, 10);
        $scopevisitPagination = new Pagination($scope.returnVisits.length, 1, 10);
      });
    };
  }


});

app.directive("companySelectPop", function($rootScope, findInnerObjIndex, Pagination, getBasicData, getCooperateCompanyType,
  closingNnitOneInOneTeam) {
  var selectPersonObj = {
    restrict: "E",
    scope: {
      info: '=info',
      arrow: '=arrow',
      popconf: '=popconf',
      selectInfo: '=selectInfo',
      selectCom: '=mySelectCompany',
      appendToBody: '=appendToBody',
      companyID: '=?companyId',
      accountID: '=?accountId',
      changeEvent: '=?changeEvent'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/company_select_pop.html?" + Math.random(),
  };
  return selectPersonObj;

  function linkFun($scope) {

    $scope.popoverIsOpen = false;

    $scope.search = {
      iPageSize: 5
    };
    $scope.comTmp = {};
    $scope.hasSelectCompany = false;
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 100;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 20;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    if ($scope.selectCom.hasOwnProperty('Name')) {
      $scope.hasSelectCompany = true;
      $scope.showInfo = $scope.selectInfo;
    } else {
      $scope.showInfo = $scope.info;
    }

    if ($scope.companyID) {
      closingNnitOneInOneTeam($scope.companyID, function(detail) {
        $scope.selectCom = detail;
        if ($scope.accountID) {
          var person = _.find($scope.selectCom.AccountList, function(item) {
            if ($scope.accountID == item.AccountID) {
              return true;
            }
          });
          person.ForeignKeyID = person.AccountID;
          $scope.selectCom.AccountInfo = [person];
        }
      });
      if ($scope.changeEvent) {
        $scope.$watch("accountID", function() {
          $scope.changeEvent();
        });
      }
    }

    getBasicData.cooperateList(function(companies) {
      $scope.targetCompanies = companies.data.list;
      $scope.pageInfo = new Pagination(companies.data.count, companies.data.page, $scope.search.iPageSize);
    }, $scope.search);

  }

  function controllerFun($scope) {

    $scope.loadComType = function() {
      getCooperateCompanyType(function(allType) {
        $scope.comType = allType.data.list;
      });
    };

    $scope.findCompany = function(page, type) {
      if (!page) {
        page = 1;
      }
      if (type) {
        $scope.search.CompanyType = type.ID;
      }
      $scope.search.SearchInfo = $scope.search.personQuery;
      $scope.search.iPageIndex = page;
      getBasicData.cooperateList(function(companies) {
        $scope.targetCompanies = companies.data.list;
        $scope.pageInfo = new Pagination(companies.data.count, companies.data.page, $scope.search.iPageSize);
      }, $scope.search);
    };

    $scope.showAccountDetail = function(account) {
      account.active = !account.active;
    };

    $scope.selectCompany = function(company, person) {
      $scope.showInfo = $scope.selectInfo;
      // if ($scope.selectCom.hasOwnProperty('Name')) {
      //     console.log('已经选择过公司了');
      // } else {
      $scope.selectCom = angular.copy(company);
      //selectCom的联系人属性设置为person
      $scope.selectCom.AccountInfo = [person];
      // }
      $scope.popoverIsOpen = false;
      $scope.hasSelectCompany = true;
      $scope.companyID = company.ID;
      $scope.accountID = person.ForeignKeyID;
    };

    $scope.deleteCompany = function(company) {
      if ($scope.selectCom.ID == company.ID) {
        $scope.selectCom = {};
        // $scope.hasSelectCompany = false;
      }
    };
  }
});

app.directive("customerContactPop", function($rootScope, findInnerObjIndex, Pagination, getBasicData, getCooperateCompanyType,
  closingNnitOneInOneTeam) {
  var selectPersonObj = {
    restrict: "E",
    scope: {
      info: '=info',
      arrow: '=arrow',
      popconf: '=popconf',
      selectInfo: '=selectInfo',
      selectCom: '=mySelectCompany',
      selectHandle: '=?selectHandle',
      appendToBody: '=appendToBody',
      companyID: '=?companyId',
      accountID: '=?accountId'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/customer/components/customer_contact_pop.html?" + Math.random(),
  };
  return selectPersonObj;

  function linkFun($scope) {

    $scope.popoverIsOpen = false;

    $scope.search = {
      iPageSize: 5
    };
    $scope.comTmp = {};
    $scope.hasSelectCompany = false;
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 100;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    if ($scope.selectCom.hasOwnProperty('Name')) {
      $scope.hasSelectCompany = true;
      $scope.showInfo = $scope.selectInfo;
    } else {
      $scope.showInfo = $scope.info;
    }

    if ($scope.companyID) {
      closingNnitOneInOneTeam($scope.companyID, function(detail) {
        $scope.selectCom = detail;
        if ($scope.accountID) {
          var person = _.find($scope.selectCom.AccountList, function(item) {
            if ($scope.accountID == item.AccountID) {
              return true;
            }
          });
          person.ForeignKeyID = person.AccountID;
          $scope.selectCom.AccountInfo = [person];
        }
      });
    }

    getBasicData.cooperateList(function(companies) {
      $scope.targetCompanies = companies.data.list;
      $scope.pageInfo = new Pagination(companies.data.count, companies.data.page, $scope.search.iPageSize);
    }, $scope.search);

  }

  function controllerFun($scope) {

    $scope.loadComType = function() {
      getCooperateCompanyType(function(allType) {
        $scope.comType = allType.data.list;
      });
    };

    $scope.findCompany = function(page, type) {
      if (!page) {
        page = 1;
      }
      if (type) {
        $scope.search.CompanyType = type.ID;
      }
      $scope.search.SearchInfo = $scope.search.personQuery;
      $scope.search.iPageIndex = page;
      getBasicData.cooperateList(function(companies) {
        $scope.targetCompanies = companies.data.list;
        $scope.pageInfo = new Pagination(companies.data.count, companies.data.page, $scope.search.iPageSize);
      }, $scope.search);
    };

    $scope.showAccountDetail = function(account) {
      account.active = !account.active;
    };

    $scope.selectCompany = function(company, person) {
      $scope.showInfo = $scope.selectInfo;

      if ($scope.selectHandle) {
        $scope.selectHandle(company, person);
      } else {
        $scope.selectCom = angular.copy(company);
        $scope.selectCom.AccountInfo = [person];
      }

      $scope.popoverIsOpen = false;
      $scope.hasSelectCompany = true;
    };

    $scope.deleteCompany = function(company) {
      if ($scope.selectCom.ID == company.ID) {
        $scope.selectCom = {};
        // $scope.hasSelectCompany = false;
      }
    };
  }
});

app.directive("travelAgencySelect", function($rootScope, findInnerObjIndex, Pagination, getBasicData, getCooperateCompanyType,
  closingNnitOneInOneTeam) {
  var selectPersonObj = {
    restrict: "E",
    scope: {
      info: '=info',
      arrow: '=arrow',
      popconf: '=popconf',
      selectInfo: '=selectInfo',
      selectCom: '=mySelectCompany',
      companyID: '=?companyId'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/travel_agency_select_pop.html?" + Math.random(),
  };
  return selectPersonObj;

  function linkFun($scope) {

    $scope.status = {};

    $scope.search = {
      iPageSize: 5
    };
    $scope.comTmp = {};
    $scope.hasSelectCompany = false;
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    if ($scope.selectCom.hasOwnProperty('Name')) {
      $scope.hasSelectCompany = true;
      $scope.showInfo = $scope.selectInfo;
    } else {
      $scope.showInfo = $scope.info;
    }
    getBasicData.cooperateList(function(companies) {
      $scope.targetCompanies = companies.data.list;
      $scope.pageInfo = new Pagination(companies.data.count, companies.data.page, $scope.search.iPageSize);
    }, $scope.search);

    if ($scope.companyID) {
      closingNnitOneInOneTeam($scope.companyID, function(detail) {
        $scope.selectCom = detail;
      });
    }

  }

  function controllerFun($scope) {

    $scope.loadComType = function() {
      getCooperateCompanyType(function(allType) {
        $scope.comType = allType.data.list;
      });
    };

    $scope.findCompany = function(page, type) {
      if (!page) {
        page = 1;
      }
      if (type) {
        $scope.search.CompanyType = type.ID;
      }
      $scope.search.SearchInfo = $scope.search.personQuery;
      $scope.search.iPageIndex = page;
      getBasicData.cooperateList(function(companies) {
        $scope.targetCompanies = companies.data.list;
        $scope.pageInfo = new Pagination(companies.data.count, companies.data.page, $scope.search.iPageSize);
      }, $scope.search);
    };

    $scope.selectCompany = function(company) {
      $scope.showInfo = $scope.selectInfo;
      if ($scope.selectCom.hasOwnProperty('Name')) {
        console.log('已经选择过公司了');
      } else {
        $scope.selectCom = angular.copy(company);
      }
      $scope.hasSelectCompany = true;
      $scope.status.popoverIsOpen = false;
    };

    $scope.deleteCompany = function(company) {
      if ($scope.selectCom.ID == company.ID) {
        $scope.selectCom = {};
        $scope.hasSelectCompany = false;
      }
    };
  }
});



/**
 * 发送短信
 * {customerInfo:{CustomerName,CustomerMobile},orderInfo:{TeamStartTime,ProductTitle,_id,OrderStatus}}
 * @param  {[type]} "messageSendPop"     [description]
 * @param  {[type]} function($rootScope, Pagination,   getOperationTemplates, getSMSListFromOrder, addSMSRequest, $filter [description]
 * @return {[type]}                      [description]
 */
app.directive("messageSendPop", function($rootScope, Pagination, getOperationTemplates, getSMSListFromOrder, addSMSRequest, $filter, showWarningBox, getPersonDetail) {
  var selectPersonObj = {
    restrict: "E",
    scope: {
      info: '=info',
      arrow: '=arrow',
      popconf: '=popconf',
      customerInfo: '=customerInfo',
      orderInfo: '=orderInfo'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/send_message_pop.html?" + Math.random(),
  };
  return selectPersonObj;

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'top';
    }

    $scope.msgTmp = {};
    $scope.scopeInfo = {};

    $scope.searchSMS = {
      SearchKey: "",
      StartTime: "",
      EndTime: "",
      OperationTypeID: "2",
      SMSOrderStatus: "",
      PageIndex: 1,
      PageSize: 5,
      OrderID: $scope.orderInfo._id || $scope.orderInfo.OrderID
    };

    $scope.pagination = null;

    getOperationTemplates({
      TemplateMainTypeID: 2
    }, function(response) {
      $scope.messageTemplates = response;
    });

    getSMSListFromOrder($scope.searchSMS, function(messages) {
      if (messages) {
        $scope.shortMessageList = messages.list;
        $scope.pagination = new Pagination(messages.count, 1, 5);
      } else {
        $scope.shortMessageList = [];
        $scope.pagination = null;
      }

    });

    getPersonDetail( $scope.orderInfo.OwnUserID || $scope.orderInfo.OwnUser.ForeignKeyID, function(response){
      $scope.saleman = response;
    });
  }

  function controllerFun($scope) {

    $scope.sendMessage = function() {
      showWarningBox('确认短信内容无误', function() {
        $scope.scopeInfo.showMessageInfo = false;
        addSMSRequest({
          OrderID: $scope.orderInfo._id,
          OperationTypeID: 2,
          SMSOrderStatus: $scope.orderInfo.OrderStatus,
          OperationMobile: $scope.customerInfo.CustomerMobile,
          OperationNotes: $scope.msgTmp.shortMessage
        }, function(response) {
          $scope.msgTmp.shortMessage = "";
        });
      });
    };

    $scope.cancel = function() {
      $scope.msgTmp.shortMessage = "";
      $scope.scopeInfo.showMessageInfo = false;
    };

    $scope.changeMessageContent = function() {
      if (!$scope.msgTmp.messageTempCont) {
        $scope.msgTmp.shortMessage = '';
        return;
      }
      $scope.msgTemplatesRe = {
        '{time}': $filter('limitTo')($scope.orderInfo.TeamStartTime, 10),
        '{name}': $scope.customerInfo.CustomerName,
        '{line_name}': $scope.orderInfo.ProductTitle,
        '{$salesname}': $scope.saleman.FullName,
        '{$salesfax}': $scope.saleman.Fax,
        '{$salesmt}': $scope.saleman.TelPhone,
        '{$salesofficetel}': $scope.saleman.OfficeTel,
        '{$salesqq}': $scope.saleman.QQ
      };
      var msg = $scope.msgTmp.messageTempCont.replace(/{name}/g, $scope.msgTemplatesRe['{name}']);
      msg = msg.replace(/{time}/g, $scope.msgTemplatesRe['{time}']);
      msg = msg.replace(/{line_name}/g, $scope.msgTemplatesRe['{line_name}']);
      msg = msg.replace(/{\$salesname}/g, $scope.msgTemplatesRe['{$salesname}']);
      msg = msg.replace(/{\$salesfax}/g, $scope.msgTemplatesRe['{$salesfax}']);
      msg = msg.replace(/{\$salesmt}/g, $scope.msgTemplatesRe['{$salesfax}']);
      msg = msg.replace(/{\$salesofficetel}/g, $scope.msgTemplatesRe['{$salesofficetel}']);
      msg = msg.replace(/{\$salesqq}/g, $scope.msgTemplatesRe['{$salesqq}']);
      $scope.msgTmp.shortMessage = msg;
    };

    $scope.messageListPageChange = function(page) {
      if (!page) {
        page = 1;
      }
      $scope.searchSMS.PageIndex = page;
      getSMSListFromOrder($scope.searchSMS, function(messages) {
        $scope.shortMessageList = messages.list;
        $scope.pagination = new Pagination(messages.count, page, 5);
      });
    };
  }

});

app.directive("orderDelayPop", function(orderDelayApply) {
  var selectPersonObj = {
    restrict: "E",
    scope: {
      info: '=info',
      arrow: '=arrow',
      popconf: '=popconf',
      time: '=time',
      orderId: '='
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/order/order_delay_pop.html?" + Math.random(),
  };
  return selectPersonObj;

  function linkFun($scope) {
    $scope.hasSelectCompany = false;
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
  }

  function controllerFun($scope) {
    $scope.data = {
      DelayHours: 0,
      DelayReason: ''
    };

    $scope.confirmDelay = function() {
      orderDelayApply({
        OrderID: $scope.orderId,
        DelayHours: $scope.data.DelayHours,
        DelayReason: $scope.data.DelayReason
      }, function() {
        $scope.isOpen = false;
      });
    };

    $scope.cancelDelay = function() {
      $scope.data.DelayHours = 0;
      $scope.data.DelayReason = '';
      $scope.isOpen = false;
      console.log($scope.isOpen);
    };
  }

});

app.directive('orderFinance', function(getOrderFinanceByOrder, insertOrderFinance, delOrderFinanceRecord,
  getMoneyTypes, getPaymentTypes, getFinancePayBank, getOrderPriceFinanceByID, updateOrderFinanceRecord, showWarningBox,
  getCustomerDetail, $rootScope) {
  return {
    restrict: "AE",
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '=orderId',
      orderInfo: '=orderInfo'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/orderManagement/components/order_finance_pop.html?" + Math.random(),
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 670;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }

    $scope.arrow.useArrow = false;

    $scope.getFinance = function() {
      getOrderFinanceByOrder($scope.orderID, 1, function(list) {
        if (list) {
          $scope.ReceivablesList = list;
        } else {
          $scope.ReceivablesList = [];
        }
      });
      getOrderFinanceByOrder($scope.orderID, 2, function(list) {
        if (list) {
          $scope.refundList = list;
        } else {
          $scope.refundList = [];
        }
      });
    };

    $scope.status = {
      pageStatus: 'list'
    };

    $scope.OrderRefundTypeList = $rootScope.FinancesType.OrderRefundTypeList;

  }

  function controllerFun($scope) {
    $scope.$watch('orderID', function() {
      $scope.popoverIsOpen = false;
    });

    $scope.addReceivables = function(item) {
      $scope.isFinished = false;
      $scope.getAllAddNeeded(function() {
        if (item) {
          getOrderPriceFinanceByID(item.ExpensesID, function(info) {
            var payment = _.find($scope.paymentTypes, function(item) {
              return item.ID == info.PayMode.ForeignKeyID;
            });
            var moneyType = _.find($scope.moneyTypes, function(item) {
              return item.ID == info.MoneyType.ForeignKeyID;
            });
            if (info.PayBank) {
              var bank = _.find($scope.financePayBank, function(item) {
                return item.ID == info.PayBank.ForeignKeyID;
              });
            }
            $scope.editAddReceivablesInfo = {
              FinanceID: info.recordID,
              paymentType: payment,
              moneyType: moneyType,
              bank: bank,
              Price: info.Price,
              Notes: info.Notes
            };
          });
        } else {
          $scope.editAddReceivablesInfo = {};
        }
        $scope.status.pageStatus = 'addReceivables';
      });
    };

    $scope.paymentTypeStatus = {
      travelFairCard: false,
      memberCard: false,
      bank: false,
      consumerCoupon: false,
      money: true,
      integral: false
    };

    $scope.paymentTypeChange = function(paymentType) {

      $scope.maxMoney = 9999999999;

      switch (paymentType.ID) {
        // case "000000000000000000000002":
        //   $scope.paymentTypeStatus = {
        //     travelFairCard: true,
        //     memberCard: false,
        //     bank: false,
        //     consumerCoupon: false,
        //     money: true,
        //     integral: false
        //   };
        //   break;
        case "000000000000000000000003":
          $scope.paymentTypeStatus = {
            travelFairCard: false,
            memberCard: false,
            bank: true,
            consumerCoupon: false,
            money: true,
            integral: false
          };
          break;
        case "000000000000000000000004":
          $scope.paymentTypeStatus = {
            travelFairCard: false,
            memberCard: false,
            bank: true,
            consumerCoupon: false,
            money: true,
            integral: false
          };
          break;
          // case "000000000000000000000015":
          //   $scope.paymentTypeStatus = {
          //     travelFairCard: false,
          //     memberCard: true,
          //     bank: false,
          //     consumerCoupon: false,
          //     money: true,
          //     integral: false
          //   };
          //   break;
          // case "000000000000000000000035":
          //   $scope.paymentTypeStatus = {
          //     travelFairCard: false,
          //     memberCard: false,
          //     bank: false,
          //     consumerCoupon: true,
          //     money: true,
          //     integral: false
          //   };
          //   break;
        case "000000000000000000000019":
          {
            $scope.paymentTypeStatus = {
              travelFairCard: false,
              memberCard: false,
              bank: false,
              consumerCoupon: false,
              money: true,
              integral: true
            };
            if ($scope.orderInfo.CustomerID && !$scope.customerInfo) {
              getCustomerDetail($scope.orderInfo.CustomerID, function(detail) {
                $scope.customerInfo = detail;
                $scope.maxMoney = $scope.customerInfo.CustomerIntegral * 3 / 1000;
              });
            } else if ($scope.customerInfo) {
              $scope.maxMoney = $scope.customerInfo.CustomerIntegral * 3 / 1000;
            } else {
              $scope.maxMoney = 0;
            }
          }
          break;
        default:
          $scope.paymentTypeStatus = {
            travelFairCard: false,
            memberCard: false,
            bank: false,
            consumerCoupon: false,
            money: true,
            integral: false
          };
      }
    };

    $scope.addRefund = function(item) {
      $scope.isFinished = false;
      $scope.getAllAddNeeded(function() {
        if (item) {
          getOrderPriceFinanceByID(item.ExpensesID, function(info) {
            var payment = _.find($scope.paymentTypes, function(item) {
              return item.ID == info.PayMode.ForeignKeyID;
            });
            var moneyType = _.find($scope.moneyTypes, function(item) {
              return item.ID == info.MoneyType.ForeignKeyID;
            });

            var bank = null;
            if (info.PayBank) {
              bank = _.find($scope.financePayBank, function(item) {
                return item.ID == info.PayBank.ForeignKeyID;
              });
            }

            $scope.editAddRefundInfo = {
              FinanceID: info.recordID,
              paymentType: payment,
              moneyType: moneyType,
              bank: bank,
              Price: info.Price,
              Notes: info.Notes,
              RefundTypeID: info.RefundTypeID
            };
          });
        } else {
          $scope.editAddRefundInfo = {};
        }
        $scope.status.pageStatus = 'addRefund';
      });
    };

    $scope.getAllAddNeeded = function(callback) {
      getMoneyTypes(function(moneyTypes) {
        $scope.moneyTypes = moneyTypes;
        getPaymentTypes(function(paymentTypes) {
          $scope.paymentTypes = paymentTypes;
          getFinancePayBank(function(financePayBank) {
            $scope.financePayBank = financePayBank;
            callback();
          });
        });
      });
    };

    $scope.saveReceivables = function(invalid) {
      if (invalid) return;

      if ($scope.editAddReceivablesInfo.Price > $scope.maxMoney) {
        $rootScope.info = '输入金额必须小于规定金额';
        return;
      }

      if ($scope.editAddReceivablesInfo.FinanceID) {
        updateOrderFinanceRecord({
          FinanceID: $scope.editAddReceivablesInfo.FinanceID,
          PayType: 1,
          OrderID: $scope.orderID,
          PayModeName: $scope.editAddReceivablesInfo.paymentType.Name,
          PayModeID: $scope.editAddReceivablesInfo.paymentType._id,
          MoneyTypeName: $scope.editAddReceivablesInfo.moneyType.Name,
          MoneyTypeID: $scope.editAddReceivablesInfo.moneyType.ID,
          BankName: $scope.editAddReceivablesInfo.bank ? $scope.editAddReceivablesInfo.bank.Name : '',
          BankID: $scope.editAddReceivablesInfo.bank ? $scope.editAddReceivablesInfo.bank.ID : '',
          Price: $scope.editAddReceivablesInfo.Price,
          Notes: $scope.editAddReceivablesInfo.Notes
        }, function() {
          $scope.editAddReceivablesInfo = {};
          $scope.status.pageStatus = 'list';
        });
      } else {
        if (!$scope.editAddReceivablesInfo.paymentType || !$scope.editAddReceivablesInfo.moneyType) {
          $scope.isFinished = true;
          return;
        }
        console.log($scope.editAddReceivablesInfo.paymentType);
        insertOrderFinance({
          PayType: 1,
          OrderID: $scope.orderID,
          PayModeName: $scope.editAddReceivablesInfo.paymentType.Name,
          PayModeID: $scope.editAddReceivablesInfo.paymentType._id,
          MoneyTypeName: $scope.editAddReceivablesInfo.moneyType.Name,
          MoneyTypeID: $scope.editAddReceivablesInfo.moneyType.ID,
          BankName: $scope.editAddReceivablesInfo.bank ? $scope.editAddReceivablesInfo.bank.Name : '',
          BankID: $scope.editAddReceivablesInfo.bank ? $scope.editAddReceivablesInfo.bank.ID : '',
          Price: $scope.editAddReceivablesInfo.Price,
          Notes: $scope.editAddReceivablesInfo.Notes
        }, function(response) {
          $scope.editAddReceivablesInfo = {};
          $scope.status.pageStatus = 'list';
        });
      }

    };

    $scope.saveRefund = function(invalid) {
      if (invalid) return;

      if ($scope.editAddRefundInfo.Price > $scope.maxMoney) {
        $rootScope.info = '输入金额必须小于规定金额';
        return;
      }

      if ($scope.editAddRefundInfo.FinanceID) {
        updateOrderFinanceRecord({
          FinanceID: $scope.editAddRefundInfo.FinanceID,
          PayType: 2,
          OrderID: $scope.orderID,
          PayModeName: $scope.editAddRefundInfo.paymentType.Name,
          PayModeID: $scope.editAddRefundInfo.paymentType._id,
          MoneyTypeName: $scope.editAddRefundInfo.moneyType.Name,
          MoneyTypeID: $scope.editAddRefundInfo.moneyType.ID,
          BankName: $scope.editAddRefundInfo.bank ? $scope.editAddRefundInfo.bank.Name : '',
          BankID: $scope.editAddRefundInfo.bank ? $scope.editAddRefundInfo.bank.ID : '',
          Price: $scope.editAddRefundInfo.Price,
          Notes: $scope.editAddRefundInfo.Notes,
          RefundTypeID: $scope.editAddRefundInfo.RefundTypeID
        }, function() {
          $scope.editAddReceivablesInfo = {};
          $scope.status.pageStatus = 'list';
        });
      } else {
        if (!$scope.editAddRefundInfo.paymentType || !$scope.editAddRefundInfo.moneyType) {
          $scope.isFinished = true;
          return;
        }
        insertOrderFinance({
          PayType: 2,
          OrderID: $scope.orderID,
          PayModeName: $scope.editAddRefundInfo.paymentType.Name,
          PayModeID: $scope.editAddRefundInfo.paymentType._id,
          MoneyTypeName: $scope.editAddRefundInfo.moneyType.Name,
          MoneyTypeID: $scope.editAddRefundInfo.moneyType.ID,
          BankName: $scope.editAddRefundInfo.bank ? $scope.editAddRefundInfo.bank.Name : '',
          BankID: $scope.editAddRefundInfo.bank ? $scope.editAddRefundInfo.bank.ID : '',
          Price: $scope.editAddRefundInfo.Price,
          Notes: $scope.editAddRefundInfo.Notes,
          RefundTypeID: $scope.editAddRefundInfo.RefundTypeID
        }, function(response) {
          $scope.editAddRefundInfo = {};
          $scope.status.pageStatus = 'list';
        });
      }
    };

    $scope.delRecord = function(item) {
      delOrderFinanceRecord(item.ExpensesID, function() {
        $scope.getFinance();
      });
    };


  }
});

app.directive('orderRecord', function(orderTrackingReminder, saveOrderTrackingReminder, $filter) {
  return {
    restrict: "AE",
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '=orderId'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/orderManagement/components/order_record_pop.html?" + Math.random(),
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    $scope.arrow.useArrow = false;

    $scope.status = {
      showStatus: 'list'
    };

    $scope.getRecordList = function() {
      orderTrackingReminder($scope.orderID, function(data) {
        $scope.recordList = data.list;
      });
    };

  }

  function controllerFun($scope) {
    $scope.$watch('orderID', function() {
      $scope.popoverIsOpen = false;
    });

    $scope.addRecord = function() {
      $scope.addRecordInfo = {
        IsKeepOnTracking: 1
      };
      $scope.status.showStatus = 'add';
    };

    $scope.saveRecord = function() {
      saveOrderTrackingReminder({
        Guid: $scope.orderID,
        IsKeepOnTracking: $scope.addRecordInfo.IsKeepOnTracking,
        TrackingDesc: $scope.addRecordInfo.TrackingDesc,
        TrackingTime: $filter('date')($scope.addRecordInfo.TrackingTimeDate, "yyyy-MM-dd HH:mm:ss")
      }, function() {
        $scope.status.showStatus = 'list';
      });
    };

  }
});

app.directive('orderPrecollar', function(Pagination, getOrderTravelGoodByOrder, $filter, insertOrderTravelGood, getProductGift, travelGoodsStockDetail, updateOrderTravelGood, delOrderTravelGood, showWarningBox, backOrderTravelGood) {
  return {
    restrict: "AE",
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      type: '@',
      orderID: '@orderId'
    },
    link: linkFun,
    templateUrl: "/public/angularView/orderManagement/components/order_precollar_pop.html?" + Math.random(),
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 710;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = false;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = -635;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }

    var pageSize = 6,
      pageIndex = 1;

    $scope.$watch('orderID', function() {
      $scope.popoverIsOpen = false;
      $scope.productGifts = null;
      $scope.status = {
        pageStatus: 'list'
      };
      pageIndex = 1;
    });

    $scope.addedTravelGoods = [];
    $scope.pagination = null;
    $scope.add = {};

    $scope.getPrecollarList = function() {
      $scope.isLoading = true;
      getOrderTravelGoodByOrder({
        OrderID: $scope.orderID,
        iPageIndex: pageIndex,
        iPageSize: pageSize
      }, function(data) {
        $scope.isLoading = false;
        $scope.precollarList = data.list;
        $scope.pagination = new Pagination(data.count, pageIndex, pageSize);
      });
    };

    $scope.getProductGift = function() {
      if ($scope.productGifts)
        return;

      getProductGift({
        orderID: $scope.orderID
      }, function(response) {
        $scope.productGifts = response.data;
      });
    };

    $scope.getStockCount = function(item) {
      //检测该条物品是否已经被添加，如果是则置空
      var test = _.filter($scope.addedTravelGoods, function(obj) {
        if (!obj.goods)
          return false;

        if (obj.goods.ForeignKeyID.$id == item.goods.ForeignKeyID.$id)
          return true;
      });

      if (test.length > 1) {
        item.goods = '';
        return;
      }

      var goods = _.find($scope.productGifts, function(obj) {
        if (obj.ForeignKeyID.$id == item.goods.ForeignKeyID.$id) return true;
      });

      if (angular.isNumber(goods.StockCount)) {
        item.goods.StockCount = goods.StockCount;
        item.goods.CostPrice = goods.CostPrice;
        return;
      }

      if (item && item.goods)
        travelGoodsStockDetail(function(response) {
          goods.StockCount = response.data.StockCount;
          goods.CostPrice = response.data.CostPrice;
          item.goods.StockCount = response.data.StockCount;
          item.goods.CostPrice = response.data.CostPrice;
        }, {
          ID: goods.ForeignKeyID.$id
        });
    };

    $scope.pageChange = function(page) {
      if (!page) page = 1;
      pageIndex = page;
      $scope.getPrecollarList(page);
    };

    $scope.switchToAddView = function() {
      $scope.status.pageStatus = 'add';
      $scope.addedTravelGoods = [];
    };

    $scope.addTravelGoods = function() {
      $scope.addedTravelGoods.push({
        goods: '',
        amount: 0
      });
    };

    $scope.delTravelGoods = function(index) {
      $scope.addedTravelGoods.splice(index, 1);
    };

    $scope.resetGoodsCount = function() {
      if (!$scope.productGifts) return;
      $scope.productGifts.forEach(function(item) {
        item.StockCount = '';
      });
    };

    $scope.insertTravelGood = function() {
      var data = [];

      $scope.addedTravelGoods.forEach(function(item) {
        if (item.goods && item.amount >= 0)
          data.push({
            TravelGoodID: item.goods.ForeignKeyID.$id,
            TravelGoodName: item.goods.Name,
            TravelGoodCount: item.amount,
            TravelGoodCost: item.goods.CostPrice,
            OrderID: $scope.orderID
          });
      });

      if (data.length <= 0) return;
      insertOrderTravelGood(data, function(response) {
        $scope.status.pageStatus = 'list';
      });
    };

    $scope.modifyStockCount = function(RecordID, StockCount, flag) {
      StockCount *= Math.abs(flag) / flag;
      if (isNaN(+StockCount)) return;

      updateOrderTravelGood({
        RecordID: RecordID,
        StockCount: StockCount
      }, function(response) {
        $scope.getPrecollarList();
      });
    };

    $scope.delOrderTravelGood = function(RecordID) {
      showWarningBox('是否确认删除', function() {
        delOrderTravelGood({
          RecordID: RecordID
        }, function() {
          $scope.getPrecollarList();
        });
      });
    };

    $scope.backTravelGoods = function(SourceID, BackCount) {
      if (isNaN(+BackCount) || +BackCount <= 0) return;

      showWarningBox('是否确认退还', function() {
        backOrderTravelGood({
          SourceID: SourceID,
          BackCount: BackCount
        }, function() {
          $scope.getPrecollarList();
        });
      });
    };
  }
});

app.directive('rescheduleNoPlan', function($rootScope, orderRescheduleApplyToOther, $filter) {
  return {
    restrict: "AE",
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '=orderId',
      title: '=title',
      startTime: '=startTime',
      endTime: '=endTime'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/orderManagement/components/order_reschedule_no_plan_pop.html?" + Math.random(),
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 256;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }

    $scope.status = {};
    $scope.data = {};

    $scope.data.startTimeTemp = new Date($scope.startTime.substring(0, 4), parseInt($scope.startTime.substring(5, 7)) - 1, $scope.startTime.substring(8, 10));
    $scope.data.endTimeTemp = new Date($scope.endTime.substring(0, 4), parseInt($scope.endTime.substring(5, 7)) - 1, $scope.endTime.substring(8, 10));

  }

  function controllerFun($scope) {
    $scope.savePlan = function() {
      if ($scope.data.startTimeTemp > $scope.data.endTimeTemp) {
        $rootScope[position[2]].info = "发团日期不能晚于归团日期";
        return;
      }

      $scope.status.isSubmit = true;
      orderRescheduleApplyToOther({
        OrderID: $scope.orderID,
        ToTeamStartTime: $filter('date')($scope.data.startTimeTemp, "yyyy-MM-dd"),
        ToTeamEndTime: $filter('date')($scope.data.endTimeTemp, "yyyy-MM-dd"),
        ReschedulePrice: $scope.data.ReschedulePrice,
        RescheduleReason: $scope.data.RescheduleReason
      }, function() {
        $rootScope[position[2]].info = '已经提交申请';
        $scope.status.isSubmit = false;
        $scope.startTime = $filter('date')($scope.data.startTimeTemp, "yyyy-MM-dd");
        $scope.endTime = $filter('date')($scope.data.endTimeTemp, "yyyy-MM-dd");
        $scope.status.popoverIsOpen = false;
      }, function() {
        $scope.status.isSubmit = false;
      });

    };

    $scope.openDatePicker = function($event, type) {
      $scope.status[type] = true;
    };

  }
});

app.directive('electronicContract', function(getEnumeration, saveOrderEmailContractByOrderID,
  getOrderEmailContractByOrderID, saveOrderFaxContractByOrderID, sendEmailByRecordID,
  cancelSendEmailByRecordID) {
  return {
    restrict: "AE",
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '=orderId',
      orderType: '@orderType'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/orderManagement/components/order_electronic_contract_pop.html?" + Math.random(),
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }

    $scope.arrow.useArrow = false;

    $scope.status = {
      signType: 1,
      pageStatus: 'list'
    };

    $scope.data = {};

    if ($scope.orderType === '000000000000000000000001' || $scope.orderType === '000000000000000000000018' ||
      $scope.orderType === '000000000000000000000023') {
      $scope.contractUrl = contractUrl + $scope.orderID;
    } else {
      $scope.contractUrl = entrustcontractUrl + $scope.orderID;
    }
  }

  function controllerFun($scope) {
    $scope.$watch('orderID', function() {
      $scope.popoverIsOpen = false;
    });

    $scope.getList = function() {
      if($scope.status.isLoading) return;
      $scope.status.isLoading = true;
      getOrderEmailContractByOrderID($scope.orderID, function(emailList) {
        $scope.emailList = emailList;
        $scope.status.isLoading = false;
      });
      getEnumeration("ESendStatus", function(ESendStatus) {
        $scope.data.ESendStatus = ESendStatus;
      });
    };

    $scope.toggleFile = function(item) {
      if (item.isShow) {
        item.isShow = false;
      } else {
        item.isShow = true;
      }
    };

    $scope.addEmail = function() {
      getEnumeration("EContentMainTypes", function(EContentMainTypes) {
        $scope.data.EContentMainTypes = EContentMainTypes;
      });
    };

    $scope.addFax = function() {
      if ($scope.status.pageStatus == 2) {
        return;
      }
      getEnumeration("EContentMainTypes", function(EContentMainTypes) {
        $scope.data.EContentMainTypes = EContentMainTypes;
      });
      getEnumeration("EContentTypes", function(EContentTypes) {
        $scope.data.EContentTypes = EContentTypes;
        $scope.data.EContentTypes.forEach(function(item) {
          if (item.Value == 2) {
            item.isSelected = true;
          }
        });
      });
    };

    $scope.sendEail = function(item) {
      item.sending = true;
      sendEmailByRecordID(item.BusinessSendRecordID, function() {
        $scope.getList();
      });
    };

    $scope.cancelSendEail = function(item) {
      cancelSendEmailByRecordID(item.BusinessSendRecordID, function() {
        $scope.getList();
      });
    };

    $scope.saveEmail = function() {

      var ContentMainTypes = [];
      $scope.data.EContentMainTypes.forEach(function(item) {
        if (item.isSelected) {
          ContentMainTypes.push(item.Value);
        }
      });
      $scope.isSubmit = true;
      saveOrderEmailContractByOrderID({
        OrderID: $scope.orderID,
        Email: $scope.data.Email,
        ContentMainTypes: JSON.stringify(ContentMainTypes),
      }, function() {
        $scope.isSubmit = false;
        $scope.status.pageStatus = 'list';
        $scope.data = {};
      }, function() {
        $scope.isSubmit = false;
      });
    };

    $scope.saveFax = function() {
      var ContentMainTypes = [];
      var ContentTypes = [];
      $scope.isSubmit = true;
      $scope.data.EContentMainTypes.forEach(function(item) {
        if (item.isSelected) {
          ContentMainTypes.push(item.Value);
        }
      });
      $scope.data.EContentTypes.forEach(function(item) {
        if (item.isSelected) {
          ContentTypes.push(item.Value);
        }
      });
      saveOrderFaxContractByOrderID({
        OrderID: $scope.orderID,
        FaxTelephone: $scope.data.FaxTelephone,
        ContentMainTypes: JSON.stringify(ContentMainTypes),
        ContentTypes: JSON.stringify(ContentTypes)
      }, function() {
        $scope.status.pageStatus = 'list';
        $scope.status.signType = 1;
        $scope.data = {};
        $scope.isSubmit = false;
      });
    };
  }
});

app.directive('distributionContract', function(getPersonnel, orderAppointmentContractSignApply) {
  return {
    restrict: 'AE',
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '@orderId',
      station: '=station'
    },
    templateUrl: '/public/angularView/orderManagement/components/order_distribution_contract_pop.html?' + Math.random(),
    link: linkFun
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    $scope.arrow.useArrow = false;

    $scope.$watch('orderID', function() {
      $scope.popoverIsOpen = false;
    });

    $scope.data = {};

    $scope.status = {};

    for (var index in $scope.station) {
      if ($scope.station[index].DelStatus === 0 && $scope.station[index].IsOpen == 1) {
        $scope.data.selectedStation = $scope.station[index]._id.$id;
        break;
      }
    }

    $scope.getPersonnelByStationID = function() {
      getPersonnel({
        station: $scope.data.selectedStation,
        limit: 99999,
        lock: 0
      }, function(result) {
        $scope.data.personList = result.list;
      });
    };

    $scope.$watch('data.selectedStation', function(value) {
      if (value) {
        $scope.getPersonnelByStationID();
      }
    }, true);

    $scope.saveDistribution = function() {
      $scope.isSubmit = true;
      orderAppointmentContractSignApply({
        OrderID: $scope.orderID,
        TargetStationID: $scope.data.selectedStation,
        TargetUserID: $scope.data.personID,
        AppointmentSignReason: ""
      }, function() {
        $scope.isSubmit = false;
        $scope.status.popoverIsOpen = false;
      }, function() {
        $scope.isSubmit = false;
      });
    };
  }
});

app.directive('cancelOrder', function(cancelOrder, getComboxCancelOrderReasonTypes, $rootScope, addRefreshPageByID) {
  return {
    restrict: 'AE',
    scope: {
      arrow: '=?arrow',
      popconf: '=?popconf',
      orderID: '@orderId',
      orderNO: '@orderNo',
      productTitle: '@title',
      callback: '=?callback'
    },
    templateUrl: '/public/angularView/orderManagement/components/order_cancel_pop.html?' + Math.random(),
    link: linkFun,
    controller: controllerFun
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 330;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = false;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 405;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }

    $scope.status = {};

    $scope.data = {
      CancelReasonTypeID: -1
    };

    getComboxCancelOrderReasonTypes(function(result) {
      $scope.data.reasonList = result;
    });
  }

  function controllerFun($scope) {
    $scope.saveCancel = function() {
      $scope.isLoading = true;
      cancelOrder($scope.orderID, $scope.data.CancelReasonTypeID, $scope.data.CancelReason, function() {
        $scope.isLoading = false;
        $scope.status.popoverIsOpen = false;
        if ($scope.callback) $scope.callback();
        else {
          addRefreshPageByID(($rootScope[switchType[2]].id));
          $rootScope.fetch($rootScope[switchType[2]].targetUrl);
        }
      }, function(){
        $scope.isLoading = false;
      });
    };
  }
});

app.directive('orderTransfer', function(getPersonnel, orderTransferOP, componentsDepartment) {
  return {
    restrict: 'AE',
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '@orderId',
    },
    templateUrl: '/public/angularView/orderManagement/components/order_transfer_pop.html?' + Math.random(),
    link: linkFun
  };

  function linkFun($scope) {
    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    $scope.arrow.useArrow = false;

    $scope.status = {};

    $scope.$watch('orderID', function() {
      $scope.status.popoverIsOpen = false;
    });

    $scope.data = {
      transferObject: 'seller'
    };

    $scope.getPersonList = function() {
      var param = {
        limit: 99999,
        lock: 0
      };
      switch ($scope.data.transferObject) {
        case 'seller':
          {
            param.labelGroup = '私顾';
            getPersonnel(param, function(result) {
              $scope.data.personList = result.list;
            });
          }
          break;
        case 'jidiao':
          {
            param.labelGroup = '计调';
            getPersonnel(param, function(result) {
              $scope.data.personList = result.list;
            });
          }
          break;
        case 'department':
          {
            componentsDepartment({
              IsBusiness: 1
            }, function(result) {
              $scope.data.departmentList = result.data;
            });
          }
          break;
      }
    };

    $scope.$watch('data.transferObject', function() {
      $scope.getPersonList();
    });

    $scope.saveTransfer = function() {

      var param = {
        OrderID: $scope.orderID,
        ToUser: "",
        ToOPUser: "",
        ToDept: "",
        Notes: $scope.data.Notes
      };
      switch ($scope.data.transferObject) {
        case 'seller':
          param.ToUser = $scope.data.userID;
          break;
        case 'jidiao':
          param.ToOPUser = $scope.data.userID;
          break;
        case 'department':
          param.ToDept = $scope.data.departmentID;
          break;
      }
      $scope.isSubmit = true;
      orderTransferOP(param, function() {
        $scope.isSubmit = false;
        $scope.status.popoverIsOpen = false;
      });
    };

    $scope.formatPerson = function(data) {
      return data.FullName;
    };

    $scope.changePerson = function(data) {
      if (data) {
        $scope.data.userID = data._id.$id;
      } else {
        $scope.data.userID = '';
      }

    };

  }
});

app.directive('orderTransferRecord', function(getOrderTransferList, getEnumeration) {
  return {
    restrict: 'AE',
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '@orderId',
    },
    templateUrl: '/public/angularView/orderManagement/components/order_transfer_record_pop.html?' + Math.random(),
    link: linkFun
  };

  function linkFun($scope) {

    if (!$scope.arrow) {
      $scope.arrow = {};
    }
    if (!$scope.popconf) {
      $scope.popconf = {};
    }
    if (!$scope.arrow.left) {
      $scope.arrow.left = 130;
    }
    if (!$scope.arrow.useArrow) {
      $scope.arrow.useArrow = true;
    }
    if (!$scope.popconf.left) {
      $scope.popconf.left = 0;
    }
    if (!$scope.popconf.position) {
      $scope.popconf.position = 'bottom';
    }
    $scope.arrow.useArrow = false;

    $scope.status = {};

    $scope.$watch('orderID', function() {
      $scope.status.popoverIsOpen = false;
    });

    $scope.getRecordList = function() {
      getOrderTransferList($scope.orderID, function(result) {
        $scope.list = result;
      });
      getEnumeration('EAuditStatus', function(EAuditStatus) {
        $scope.EAuditStatus = EAuditStatus;
      });
    };

  }
});

app.directive('orderInsurance', function($filter, getComboxProductInsurancesByProductID, getOrderInsurancesByOrderID, batchSelectedInsurances, getProductInsurancesByProductIDWithNone, getProductInsurancesByProductIDWithTime, getComboxInsuranceStatus, getOrderInsurancesByTouristID, batchBuyInsurances, localCancelInsurances, modifyInsuranceExecutiveTime, cancelSelectInsurance, batchLocalCancelInsurances, batchCancelSelectInsurances, getComboxInsureCompanies, getInsuresByInsureCompanyID, batchBuyThirdPartInsurances, getOrderInsurancesTourists, getAssemblyInsurancesTourists, batchLocalCancelInsurancesToHigh, batchCancelSelectInsurancesToHigh, showWarningBox, Pagination) {
  return {
    restrict: 'AE',
    scope: {
      arrow: '=arrow',
      popconf: '=popconf',
      orderID: '@orderId',
      productID: '@productId',
      productTypeID: '@productTypeId',
      withPlan: '=?',
      st: '=?',
      et: '=?'
    },
    templateUrl: '/public/angularView/orderManagement/components/order_insurance_pop.html?' + Math.random(),
    link: linkFun
  };

  function linkFun($scope, ele, attr) {
    $scope.travelDays = (new Date($scope.et.slice(0, 10)) - new Date($scope.st.slice(0, 10))) / (24 * 3600 * 1000) + 1;
    $scope.status = {};
    $scope.arrow.useArrow = false;

    $scope.$watch('orderID', function(v) {
      if (!v) return;

      $scope.popoverIsOpen = false;
      $scope.insuranceTourist = [];
      $scope.advancedInsuranceInfo = [];

      $scope.searchInsurance = {
        SearchInfo: '',
        HasSelected: -1,
        InsuranceStatus: -1
      };

      $scope.searchAdvanced = {
        ProductInsuranceID: '',
        InsuranceStatus: -1
      };

      $scope.searchThird = {
        companyID: 1
      };

      $scope.searchAdvanced = {
        "ProductInsuranceID": '',
        "InsuranceStatus": -1,
        "SearchInfo": ''
      };
    });

    var insuranceStatus = [
      '<i class="grayBg">未</i>',
      '<i class="yellowBg">投</i>',
      '<i class="yellowBg">退</i>',
      '<i class="greenBg">投</i>',
      '<i class="greenBg">退</i>',
      '<i class="redBg">投</i>'
    ];

    $scope.$watch('popoverIsOpen', function(v) {
      if (v) {
        $scope.status = {
          insuranceStatus: insuranceStatus
        };
        $scope.getInsuranceTourist();
      } else {
        $scope.insuranceTourist = [];
      }
    });

    $scope.HasSelectedInsurance = [{
      value: -1,
      text: '全部'
    }, {
      value: 0,
      text: '未选险种'
    }, {
      value: 1,
      text: '已选险种'
    }];

    $scope.getInsuranceInfo = function() {
      var flag = false;

      for (var i = 0; i < $scope.insuranceTourist.length; i++) {
        if ($scope.insuranceTourist[i].isSelected) {
          flag = true;
          break;
        }
      }

      if (!flag) {
        $scope.status.info = "请先选择人员!";
        return;
      }

      $scope.status.insurance = "selectInsurance";

      var callback = function(insurance) {
        $scope.insurances = insurance;
        $scope.insurances.forEach(function(item) {
          item.isSelected = !!$scope.status.isSelectedALLInsurance;
        });
        $scope.isLoading = false;
      };
      var param = {
        ProductTypeID: $scope.productTypeID,
        ProductID: $scope.productID
      };
      $scope.isLoading = true;
      if ($scope.withPlan == '0') {
        getProductInsurancesByProductIDWithNone(param, callback);
      } else {
        angular.extend(param, {
          StartTime: $scope.st,
          EndTime: $scope.et
        });
        getProductInsurancesByProductIDWithTime(param, callback);
      }
    };

    getComboxInsuranceStatus(function(orderStatus) {
      $scope.orderStatus = orderStatus;
    });

    $scope.getInsuranceTourist = function() {
      $scope.isLoading = true;
      getOrderInsurancesByOrderID({
        "OrderID": $scope.orderID,
        "SearchInfo": $scope.searchInsurance.SearchInfo,
        "HasSelected": $scope.searchInsurance.HasSelected,
        "InsuranceStatus": $scope.searchInsurance.InsuranceStatus,
        "PageIndex": 1,
        "PageSize": 2000
      }, function(response) {
        response.list.forEach(function(item, index) {
          if ($scope.insuranceTourist[index])
            item.isSelected = !!$scope.insuranceTourist[index].isSelected;
        });

        $scope.insuranceTourist = response.list;
        $scope.isLoading = false;
      });
      $scope.status.insurance = "show";
    };

    $scope.selectedALLInsuranceTourist = function() {
      $scope.insuranceTourist.forEach(function(item) {
        item.isSelected = $scope.status.isSelectedALLInsuranceTourist;
      });
    };

    $scope.selectedALLInsurance = function() {
      $scope.insurances.forEach(function(item) {
        item.isSelected = $scope.status.isSelectedALLInsurance;
      });
    };

    $scope.saveSelectedInsurance = function() {
      var selectedTourist = [];
      var selectedInsurance = [];
      $scope.insuranceTourist.forEach(function(item) {
        if (item.isSelected) {
          selectedTourist.push(item.TouristID);
        }
      });

      $scope.insurances.forEach(function(item) {
        if (item.isSelected) {
          selectedInsurance.push({
            ProductInsuranceID: item.ProductInsuranceID,
            // InsuranceMoney: item.ProductInsurancePrice * selectedTourist.length
            InsuranceMoney: item.ProductInsurancePrice
          });
        }
      });
      batchSelectedInsurances($scope.orderID, selectedTourist, selectedInsurance, function() {
        $scope.getInsuranceTourist();
      });
    };

    $scope.editSingle = function(TouristID) {
      getOrderInsurancesByTouristID(TouristID, function(info) {
        $scope.editSingleInfo = info;
        $scope.editSingleInfo.forEach(function(item) {
          item.InsuranceExecStartTimeDate = new Date(item.InsuranceExecStartTime.substring(0, 4), parseInt(item.InsuranceExecStartTime.substring(5, 7)) - 1, item.InsuranceExecStartTime.substring(8, 10), item.InsuranceExecStartTime.substring(11, 13), item.InsuranceExecStartTime.substring(14, 16), 0);
        });
        $scope.status.insurance = "editSingle";
      });
    };

    $scope.buyInsuranceSingle = function(item) {
      var buyInsuranceArray = [];
      buyInsuranceArray.push({
        OrderID: $scope.orderID,
        TouristID: item.TouristID,
        TouristEmail: '',
        ProductInsuranceID: item.ProductInsuranceID
      });
      if (buyInsuranceArray.length === 0) {
        $scope.status.info = "请先选择人员!";
        return;
      }
      batchBuyInsurances(buyInsuranceArray, function() {
        $scope.editSingle(item.TouristID);
      });
    };

    //批量保险
    $scope.batchBuyInsurances = function() {
      var buyInsuranceArray = [];

      for (var i = 0; i < $scope.insuranceTourist.length; i++) {
        if ($scope.insuranceTourist[i].isSelected) {
          if ($scope.insuranceTourist[i].TouristInsurances.length === 0) {
            $scope.status.info = $scope.insuranceTourist[i].TouristName + '未选择保险，请先选择保险';
            return;
          }
          $scope.insuranceTourist[i].TouristInsurances.forEach(function(insurance) {
            buyInsuranceArray.push({
              "OrderID": $scope.orderID,
              "TouristID": $scope.insuranceTourist[i].TouristID,
              "TouristEmail": "",
              "ProductInsuranceID": insurance.ProductInsuranceID
            });
          });
        }
      }

      if (buyInsuranceArray.length === 0) {
        $scope.status.info = "请先选择人员!";
        return;
      }
      batchBuyInsurances(buyInsuranceArray, function() {
        $scope.getInsuranceTourist();
      });
    };

    //批量退保
    $scope.batchLocalCancelInsurances = function() {
      var personArray = [];

      for (var i = 0; i < $scope.insuranceTourist.length; i++) {
        if ($scope.insuranceTourist[i].isSelected) {
          if ($scope.insuranceTourist[i].TouristInsurances.length === 0) {
            $scope.status.info = $scope.insuranceTourist[i].TouristName + '未选择保险，请先选择保险';
            return false;
          }
          personArray.push($scope.insuranceTourist[i].TouristID);
        }
      }

      if (personArray.length === 0) {
        $scope.status.info = "请先选择人员!";
        return;
      }
      batchLocalCancelInsurances($scope.orderID, personArray, function() {
        $scope.getInsuranceTourist();
      });
    };

    //单个退保
    $scope.localCancelInsurances = function(item) {
      localCancelInsurances(item.TouristID, item.ProductInsuranceID, function() {
        $scope.editSingle(item.TouristID);
      });
    };

    //修改保险日期
    $scope.modifyInsuranceExecutiveTime = function(item) {
      var ExecutiveStartTime = $filter('date')(item.InsuranceExecStartTimeDate, 'yyyy-MM-dd HH:mm:ss');
      var ExecutiveEndTimeDate = new Date(item.InsuranceExecStartTimeDate.valueOf() + item.InsuranceExecDays * 24 * 60 * 60 * 1000);
      var ExecutiveEndTime = $filter('date')(ExecutiveEndTimeDate, 'yyyy-MM-dd HH:mm:ss');
      modifyInsuranceExecutiveTime({
        OrderID: $scope.orderID,
        TouristID: item.TouristID,
        ProductInsuranceID: item.ProductInsuranceID,
        ExecutiveStartTime: ExecutiveStartTime,
        ExecutiveEndTime: ExecutiveEndTime
      }, function() {
        $scope.editSingle(item.TouristID);
        item.insuranceShow = false;
      });
    };

    //单个取消保险
    $scope.cancelSelectInsurance = function(item) {
      // cancelSelectInsurance(item.TouristID, item.ProductInsuranceID, function() {
      // $scope.editSingle(item.TouristID);
      // });

      batchCancelSelectInsurances($scope.orderID, [item.TouristID], function() {
        $scope.editSingle(item.TouristID);
      });
    };

    //批量取消保险
    $scope.batchCancelSelectInsurances = function() {
      var personArray = [];

      for (var i = 0; i < $scope.insuranceTourist.length; i++) {
        if ($scope.insuranceTourist[i].isSelected) {
          if ($scope.insuranceTourist[i].TouristInsurances.length === 0) {
            $scope.status.info = $scope.insuranceTourist[i].TouristName + ' 未选择保险，请先选择保险';
            return;
          }
          personArray.push($scope.insuranceTourist[i].TouristID);
        }
      }

      if (personArray.length === 0) {
        $scope.status.info = "请先选择人员!";
        return;
      }

      batchCancelSelectInsurances($scope.orderID, personArray, function() {
        $scope.getInsuranceTourist();
      });

    };

    $scope.getThirdInsurance = function() {
      getInsuresByInsureCompanyID($scope.searchThird.companyID, function(insurance) {
        $scope.thirdInsurance = insurance;
      });
    };

    //获取第三方保险公司
    $scope.getThirdInsuranceCompany = function() {
      if (!_.find($scope.insuranceTourist, {
          isSelected: true
        })) {
        $scope.status.info = "请先选择人员";
        return;
      }

      $scope.status.insurance = "thirdInsurance";

      getComboxInsureCompanies(function(company) {
        $scope.thirdInsuranceCompany = company;
        $scope.getThirdInsurance();
      });
    };

    //批量第三方保险选择
    $scope.batchBuyThirdPartInsurances = function() {
      var personArray = [];
      $scope.insuranceTourist.forEach(function(person) {
        if (person.isSelected) {
          personArray.push(person.TouristID);
        }
      });
      batchBuyThirdPartInsurances({
        OrderID: $scope.orderID,
        Tourists: JSON.stringify(personArray),
        InsureCompanyID: $scope.searchThird.companyID,
        InsureName: $scope.searchThird.insurance,
        InsureMoney: $scope.searchThird.InsureMoney
      }, function() {
        $scope.status.insurance = 'show';
        $scope.getInsuranceTourist();
      });
    };

    $scope.getComboxProductInsurancesByProductID = function() {
      getComboxProductInsurancesByProductID($scope.productTypeID, $scope.productID, function(insurance) {
        $scope.advancedInsurance = insurance;
        if (insurance.length > 0) $scope.searchAdvanced.ProductInsuranceID = insurance[0].ProductInsuranceID;
        $scope.status.insurance = 'advancedInsurance';
        $scope.getOrderInsurancesTourists();
      });
    };

    $scope.getOrderInsurancesTourists = function() {
      $scope.isLoading = true;
      getOrderInsurancesTourists({
        "OrderID": $scope.orderID,
        "ProductInsuranceID": $scope.searchAdvanced.ProductInsuranceID,
        "InsuranceStatus": $scope.searchAdvanced.InsuranceStatus,
        "SearchInfo": $scope.searchAdvanced.SearchInfo
      }, function(info) {
        $scope.isLoading = false;

        $scope.advancedInsuranceInfo = info.ProductInsurances;
        info.Tourists.forEach(function(item) {
          item.TouristInsurances.forEach(function(insurance) {
            var result = _.find(info.ProductInsurances, {
              ProductInsuranceID: insurance.ProductInsuranceID
            });

            if (!result) return;
            if (!result.Tourists) result.Tourists = [];

            result.Tourists.push({
              GenderTypeID: item.GenderTypeID,
              TouristID: item.TouristID,
              TouristName: item.TouristName,
              TouristTypeID: item.TouristTypeID,
              InsuranceStatus: insurance.InsuranceStatus,
              TouristInsuranceID: insurance.TouristInsuranceID
            });
          });
        });

        // getAssemblyInsurancesTourists(info.ProductInsurances, info.Tourists, function(info2) {
        // $scope.advancedInsuranceInfo = info2;
        // });
      });
    };

    $scope.selectAllAdvancedInsurance = function() {
      $scope.status.isSelectedAllAdvancedInsurance = !$scope.status.isSelectedAllAdvancedInsurance;
      $scope.advancedInsuranceInfo.forEach(function(insurance) {
        if (!angular.isArray(insurance.Tourists)) return;
        insurance.Tourists.forEach(function(tourist) {
          tourist.isSelected = $scope.status.isSelectedAllAdvancedInsurance;
        });
      });
    };

    //高级投保
    $scope.advancedInsuranceBuyInsurance = function() {
      var insuranceArray = [];
      $scope.advancedInsuranceInfo.forEach(function(insurance) {
        if (!angular.isArray(insurance.Tourists)) return;
        insurance.Tourists.forEach(function(tourist) {
          if (tourist.isSelected) {
            insuranceArray.push({
              OrderID: $scope.orderID,
              TouristID: tourist.TouristID,
              TouristEmail: '',
              ProductInsuranceID: insurance.ProductInsuranceID
            });
          }
        });
      });

      if (insuranceArray.length === 0) {
        $scope.status.info = "请先选择人员";
        return;
      }

      batchBuyInsurances(insuranceArray, function() {
        $scope.getOrderInsurancesTourists();
      });
    };

    //高级退保
    $scope.advancedInsuranceReturnInsurance = function() {
      var insuranceArray = [];
      $scope.advancedInsuranceInfo.forEach(function(insurance) {
        if (!insurance.Tourists) return;
        insurance.Tourists.forEach(function(tourist) {
          if (tourist.isSelected) {
            insuranceArray.push({
              TouristID: tourist.TouristID,
              ProductInsuranceID: insurance.ProductInsuranceID
            });
          }
        });
      });

      if (insuranceArray.length === 0) {
        $scope.status.info = "请先选择人员";
        return;
      }

      batchLocalCancelInsurancesToHigh($scope.orderID, insuranceArray, function() {
        $scope.getOrderInsurancesTourists();
      });
    };

    //高级取消保险
    $scope.advancedInsuranceCancelInsurance = function() {
      var insuranceArray = [];
      $scope.advancedInsuranceInfo.forEach(function(insurance) {
        if (!insurance.Tourists) return;
        insurance.Tourists.forEach(function(tourist) {
          if (tourist.isSelected) {
            insuranceArray.push({
              TouristID: tourist.TouristID,
              ProductInsuranceID: insurance.ProductInsuranceID
            });
          }
        });
      });

      if (insuranceArray.length === 0) {
        $scope.status.info = "请先选择人员";
        return;
      }

      batchCancelSelectInsurancesToHigh($scope.orderID, insuranceArray, function() {
        $scope.getOrderInsurancesTourists();
      });
    };

    $scope.toggleAdvanceSelectStatus = function(item) {
      if (item.isSelected) {
        item.isSelected = false;
      } else {
        item.isSelected = true;
      }
    };
  }
});

app.directive('confirmOrder', function(confirmOrder, addRefreshPageByID, $rootScope, showWarningBox) {
  return {
    scope: {
      orderID: '=orderId',
      intentOrderID: '=intentOrderId'
    },
    restrict: 'EA',
    templateUrl: '/public/angularView/orderManagement/components/order_confirm.html?' + Math.random(),
    link: function(scope, ele, attr) {
      var isloading = false;
      ele.bind('click', function() {
        if (isloading) return;
        showWarningBox('确认订单？', function() {
          confirmOrder({
            OrderID: scope.orderID,
            IntentOrderID: scope.intentOrderID
          }, function() {
            isloading = false;
            addRefreshPageByID(($rootScope[switchType[2]].id));
            $rootScope.fetch($rootScope[switchType[2]].httpUrl + '?id=' + scope.orderID);
          }, function() {
            isloading = false;
          });
        });
      });
    }
  };
});

app.directive('importTourist', function(addRefreshPageByID, $rootScope, showErrorInfo, $http, $window) {
  return {
    scope: {
      orderID: '=orderId',
      arrow: '=?arrow',
      popconf: '=?popconf'
    },
    restrict: 'E',
    templateUrl: '/public/angularView/orderManagement/components/order_import_tourist_pop.html?' + Math.random(),
    link: function(scope, ele, attr) {
      if (!scope.arrow) {
        scope.arrow = {};
      }
      if (!scope.popconf) {
        scope.popconf = {};
      }
      if (!scope.arrow.left) {
        scope.arrow.left = 130;
      }
      if (!scope.arrow.useArrow) {
        scope.arrow.useArrow = true;
      }
      if (!scope.popconf.left) {
        scope.popconf.left = 0;
      }
      if (!scope.popconf.position) {
        scope.popconf.position = 'bottom';
      }

      var file = null;
      scope.data = {};
      scope.status = {};

      scope.$watch('orderId', function() {
        scope.popoverIsOpen = false;
        scope.isLoading = false;
        scope.status.selected = false;
        scope.status.filePath = '';
      });

      scope.fileSelected = function(v) {
        if (!v) return;
        scope.$apply(function() {
          console.log('hello');
          scope.status.filePath = v;
          scope.status.selected = true;
        });
      };

      scope.cancel = function() {
        scope.popoverIsOpen = false;
      };

      scope.upload = function() {
        if (file === null) file = ele[0].querySelector('#file');
        if (!file.value || scope.isLoading) return;
        scope.isLoading = true;

        var data = new FormData();
        data.append('fileData', file.files[0]);
        data.append('OrderID', scope.orderID);

        $http({
          method: 'POST',
          url: dreamFlyUrl + 'Order/OrderTourist/ImportOrderTourists',
          data: data,
          headers: {
            'Content-type': undefined
          }
        }).then(function(response) {
          if (response.data.code >= 700 && response.data.code < 800) {
            addRefreshPageByID(($rootScope[switchType[2]].id));
            $rootScope.fetch($rootScope[switchType[2]].httpUrl + '?id=' + scope.orderID);
          } else {
            showErrorInfo(response.data.message);
          }
          scope.isLoading = false;
        });
      };

      scope.reSelect = function() {
        var evt = document.createEvent('Event');
        evt.initEvent('click', false, true);
        ele[0].querySelector('#file').dispatchEvent(evt);
      };
    }
  };
});

app.directive('downloadPolicy', function(getOrderInsurancesMoreByOrderID) {
  return {
    scope: {
      orderID: '=orderId',
      arrow: '=?arrow',
      popconf: '=?popconf'
    },
    restrict: 'E',
    templateUrl: '/public/angularView/orderManagement/components/order_policy_pop.html?' + Math.random(),
    link: function(scope) {
      if (!scope.arrow) {
        scope.arrow = {};
      }
      if (!scope.popconf) {
        scope.popconf = {};
      }
      if (!scope.arrow.left) {
        scope.arrow.left = 130;
      }
      if (!scope.arrow.useArrow) {
        scope.arrow.useArrow = true;
      }
      if (!scope.popconf.left) {
        scope.popconf.left = 0;
      }
      if (!scope.popconf.position) {
        scope.popconf.position = 'bottom';
      }

      scope.search = {
        page: 1,
        pageSize: 1000,
        searchInfo: ''
      };
      scope.status = {
        isSelectAll: false
      };

      scope.$watch('popoverIsOpen', function(value) {
        if (value === true) {
          scope.getInsuranceInfo();
          scope.status.isSelectAll = false;
        }
      });

      scope.$watch('orderID', function(value) {
        scope.popoverIsOpen = false;
      });

      scope.searchInsuranceInfo = function() {
        scope.search.page = 1;
        scope.getInsuranceInfo();
      };

      scope.getInsuranceInfo = function() {
        scope.isLoading = true;
        getOrderInsurancesMoreByOrderID({
          OrderID: scope.orderID,
          PageIndex: scope.search.page,
          PageSize: scope.search.pageSize,
          SearchInfo: scope.search.searchInfo
        }, function(response) {
          scope.insuranceInfos = response.list;
          scope.isLoading = false;
        });
      };

      scope.downloadPolicy = function(ID) {
        // window.open('http://115.29.222.6:9969/Insure/DownloadInsure.ashx?ID=' + ID);
        window.open('http://crm.feiyang.cn:12000/Insure/DownloadInsure.ashx?ID=' + ID);
      };

      scope.batchDownloadPolicy = function() {
        if (!angular.isArray(scope.insuranceInfos)) return;
        scope.insuranceInfos.forEach(function(item) {
          if (item.isSelected)
          // window.open('http://115.29.222.6:9969/Insure/DownloadInsure.ashx?ID=' + item.PlatformOrderID, item.PlatformOrderID, "toolbar=no, location=no, directories=no, status=no, menubar=noe, scrollbars=no, resizable=no, copyhistory=no, width=400, height=400");
            window.open('http://crm.feiyang.cn:12000/Insure/DownloadInsure.ashx?ID=' + item.PlatformOrderID, item.PlatformOrderID, "toolbar=no, location=no, directories=no, status=no, menubar=noe, scrollbars=no, resizable=no, copyhistory=no, width=400, height=400");
        });
      };

      scope.selectAllTourist = function() {
        if (!angular.isArray(scope.insuranceInfos)) return;

        scope.insuranceInfos.forEach(function(item) {
          item.isSelected = scope.status.isSelectAll;
        });
      };
    }
  };
});

app.directive('customerFinance', function(getCardRechargeApplyFinance, financeCardMoneyOP, financeCardMoneyDelete, showWarningBox) {
  return {
    restrict: 'E',
    scope: true,
    templateUrl: '/public/angularView/customer/components/customer_finance_pop.html',
    link: function(scope, elm, attr) {
      scope.isOpen = false;
      scope.mode = "default";
      scope.paymentTypeStatus = {
        bank: false,
        money: true
      };

      scope.$watch(attr.applyId, function(value) {
        scope.ID = value;
        scope.isOpen = false;
      });

      scope.getFinanceInfo = function() {
        scope.mode = "default";
        getCardRechargeApplyFinance({
          _id: scope.ID
        }, function(response) {
          scope.financeInfo = response;
        });
      };

      scope.addPayIn = function() {
        scope.editAddInfo = {};
        scope.mode = "payIn";
      };

      scope.addPayBack = function() {
        scope.editAddInfo = {};
        scope.mode = "payBack";
      };

      scope.editPayInBack = function(item, mode) {
        scope.mode = mode;
        scope.editAddInfo = {
          _id: item._id,
          moneyType: {
            Name: item.MoneyType.Name,
            _id: item.MoneyType.ForeignKeyID
          },
          paymentType: {
            Name: item.PayMode.Name,
            _id: item.PayMode.ForeignKeyID
          },
          bank: {
            Name: item.PayBank.Name,
            _id: item.PayBank.ForeignKeyID
          },
          Notes: item.Notes,
          Price: item.Money
        };

        if (scope.editAddInfo.bank.Name) {
          scope.paymentTypeStatus.bank = true;
        } else {
          scope.paymentTypeStatus.bank = false;
        }
      };

      scope.cancel = function() {
        scope.mode = "default";
      };

      scope.paymodes = [{
        Name: '现金',
        _id: '000000000000000000000001'
      }, {
        Name: '刷卡',
        _id: '000000000000000000000003'
      }, {
        Name: '转帐',
        _id: '000000000000000000000004'
      }];

      scope.paymentTypeChange = function(paymentType) {
        switch (paymentType._id) {
          case '000000000000000000000001':
            scope.paymentTypeStatus.bank = false;
            break;
          case '000000000000000000000003':
          case '000000000000000000000004':
            scope.paymentTypeStatus.bank = true;
        }
      };

      scope.savePayment = function(flag) {
        if (!flag || scope.isLoading) return;
        var info = scope.editAddInfo;

        var data = {
          PayType: scope.mode == 'payIn' ? 1 : 2,
          OrderID: scope.ID,
          PayModeName: info.paymentType.Name,
          PayModeID: info.paymentType._id,
          MoneyTypeName: info.moneyType.Name,
          MoneyTypeID: info.moneyType._id,
          Price: info.Price,
          Notes: info.Notes
        };

        if (info._id) data.financeid = info._id;

        if (data.PayModeID == '000000000000000000000003' || data.PayModeID == '000000000000000000000004') {
          data.BankName = info.bank.Name;
          data.BankID = info.bank._id;
        }
        scope.isLoading = true;
        financeCardMoneyOP(data, function(response) {
          scope.isLoading = false;
          scope.getFinanceInfo();
        }, function(response) {
          scope.isLoading = false;
        });
      };

      scope.cardMoneyDelete = function(id, type) {
        scope.isLoading = true;
        financeCardMoneyDelete({
          _id: id
        }, function() {
          var index = _.findIndex(scope.financeInfo[type], {
            _id: id
          });
          if (index >= 0) scope.financeInfo[type].splice(index, 1);
          scope.isLoading = false;
        }, function() {
          scope.isLoading = false;
        });
      };
    }
  };
});

app.directive('orderSeat', function($rootScope, getSameProductPlanByPlanId, getCarsByOrderIdnPlanId, getCarArrangeTouristsInfo, getCarsTouristsByOrderIdnCar, touristOccupyCarSeatArrange, getNoneCarArrangeTouristsInfo, showWarningBox, cancelCarSeatArrange, randomSeatingArrangement, getSameProductPlanByOrderID) {
  return {
    restrict: 'E',
    scope: {
      orderId: '=',
      planId: '=?'
    },
    replace: true,
    templateUrl: '/public/angularView/orderManagement/components/order_take_seat_pop.html',
    link: function(scope, elm, attr) {
      scope.popoverIsOpen = false;
      scope.isLoading = false;
      scope.showArrangeInfoId = 0;
      scope.productPlan = '';
      scope.hasSamePlan = false;
      scope.status = {
        showArrangeInfo: false
      };

      if (scope.planId) {
        scope.$watch('planId', function(id) {
          scope.popoverIsOpen = false;
          if (id) activate(id);
        });
      } else {
        scope.$watch('orderId', function(id) {
          scope.popoverIsOpen = false;
          if (id) activateByOrderID(id);
        });
      }

      function activate(planId) {
        getSameProductPlanByPlanId({
          ProductPlanID: planId
        }, function(plans) {
          if (plans.length > 0) {
            scope.samePlans = plans;
            scope.productPlan = _.find(scope.samePlans, {
              IsChecked: true
            }).ProductPlanID;
            if (scope.productPlan === scope.planId) scope.hasSamePlan = true;
          } else {
            scope.samePlans = [{
              ProductName: '无已安排车辆计划',
              ProductPlanID: ''
            }];
          }
        });
      }

      function activateByOrderID(orderID) {
        getSameProductPlanByOrderID({
          OrderID: orderID
        }, function(plans) {
          if (plans.length > 0) {
            scope.samePlans = plans;
            scope.productPlan = _.find(scope.samePlans, {
              IsChecked: true
            }).ProductPlanID;
          } else {
            scope.samePlans = [{
              ProductName: '无已安排车辆计划',
              ProductPlanID: ''
            }];
          }
        });
      }

      /**
       * 根据订单id和车辆信息获取车占座信息
       * @param  {[type]}   param    [description]
       * @param  {Function} callback [description]
       * @return {[type]}            [description]
       */
      function getCarsTouristsByOrderIdnCarSelf(param, callback) {
        scope.isLoading = true;
        getCarsTouristsByOrderIdnCar(param, function(tourists) {
          scope.carTourists = tourists[0];
          scope.carId = tourists[0].CarID;
          scope.carSeatNumber = [];
          for (var i = 1; i <= tourists[0].DigitNumber; i++) {
            var tour = {};
            tour.IsSamePlan = scope.productPlan == scope.planId;

            if (i <= (tourists[0].ReservedNumber + tourists[0].GuideSiteNumber) && !param.IsSamePlan) {
              tour.isReserved = true;
            } else {
              tour.isReserved = false;
            }

            if (i <= scope.carTourists.GuideSiteNumber) {
              tour.SeatNumber = i;
              tour.TouristName = '导游';
              tour.isGuide = true;
            } else {
              var tourTmp = _.find(tourists[0].CarTourists, {
                SeatNumber: i
              });

              if (!tourTmp) {
                tour.SeatNumber = i;
                tour.TouristName = '安排';
                // tour.hasTourist = false;
                // tour.isGuide = false;
              } else {
                if (scope.orderId == tourTmp.OrderID) tour.IsSameOrder = true;

                tourTmp.hasTourist = true;
                // tourTmp.isGuide = false;
                _.extend(tour, tourTmp);
              }
            }
            scope.carSeatNumber.push(tour);
          }
          scope.isLoading = false;
          if (callback) callback();
        });
      }


      /**
       * 获取占座安排信息
       * @return {[type]} [description]
       */
      scope.getSeatArrangeInfo = function() {
        getCarArrangeTouristsInfo({
          OrderID: scope.orderId
        }, function(arrangeInfo) {
          scope.arrangeTouristInfo = arrangeInfo;
        });
        getNoneCarArrangeTouristsInfo({
          OrderID: scope.orderId
        }, function(unarrangeInfo) {
          scope.unarrangeTouristInfo = unarrangeInfo;
        });
      };

      scope.orderSeat = function() {
        if (scope.popoverIsOpen) {
          scope.ppopoverIsOpen = false;
          return;
        }

        if (!scope.productPlan) return;

        scope.isLoading = true;

        getCarsByOrderIdnPlanId({
          OrderID: scope.orderId,
          ProductPlanID: scope.productPlan
        }, function(carsInfo) {
          scope.orderCarsInfo = carsInfo;
          scope.orderCarsInfoOrigin = carsInfo;

          if (carsInfo.Cars.length <= 0) {
            scope.isLoading = false;
            return;
          }

          scope.carInfo = carsInfo.Cars[0];
          scope.carInfOrigino = carsInfo.Cars[0];
          scope.carDeparture = carsInfo.Cars[0].CarDepartures[0];
          scope.carDepartureOrigin = carsInfo.Cars[0].CarDepartures[0];

          getCarsTouristsByOrderIdnCarSelf({
            OrderID: scope.orderId,
            IsSamePlan: scope.productPlan == scope.planId,
            Cars: JSON.stringify([carsInfo.Cars[0]])
          });
        });

        scope.getSeatArrangeInfo();
      };

      /**
       * 显示订单占座的车辆信息
       * @param  {[type]} car [description]
       * @return {[type]}     [description]
       */
      scope.showOrderSeatCarInfo = function(car) {
        if (scope.carId == car.CarID) return;

        scope.carId = car.CarID;
        scope.carInfo = car;
        scope.carDeparture = car.CarDepartures[0];
        getCarsTouristsByOrderIdnCarSelf({
          OrderID: scope.orderId,
          IsSamePlan: scope.productPlan == scope.orderId,
          Cars: JSON.stringify([car])
        });
      };

      /**
       * 根据计划搜索车辆信息和座位信息
       * @return {[type]} [description]
       */
      scope.searchPlanSeatInfo = function(planId) {
        scope.productPlan = planId;

        getCarsByOrderIdnPlanId({
          OrderID: scope.orderId,
          ProductPlanID: scope.productPlan
        }, function(carsInfo) {
          scope.orderCarsInfo = carsInfo;

          if (carsInfo.Cars.length <= 0) {
            scope.isLoading = false;
            return;
          }

          scope.carInfo = carsInfo.Cars[0];
          scope.carDeparture = carsInfo.Cars[0].CarDepartures[0];

          getCarsTouristsByOrderIdnCarSelf({
            OrderID: scope.orderId,
            IsSamePlan: scope.productPlan == scope.planId,
            Cars: JSON.stringify([carsInfo.Cars[0]])
          });
        });
      };

      /**
       * 返回自己的计划占座信息
       * @return {[type]} [description]
       */
      scope.backToSelftPlanSeatInfo = function() {
        if (scope.hasSamePlan) scope.productPlan = scope.planId;

        if (scope.orderCarsInfo <= 0) return;

        scope.carInfo = scope.orderCarsInfoOrigin.Cars[0];
        scope.carDeparture = scope.carDepartureOrigin;
        scope.orderCarsInfo = scope.orderCarsInfoOrigin;

        if (scope.orderCarsInfoOrigin.Cars.length === 0) return;
        getCarsTouristsByOrderIdnCarSelf({
          OrderID: scope.orderId,
          IsSamePlan: scope.productPlan === scope.planId,
          Cars: JSON.stringify([scope.carInfo])
        });
      };

      /**
       * 刷新当前车辆的占座信息
       * @return {[type]} [description]
       */
      scope.refreshOrderSeatInfo = function() {
        $rootScope.showProcessBar = true;

        getCarsTouristsByOrderIdnCarSelf({
          OrderID: scope.orderId,
          IsSamePlan: scope.productPlan == scope.planId,
          Cars: JSON.stringify([scope.carInfo])
        }, function() {
          $rootScope.showProcessBar = false;
        });

        scope.getSeatArrangeInfo();
      };

      /**
       * 取消车辆占座
       * @param  {[type]} tourist [description]
       * @return {[type]}         [description]
       */
      scope.delOrderTouristSeat = function(tourist) {
        showWarningBox('是否确定要取消占座', function() {
          cancelCarSeatArrange({
            TouristID: tourist.TouristID
          }, function(response) {
            scope.refreshOrderSeatInfo();
          });
        });
      };

      /**
       * 显示订单占座弹窗
       * @param  {[type]} seatInfo [description]
       * @return {[type]}          [description]
       */
      scope.orderTouristArrange = function(seatInfo) {
        scope.currentOrderSeatInfo = seatInfo;
        scope.status.showArrangeInfo = true;
      };

      /**
       * 订单随机占座
       * @return {[type]} [description]
       */
      scope.orderTouristArrangeRandom = function() {
        $rootScope.showProcessBar = true;
        randomSeatingArrangement({
          OrderID: scope.orderId,
          CarID: scope.carId,
          CarAddressID: scope.carDeparture.CarDepartureID
        }, function(response) {
          $rootScope.showProcessBar = false;
          scope.refreshOrderSeatInfo();
        });
      };

      /**
       * 已占座未占座的转换
       * @param  {[type]} type [description]
       * @return {[type]}      [description]
       */
      scope.changeOrderSeatArrangeType = function(type) {
        scope.showArrangeInfoId = type;
      };

      /**
       * 选择为占座的人进行占座
       * @param  {[type]} tour [description]
       * @return {[type]}      [description]
       */
      scope.chooseOrderSeatTouristUnarrange = function(tour) {
        scope.status.showArrangeInfo = false;

        var param = {};
        if ('TouristID' in scope.currentOrderSeatInfo) {
          param.OutTouristID = scope.currentOrderSeatInfo.TouristID;
        } else {
          param.OutTouristID = null;
        }

        param.CurrentProductPlanID = scope.productPlan;
        param.SiteNumber = scope.currentOrderSeatInfo.SeatNumber;
        param.InTouristID = tour.TouristID;
        param.CarID = scope.carId;
        param.CarAddressID = scope.carDeparture.CarDepartureID;
        touristOccupyCarSeatArrange(param, function(response) {
          scope.refreshOrderSeatInfo();
        });
      };

      /**
       * 选择已经占座的人进行占座
       * @param  {[type]} tour [description]
       * @return {[type]}      [description]
       */
      scope.chooseOrderSeatTouristArrange = function(tour) {
        scope.status.showArrangeInfo = false;

        var param = {};
        if ('TouristID' in scope.currentOrderSeatInfo) {
          param.OutTouristID = scope.currentOrderSeatInfo.TouristID;
        } else {
          param.OutTouristID = null;
        }

        param.CurrentProductPlanID = scope.productPlan;
        param.SiteNumber = scope.currentOrderSeatInfo.SeatNumber;
        param.InTouristID = tour.TouristID;
        param.CarID = scope.carId;
        param.CarAddressID = scope.carDeparture.CarDepartureID;

        touristOccupyCarSeatArrange(param, function(response) {
          scope.refreshOrderSeatInfo();
        });
      };

    }
  };
});

app.directive('ordersInfoPop', function(getOrdersByPlanID, ngDialog) {
  return {
    restrict: 'A',
    scope: {
      plan: '@',
      status: '@',
      number: '@',
    },
    templateUrl: '',
    link: function(scope, elm, attr) {
      if (scope.number <= 0) return;

      function dialogCtrl($scope) {
        $scope.status = scope.status;
        $scope.orderList = [];
        getOrdersByPlanID(scope.plan, function(response) {
          $scope.orderList = response.data.oneorders;
        });
      }

      var templateUrl = '/public/angularView/productOrder/components/orders_info_pop.html';
      var dialogOptions = {
        id: 'order-plan',
        className: 'w-800',
        template: templateUrl,
        controller: dialogCtrl
      };

      elm.bind('click', function(e) {
        e.stopPropagation();
        ngDialog.open(dialogOptions);
      });

    }
  };
});

app.directive('quitTeam', function(){
  return {
    replace: true,
    transclude: true,
    restrict: 'E',
    scope: {
      evt: '&',
      popLeft: '@?',
      arrowLeft: '@?',
      popoverOpen: '=?',
      isLoading: '=?'
    },
    template: '<a popover-trigger="outsideClick" href="#" popover-left="{{popLeft}}" popover-use-arrow="true" popover-arrow-left="{{arrowLeft}}" popover-placement="bottom" uib-popover-template="\'/public/angularView/orderManagement/components/quit_team_pop.html\'" popover-is-open="popoverOpen" ng-transclude></a>',
    link: function(scope){
      scope.pop = {
        exitTeamNotes: ''
      };
      /**
       * [submit description]
       * @param  {[boolean]} flag [true: invalid, false: valid]
       */
      scope.submit = function(flag){
        if(flag) return;
        scope.evt({ExitTeamNotes: scope.pop.exitTeamNotes});
      };
    }
  };
});
/*
 * Checks every $digest for height changes
 */
app.directive('listHeightSource', function($window) {
  return {
    restrict: 'A',
    scope: {
      mainPaddingStyle: '=mainPaddingStyle',
      listHeightStyle: '=listHeightStyle'
    },
    link: function($scope, elem, attrs) {
      var w = angular.element($window);
      $scope.getWindowDimensions = function() {
        return {
          'h': w.height(),
          'w': w.width()
        };
      };

      $scope.$watch(function() {
        $scope.height = elem.height();
      });

      $scope.$watch('height', function(value) {
        var listHeight = $(window).height() - value - 8;
        $scope.listHeightStyle = {
          height: listHeight
        };
        $scope.mainPaddingStyle = {
          'padding-top': value
        };
      });

      $scope.$watch($scope.getWindowDimensions, function(newValue, oldValue) {
        $scope.windowHeight = newValue.h;
        $scope.windowWidth = newValue.w;
        var listHeight = $(window).height() - $scope.height - 8;
        $scope.listHeightStyle = {
          height: listHeight
        };
      }, true);
    }
  };
});

//副屏高度计算
app.directive('subViewHeight', function($window, $rootScope) {
  return {
    restrict: 'A',
    scope: {
      subClass: '=subClass',
    },
    link: linkFun
  };

  function linkFun($scope, elem, attrs) {
    var w = angular.element($window);
    $scope.getWindowDimensions = function() {
      return {
        'h': w.height(),
        'w': w.width()
      };
    };

    $scope.$watch(function() {
      $scope.height = elem.height();
    });

    $scope.$watch($scope.getWindowDimensions, function() {
      if ($rootScope.showSubHeadTitle) {
        $scope.subClass.height = (w.height() - 50) + "px";
      }
    }, true);
  }
});
﻿app.directive("baseClosingnnitPop", function () {
    return {
        restrict: "AE",
        scope: {
            closingnnitID: '=closingnnitId',
            closingnnitNo: '=closingnnitNo',
        },
        link: linkFun,
        controller: controllerFun,
        templateUrl: '/public/angularView/finances/business/IncomeSettlement/ClosingNnitOneDetailPop.html' + "?" + Math.random()
    };

    function linkFun($scope) {

    }

    function controllerFun($scope, ngDialog, closingNnitOneInOneTeam) {
        $scope.closingNnitOnePop = function (closingnnitIDs)
        {
            ngDialog.open({
                id: 'fOrderThreeSingleList',
                className: 'big',
                width:500,
                template: '/public/angularView/finances/business/IncomeSettlement/ClosingNnitOneDetail.html?' + Math.random(),
                data: {
                    ID: closingnnitIDs
                },
                controller: function ($scope, closingNnitOneInOneTeam) {
                    $scope.showDetail = false;
                    //closingNnitOneInOneTeam(closingnnitIDs,callback,{
                        
                    //}, function (detail) {
                    //    $scope.showDetail = true;
                    //    $scope.detail = detail;
                    //});
                    closingNnitOneInOneTeam(closingnnitIDs, function (detail) {
                        $scope.showDetail = true;
                        $scope.detail = detail;
                    });
                }
            });
        };
    };
});app.directive("phone", function() {
  return {
    restrict: "A",
    require: "ngModel",
    link: function(scope, element, attrs, ngModel) {
      ngModel.$validators.phone = function(modelValue, viewValue) {
        return ngModel.$isEmpty(modelValue) || /^[0-9]+$/;
      };
    }
  };
});
app.directive("governmentid", function() {
  return {
    restrict: "A",
    require: "ngModel",
    link: function(scope, element, attrs, ngModel) {
      ngModel.$validators.governmentid = function(modelValue, viewValue) {
        return ngModel.$isEmpty(modelValue) || /(^\d{18}$)|(^\d{17}(\d|X|x)$)/
          .test(modelValue);
      };
    }
  };
});

app.directive("positivenumber", function() {
  return {
    restrict: "A",
    require: "ngModel",
    link: function(scope, element, attrs, ngModel) {
      ngModel.$validators.positivenumber = function(modelValue, viewValue) {
        return ngModel.$isEmpty(modelValue) || /^(([1-9][0-9]*\.[0-9][0-9]*)|([0]\.[0-9][0-9]*)|([1-9][0-9]*)|([0]{1}))$/
          .test(modelValue);
      };
    }
  };
});
app.directive("positiveNumber",
  function() {
    return {
      restrict: "A",
      require: "ngModel",
      link: function(scope, element, attrs, ngModel) {
        ngModel.$validators.positiveNumber = function(modelValue,
          viewValue) {
          return parseInt(modelValue) > 0;
        };
      }
    };
  });
app.directive("cellphone", function() {
  return {
    restrict: "A",
    require: "ngModel",
    link: function(scope, element, attrs, ngModel) {
      ngModel.$validators.cellphone = function(modelValue, viewValue) {
        return ngModel.$isEmpty(modelValue) || /^1[3|4|5|7|8]\d{9}$/.test(modelValue);
      };
    }
  };
});
app.directive('focusMe', function($timeout) {
  return {
    scope: {
      trigger: '@focusMe'
    },
    link: function(scope, element) {
      scope.$watch('trigger', function(value) {
        if (value == "true") {
          $timeout(function() {
            element[0].focus();
          }, 500);
        }
      });
      element.bind('blur', function() {
        element[0].blur();
      });
    }
  };
});

app.directive('buttonBack', function() {
  return {
    restrict: 'AE',
    templateUrl: '/public/angularView/common/components/backButton.html',
  };
});

app.directive('convertToNumber', function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attrs, ngModel) {
      ngModel.$parsers.push(function(val) {
        return parseInt(val, 10);
      });
      ngModel.$formatters.push(function(val) {
        return '' + val;
      });
    }
  };
});

app.directive('whenScrollEnds', function($rootScope) {
  return {
    restrict: "A",
    link: function(scope, element, attrs) {
      $rootScope.isloadList = false;
      var threshold = 100;
      var initTop = 0;
      element.scroll(function() {
        var visibleHeight = element.height();
        var scrollableHeight = element.prop('scrollHeight');
        var hiddenContentHeight = scrollableHeight - visibleHeight;
        var scrollTop = element.scrollTop();
        if (hiddenContentHeight - element.scrollTop() <= threshold && scrollTop > initTop) {
          // Scroll is almost at the bottom. Loading more rows
          if (!$rootScope.isloadList) {
            $rootScope.isloadList = true;
            $rootScope.showProcessBar = true;
            scope.$apply(attrs.whenScrollEnds);
          }
        }
        initTop = scrollTop;
      });
    }
  };
});

app.directive('whenLoad', function($timeout) {
  return {
    restrict: "A",
    link: function(scope, element, attrs) {
      $timeout(function() {
        scope.$apply(attrs.whenLoad);
      });
    }
  };
});

app.directive('whenLoadOver', function($timeout) {
  return {
    restrict: "A",
    link: function(scope, element, attrs) {
      if (scope.$last === true) {
        $timeout(function() {
          scope.$emit("loadOver");
        });
      }
    }
  };
});

app.directive('hyNumber', function() {
  var hyNumber = {
    restrict: "AE",
    scope: {
      max: "=?max",
      min: "=?min",
      value: '=?value',
      change: '&?change',
      required: '=?required'
    },
    link: linkFun,
    controller: controllerFun,
    templateUrl: "/public/angularView/common/components/number.html?" + Math.random(),
  };
  return hyNumber;

  function linkFun($scope) {
    if ($scope.required) {
      if ($scope.value === undefined) {
        $scope.value = 0;
      }
    }
  }

  function controllerFun($scope) {

    $scope.minus = function() {
      if ($scope.min !== undefined && $scope.value - 1 < parseInt($scope.min)) {
        $scope.value = parseInt($scope.min);
      } else {
        $scope.value--;
        // if($scope.change){
        //   $scope.change();
        // }
      }
    };

    $scope.plus = function() {
      if ($scope.max !== undefined && $scope.value + 1 > parseInt($scope.max)) {
        $scope.value = parseInt($scope.max);
      } else {
        $scope.value++;
        // if($scope.change){
        //   $scope.change();
        // }
      }
    };

    $scope.$watch('max', function(value) {
      if(value <= 0){
        $scope.value = 0;
      }
    }, true);

    $scope.changeNumber = function(){
      $scope.value = parseInt($scope.value);
      if($scope.value <= $scope.min){
        $scope.value = $scope.min;
      }
      if($scope.value >= $scope.max){
        $scope.value = $scope.max;
      }
      // if($scope.change){
      //   $scope.change();
      // }
    };

    $scope.$watch("value", function(data){
      if($scope.change){
        $scope.change();
      }
    });

  }
});

app.directive('hyPagination', function() {
  return {
    restrict: "AE",
    scope: {
      Pagination: '=type',
      isLeft: '=left',
      action: '=action'
    },
    controller: function($scope) {
      $scope.PreviousPage = function() {
        $scope.Pagination.PreviousPage();
      };

      $scope.nextPage = function() {
        $scope.Pagination.nextPage();
      };
    },
    templateUrl: "/public/angularView/common/components/Pagination.html?" + Math.random(),
  };
});

app.directive('selectVisa', function(getVisaList, Pagination, _,
  $rootScope) {
  return {
    restrict: "ACE",
    scope: {
      save: '=save',
      cancel: '=cancel',
      data: '=data'
    },
    link: function($scope) {

      $scope.country = global.VisaAddress;
      $scope.select = {};

      $scope.selectVisa = function(page) {
        if (!$scope.select.Visa) {
          $scope.select.Visa = {};
        }
        $scope.select.Visa.Page = page;
        var param = {
          Title: $scope.select.Visa.Name,
          page: $scope.select.Visa.Page,
          limit: 5
        };
        if ($scope.select.Visa.country && $scope.select.Visa.country._id) {
          param.VisaGADDRID = $scope.select.Visa.country._id.$id;
        }
        getVisaList(param, function(response) {
          $scope.select.Visa.List = response.data.list;
          if($scope.select.Visa.List.length <= 0){
            $scope.hasNoVisa = true;
          }else{
            $scope.hasNoVisa = false;
          }
          $scope.data.forEach(function(visa) {
            var choose = _.find($scope.select.Visa.List, function(item) {
              return visa.ForeignKeyID.$id === item._id.$id;
            });
            if (undefined !== choose) {
              choose.isSelect = true;
            }
          });

          var page = new Pagination(response.count,
            response.page);
          if (!$scope.Pagination) {
            $scope.Pagination = {};
          }
          $scope.Pagination.Visa = page;
        });
      };

      $scope.chooseVisa = function(item) {
        item.isSelect = true;
        if (!$scope.select.Visa) {
          $scope.select.Visa = {};
        }
        if (!$scope.select.Visa.selected) {
          $scope.select.Visa.selected = [];
        }
        var visa = _.find($scope.data, function(data) {
          return data.ForeignKeyID.$id === item._id.$id;
        });
        var pushData = {
          Name: item.Title,
          ForeignKeyID: {
            $id: item._id.$id
          },
          DefaultPrice: item.DefaultPrice,
          CostDefaultPrice: item.CostDefaultPrice
        };
        if (visa === undefined) {
          $scope.data.push(pushData);
          if (!$rootScope.select.Visa) {
            $rootScope.select.Visa = {};
          }
        }
      };

      $scope.unChooseVisa = function(item) {
        item.isSelect = false;
        var visa = _.find($scope.data, function(item) {
          return item.ForeignKeyID.$id === item.ForeignKeyID.$id;
        });
        if (undefined !== visa) {
          $scope.data = _.without($scope.data, visa);
          if (!$rootScope.select.Visa) {
            $rootScope.select.Visa = {};
          }
        }
      };
    },
    templateUrl: "/public/angularView/common/components/select_visa.html?" + Math.random(),
  };
});

app
  .directive(
    'selectViewspots',
    function(Pagination, _, getScenics, $rootScope, getAddrList,
      getAllScenicTypes) {
      return {
        restrict: "ACE",
        scope: {
          save: '=save',
          data: '=data',
          cancel: '=cancel',
          addData: '=addData',
          removeData: '=removeData'
        },
        link: function($scope) {

          $scope.select = {};
          $scope.scopeInfo = {};

          // $scope.ProductAllAddr = global.ProductAllAddr;
          $scope.ProductAllAddr = $rootScope.Address;


          $scope.getChinaRegions = function() {
            $scope.BasicGADDRInfo = global.BasicGADDRInfo;
            $scope.scopeInfo.country = _.find(
              $scope.BasicGADDRInfo,
              function(item) {
                return item.Title == '中国';
              });
            $scope.regions = global.BasicGADDRRegions;
          };

          $scope.getRegions = function(country) {
            if (country) {
              var contryId = country._id.$id;
              getAddrList(function(response) {
                $scope.regions = response;
              }, contryId);
            }
          };

          $scope.getCities = function(region) {
            if (region) {
              getAddrList(function(response) {
                $scope.cities = response;
              }, region._id.$id);
            }
          };

          $scope.getScenicTypes = function() {
            if (!$scope.scenicTypes) {
              getAllScenicTypes(function(response) {
                $scope.scenicTypes = response.list;
              });
            }
          };

          $scope.selectViewspots = function(page) {
            if (!$scope.select.Viewspots) {
              $scope.select.Viewspots = {};
            }
            $scope.select.Viewspots.Page = page;
            var search = {
              Title: $scope.select.Viewspots.Name,
              page: $scope.select.Viewspots.Page,
              limit: $rootScope.embeddedPageLimt
            };
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 1){
              search.ProductGADDRId = $scope.scopeInfo.StartGADDR.Parents[0].parentid.$id;
            }
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 2){
              search.ProductGADDRId = $scope.scopeInfo.StartGADDR.Parents[1].parentid.$id;
            }
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 3){
              search.ProductGADDRId = $scope.scopeInfo.StartGADDR.Parents[2].parentid.$id;
            }
            // if ($scope.scopeInfo.country) {
            //   if ($scope.scopeInfo.region) {
            //     if ($scope.scopeInfo.city) {
            //       search.ProductGADDRId = $scope.scopeInfo.city._id.$id;
            //     } else {
            //       search.ProductGADDRId = $scope.scopeInfo.region._id.$id;
            //     }
            //   } else {
            //     search.ProductGADDRId = $scope.scopeInfo.country._id.$id;
            //   }
            // }
            if ($scope.scopeInfo.scenicType && $scope.scopeInfo.scenicType._id) {
              search.TypeId = $scope.scopeInfo.scenicType._id.$id;
            }
            getScenics(
              search,
              function(response) {
                $scope.select.Viewspots.List = response.data.list;
                $scope.data.forEach(function(scenic) {
                  var choose = _.find($scope.select.Viewspots.List, function(myScenic) {
                    return myScenic._id.$id === scenic.ForeignKeyID.$id;
                  });
                  if (undefined !== choose) {
                    choose.isSelect = true;
                  }
                });
                var page = new Pagination(
                  response.count,
                  response.page);
                if (!$scope.Pagination) {
                  $scope.Pagination = {};
                }
                $scope.Pagination.Viewspots = page;
              });
          };

          $scope.chooseViewspots = function(item) {
            item.isSelect = true;
            if (!$scope.select.Viewspots) {
              $scope.select.Viewspots = {};
            }
            // if (!$scope.select.Viewspots.selected) {
            //   $scope.select.Viewspots.selected = [];
            // }
            var index = _.findIndex($scope.data, {
              ViewspotTitle: item.Title
            });
            var dataItem = {
              "ViewspotID": item._id.$id,
              "ViewspotTitle": item.Title,
              "ViewspotTitleEN": '',
              "Address": item.Address,
              "Notes": "",
              "info": item
            };
            var removeIndex = _.findIndex(
              $scope.removeData, {
                ViewspotTitle: item.Title
              });
            if ($scope.addData && $scope.removeData) {
              if (removeIndex > -1) {
                $scope.data
                  .push(($scope.removeData[removeIndex]));
                $scope.removeData = _.without(
                  $scope.removeData,
                  $scope.removeData[removeIndex]);
              } else {
                if (index < 0) {
                  $scope.addData.push(dataItem);
                  var addData = angular.copy(dataItem);
                  addData.ForeignKeyID = {
                    $id: item._id.$id
                  };
                  $scope.data.push(addData);
                }
              }
            } else {
              if (index < 0) {
                $scope.data.push(dataItem);
              }
            }

          };

          $scope.unChooseViewspots = function(item) {
            var spot = _.find($scope.data, function(data) {
              return data.ForeignKeyID.$id == item.ForeignKeyID.$id;
            });
            if (undefined !== spot) {
              $scope.data = _.without($scope.data, spot);
            }
            var choose = _.find($scope.select.Viewspots.List, function(myScenic) {
              return myScenic._id.$id === item.ForeignKeyID.$id;
            });
            if (undefined !== choose) {
              choose.isSelect = false;
            }
            if ($scope.addData && $scope.removeData) {
              var addIndex = _
                .findIndex(
                  $scope.addData, {
                    ViewspotTitle: item.ViewspotTitle
                  });
              if (addIndex > -1) {
                $scope.addData = _.without(
                  $scope.addData,
                  $scope.addData[addIndex]);
              } else {
                $scope.removeData.push(item);
              }
            }
          };
        },
        controller: function($scope){
          $scope.selectByStartGaddr = function(){
            $scope.selectViewspots(1);
          };
        },
        templateUrl: "/public/angularView/common/components/select_viewspots.html?" + Math.random(),
      };
    });

app
  .directive(
    'selectCatering',
    function(ngDialog, $rootScope, _) {
      return {
        restrict: "ACE",
        scope: {
          save: '=save',
          data: '=data',
          cancel: '=cancel',
          food: '=food'
        },
        link: function($scope) {
          $scope.orderByOrgin = 1;
          $scope.openAddFoodDialog = function() {
            if (!$scope.food.CateringBasicsPic) {
              $scope.food.CateringBasicsPic = [];
            }
            if ($scope.food.CateringBasicsPic.length >= 3) {
              return;
            }
            var new_dialog = ngDialog
              .open({
                id: 'addFoodPic',
                template: '/public/angularView/common/components/crop.html',
                controller: 'crop',
                className: 'ngdialog-theme-default w-800',
                data: {
                  imgRatio: 400 / 783,
                  resImgWidth: 783,
                  resImgHight: 400,
                  uploadPicCallBack: function(
                    data) {
                    $scope.orderBy = $scope.food.CateringBasicsPic.length + 1;
                    var result = {
                      "ForeignKeyID": "000000000000000000003707",
                      "Title": data.name,
                      "PicPath": data.url,
                      "Notes": "备注",
                      "OrderBy": $scope.orderBy
                    };
                    $scope.food.CateringBasicsPic
                      .push(result);
                  }
                }
              });
          };
          $scope.delFoodPic = function(item) {
            $scope.food.CateringBasicsPic = _.without(
              $scope.food.CateringBasicsPic, item);
          };
          $scope.saveData = function() {
            $scope.orderBy = $scope.orderByOrgin;
            $scope.save();
          };
        },
        templateUrl: "/public/angularView/common/components/select_catering.html?" + Math.random(),
      };
    });

app
  .directive(
    'selectHotel',
    function($rootScope, getBasicsHotelByNameOrGADDRTitle,
      Pagination, _, getAddrList, getHotelStarType,
      getBasicData) {
      return {
        restrict: "ACE",
        scope: {
          save: '=save',
          data: '=data',
          cancel: '=cancel',
          addData: '=addData',
          removeData: '=removeData'
        },
        link: function($scope) {

          $scope.select = {};
          $scope.scopeInfo = {};

          // $scope.ProductAllAddr = global.ProductAllAddr;
          $scope.ProductAllAddr = $rootScope.Address;


          // $scope.getChinaRegions = function() {
          //   $scope.BasicGADDRInfo = global.BasicGADDRInfo;
          //   $scope.scopeInfo.country = _.find(
          //     $scope.BasicGADDRInfo,
          //     function(item) {
          //       return item.Title == '中国';
          //     });
          //   $scope.regions = global.BasicGADDRRegions;
          // };
          //
          // $scope.getRegions = function(country) {
          //   if (country) {
          //     getAddrList(function(response) {
          //       $scope.regions = response;
          //     }, country._id.$id);
          //   }
          // };
          //
          // $scope.getCities = function(region) {
          //   if (region) {
          //     getAddrList(function(response) {
          //       $scope.cities = response;
          //     }, region._id.$id);
          //   }
          // };

          $scope.getHotelStar = function() {
            getHotelStarType(function(stars) {
              $scope.scopeInfo.hotelStarTypes = stars.list;
            });
          };

          $scope.selectHotel = function(page) {
            if (!$scope.select.Hotel) {
              $scope.select.Hotel = {};
            }
            if (!page) {
              page = 1;
            }
            var search = {
              "iPageIndex": page,
              "iPageSize": $rootScope.embeddedPageLimt
            };
            if ($scope.scopeInfo.hotelStarType) {
              search.BasicsHotelStar = $scope.scopeInfo.hotelStarType.ID;
            }
            if ($scope.select.Hotel.Name && $scope.select.Hotel.Name !== '') {
              search.SearchInfo = $scope.select.Hotel.Name;
            }
            // if ($scope.scopeInfo.country) {
            //   search.Countryid = $scope.scopeInfo.country._id.$id;
            // }
            // if ($scope.scopeInfo.region) {
            //   search.Provinceid = $scope.scopeInfo.region._id.$id;
            // }
            // if ($scope.scopeInfo.city) {
            //   search.Cityid = $scope.scopeInfo.city._id.$id;
            // }
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 1){
              search.Countryid = $scope.scopeInfo.StartGADDR.Parents[0].parentid.$id;
            }
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 2){
              search.Provinceid = $scope.scopeInfo.StartGADDR.Parents[1].parentid.$id;
            }
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 3){
              search.Cityid = $scope.scopeInfo.StartGADDR.Parents[2].parentid.$id;
            }
            $scope.select.Hotel.Page = page;
            getBasicData
              .hotelList(
                function(response) {
                  $scope.select.Hotel.List = response.data.list;
                  var page = new Pagination(
                    response.data.count,
                    response.data.page);
                  if (!$scope.Pagination) {
                    $scope.Pagination = {};
                  }
                  $scope.Pagination.Hotel = page;
                }, search);
          };

          $scope.chooseHotel = function(item) {
            if (!$scope.select.Hotel) {
              $scope.select.Hotel = {};
            }
            if (!$scope.select.Hotel.selected) {
              $scope.select.Hotel.selected = [];
            }
            var index = _.findIndex($scope.data, {
              HotelName: item.Name
            });
            var removeIndex = _.findIndex(
              $scope.removeData, {
                HotelName: item.Name
              });
            var pushData = {
              HotelName: item.Name,
              ForeignKeyID: {
                $id: item.ID
              },
              HotelNote: "",
              info: {
                HotelStar: {
                  Title: item.HotelStar
                },
                Pics: item.Pics
              }
            };
            if (removeIndex > -1) {
              $scope.data
                .push($scope.removeData[removeIndex]);
              $scope.removeData = _.without(
                $scope.removeData,
                $scope.removeData[removeIndex]);
            } else {
              if (index < 0) {
                $scope.data.push(pushData);
                $scope.addData.push(pushData);
              }
            }
          };

          $scope.unChooseHotel = function(item) {
            var index = _.findIndex($scope.data, {
              HotelName: item.HotelName
            });
            // $scope.data = _.without($scope.data,
            // $scope.data[index]);
            $scope.data.splice(index, 1);
            var addIndex = _.findIndex($scope.addData, {
              HotelName: item.HotelName
            });
            if (addIndex > -1) {
              $scope.addData = _.without($scope.addData,
                $scope.addData[addIndex]);
            } else {
              $scope.removeData.push(item);
            }
          };
        },
        controller: function($scope){
          $scope.selctHotelByStartGaddr = function(){
            $scope.selectHotel(1);
          };
        },
        templateUrl: "/public/angularView/common/components/select_hotel.html?" + Math.random(),
      };
    });

app
  .directive(
    'selectShopping',
    function($rootScope, Pagination, _, findInnerObjIndex,
      getBasicData, getAddrList) {
      return {
        restrict: "ACE",
        scope: {
          save: '=save',
          data: '=data',
          cancel: '=cancel',
          removeData: '=removeData',
          addData: '=addData'
        },
        link: function($scope) {

          $scope.scopeInfo = {};
          $scope.select = {};

          // $scope.ProductAllAddr = global.ProductAllAddr;
          $scope.ProductAllAddr = $rootScope.Address;

          $scope.selectShopping = function(page) {
            if (!$scope.select.Shopping) {
              $scope.select.Shopping = {};
            }
            var data = {
              "SearchInfo": $scope.select.Shopping.Name,
              // "Countryid": $scope.scopeInfo.country ? $scope.scopeInfo.country._id.$id : '',
              // "Provinceid": $scope.scopeInfo.region ? $scope.scopeInfo.region._id.$id : '',
              // "Cityid": $scope.scopeInfo.city ? $scope.scopeInfo.city._id.$id : '',
              "iPageIndex": page ? page : 1,
              "iPageSize": 5
            };
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 1){
              data.Countryid = $scope.scopeInfo.StartGADDR.Parents[0].parentid.$id;
            }
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 2){
              data.Provinceid = $scope.scopeInfo.StartGADDR.Parents[1].parentid.$id;
            }
            if($scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR && $scope.scopeInfo.StartGADDR.Parents.length >= 3){
              data.Cityid = $scope.scopeInfo.StartGADDR.Parents[2].parentid.$id;
            }
            $scope.select.Shopping.Page = data.iPageIndex;
            getBasicData
              .shopList(
                function(response) {
                  $scope.select.Shopping.List = response.data.list;
                  var page = new Pagination(
                    response.data.count,
                    response.data.page);
                  if (!$scope.Pagination) {
                    $scope.Pagination = {};
                  }
                  $scope.Pagination.Shopping = page;
                }, data);
          };

          $scope.getChinaRegions = function() {
            $scope.BasicGADDRInfo = global.BasicGADDRInfo;
            $scope.scopeInfo.country = _.find(
              $scope.BasicGADDRInfo,
              function(item) {
                return item.Title == '中国';
              });
            $scope.regions = global.BasicGADDRRegions;
          };

          $scope.getRegions = function(country) {
            if (country) {
              getAddrList(function(response) {
                $scope.regions = response;
              }, country._id.$id);
            }
          };

          $scope.getCities = function(region) {
            if (region) {
              getAddrList(function(response) {
                $scope.cities = response;
              }, region._id.$id);
            }
          };

          // $scope.chooseStartAddr = function(page){
          //   if (!$scope.select.Shopping) {
          //     $scope.select.Shopping = {};
          //   }
          //   var data = {
          //     "SearchInfo": $scope.select.Shopping.Name,
          //     // "Countryid": $scope.scopeInfo.country ? $scope.scopeInfo.country._id.$id : '',
          //     // "Provinceid": $scope.scopeInfo.region ? $scope.scopeInfo.region._id.$id : '',
          //     // "Cityid": $scope.scopeInfo.city ? $scope.scopeInfo.city._id.$id : '',
          //     "iPageIndex": page ? page : 1,
          //     "iPageSize": 5
          //   };
          //   if($scope.scopeInfo.StartGADDR.Parents.length >= 1){
          //     data.Countryid = $scope.scopeInfo.StartGADDR.Parents[0].parentid.$id;
          //   }
          //   if($scope.scopeInfo.StartGADDR.Parents.length >= 2){
          //     data.Provinceid = $scope.scopeInfo.StartGADDR.Parents[1].parentid.$id;
          //   }
          //   if($scope.scopeInfo.StartGADDR.Parents.length >= 3){
          //     data.Cityid = $scope.scopeInfo.StartGADDR.Parents[2].parentid.$id;
          //   }
          //   $scope.select.Shopping.Page = data.iPageIndex;
          //   getBasicData.shopList(
          //     function(response) {
          //       $scope.select.Shopping.List = response.data.list;
          //       var page = new Pagination(
          //         response.data.count,
          //         response.data.page);
          //       if (!$scope.Pagination) {
          //         $scope.Pagination = {};
          //       }
          //       $scope.Pagination.Shopping = page;
          //     }, data);
          // };

          $scope.chooseShopping = function(item) {
            if (!$scope.select.Shopping) {
              $scope.select.Shopping = {};
            }
            if (!$scope.select.Shopping.selected) {
              $scope.select.Shopping.selected = [];
            }
            var index = findInnerObjIndex($scope.data, [
              'ForeignKeyID', '$id'
            ], item.ID);
            var removeIndex = findInnerObjIndex(
              $scope.removeData, ['ForeignKeyID',
                '$id'
              ], item.ID);
            var itemData = {
              "ForeignKeyID": {
                $id: item.ID
              },
              "Shoping": item.Name,
              "Notes": item.SellProduct,
              "ReferMinute": item.stayTime
            };
            if (removeIndex > -1) {
              $scope.data
                .push(($scope.removeData[removeIndex]));
              $scope.removeData = _.without(
                $scope.removeData,
                $scope.removeData[removeIndex]);
            } else {
              if (index < 0) {
                $scope.data.push(itemData);
                $scope.addData.push(itemData);
              }
            }
            $scope.showAddTime(item, false);
          };

          $scope.showAddTime = function(item, status) {
            item.isShowAddTime = status;
          };

          $scope.unChooseShopping = function(item) {
            var index = findInnerObjIndex($scope.data, [
                'ForeignKeyID', '$id'
              ],
              item.ForeignKeyID.$id);
            $scope.data = _.without($scope.data,
              $scope.data[index]);
            var addIndex = findInnerObjIndex(
              $scope.addData, ['ForeignKeyID', '$id'],
              item.ForeignKeyID.$id);
            if (addIndex > -1) {
              $scope.addData = _.without($scope.addData,
                $scope.addData[addIndex]);
            } else {
              $scope.removeData.push(item);
            }
          };
        },
        controller: function($scope){
          $scope.chooseStartAddrContr = function(){
            $scope.selectShopping(1);
          };
        },
        templateUrl: "/public/angularView/common/components/select_shopping.html?" + Math.random(),
      };
    });

app
  .directive(
    'selectSelfpay',
    function() {
      return {
        restrict: "ACE",
        scope: {
          save: '=save',
          data: '=data',
          removeData: '=removeData',
          addData: '=addData',
          cancel: '=cancel'
        },
        link: function($scope, _, showWarningBox) {

          $scope.load = function() {
            if (!$scope.addData) {
              $scope.addData = [];
            }
          };
          $scope.removeSelfPay = function(index, item) {
            $scope.removeData.push(item);
            $scope.data.splice(index, 1);
          };
          $scope.unchooseSelfpay = function(index) {
            $scope.addData.splice(index, 1);
          };
          $scope.addItem = function() {
            $scope.addData.push({});
          };
          $scope.saveData = function() {
            console.log($scope.data);
            $scope.addData.forEach(function(item) {
              if (item.Title && item.Title !== '' && item.ReferPrice && item.ReferPrice !== '' && item.ReferMinute && item.ReferMinute !== '') {
                $scope.data.push(item);
                console.log($scope.data);
              }
            });
            $scope.save();
          };
        },
        templateUrl: "/public/angularView/common/components/select_selfpay.html?" + Math.random(),
      };
    });

app
  .directive(
    'selectTraffic',
    function(Pagination, _, findAddressByKey, findTraffic,
      getBasicsTrafficTypeAll, findInnerObjIndex) {
      return {
        restrict: "ACE",
        scope: {
          save: '=save',
          cancel: '=cancel',
          data: '=data',
          addData: '=addData',
          removeData: '=removeData'
        },
        link: function($scope) {
          if (!$scope.select) {
            $scope.select = {};
            $scope.select.selectTraffic = {};
            $scope.select.Traffic = {};
          }
          getBasicsTrafficTypeAll(function(response) {
            $scope.trafficType = response.list;
          });

          $scope.selectAddress = function(param) {
            return findAddressByKey(param.keyword);
          };

          $scope.DestinationFormatter = function(item) {
            return item.Title;
          };

          $scope.$watch('select.selectTraffic', function() {
            $scope.selectTraffic(1);
          }, true);

          $scope.changeAddress = function(value) {
            $scope.select.selectTraffic.AddressID = value._id.$id;
          };

          $scope.changeArriveAddress = function(value) {
            $scope.select.selectTraffic.ArriveAddressID = value._id.$id;
          };

          $scope.selectTraffic = function(page) {
            $scope.select.Traffic.Page = page;
            var TrafficTypeID = $scope.select.selectTraffic.TrafficType || '';
            findTraffic(
              TrafficTypeID,
              $scope.select.selectTraffic.Title,
              $scope.select.selectTraffic.AddressID,
              $scope.select.selectTraffic.ArriveAddressID,
              page,
              function(response) {
                $scope.select.Traffic.List = response.list;
                var page = new Pagination(
                  response.count,
                  response.page);
                if (!$scope.Pagination) {
                  $scope.Pagination = {};
                }
                $scope.Pagination.Traffic = page;
              });
          };

          $scope.clearAddress = function(){
            $scope.Address = undefined;
            $scope.select.selectTraffic.AddressID = undefined;
          };

          $scope.clearArriveAddress = function(){
            $scope.ArriveAddress = undefined;
            $scope.select.selectTraffic.ArriveAddressID = undefined;
          };

          $scope.chooseTraffic = function(item) {
            if (!$scope.select.Traffic) {
              $scope.select.Traffic = {};
            }
            if (!$scope.select.Traffic.selected) {
              $scope.select.Traffic.selected = [];
            }
            var index = findInnerObjIndex($scope.data, [
              '_id', '$id'
            ], item._id.$id);
            console.log(item);
            var removeIndex = findInnerObjIndex(
              $scope.removeData, ['_id', '$id'],
              item._id.$id);
            var itemData = {
              ForeignKeyID: {
                $id: item._id.$id
              },
              Traffic: item.TrafficType.Name,
              Note: item.Notes,
              TrafficModel: item.TrafficModel,
              Title: item.Title,
              _id: {
                $id: item._id.$id
              },
              TrafficType: item.TrafficType,
              DepartureTime: item.DepartureTime,
              TrafficCompany: item.TrafficCompany,
              ArriveTime: item.ArriveTime,
              Address: item.Address,
              info: item
            };
            if (removeIndex > -1) {
              $scope.data
                .push(($scope.removeData[removeIndex]));
              $scope.removeData = _.without(
                $scope.removeData,
                $scope.removeData[removeIndex]);
            } else {
              if (index < 0) {
                $scope.data.push(itemData);
                $scope.addData.push(itemData);
              }
            }
          };

          $scope.unchooseTrafffic = function(item) {
            var index = findInnerObjIndex($scope.data, [
              '_id', '$id'
            ], item._id.$id);
            $scope.data = _.without($scope.data,
              $scope.data[index]);
            var addIndex = findInnerObjIndex(
              $scope.addData, ['_id', '$id'],
              item._id.$id);
            if (addIndex > -1) {
              $scope.addData = _.without($scope.addData,
                $scope.addData[addIndex]);
            } else {
              $scope.removeData.push(item);
            }
          };

        },
        templateUrl: "/public/angularView/common/components/select_traffic.html?" + Math.random(),
      };
    });

app.directive('addWord', function() {
  return {
    restrict: "ACE",
    transclude: true,
    scope: {
      save: '=save',
      data: '=data',
      cancel: '=cancel'
    },
    templateUrl: "/public/angularView/common/components/add_word.html?" + Math.random(),
  };
});

app
  .directive(
    'selectInsurance',
    function(getInsureClass, Pagination, $filter, _) {
      return {
        restrict: "ACE",
        scope: {
          cancel: "=cancel",
          save: '=save',
          data: '=data',
          removeData: '=removeData',
          addData: '=addData'
        },
        link: function($scope) {

          $scope.changeData = function() {
            if (!$scope.select) {
              $scope.select = {};
            }
            $scope.page = {
              page: 1
            };
            $scope.InsuranceListData = false;
            if (!$scope.InsuranceListData) {
              getInsureClass(function(response) {
                $scope.InsuranceListAll = response;
                $scope.InsuranceListData = angular.copy($scope.InsuranceListAll);
                $scope.InsuranceList = $scope.InsuranceListData.slice(0, 10);
                $scope.data.forEach(function(item) {
                  var select = _.find($scope.InsuranceListData, function(ins) {
                    return ins.INSUNO === item.ProductInsuranceNo;
                  });
                  if (undefined !== select) {
                    select.isSelect = true;
                  }
                });
                $scope.page.pageInfo = new Pagination($scope.InsuranceListData.length, $scope.page.page, 10);
              });
            }
          };

          $scope.$watch('data', function(value) {
            if (value !== undefined) {
              $scope.changeData();
            }else{
              $scope.data = [];
              $scope.changeData();
            }
          }, true);

          $scope.changePage = function(page) {
            $scope.page.page = page;
            var pageNum = 10 * (page - 1);
            $scope.InsuranceList = $scope.InsuranceListData.slice(pageNum, pageNum + 10);
            $scope.page.pageInfo = new Pagination($scope.InsuranceListData.length, $scope.page.page, 10);
          };

          $scope.searchInsurance = function() {
            $scope.InsuranceListData = $filter('filter')($scope.InsuranceListAll, $scope.searchText);
            $scope.InsuranceList = $scope.InsuranceListData.slice(0, 10);
            $scope.page.pageInfo = new Pagination($scope.InsuranceListData.length, $scope.page.page, 10);
          };

          $scope.chooseInsurance = function(item) {
            item.isSelect = true;
            if (!$scope.select.insurance) {
              $scope.select.insurance = {};
            }
            if (!$scope.select.insurance.selected) {
              $scope.select.insurance.selected = [];
            }
            var index = _.findIndex($scope.data, {
              PlatformInsuranceID: String(item.ID)
            });
            var dataItem = {
              "PlatformInsuranceID": String(item.ID),
              "ProductInsuranceName": item.Title,
              "ProductInsuranceNo": item.INSUNO,
              "ProductInsuranceNotes": item.Explain,
              "ProductInsuranceDesc": '',
              "ThirdPartyInsuranceStatus": false,
              "PlatformCompanyID": item.CompanyID,
              "PlatformCompanyName": item.CompanyName
            };
            var removeIndex = _
              .findIndex(
                $scope.removeData, {
                  PlatformInsuranceID: String(item.ID)
                });
            if (removeIndex > -1) {
              $scope.data
                .push(($scope.removeData[removeIndex]));
              $scope.removeData = _.without(
                $scope.removeData,
                $scope.removeData[removeIndex]);
            } else {
              if (index < 0) {
                $scope.data.push(dataItem);
                $scope.addData.push(dataItem);
              }
            }
          };

          $scope.unchooseInsurance = function(item) {
            item.isSelect = false;
            var index = _
              .findIndex(
                $scope.data, {
                  PlatformInsuranceID: String(item.PlatformInsuranceID)
                });
            $scope.data = _.without($scope.data,
              $scope.data[index]);
            var addIndex = _
              .findIndex(
                $scope.addData, {
                  PlatformInsuranceID: String(item.PlatformInsuranceID)
                });
            if (addIndex > -1) {
              $scope.addData = _.without($scope.addData,
                $scope.addData[addIndex]);
            } else {
              $scope.removeData.push(item);
            }

          };

        },
        templateUrl: "/public/angularView/common/components/select_Insurance.html?" + Math.random(),
      };
    });

app.directive('infoBox', function($timeout) {
  return {
    restrict: "ACE",
    scope: {
      info: '=info',
      type: '=type',
      time: '@?time'
    },
    link: function($scope) {
      $scope.showInfo = false;
      if (!$scope.time) {
        $scope.time = 1500;
      }
      var info;
      $scope.$watch('info', function(value) {
        if (value === undefined || value === '') {
          return;
        }
        if ($scope.showInfo) {
          $timeout.cancel(info);
        }
        $scope.showInfo = true;
        info = $timeout(function() {
          $scope.showInfo = false;
          $scope.info = '';
        }, $scope.time);
      });
    },
    templateUrl: "/public/angularView/common/components/info_box.html?" + Math.random(),
  };
});

app.directive('compile', function($compile) {
  // directive factory creates a link function
  return function(scope, element, attrs) {
    scope.$watch(function(scope) {
      // watch the 'compile' expression for changes
      return scope.$eval(attrs.compile);
    }, function(value) {
      // when the 'compile' expression changes
      // assign it into the current DOM
      element.html(value);

      // compile the new DOM and link it to the current
      // scope.
      // NOTE: we only compile .childNodes so that
      // we don't get into infinite loop compiling ourselves
      $compile(element.contents())(scope);
    });
  };
});

app.directive("noResult", function() {
  return {
    restrict: "AE",
    scope: {
      result: '=?result',
      info: '@info'
    },
    link: function($scope) {
      $scope.isShow = false;
      $scope.$watch('result', function() {
        $scope.isShow = false;
        if (angular.isArray($scope.result)) {
          if ($scope.result.length === 0) {
            $scope.isShow = true;
          }
        } else if (angular.isObject($scope.result)) {
          $scope.isShow = angular.equals($scope.result, {});
        } else if ($scope.result === undefined) {
          $scope.isShow = true;
        } else if ($scope.result === '') {
          $scope.isShow = true;
        }
      }, true);
    },
    templateUrl: "/public/angularView/common/components/no_result.html?" + Math.random()
  };
});

app
  .directive(
    'hyAddress',
    function(getAddrList, findInnerObjIndex) {
      return {
        restrict: "ACE",
        scope: {
          countryChangeEvent: '&',
          regionsChangeEvent: '&',
          cityChangeEvent: '&',
          param1: "=param1",
          param2: '=param2',
          param3: '=param3',
          data: '=data'
        },
        link: function($scope) {
          $scope.country = {};
          $scope.region = {};
          $scope.city = {};

          var activate = function() {
            $scope.countries = global.BasicGADDRInfo;
            if ($scope.data) {
              var index = findInnerObjIndex(
                $scope.countries, ["_id", "$id"],
                $scope.data.country);
              $scope.country = $scope.countries[index];
              $scope.getRegions($scope.country);
            } else {
              $scope.data = {};
            }
          };

          // 获取选择国家的省份
          $scope.getRegions = function(country) {
            if (country && country._id.$id !== 0) {
              var contryId = country._id.$id;
              $scope.data.country = contryId;
              $scope.data.countryName = country.Title;
              getAddrList(
                function(response) {
                  $scope.regions = response;
                  $scope.city = {};
                  if ($scope.data) {
                    var index = findInnerObjIndex(
                      $scope.regions, [
                        "_id",
                        "$id"
                      ],
                      $scope.data.region);
                    if (index > -1) {
                      $scope.region = $scope.regions[index];
                      $scope.getCities($scope.region);
                    }
                  }
                }, contryId);
            } else {
              $scope.data = {};
              $scope.city = {};
              $scope.region = {};
              $scope.regions = [];
              $scope.cities = [];
            }
          };

          // 获取选择省份的城市
          $scope.getCities = function(region) {
            if (region) {
              var regionId = region._id.$id;
              $scope.data.region = regionId;
              $scope.data.regionName = region.Title;
              getAddrList(
                function(response) {
                  $scope.cities = response;
                  if ($scope.data) {
                    var index = findInnerObjIndex(
                      $scope.cities, [
                        "_id",
                        "$id"
                      ],
                      $scope.data.city);
                    if (index > -1) {
                      $scope.city = $scope.cities[index];
                    }
                  }
                }, regionId);
            } else {
              $scope.data.region = '';
              $scope.data.regionName = '';
              $scope.cities = [];
            }
          };

          $scope.setCity = function(city) {
            if (city) {
              $scope.data.city = city._id.$id;
              $scope.data.cityName = city.Title;
            } else {
              $scope.data.city = '';
              $scope.data.cityName = '';
            }
          };

          activate();
        },
        templateUrl: "/public/angularView/common/components/select_addresss.html?" + Math.random()
      };
    });

app.directive("fileread", [function() {
  return {
    scope: {
      fileread: "=",
      change: "="
    },
    link: function(scope, element, attributes) {
      element.bind("change", function(changeEvent) {
        scope.$apply(function() {
          scope.change(changeEvent.target.files[0], scope.fileread);
          // or all selected files:
          // scope.fileread = changeEvent.target.files;
        });
      });
    }
  };
}]);

app
  .directive(
    "hySelectTime",
    function() {
      return {
        restrict: 'AE',
        scope: {
          date: '=?date',
          change: '=?change',
          minDate: '=?minDate',
          maxDate: '=?maxDate',
          hasTime: '=?hasTime',
        },
        link: linkFunction,
        controller: controllerFun,
        templateUrl: '/public/angularView/common/components/hy_time_picker.html',
      };

      function linkFunction($scope) {

        var maxYear = 2030;
        var minYear = 2000;

        if (!$scope.date) {
          $scope.date = new Date();
        }

        if ($scope.hasTime === undefined) {
          $scope.hasTime = true;
        }

        if ($scope.maxDate) {
          maxYear = $scope.maxDate.getFullYear();
        } else {
          maxYear = $scope.date.getFullYear() + 10;
        }

        if ($scope.minDate) {
          minYear = $scope.minDate.getFullYear();
        } else {
          minYear = $scope.date.getFullYear() - 50;
        }

        $scope.setMydate = function() {
          $scope.myDate = {
            year: $scope.date.getFullYear(),
            month: $scope.date.getMonth() + 1,
            date: $scope.date.getDate(),
            hour: $scope.date.getHours(),
            minute: $scope.date.getMinutes()
          };
        };

        $scope.day = [];

        $scope.setMaxDay = function() {
          $scope.day = [];
          $scope.maxDay = new Date($scope.myDate.year,
            $scope.myDate.month, 0).getDate();
          for (var d = 1; d <= $scope.maxDay; d++) {
            $scope.day.push({
              value: d,
              text: d + '日'
            });
          }
        };

        $scope.setMydate();
        $scope.setMaxDay();

        $scope.years = [];

        for (var i = minYear; i <= maxYear; i++) {
          $scope.years.push({
            value: i,
            text: i + '年'
          });
        }

        $scope.monthes = [];

        for (var m = 1; m <= 12; m++) {
          $scope.monthes.push({
            value: m,
            text: m + '月'
          });
        }

        $scope.housrs = [];

        for (var h = 0; h <= 23; h++) {
          $scope.housrs.push({
            value: h,
            text: h + '时'
          });
        }

        $scope.minutes = [];

        for (var mm = 0; mm <= 59; mm++) {
          $scope.minutes.push({
            value: mm,
            text: mm + '分'
          });
        }
      }

      function controllerFun($scope) {

        $scope.resetMydate = function() {
          $scope.date = new Date($scope.myDate.year,
            $scope.myDate.month - 1,
            $scope.myDate.date, $scope.myDate.hour,
            $scope.myDate.minute, 0);
          $scope.setMaxDay();
          $scope.setMydate();
          if ($scope.change) {
            $scope.change();
          }
        };

      }
    });

app.directive('excuteDelay', function($timeout) {
  return {
    restrict: "A",
    require: 'ngModel',
    link: function(scope, element, attrs, ngModelCtrl) {
      var timeout, value;
      var delayTime = attrs.delayTime ? attrs.delayTime : 600;

      ngModelCtrl.$viewChangeListeners.push(function(){
        if (ngModelCtrl.$viewValue === value) return;

        if (timeout) {
          $timeout.cancel(timeout);
        }

        value = ngModelCtrl.$viewValue;
        timeout = $timeout(function() {
          scope.$apply(attrs.excuteDelay);
        }, delayTime);
      });
    }
  };
});

app.directive('loadingBar', function($timeout) {
  return {
    restrict: "AE",
    scope: {
      isLoading: '=isLoading',
      loadingInfo: '@?loadingInfo'
    },
    templateUrl: '/public/angularView/common/components/load_bar.html',
    link: function($scope) {

      if ($scope.loadingInfo === undefined) {
        $scope.loadingInfo = '加载中';
      }

      $scope.loadPointCount = 0;

      $scope.$watch('loadPointCount', function(value) {
        if (value !== undefined) {
          $scope.showLoadingInfo = $scope.loadingInfo;
          for (var i = 0; i < $scope.loadPointCount; i++) {
            $scope.showLoadingInfo += '。';
          }
        }
      });

      $scope.$watch('isLoading', function(isLoading) {
        if (isLoading) {
          $scope.loadPointCount = 0;
          $scope.addPoint();
        }
      });

      $scope.addPoint = function() {
        if ($scope.loadPointCount < 10) {
          $scope.loadPointCount++;
        } else {
          $scope.loadPointCount = 0;
        }
        $timeout(function() {
          if ($scope.isLoading) {
            $scope.addPoint();
          }
        }, 500);
      };
    },
  };
});

app.directive('hySubmit', function() {
  return {
    restrict: "EA",
    replace: true,
    scope: {
      isSubmit: '=isSubmit',
      text: '@?text',
      submitText: '@?submitText',
      nolClass: '@?nolClass',
      submitClass: '@?submitClass',
      clickEvent: '=?clickEvent',
      action: '&?'
    },
    templateUrl: '/public/angularView/common/components/hy_submit.html?' + Math.random(),
    link: function($scope) {

      if ($scope.text === undefined) {
        $scope.text = '保 存';
      }

      if ($scope.submitText === undefined) {
        $scope.submitText = '保 存 中';
      }

      if ($scope.nolClass === undefined) {
        $scope.nolClass = 'red_btn';
      }

      if ($scope.submitClass === undefined) {
        $scope.submitClass = 'btn_cancel';
      }

      if ($scope.clickEvent === undefined) {
        $scope.clickEvent = typeof $scope.action=='function'?$scope.action:function(){};
      }

      $scope.event = function() {
        if (!$scope.isSubmit) $scope.clickEvent();
      };
    }
  };
});

app.directive('addTicketPrice', function(Pagination, _, getScenics, $rootScope, getScenicTickets, getAddrList, getAllScenicTypes) {
  return {
    restrict: "ACE",
    scope: {
      save: '=save',
      data: '=data',
      cancel: '=cancel',
      addData: '=addData',
      removeData: '=removeData'
    },
    link: function($scope) {
      $scope.select = {};
      $scope.scopeInfo = {};

      $scope.getChinaRegions = function() {
        $scope.BasicGADDRInfo = global.BasicGADDRInfo;
        $scope.scopeInfo.country = _.find(
          $scope.BasicGADDRInfo,
          function(item) {
            return item.Title == '中国';
          });
        $scope.regions = global.BasicGADDRRegions;
      };

      $scope.getRegions = function(country) {
        if (country) {
          var contryId = country._id.$id;
          getAddrList(function(response) {
            $scope.regions = response;
          }, contryId);
        }
      };

      $scope.getCities = function(region) {
        if (region) {
          getAddrList(function(response) {
            $scope.cities = response;
          }, region._id.$id);
        }
      };

      $scope.getScenicTypes = function() {
        if (!$scope.scenicTypes) {
          getAllScenicTypes(function(response) {
            $scope.scenicTypes = response.list;
          });
        }
      };

      $scope.selectViewspots = function(page) {
        if (!$scope.select.Viewspots) {
          $scope.select.Viewspots = {};
        }
        $scope.select.Viewspots.Page = page;
        var search = {
          Title: $scope.select.Viewspots.Name,
          page: $scope.select.Viewspots.Page,
          limit: $rootScope.embeddedPageLimt
        };
        if ($scope.scopeInfo.country) {
          if ($scope.scopeInfo.region) {
            if ($scope.scopeInfo.city) {
              search.ProductGADDRId = $scope.scopeInfo.city._id.$id;
            } else {
              search.ProductGADDRId = $scope.scopeInfo.region._id.$id;
            }
          } else {
            search.ProductGADDRId = $scope.scopeInfo.country._id.$id;
          }
        }
        if ($scope.scopeInfo.scenicType && $scope.scopeInfo.scenicType._id) {
          search.TypeId = $scope.scopeInfo.scenicType._id.$id;
        }
        getScenics(
          search,
          function(response) {
            $scope.select.Viewspots.List = response.data.list;
            var page = new Pagination(
              response.count,
              response.page);
            if (!$scope.Pagination) {
              $scope.Pagination = {};
            }
            $scope.Pagination.Viewspots = page;
          });
      };

      $scope.getSenicTick = function(item) {
        if (item.showTicketStatus) {
          item.showTicketStatus = false;
          return;
        }
        getScenicTickets(function(data) {
          item.tickets = data;
          item.showTicketStatus = true;
        }, item._id.$id);
      };

      $scope.chooseTicket = function(item, scenic) {
        if (!$scope.select.Viewspots) {
          $scope.select.Viewspots = {};
        }
        var index = _.findIndex($scope.data, {
          ForeignKeyID: item._id.$id
        });
        var dataItem = {
          "ForeignKeyID": {
            $id: item._id.$id
          },
          // "Title": item.Title,
          "Title": scenic.Title + "-" + item.Title,
          "OriginalPrice": item.DefaultPrice,
          "CostPrice": item.CostDefaultPrice,
          "ProductAmount": 1,
          "Notes": ""
        };
        var removeIndex = _.findIndex($scope.removeData, {
          Title: item.Title
        });
        if ($scope.addData && $scope.removeData) {
          if (removeIndex > -1) {
            $scope.data.push(($scope.removeData[removeIndex]));
            $scope.removeData = _.without($scope.removeData, $scope.removeData[removeIndex]);
          } else {
            if (index < 0) {
              $scope.data.push(dataItem);
              $scope.addData.push(dataItem);
            }
          }
        } else {
          if (index < 0) {
            $scope.data.push(dataItem);
          }
        }

      };

      $scope.unchooseTicket = function(item) {
        var index = _.findIndex($scope.data, {
          Title: item.Title
        });
        $scope.data = _.without($scope.data,
          $scope.data[index]);
        if ($scope.addData && $scope.removeData) {
          var addIndex = _
            .findIndex(
              $scope.addData, {
                Title: item.Title
              });
          if (addIndex > -1) {
            $scope.addData = _.without(
              $scope.addData,
              $scope.addData[addIndex]);
          } else {
            $scope.removeData.push(item);
          }
        }
      };

    },
    templateUrl: "/public/angularView/common/components/add_ticket_price.html?" + Math.random(),
  };
});

app.directive('addHotelPrice', function(Pagination, _, $rootScope, getBasicsHotelByNameOrGADDRTitle) {
  return {
    restrict: "ACE",
    scope: {
      save: '=save',
      data: '=data',
      cancel: '=cancel',
      addData: '=addData',
      removeData: '=removeData'
    },
    link: function($scope) {
      $scope.select = {};
      $scope.scopeInfo = {};

      $scope.selectHotel = function(page) {
        if (!$scope.select.Hotel) {
          $scope.select.Hotel = {};
        }
        $scope.select.Hotel.Page = page;
        getBasicsHotelByNameOrGADDRTitle($scope.select.Hotel.Name, $scope.select.Hotel.Page,
          function(response) {
            $scope.select.Hotel.List = response.data;
            var page = new Pagination(response.count, response.page, 5);
            if (!$scope.Pagination) {
              $scope.Pagination = {};
            }
            $scope.Pagination.Hotel = page;
          }
        );
      };

      $scope.chooseHotel = function(item, hotel) {
        if (!$scope.select.Hotel) {
          $scope.select.Hotel = {};
        }
        var pushData = {
          HotelId: {
            $id: hotel._id.$id
          },
          HotelName: hotel.HotelName,
          HotelRoomId: {
            $id: item.ForeignKeyID.$id
          },
          HotelRoomName: item.Title,
          OriginalPrice: item.DefaultPrice,
          BedTypeDes: item.BedTypeDes,
          ChamberDes: item.ChamberDes,
          RoomFacilities: item.RoomFacilities,
        };
        var index = _.find($scope.data, function(temp) {
          return temp.HotelRoomId.$id === item.ForeignKeyID.$id;
        });
        var removeIndex = _.find($scope.removeData, function(temp) {
          return temp.HotelRoomId.$id === item.ForeignKeyID.$id;
        });
        if (removeIndex !== undefined) {
          $scope.data.push(removeIndex);
          $scope.removeData = _.without($scope.removeData, removeIndex);
        } else {
          if (index === undefined) {
            $scope.data.push(pushData);
            $scope.addData.push(pushData);
          }
        }
      };

      $scope.unChooseHotel = function(item) {
        var index = _.find($scope.data, function(temp) {
          return temp.HotelRoomId.$id === item.ForeignKeyID.$id;
        });
        $scope.data = _.without($scope.data, index);
        var addIndex = _.find($scope.addData, function(temp) {
          return temp.HotelRoomId.$id === item.ForeignKeyID.$id;
        });
        if (addIndex !== undefined) {
          $scope.addData = _.without($scope.addData, addIndex);
        } else {
          $scope.removeData.push(item);
        }
      };

      $scope.showHotelRoom = function(hotel) {
        hotel.showHotelStatus = !hotel.showHotelStatus;
        console.log(hotel);
      };

    },
    templateUrl: "/public/angularView/common/components/add_hotel_price.html?" + Math.random(),
  };
});


app.directive("addrSelectBar", function(getAddrData) {
  return {
    restrict: "EA",
    scope: {
      addrId: "=",
      addrValue: "=",
      inputClass: "@"
    },
    replace: true,
    templateUrl: "/public/angularView/system/basicDataAddrSelectBar.html?" + Math.random(),
    link: function(scope, ele, attr) {
      scope.list = [];
      scope.step = 0;
      var loading = false,
      addrArr = new Array(4),
      addrCache = new Array(4);

      getAddrData(function(response) {
        addrCache[0] = response;
        scope.list = response;
      }, "");

      angular.element("body").on("click", function(e) {
        var t = e.target;

        while (t && t != this) {
          if (t == ele[0]) return;
          t = t.parentNode;
        }

        scope.step = 0;
      });

      ele.on("click", function(e) {
        if (scope.step) scope.step = 0;
        else {
          scope.step = 1;
          scope.list = addrCache[0];
        }
      });

      angular.element(ele[0].querySelector('.select-panel')).on("click", function(e) {
        e.stopPropagation();
        if (loading) return;
        var t = e.target;
        scope.addrId = t.getAttribute("d");
        addrArr[scope.step - 1] = t.getAttribute("n");
        scope.addrValue = addrArr.slice(0, scope.step).join(" / ");

        scope.step += 1;
        if (scope.step > 4) {
          scope.step = 0;
          scope.$digest();
          return;
        }

        loading = true;
        getAddrData(function(response) {
          scope.list = response;
          addrCache[scope.step - 1] = scope.list;
          if (scope.list.length === 0) scope.step = 0;
          loading = false;
        }, t.getAttribute("d"));
      });

      scope.tab = function(i, e) {
        e.stopPropagation();
        if (i == scope.step) return;
        scope.step = i;
        scope.list = addrCache[scope.step - 1];
      };
    }
  };
})
.directive("validate", function() {
  return {
    restrict: "A",
    require: ["ngModel", "^form"],
    link: function(scope, ele, attr, ctrl) {
      var reg = new RegExp(attr.reg);

      scope.$watch(ctrl[1].$name + '.$submitted', function(value) {
        if (value) {
          if (ctrl[0].$error.validate) {
            ele.addClass('error_input');
          } else {
            ele.removeClass('error_input');
          }
        }
      });

      ctrl[0].$validators.validate = function(modelValue, viewValue) {
        if (reg.test(viewValue)) {
          ele.removeClass('error_input');
          return true;
        } else {
          if(ctrl[0].$touched) ele.addClass('error_input');
          return false;
        }
      };
    }
  };
})
.directive('inputTime', function() {
  return {
    scope: {
      time: '=?'
    },
    replace: true,
    template: '<input type="time">',
    link: function(scope, ele, attr) {
      if (!scope.time) scope.time = "00:00";

      ele[0].value = scope.time.replace(/\s*(\d+)\s*(?:\:|\：)\s*(\d+)\s*/, function(str, str1, str2) {
        return ('00' + str1).slice(-2) + ':' + ('00' + str2).slice(-2);
      });

      ele.bind('change', function() {
        scope.time = this.value;
        scope.$apply();
      });
    }
  };
})
.directive('hyRequired',function(){
  return {
    restrict: "A",
    require: ['ngModel','^form'],
    link: function(scope, ele, attr, ctrl) {
      ctrl[0].$validators.hyRequired = function(modelValue, viewValue) {
        scope.$watch(ctrl[1].$name + '.$submitted', function(value) {
          if (value) {
            if (ctrl[0].$error.hyRequired) {
              ele.addClass('error_input');
            } else {
              ele.removeClass('error_input');
            }
          }
        });

        if (modelValue) {
          ele.removeClass('error_input');
          return true;
        } else {
          if(ctrl[0].$touched) ele.addClass('error_input');
          return false;
        }
      };
    }
  };
})
.directive('hyAutoComplete', function($parse, $filter){
  var template = '<div class="drop-panel"  auto-complete source="source" list-formatter="listFormatter" value-changed="valueChanged(value)">' +
  '<a href="#" style="position: absolute;top:0;right:0;padding:0 8px;line-height:32px;font-size:14px;" ng-click="clearData($event);" ng-if="viewValue">×</a>' +
  '<input class="form-control" ng-model="viewValue" placeholder="{{placeholder}}" type="text">' +
  '</div>';

  return {
    restrict: "E",
    template: template,
    scope: true,
    link: function(scope, elm, attr) {
      var options = attr.options,
          match = /^(?:([\s\S]+?)\s+as\s+)?([\s\S]+?)(?:\s+for\s+)([\s\S]+?)(?:\s+in\s+)([\s\S]+?)$/.exec(options),
          modelGetter = $parse(attr.model),
          modelSetter = modelGetter.assign,
          valueChanged = null;

      if(attr.valueChanged){
        valueChanged = $parse(attr.valueChanged)(scope);
      }else if(attr.change){
        valueChanged = function(){
          $parse(attr.change)(scope);
        };
      }

      scope.placeholder = attr.placeholder;
      scope.source = [];

      var modelUnwatch = scope.$watch(attr.model, function(model){
        if(model && scope.source){
          var ctx = {};

          if(match[1]){
            $parse(match[1]).assign(ctx, model);
            ctx[match[3]] = $filter('filter')(scope.source, ctx[match[3]])[0];
          }
          else {
            ctx[match[3]] = model;
          }
          scope.viewValue = $parse(match[2])(ctx);
          modelUnwatch();
        }
      });

      scope.$watch(match[4], function(value){
        if(value) scope.source = value;
      });

      scope.listFormatter = function(data) {
        var ctx = {};
        ctx[match[3]] = data;
        return $parse(match[2])(ctx);
      };

      scope.valueChanged = function(data) {
        var ctx = {};
        ctx[match[3]] = data;

        if (match[1]) {
          var ctxValue = $parse(match[1])(ctx);
          modelSetter(scope, ctxValue);
        } else {
          modelSetter(scope, data);
        }
        if(valueChanged) valueChanged();
      };

      scope.clearData = function(e) {
        e.stopPropagation();
        scope.viewValue = '';
        scope.valueChanged('');
      };
    }
  };
})
.directive('tinyHtml',function($rootScope){
  var template = '';
  return {
    restrict: "E",
    template: template,
    scope:{
      id:"=",
      type:"="
    },
    link:function(){
      if($scope.type == 1){
        template =  '<div id="{{mainSwitchVal.id}}" class="fadeIn" ng-style="mainData.MainPaddingStyle">';
        template += '<div ng-include src="mainSwitchVal.templateUrl"></div>';
        template += '</div>';
      }
    }
  };
})
.directive('hyBindHtml', function($sce){
  return {
    restrict: "A",
    scope: {
      html: "=hyBindHtml"
    },
    link: function(scope, elm, attr){
      scope.html = scope.html.replace(/ng\-\S+\s*\=\s*([\'\"])[\s\S]*?(?!\\)\1/g, '');
      scope.html = scope.html.replace(/ng-scope|ng-isolate-scope|ng-binding/g, '');
      elm.html(scope.html);
    }
  };
})
.directive('hyHistoryMode', function($timeout){
  return {
    restrict: 'A',
    link: function(scope, elm, attr){
      var container = angular.element(document.getElementById('container'));
      var overview = angular.element(document.getElementById('historyScreen'));
      var active = false;

      if(location.hash == "#/overview") location.hash = "";

      angular.element(window).bind('hashchange', toggle);

      angular.element(window).bind('keyup', function(e){
        if(e.shiftKey || e.keyCode != 192) return;
        if(active){
          location.hash = "#/container";
        }else {
          location.hash = "#/overview";
        }
      });

      function off(){
        location.hash = "#/container";
      }

      function toggle(){
        if(location.hash == "#/overview"){
          active = true;
          document.body.classList.add('active');
          container.bind('click', off);

          container.css({
            transform: 'scale(0.6) translate(120%, 0) rotateY(18deg)'
          });

          overview.css({
            left: '50%',
            transform: 'translate(-50%, -50%) scale(1)'
          });
        }else if(location.hash == "#/container"){
          active = false;
          $timeout(function(){
            document.body.classList.remove('active');
          }, 400);
          container.unbind('click', off);

          container.attr('style', '');
          overview.attr('style', '');
        }
      }
    }
  };
});
app.directive("teamDetailPop", function(getProductTeamDetail, ngDialog) {
	return {
		restrict: "AE",
		scope: {
			TeamID: '=teamId',
			TeamNo: '=teamNo'
		},
		link: linkFun,
		controller: controllerFun,
		templateUrl: "/public/angularView/common/components/teamdetail_dialog/team_info_pop.html?" + Math.random(),
	};

	function linkFun($scope) {

	}

	function controllerFun($scope) {
		$scope.getTeamDetail = function() {
			ngDialog.open({
				id: 'fOrderThreeSingleList',
				className: 'big',
				template: '/public/angularView/common/components/teamdetail_dialog/team_detail_info.html?' + Math.random(),
				data: {
					TeamID: $scope.TeamID
				},
				controller: function($scope, getCensusDetail) {
					$scope.showDetail = false;
					var data = {};
			    getProductTeamDetail($scope.ngDialogData.TeamID, function(detailInfo){
			      data = detailInfo;
			      data.InsureTotalMoney = 0;
			      data.InsureInfo.forEach(function(item){
			        data.InsureTotalMoney += item.TotalMoney;
			      });
			      data.isNeedFullGuide = 0;
			      data.isNeedSendGuide = 0;
						$scope.showDetail = true;
						$scope.detail = data;
			    });
				}
			});
		};
	}
});
