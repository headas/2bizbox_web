/**
 * 
 */
angular.module("HY").controller("ICOrderRecordController",ICOrderRecordController);
function ICOrderRecordController(){
	var vm=this;
	vm.addRecord=addRecord;
	vm.deleteRecord=deleteRecord;
	function addRecord(){
		
	}
	
	function deleteRecord(){
		
	}
}/**
 *
 */
angular.module("HY").controller("ICOrderProductRecommendationController", ICOrderProductRecommendationController);

function ICOrderProductRecommendationController(getIntroducedHistoryFromAPI, confirmIntroducedToAPI, getProductPlanFromAPI, getADestinationFromAPI, getAHelpFromAPI, getCommonHelpListClassFromAPI,
  getIntroducedHistoryFromAPI, getCommonHelpListFromAPI, getPlanDetailByPlanID, $scope, $rootScope, $filter) {
  var vm = this;
  vm.template = {};
  // 线路信息部分//////////////////////////////////////
  vm.getProductPlans = getProductPlans;

  // 常见问题列表部分//////////////////////////////////////
  vm.getCommonHelpList = getCommonHelpList;
  vm.getCommonHelpSubList = getCommonHelpSubList;
  vm.showCommonHelpAnswer = showCommonHelpAnswer;

  // 解答部分//////////////////////////////////////
  vm.confirmIntroduced = confirmIntroduced;
  vm.introducedHistory = introducedHistory;

  // 下单部分//////////////////////////////////////
  vm.makeOrder = makeOrder;
  vm.makeTemperOrder = makeTemperOrder;

  // //////////////////////////////////////////
  // 运行
  // //////////////////////////////////////////
  activate();

  // //////////////////////////////////////////
  // 方法
  // //////////////////////////////////////////
  function activate() {
    if ($scope.detailData.ProductGADDR) {
      config();
      //getPlan();
      //getDestination();
      getProductPlans();
      introducedHistory();
      buttonPermissionConfig();
    }
  }
  // 配置部分//////////////////////////////////////
  function config() {
    templateConfig();
  }

  function buttonPermissionConfig() {
    switch ($rootScope.currentICProductType) {
      case 12: // 自由行
        $scope.detailData.canTmpOrder = true;
        $scope.detailData.canOrder = true;
        break;
      case 1: // 组团游
        $scope.detailData.canTmpOrder = true;
        $scope.detailData.canOrder = true;
        break;
      case 18: // 邮轮游
        $scope.detailData.canTmpOrder = true;
        $scope.detailData.canOrder = true;
        break;
      case 17: // 定制游
        $scope.detailData.canTmpOrder = false;
        $scope.detailData.canOrder = true;
        break;
      case 13: // 自驾游
        $scope.detailData.canTmpOrder = false;
        $scope.detailData.canOrder = true;
        break;
      default:
        break;
    }
  }

  function getDestination() {
    var data = {
      ID: $scope.detailData.ProductGADDR.ForeignKeyID.$id
    };
    getADestinationFromAPI(data, function(response) {
      $scope.detailData.MainADDR = response.data;
    });
  }

  function getPlan() {
    $scope.detailData.PriceTypesLoading = true;
    $scope.detailData.PriceTypesEmpty = false;
    getPlanDetailByPlanID({
      id: $rootScope.currentPlanID
    }, function(response) {
      $scope.detailData.PriceTypesLoading = false;
      if (response.code >= 700 && response.code < 800) {
        if (response.data.ProductPlanPrice_isDefault0.length > 0) {
          $scope.detailData.PriceTypes = response.data.ProductPlanPrice_isDefault0;
          $scope.detailData.ProductPlan = response.data;
        } else {
          $scope.detailData.PriceTypesEmpty = true;
        }
      }
    });
  }

  function templateConfig() {
    var baseUrl = "/public/angularView/intentionCustomer/ICOrderProductRecommendation/";
    vm.template.ProductInfo = baseUrl + "ICOPRProductInfo.html";
    vm.template.Answers = baseUrl + "ICOPRAnswers.html";
  }
  // 线路信息部分//////////////////////////////////////
  function getProductPlans() {
    var data = {};
    data.ProductID = $scope.detailData._id.$id;
    data.page = 1;
    data.limit = 50;
    getProductPlanFromAPI(data, function(response) {
      if (response.code >= 700 && response.code < 800) {
        $scope.detailData.planList = response.data.list;
      }
    });
  }

  // 常见问题列表部分//////////////////////////////////////
  function getCommonHelpList() {
    getCommonHelpListFromAPI(function(response) {
      $scope.detailData.help = response.data;
    });
  }

  function getCommonHelpSubList() {

  }

  function showCommonHelpAnswer() {
    // getAHelpFromAPI(cid,function(response){
    // console.log(response);
    // });
  }

  // 解答部分//////////////////////////////////////

  function confirmIntroduced(flag) {
    var data = {};
    data.productID = $scope.detailData._id.$id;
    data.productTypeID = addZeroToObjectID(global.IntentionCustomer.currentICProductType + "");
    data.recordID = $rootScope.IntentionCustomer.CurrentIntentionOrder._id;
    data.solutionType = $scope.detailData.currentSolutionType;
    data.solutionID = $scope.detailData.currentSolutionID;
    data.solutionState = flag;

    if ($scope.detailData.currentSolutionType == 2) {
      data.gaddrID = $scope.detailData.ProductGADDR.ForeignKeyID.$id;
    }

    confirmIntroducedToAPI(data, function(response) {
      console.log(response);
    });
  }

  function introducedHistory() {
    var data = {};
    data.productID = $scope.detailData._id.$id;
    data.productTypeID = addZeroToObjectID(global.IntentionCustomer.currentICProductType + "");
    data.recordID = $rootScope.IntentionCustomer.CurrentIntentionOrder._id;
    $scope.detailData.helpHistory = {};
    getIntroducedHistoryFromAPI(data, function(response) {
      if (response.data.length) {
        $scope.detailData.help = {};
        response.data[0].SolutionInfo.forEach(function(item) {
          $scope.detailData.helpHistory[item.ForeignKeyID] = item.SolutionState;
        });
      }
      console.log($scope.detailData.helpHistory);
    });
  }
  // 下单部分//////////////////////////////////////
  function makeOrder(productType) {
    console.log(productType);
    if (productType == undefined) {
      productType = $rootScope.currentICProductType;
    }
    orderProduct(2, productType);
  }

  function orderProduct(orderType) {
    var data = {};
    var ProductType = global.IntentionCustomer.currentICProductType;
    data.IntentOrderID = global.IntentionCustomer.CurrentIntentionOrder._id;
    data.customerID = global.IntentionCustomer.CurrentIntentionOrder.CustomerInfo.ID;
    data.ProductId = $scope.detailData._id.$id;
    data.PlanId = $rootScope.currentPlanID;
    data.adultCount = 0;
    data.childCount = 0;
    data.babyCount = 0;
    data.orderType = orderType;
    data.mode = "order"
    data.tickets = [];
    var query = "?a=1";
    angular.forEach(data, function(value, key) {
      query += "&" + key + "=" + value;
    });
    var link = getLink(ProductType) + query;
    $scope.showSubHead("返回" + global.IntentionCustomer.CurrentIntentionOrder.CustomerInfo.Name + "的意向订单产品推荐", $scope.detailSwitchVal);
    $scope.fetch(link, false);
    $scope.openItem();

    function getLink(productType) {
      switch (productType) {
        case 12:
          return "productOrder/POFreetour/freetourOrder"; // 自由行
        case 1:
          return "productOrder/POteamtour/teamtourOrder"; // 组团游
        case 18:
          return "productOrder/POcruise/cruiseOrder"; // 邮轮游
        case 17:
          return "productOrder/PODiscussion/discussionOrderFreetour"; // 定制游
        case 13:
          return "productOrder/PODrivetour/drivetourOrder"; // 自驾游
        case 99: // 签证
          return "productOrder/POVisa/visaOrder";
        case 98: // 门票
          return "productOrder/POTicket/ticketOrder";
        default:
          return 0;
      }
    }

  }

  function makeTemperOrder(productType) {
    if (productType == undefined) {
      productType = $rootScope.currentICProductType;
    }
    orderProduct(1, productType);
  }

}
/**
 * Order Editor Controller
 */

angular.module("HY").controller("ICOrderEditorController", ICOrderEditorController);

function ICOrderEditorController(addRefreshPageByID, getVisaListFromAPI, getBasicsScenicList, finalConfirmAnOrder, changeInformationStatus, getProductRecommendation, confirmServerOrder, confirmSalesOrder,
  bindPhoneToAnOrder, getCustomerLevels, saveAMember, checkIfMemberByPhone, getMessageModels, sendMessageLogToICAPI, sendIntentionCustomerMessage, messageList, workAssessment, getValidType,
  addTrackRecord, getRecordListOfAnOrder, deleteIntentionOrder, showWarningBox, transferAnOrder, getCustomerServerList, getSalesByTagID, getUserByID, getMemberByID, getOrderByOrderID, $scope,
  $rootScope, $filter, $timeout,sendICGTDMessage,bindRemarksTel,manualUReviewState) {
  var vm = this;
  // Data
  vm.template = {};
  vm.detailTipInfo = {
    text: "",
    type: "info"
  };
  vm.baby = $scope.detailData._id;
  vm.papa = $rootScope.detailData._id;
  vm.addLink = "intentionCustomer/ICOrder/edit"; // 添加意向客户的接口
  // Variables to control views
  vm.recverID=undefined;

  vm.editor = {
    addMember: {
      GenderTypeID: 1
    },
    transfer: {},
    transferState: {
      canTransferServer: true,
      canTransferSale: true
    },
    assessment: {
      validState: 1
    },
    messageSender: {
      OperationTypeID: 8
    }
  };
  if ($scope.detailData.Review) {
    vm.signed = $scope.detailData.Review.Review_State == "000000000000000000000007";
  }

  // view functions
  vm.showLog = showLog; // 显示日志
  vm.showLogMessage = showLogMessage; // 显示日志中的短信
  vm.showLogTracker = showLogTracker; // 显示日志中的跟踪日志
  vm.showLogPhone = showLogPhone; // 显示日志中的通话记录
  vm.showOrderDetail = showOrderDetail; // 查看订单详细
  vm.IntentionCustomer = global.IntentionCustomer;
  vm.refreshDetailPage = refreshDetailPage;
  vm.refreshListPage = refreshListPage;
  // interaction functions
  vm.getRecordList = getRecordList; // 获取回访记录列表
  vm.getMessageList = getMessageList; // 获取手机短信列表
  vm.saveRecord = saveRecord; // 保存回访记录
  vm.bindCellphone = bindCellphone; // 绑定手机
  vm.bindRemarksTelFun=bindRemarksTelFun;//添加备注号码
  vm.saveAssessment = saveAssessment; // 保存评价
  vm.modifyAssessment = modifyAssessment; // 保存评价
  vm.sendMessage = sendMessage; // 发送短信
  vm.saveTracker = saveTracker; // 保存跟踪
  vm.deleteOrder = deleteOrder; // 删除订单
  vm.saveTransfer = saveTransfer; // 保存转移
  //vm.loadCustomerInfo = loadCustomerInfo; // 获取客户的信息
  vm.getOrder = getOrder; // 获取一个订单
  vm.manualUReviewStateFun=manualUReviewStateFun;//手动修改跟踪状态
  vm.getUserNameByID = getUserNameByID;
  vm.editMode = editMode;
  vm.initialName = $scope.detailData.CustomerInfo.Name;
  vm.getServersAndSales = getServersAndSales;
  vm.changeModelType = changeModelType;
  vm.changeSalesName = changeSalesName;
  vm.changeServersName = changeServersName;
  vm.changeValidTypeName = changeValidTypeName;
  vm.saveACustomerMember = saveACustomerMember;
  vm.checkIfMember = checkIfMember;
  vm.confirmOrder = confirmOrder;
  $scope.detailData.isMember = false;
  vm.productFilter = initialProductFilter();
  vm.getRecommendProduct = getRecommendProduct;
  vm.lineDetail = lineDetail;
  vm.confirmTransfer = confirmTransfer;
  vm.refuseTransfer = refuseTransfer;
  vm.makeOrder = makeOrder;
  vm.activate = activate;

  activate();

  function activate() {
    config();
    //loadCustomerInfo();
    getBasicData();
    if ($rootScope.listType == "orderFollow") {
      getTrackLog();
    }
    console.log('%cvm.productFilter', 'background:red;color:white;padding:2px 5px;', vm.productFilter);
    if ($rootScope.ICSubType == 19) {//客服
      vm.recverID=$scope.detailData.UserInfo.ID;
    } else if ($rootScope.ICSubType == 20) {//私顾
      vm.recverID=$scope.detailData.Sales.ID;
    }
  }

  function makeOrder(productType, productID) {
    orderProduct(2, productType, productID);
  }

  function orderProduct(orderType, productType, productID) {
    var data = {};
    var ProductType = productType;
    data.customerID = $scope.detailData.CustomerInfo.ID;
    data.IntentOrderID = $scope.detailData._id;
    data.ProductId = productID;
    data.orderType = orderType;
    data.ProductType = orderType;
    data.tickets = '{"tickets":[]}';
    var query = "?a=1";
    angular.forEach(data, function(value, key) {
      query += "&" + key + "=" + value;
    });
    var link = getLink(ProductType) + query;
    console.log(link);
    $scope.showSubHead("返回" + $scope.detailData.CustomerInfo.Name + "的意向订单产品推荐", $scope.detailSwitchVal);
    $scope.fetch(link, false);
    $scope.openItem();

    function getLink(productType) {
      //console.log(productType);
      switch (productType) {
        case 12:
          return "productOrder/POFreetour/freetourOrder"; // 自由行
        case 1:
          return "productOrder/POteamtour/teamtourOrder"; // 组团游
        case 18:
          return "productOrder/POcruise/cruiseOrder"; // 邮轮游
        case 17:
          return "productOrder/PODiscussion/discussionOrderFreetour"; // 定制游
        case 13:
          return "productOrder/PODrivetour/drivetourOrder"; // 自驾游
        case 99: // 签证
          return "productOrder/POVisa/visaOrder";
        case 98: // 门票
          return "productOrder/POTicket/ticketOrder";
        default:
          return 0;
      }
    }

  }

  function refreshDetailPage() {
    addRefreshPageByID($rootScope[switchType[2]].id);
    $scope.fetch("intentionCustomer/ICOrder/detail?recordID=" + $scope.detailData._id);
  }

  function refreshListPage() {
    addRefreshPageByID($rootScope[switchType[1]].id);
    switch ($rootScope.listType) {
      case "addedCustomers":
        $scope.fetch("intentionCustomer/ICOrderAdded/list" );
        break;
      case "order":
        $scope.fetch("intentionCustomer/ICOrder/list" );
        break;
      case "orderFollow":
        $scope.fetch("intentionCustomer/ICOrderFollow/list");
      case "orderConfirmation":
        $scope.fetch("intentionCustomer/ICConfirmOrder/list" );
      default:
        break;
    }
  }

  function lineDetail(ProductID, PlanID) {
    $rootScope.currentPlanID = PlanID;
    $rootScope.IntentionCustomer.CurrentIntentionOrder = $scope.detailData;
    global.IntentionCustomer.CurrentIntentionOrder = {};
    global.IntentionCustomer.currentICProductType = changeToProductAPI(vm.productFilter.ProductType);
    $rootScope.currentICProductType = changeToProductAPI(vm.productFilter.ProductType);
    angular.copy($scope.detailData, global.IntentionCustomer.CurrentIntentionOrder);
    $scope.showSubHead("返回" + $scope.detailData.CustomerInfo.Name + "的意向订单", $scope.detailSwitchVal);
    $scope.fetch("intentionCustomer/ICOrder/lineDetail?id=" + ProductID + "&type=" + changeToProductAPI(vm.productFilter.ProductType) + "&planID=" + PlanID);
    $scope.openItem();
  }

  function initialProductFilter() {
    var data = {}
    if ($scope.detailData.Record_Type == 1) {
      data = {
        TravelType: $scope.detailData.ProductAreaType_ID,
        StationId: $scope.detailData.SDID,
        onlyIntentionDstn: true,
        ProductType: $scope.detailData.LineType_ID,
        StartTime: $filter("date")($scope.detailData.Play_StartTime, "yyyy-MM-dd"),
        iPageIndex: 1,
        iPageSize: 50
      };
    } else if ($scope.detailData.Record_Type == 2) {
      data = {
        ProductType: 98,
        iPageIndex: 1,
        iPageSize: 50
      }
    } else if ($scope.detailData.Record_Type == 3) {
      data = {
        ProductType: 99,
        iPageIndex: 1,
        iPageSize: 50
      }
    }
    if (!$rootScope.ICLastProductRecommendationFilter) {
      vm.productFilter = data;
    } else {
      vm.productFilter = $rootScope.ICLastProductRecommendationFilter;
    }

    return data;
  }

  function getTrackLog() {

  }

  function getRecommendProduct(keyEvent) {
    if (keyEvent) {
      if (keyEvent.which !== 13) {
        return;
      }
    }
    $rootScope.ICLastProductRecommendationFilter = _.clone(vm.productFilter);
    $scope.detailData.productRecommedListLoading = true;
    $scope.detailData.productRecommedListEmpty = false;
    $scope.detailData.productRecommedList = [];
    switch ($scope.detailData.Record_Type) {
      case 2:
        getVisaProduct();
        break;
      case 1:
        getLineProduct();
        break;
      case 3:
        getTicketProduct();
        break;
      default:
        break;
    }

    function getTicketProduct() {
      var data = _.clone(vm.productFilter);
      data.GaddrId = $scope.detailData.DestinationInfo.MainID;
      getBasicsScenicList(data, function(response) {
        ////console.log(response);
        $scope.detailData.productRecommedListLoading = false;
        if (response.count > 0) {
          $scope.detailData.productRecommedList = response.list;
        } else {
          $scope.detailData.productRecommedListEmpty = true;
        }

      });
    }

    function getLineProduct() {
      var data = _.clone(vm.productFilter);
      if (vm.productFilter.onlyIntentionDstn) {
        data.GaddrId = _.pluck($scope.detailData.DestinationInfo.Destination, "DestinationID").join(",");
      }
      if (data.SearchInfo) {
        delete data.GaddrId;
      }
      data.StartTime = $filter("date")(data.StartTime, "yyyy-MM-dd");
      data.ProductType = changeToProductAPI(data.ProductType)
      getProductRecommendation(data, function(response) {
        //console.log(response);
        $scope.detailData.productRecommedListLoading = false;
        if (response.code >= 700 && response.code < 800) {
          if (response.data.count > 0) {
            $scope.detailData.productRecommedList = response.data.list;
          } else {
            $scope.detailData.productRecommedListEmpty = true;
          }
        }
      });
    }

    function getVisaProduct() {
      var data = {};
      if (vm.productFilter.SearchInfo && vm.productFilter.SearchInfo != "") {
        data.Title = vm.productFilter.SearchInfo;
      } else {
        //data.Title = $scope.detailData.DestinationInfo.MainName;
        data.VisaGADDRID = $scope.detailData.DestinationInfo.MainID;
      }

      data.VisaTypeID = "000000000000000000000001";
      data.page = 1;
      data.limit = 50;
      getVisaListFromAPI(data, function(response) {
        ////console.log(response);
        $scope.detailData.productRecommedListLoading = false;
        if (response.code >= 700 && response.code < 800) {
          if (response.count > 0) {
            $scope.detailData.productRecommedList = response.data.list;
          } else {
            $scope.detailData.productRecommedListEmpty = true;
          }
        }
      });
    }

  }

  function changeToProductAPI(oType) {
    switch (oType) {
      case 1:
        return 12; // 自由行
      case 2:
        return 1; // 组团游
      case 3:
        return 18; // 邮轮游
      case 4:
        return 17; // 定制游
      case 5:
        return 13; // 自驾游
      default:
        return 0;
    }
  }

  function confirmOrder(orderID) {
    ////console.log($scope.detailData);
    //console.log("认领");

    if (judgeMeAsAServer()) {

      confirmServerOrder({
        RecordID: orderID
      }, changeServerScope);
    } else if (judgeMeAsASale()|| judegeMeAsAAllSale()) {
      confirmSalesOrder({
        OORDID:$scope.detailData.OORDID,
        RecordID: orderID,
        ReviewState:$scope.detailData.Review.Review_State
      }, changeSaleScope);
    }

    function changeSaleScope(response) {
      if (response.code == 700) {
        vm.detailTipInfo.text = response.messages;
        vm.detailTipInfo.type = "success";
        $scope.detailData.Sales.Name = $rootScope.userinfo.FullName;
        $scope.detailData.Sales.ID = $rootScope.userinfo._id.$id;

        var listItemIndex = _.findIndex($scope.mainData.list, function(item) {
          return item.orderID == orderID;
        });
        if (listItemIndex > -1) {
          $scope.mainData.list[listItemIndex].customerSale = $rootScope.userinfo.FullName;
          $scope.mainData.list[listItemIndex].confirmed = true;
        }
        buttonPermissionConfig();
        var chineseHimGender = $rootScope.userinfo.Sex ? "他" : "她";
        vm.editor.messageSender.OperationNotes = "尊敬的" + $scope.detailData.CustomerInfo.Name + $scope.detailData.CustomerInfo.GenderType + "：您好！爱飞扬旅游网为您分配了一位您的私人旅游顾问--" + $rootScope.userinfo.FullName + ",电话:0574-" + $rootScope.userinfo.OfficeTel + "，手机:" + $rootScope.userinfo.TelPhone + "，稍后" + chineseHimGender + "将致电于您,从现在起直至旅行结束，" + chineseHimGender + "将全程为您服务，谢谢！"
        sendMessage();
      }
    }

    function changeServerScope(response) {
      if (response.code == 700) {
        vm.detailTipInfo.text = response.messages;
        vm.detailTipInfo.type = "success";
        $scope.detailData.AddType = 1;
        $scope.detailData.addType = 1;
        $scope.detailData.Review = {
          Review_State: "000000000000000000000001",
          Review_StateName: "意向客户"
        };
        if ($rootScope.IntentionCustomerEditorData) {
          $rootScope.IntentionCustomerEditorData.addType = 1;
          $rootScope.IntentionCustomerEditorData.AddType = 1;
        }
        $scope.detailData.UserInfo.Name = $rootScope.userinfo.FullName;
        $scope.detailData.UserInfo.ID = $rootScope.userinfo._id.$id;
        $scope.detailData.UserInfo.ClaimTime = new Date();

        var listItemIndex = _.findIndex($scope.mainData.list, function(item) {
          return item.orderID == orderID;
        });
        if (listItemIndex > -1) {
          $scope.mainData.list[listItemIndex].customerServer = $rootScope.userinfo.FullName;
          $scope.mainData.list[listItemIndex].confirmed = true;
        }

        buttonPermissionConfig();
        vm.editMode($scope.detailData.CustomerInfo.Name, $scope.detailSwitchVal, $scope.detailData);
      }
    }
  }

  function generateInputData(order) {
    var obj = {
      recordType: order.Record_Type,
      productAreaTypeID: order.ProductAreaType_ID,
      lineTypeID: order.LineType_ID,
      DestinationIDs: order.DestinationIDs,
      stationID: order.SDID
    };
    return obj;
  }

  function sendNotice(response) {
    if (response.code == 700) {
      var salesUserList = response.data;
      angular.forEach(salesUserList, function(user) {
        //调用factory进行发送通知
        ////console.log(user._id);
        var sendData = {
          sender: $rootScope.userinfo._id.$id,
          recver: user._id,
          title: '新的意向客户',
          content: "有新的意向客户可以认领",
          type: 6,
          subType: 29,
          messageType: 4
        };
        $rootScope.SocketConnectIO.sendMessage('sendRemind', sendData);
      });
    }

  }
  /**
   * 检查是否是会员
   */
  function checkIfMember() {
    var cellphone = vm.editor.addMember.CustomerMobile;
    if (!(/^1[3|4|5|7|8]\d{9}$/.test(cellphone))) {
      $scope.detailData.CustomerInfo.Name = vm.initialName;
      $scope.detailData.isMember = false;
      $scope.detailData.CustomerInfo.GenderType = undefined;
      $scope.detailData.CustomerInfo.MemberType = "非会员";
      return;
    }
    checkIfMemberByPhone({
      TelPhone: cellphone
    }, function(response) {
      if (response.count == 0) { // 不是会员 //////
        $scope.detailData.isMember = false;
        $scope.detailData.CustomerInfo.GenderType = undefined;
        $scope.detailData.CustomerInfo.MemberType = "非会员";
      } else { // 是会员 ///////
        $scope.detailData.isMember = true;
        loadDataToPanel(response.list[0]);
      }
    });

    function loadDataToPanel(response) {
      if (response.CustomerName) {
        $scope.detailData.CustomerInfo.GenderType = response.Enlarge.GenderTypeID == 1 ? "先生" : "女士";
        $scope.detailData.CustomerInfo.MemberType = response.Enlarge.CustomerLevelID.$id;
      } else {
        $scope.detailData.CustomerInfo.GenderType = "非会员";
        $scope.detailData.CustomerInfo.MemberType = "非会员";
      }

    }
  }
  /**
   * 绑定手机
   */
  function bindCellphone(isMember) {
    if (isMember) {
      bindToAPI();
    } else {
      saveACustomerMember(bindToAPI);
    }

    function bindToAPI() {
      var data = {
        RecordID: $scope.detailData._id,
        CustomerMobile: String(vm.editor.addMember.CustomerMobile)
      };
      bindPhoneToAnOrder(data, function(response) {
        vm.detailTipInfo.text = "已绑定手机";
        vm.detailTipInfo.type = "success";
        $scope.detailData.CustomerInfo.MT = vm.editor.addMember.CustomerMobile;
      });
    }
  }

  /*绑定备注号码*/
  function bindRemarksTelFun(){
    console.log(vm.editor.addMember.Record_TelContent);
    var data={
      RecordID:$scope.detailData._id,
      RemarksTel:String(vm.editor.addMember.Record_TelContent)
    };
    bindRemarksTel(data,function(response){
      if (response.code >= 700 && response.code < 800) {
        vm.detailTipInfo.text = "已添加备注号码";
        vm.detailTipInfo.type = "success";
        $scope.detailData.Record_TelContent = vm.editor.addMember.Record_TelContent;
        var mainDataItemIndex = _.findIndex($scope.mainData.list, function(item) {
          return item.orderID == $scope.detailData._id;
        });
        $scope.mainData.list[mainDataItemIndex].Record_TelContent = vm.editor.addMember.Record_TelContent;
      } else {
        vm.detailTipInfo.text =  response.messages;
        vm.detailTipInfo.type = "error";
      }
    })
  }
  /**
   * 保存一个新的意向顾客
   */
  function saveACustomerMember(callback) {
    // 会员必填项
    var member = {
      CompanyId: $rootScope.userinfo.CompanyID.$id,
      CustomerLevelID: "000000000000000000000001", // 默认添加为普通会员
      IsExistTouristBlacklist: false,
      CompanyCustomer: false,
      CustomerAccountName: vm.editor.addMember.CustomerMobile,
      CustomerName: $scope.detailData.CustomerInfo.Name,
      GenderTypeID: vm.editor.addMember.GenderTypeID,
      CustomerMobile: vm.editor.addMember.CustomerMobile
    };
    // 会员选填项
    if ($scope.detailData.CustomerInfo.Tel) {
      member.CustomerTel = $scope.detailData.CustomerInfo.Tel;
    }
    ////console.log(member);
    saveAMember(member, callback);
  }

  function changeModelType() {
    vm.editor.messageSender.OperationNotes = vm.editor.messageSender.modelType;
  }
  vm.resendMessage = resendMessage;

  function resendMessage(messageID) {
    var messageIndex = _.findIndex($scope.detailData.messageLog, function(item) {
      return item._id == messageID;
    });
    var messageInList = $scope.detailData.messageLog[messageIndex];
    var message = {
      OperationMobile: messageInList.OperationMobile,
      OrderID: messageInList.OrderID,
      SMSOrderStatus: "000000000000000000000002",
      OperationTypeID: 8,
      OperationNotes: messageInList.OperationNotes
    }
    sendMessage(message, messageInList);
  }
  /**
   * 发送信息
   */
  function sendMessage(message, messageInList) {
    var sendType = 'resend';
    if (message == undefined) {
      message = constructMessage();
      sendType = 'firstSend';
    }
    if (message.OperationMobile) {
      console.warn(message);
      sendIntentionCustomerMessage(message, sendToICAPI);

    }

    function sendToICAPI(response) {
      ////console.log(response);
      var messageToIC = {
        RecordID: message.OrderID,
        mobile: message.OperationMobile,
        reviewState: message.SMSOrderStatus,
        smsID: response.data.RecordID
      };
      message.Status = 1;
      if (response.code == 701 || response.code == 700) {
        sendMessageLogToICAPI(messageToIC, changeScope);
      }
      vm.editor.messageSender.OperationNotes = '';
    }

    function constructMessage() {
      return vm.editor.messageSender;
    }

    function constructScopeData(msg) {
      var newMsg = {
        OperationTime: Date.now(),
        SendStatus: msg.Status,
        OperationMobile: msg.OperationMobile,
        OperationNotes: msg.OperationNotes
      };
      ////console.log(newMsg);
      return newMsg;
    }

    function changeScope(response) {
      if ($scope.detailData.messageLog == undefined) {
        $scope.detailData.messageLog = [];
      }
      if (response.code >= 700) {
        if (sendType == 'firstSend') {
          $scope.detailData.messageLog.unshift(constructScopeData(message));
        } else if (sendType == 'resend') {
          messageInList.SendStatus = 1;
        }
      }
    }
  }

  /*手动修改跟踪状态*/
  function manualUReviewStateFun()
  {
    if(vm.editor.updateState.Review_State==null||vm.editor.updateState.Review_State==''||vm.editor.updateState.Review_State===undefined){
      vm.detailTipInfo.text =  "请选择跟踪状态";
      vm.detailTipInfo.type = "error";
      return false;
    }
    if(vm.editor.updateState.Review_State=='000000000000000000000005'||vm.editor.updateState.Review_State=='000000000000000000000007'){
      if(vm.editor.updateState.OORDIDNO===null||vm.editor.updateState.OORDIDNO==''||vm.editor.updateState.OORDIDNO===undefined){
        vm.detailTipInfo.text =  "请输入订单编号";
        vm.detailTipInfo.type = "error";
        return false;
      }
    }
    var ReviewStateName=$filter('reviewStateFilter')(vm.editor.updateState.Review_State);
    var data={
      RecordID:$scope.detailData._id,
      ReviewState:vm.editor.updateState.Review_State,
      ReviewStateName:ReviewStateName,
      OrderNo:vm.editor.updateState.OORDIDNO
    }
    manualUReviewState(data,function(response){
      if (response.code >= 700 && response.code < 800) {
        console.log(response);
        vm.detailTipInfo.text = "跟踪状态修改成功";
        vm.detailTipInfo.type = "success";
        /*修改跟踪状态*/
        $scope.detailData.Review.Review_State=vm.editor.updateState.Review_State;
        $scope.detailData.Review.Review_StateName=ReviewStateName;
        if(response.data.OORDID!=null){
          $scope.detailData.OORDID=response.data.OORDID;
        }
        var mainDataItemIndex = _.findIndex($scope.mainData.list, function(item) {
          return item.orderID == $scope.detailData._id;
        });
        $scope.mainData.list[mainDataItemIndex].trackType = ReviewStateName;
        /*意向客户的最后跟踪记录*/
        $scope.mainData.list[mainDataItemIndex].RecordReview=response.data.ReviewLog;

        /*判断是否有跟踪记录，有就添加*/
        if($scope.detailData.trackLog!=null){
          $scope.detailData.trackLog.push(response.data.ReviewLog);
        }

        /*重新判断权限*/
        buttonPermissionConfig();
        /*显示订单信息*/
        getOrder($scope.detailData.OORDID);
      } else {
        vm.detailTipInfo.text =  response.messages;
        vm.detailTipInfo.type = "error";
      }
    })

  }
  /**
   * 修改评价的类型
   */
  function changeValidTypeName() {
    var items = _.filter(vm.ValidType, function(i) {
      return i._id == $scope.detailData.Valid_Type;
    });
    if (items.length) {
      $scope.detailData.Valid_TypeName = items[0].ValidName;
    }

  }
  /**
   * 获取信息列表
   */
  function getMessageList() {
    var orderID = $scope.detailData._id;
    messageList(orderID, changeScope);

    function changeScope(response) {
      if (response.code == 700) {
        if (response.data) {
          $scope.detailData.messageLog = response.data;
        }
      }
    }
  }
  /**
   * 获取基础数据，例如短信模版和
   */
  function getBasicData() {
    if ($scope.detailData) {
      vm.editor.messageSender = {
        OperationMobile: $scope.detailData.CustomerInfo.MT,
        OrderID: $scope.detailData._id,
        SMSOrderStatus: $scope.detailData.Review.Review_State,
        OperationTypeID: 8
      }
      vm.editor.updateState={
        OrderID:$scope.detailData._id,
        Review_State: $scope.detailData.Review.Review_State,
        OORDID:$scope.detailData.OORDID
      }
    }
    getCustomerLevels(function(data) {
      $rootScope.IntentionCustomer.CustomerLevel = data;
      global.IntentionCustomer.CustomerLevel = data;
    });
    getMessageModels(function(response) {
      vm.messageModels = response.data;
      global.IntentionCustomer.messageModels = response.data;
    });
    getValidType(function(response) {
      vm.ValidType = response;
    });
    checkIntentionCustomerBasicInfo();

    function checkIntentionCustomerBasicInfo() {
      vm.IntentionCustomer = global.IntentionCustomer;
      if (global.IntentionCustomer.Source == undefined) {
        getIntentionCustomerSource(function(data) {
          $rootScope.IntentionCustomer.Source = data;
          global.IntentionCustomer.Source = data;
        });
      }
      if (global.IntentionCustomer.DifficultyDegree == undefined) {
        getIntentionCustomerDifficultyDegree(function(data) {
          $rootScope.IntentionCustomer.DifficultyDegree = data;
          global.IntentionCustomer.DifficultyDegree = data;
        });
      }
      if (global.IntentionCustomer.RecordType == undefined) {
        getIntentionCustomerRecordType(function(data) {
          $rootScope.IntentionCustomer.RecordType = data;
          global.IntentionCustomer.RecordType = data;
        });
      }
      if (global.IntentionCustomer.ReviewState == undefined) {
        getIntentionCustomerReviewState(function(data) {
          $rootScope.IntentionCustomer.ReviewState = data;
          global.IntentionCustomer.ReviewState = data;
        });
      }
      if (global.IntentionCustomer.Activities == undefined) {
        getIntentionCustomerActivity(function(data) {
          $rootScope.IntentionCustomer.Activities = data;
          global.IntentionCustomer.Activities = data;
        });
      }
      if (global.IntentionCustomer.QuestionType == undefined) {
        getIntentionCustomerQuestionType(function(data) {
          $rootScope.IntentionCustomer.QuestionType = data;
          global.IntentionCustomer.QuestionType = data;
        });
      }
      if (global.IntentionCustomer.CustomerLevel == undefined) {
        // getValidType(function(data){
        // $rootScope.IntentionCustomer.ValidType = data;
        // global.IntentionCustomer.ValidType = data;
        // });
        getCustomerLevels(function(data) {
          ////console.log(data);
          $rootScope.IntentionCustomer.CustomerLevel = data;
          global.IntentionCustomer.CustomerLevel = data;
        });
      }
    }
  }

  function getRecordList() {
    var orderID = $scope.detailData._id;
    $scope.detailData.RecordList = [];
    getRecordListOfAnOrder(orderID, changeDetailData);

    function changeDetailData(response) {
      if (response.code == 700) {
        $scope.detailData.RecordList = response.data;
      }

    }
  }

  function deleteOrder() {
    var orderID = $scope.detailData._id;
    showWarningBox("确定要删除" + $scope.detailData.CustomerInfo.Name + "的订单[订单号" + orderID + "]？", activate);

    function activate() {
      deleteIntentionOrder(orderID, function(response) {
        if (response.code == 700) {
          vm.detailTipInfo.text = "删除成功";
          changeScope();
        } else if (response.code == 602) {
          vm.detailTipInfo.text = "删除失败";
          vm.detailTipInfo.type = "error";
        }
      });
    }

    function changeScope() {
      var item = _.filter($scope.mainData.list, function(i) {
        return i.orderID == orderID;
      });
      $scope.mainData.list = _.without($scope.mainData.list, item[0]);
    }
  }

  function changeServersName() {
    var pickedKFArray = _.filter(vm.serversList, function(sale) {
      return sale._id.$id == vm.editor.transfer.kfID;
    });
    vm.editor.transfer.kfName = pickedKFArray[0].FullName;
  }

  function changeSalesName() {
    var pickedSiguArray = _.filter(vm.salesList, function(sale) {
      return sale._id.$id == vm.editor.transfer.siguID;
    });
    vm.editor.transfer.siguName = pickedSiguArray[0].FullName;
  }
  /**
   * 获取私顾和客服列表
   */
  function getServersAndSales() {
    loadServers($scope.detailData.transferState.canTransferServer);
    loadSales($scope.detailData.transferState.canTransferSale);
    /**
     * 获取客服列表
     */
    function loadServers(needLoad) {
      if (needLoad) {
        getCustomerServerList(function(response) {
          vm.serversList = response.data.list;
          //console.log(vm.serversList);
        });
      }
    }
    /**
     * 获取私顾列表
     */
    function loadSales(needLoad) {
      if (needLoad) {
        //console.log(pickTagID($scope.detailData.Record_Type, $scope.detailData.ProductAreaType_ID, $scope.detailData.LineType_ID));
        getSalesByTagID(pickTagID($scope.detailData.Record_Type, $scope.detailData.ProductAreaType_ID, $scope.detailData.LineType_ID), function(response) {
          vm.salesList = response;
        });
      }
    }
  }
  /**
   * 根据所选的意向类型，获得私顾标签id
   */
  function pickTagID(recordTypeID, areaTypeID, lineTypeID) {
    switch (recordTypeID) {
      case 1: // 线路
        switch (lineTypeID) {
          case 1: // 自由行
            return 3;
          case 2: // 组团游
            switch (areaTypeID) {
              case 1: // 周边
                return 0;
              case 2: // 国内
                return 1;
              case 3: // 出境
                return 2;
              default:
                break;
            }
          case 3: // 邮轮游
            return 2;
          case 4: // 定制游
            return 6;
          case 5: // 自驾游
            return 4;
          default:
            break;
        }
      case 2: // 签证
        return 5;
      case 3: // 门票
        return 0;
      default:
        break;
    }
    return -1;
  }
  /**
   *我是否是计调或者其他经理
   **/
  function judgeMeAsAnOperator() {
    myLabels = _.pluck(global.userinfo.Label, "LabelGroup");
    var labelGroupName = ["计调"];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }
  /**
   * 我是否是客服 接线专员
   */
  function judgeMeAsAServer(myLabels) {
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "labelNo");
    }
    var labelGroupName = [3003];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }


  /**
   * 我是否是客服经理 接线专员经理 客服总监
   */
  function judgeMeAsServerManager(myLabels) {
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "labelNo");
    }
    var labelGroupName = [3000,3005];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }

  function judgeMeAsManager(myLabels) {
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "LabelGroup");
    }
    var labelGroupName = ["中心经理"];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }

  /*判断是否组长*/
  function judgeMeAsGroupLeader(myLabels){
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "labelNo");
    }
    var labelGroupName = [11,12,13];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }

  /*判断是否接线专员经理*/
  function judgeMeAsConnSpeciManager(myLabels){
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "labelNo");
    }
    var labelGroupName = [3005];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }
  /**
   * 我是否是私顾
   */
  function judgeMeAsASale(myLabels) {
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "LabelGroup");
    }
    var labelGroupName = ["私顾", "中心经理"];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }


  /*我是否私顾，中心经理，线路经理，计调*/
  function judegeMeAsAAllSale(myLabels){
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "LabelGroup");
    }
    var labelGroupName = ["私顾", "中心经理","线路经理","计调"];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }

  function judegeMeAsASaleJiDiao(myLabels){
    if (!myLabels) {
      myLabels = _.pluck($rootScope.userinfo.Label, "LabelGroup");
    }
    var labelGroupName = ["私顾", "计调"];
    var tag = false;
    myLabels.forEach(function(item) {
      if (_.indexOf(labelGroupName, item) > -1) {
        tag = true;
      }
    });
    return tag;
  }
  // config functions
  /**
   * config
   */
  function config() {
    urlConfig(); // config the urls
    buttonPermissionConfig(); // config the buttons
  }
  /**
   * Url config
   */
  function urlConfig() {
    vm.template.gadgetUrl = "/public/angularView/intentionCustomer/ICOrder/Gadget/";
    vm.template.baseUrl = "/public/angularView/intentionCustomer/ICOrder/GadgetICOrderDetail/";
    vm.template.url = "/public/angularView/intentionCustomer/ICOrder/";
    vm.template.edit = vm.template.url + "ICOrderEdit.html";
    vm.template.log = vm.template.url + "ICOrderLog.html";
    vm.template.GadgetAssessment = vm.template.baseUrl + "ICOrderGadgetAssessment.html";
    vm.template.GadgetCustomerInfo = vm.template.baseUrl + "ICOrderGadgetCustomerInfo.html";
    vm.template.GadgetMessageEditor = vm.template.gadgetUrl + "ICOrderGadgetMessageEditor.html";
    vm.template.GadgetMessageBindPhone = vm.template.gadgetUrl + "ICOrderGadgetMessageBindPhone.html";
    vm.template.GadgetMessageBindRemarksTel = vm.template.gadgetUrl + "ICOrderGadgetMessageBindRemarksTel.html";
    vm.template.GadgetOrderDetail = vm.template.baseUrl + "ICOrderGadgetOrderDetail.html";
    vm.template.GadgetProduct = vm.template.baseUrl + "ICOrderGadgetProduct.html";
    vm.template.taskTransfer = vm.template.gadgetUrl + "ICOrderGadgetTaskTransfer.html";
    vm.template.taskAssessment = vm.template.gadgetUrl + "ICOrderGadgetTaskAssessment.html";
    vm.template.taskAssessmentModify = vm.template.gadgetUrl + "ICOrderGadgetTaskAssessmentModify.html";
    vm.template.recalling = vm.template.gadgetUrl + "ICOrderGadgetRecalling.html";
    vm.template.toolbar = vm.template.baseUrl + "ICOrderGadgetToolbar.html";
    vm.template.GadgetLogTracker = vm.template.url + "GadgetICOrderLog" + "/ICOrderGadgetLogTracker.html";
    vm.template.GadgetLogTrackerEditor = vm.template.url + "GadgetICOrderLog" + "/ICOrderGadgetLogTrackerEditor.html";
    vm.template.GadgetReviewState=vm.template.gadgetUrl + "ICOrderGadgetReviewState.html";
  }

  /**
   * button permission
   */
  function buttonPermissionConfig() {
    $scope.detailData.Permission = {
      edit: editPermit(),//是否可以编辑
      transfer: taskTranferPermit(),//是否可以转移
      assessment: assessmentPermit(),
      del: delPermit(),//是否可以删除
      track: trackPermit(),//回访权限
      // managerPermit : judeMeAsManager()
      managerPermit: judgeMeAsManager(),
      orderConfirmation: orderConfirmationPermit(),//认领权限
      productRecommend: productRecommendPermit(),//产品推荐权限
      follow: followPermit(),//跟踪权限
      messageSend: messageSendPermit(),//发送信息
      confirmTransfer: confirmTransferPermit(),//确认转移权限
      showOrder: showOrderPermit(),//查看订单详情
      directTransfer: true,
      followButton: followButtonPermit(),
      trackAndCommunication: trackAndCommunicationPermit(),//跟踪与通信
      canSeeDestination: canSeeDestination(),//查看目的地权限
      manualUpdateReviewState:judgeMeAsAServer()
    };
    /**
     * 查看目的地权限
     */
    function canSeeDestination() {
      //客服永远都可以看目的地
      if (judgeMeAsAServer()) {
        return true;
      } else { //其他角色
        if (saleConfirmed()) { //私顾认领过，所有可见这个订单的人，都可以看
          return true;
        } else { //私顾未认领过 judegeMeAsASaleJiDiao judgeMeAsASale
          if (judegeMeAsASaleJiDiao()) { //我有私顾的角色，我不可见
            console.info("[查看目的地]我是私顾，这个订单还没有被认领，不可看目的地");
            return false;
          } else { //我不是私顾，也不是客服，我是其他可以看这个订单的人，例如计调、专线经理、中心经理等，这些员工本身很希望位置被卖掉，因此可以看到目的地
            return true;
          }
        }
      }
    }
    /**
     * 查看回访记录
     */
    function followButtonPermit() {
      if($scope.listType=="addedCustomers"){
        console.info("[查看回访按钮]你是在已添加页面看到详情，无法处理");
        return false;
      }
      if ($scope.detailData.Sales.ID) {
        return true;
      }
      console.info("[查看回访按钮]没有被私顾认领，不可以看回访记录");
      return false;
    }
    /**
     * 跟踪与通信
     */
    function trackAndCommunicationPermit() {
      /*如果有客服，客服总监或者本客服可以看
      * 如果私顾认领，角色中有私顾，就可以看*/
     /* if($scope.detailData.UserInfo.ID!=null&&$scope.detailData.UserInfo.ID!='000000000000000000000000'){
        if(judgeMeAsServerManager()){
          console.info("[跟踪与通信]您是客服总监，接线专员经理，可以看跟踪通信");
          return true;
        }
        if($scope.detailData.UserInfo.ID == $rootScope.userinfo._id.$id){
          console.info("[跟踪与通信]您是接线专员，可以看跟踪通信");
          return true;
        }
      }
      if($scope.detailData.Sales.ID!=null&&$scope.detailData.Sales.ID!='000000000000000000000000'){
         if(judgeMeAsASale()){

           console.info("[跟踪与通信]您是私顾，可以看跟踪通信");
           return true;
         }
      }*/
      if($scope.listType=="addedCustomers"){
        console.info("[跟踪与通信]你是在已添加页面看到详情，无法处理");
        return false;
      }
      if($rootScope.listType=="orderConfirmation"){
        console.info("[跟踪与通信]您是在认领列表页面看到此信息，无法认领");
        return false;
      }
      if (($scope.detailData.UserInfo.ID == $rootScope.userinfo._id.$id) || ($scope.detailData.Sales.ID)) {
        return true;
      }
      console.info("[跟踪与通信]没有被私顾认领，或者我不是这个订单的客服，不可以看跟踪与通信");
      return false;
    }
    /**
     * 直转订单权限
     */
    function directTransferPermit() {
      if ($scope.detailData.AddType == 2) {
        if (IAmNotTheOrderServer()) {
          console.info("[直转]你不是这个订单的客服，不可以直转");
          return false;
        }
      }
      return true;
    }
    /**
     * 查看订单详情
     */
    function showOrderPermit() {
      //所有能看到这个订单的都能看到
      return true;
    }
    /**
     * 发送信息
     */
    function messageSendPermit() {
      /*如果是中心经理，计调，组长*/
      if (judgeMeAsManager() || judgeMeAsAnOperator()||judgeMeAsGroupLeader()) {
        return true;
      }
      if (IAmNotTheOrderSale() && IAmNotTheOrderServer()) {
        console.info("[发送信息]你不是这个订单的私顾或者客服，不可以发送信息");
        return false;
      }
      return true;
    }
    /**
     * 跟踪权限
     */
    function followPermit() {
      if ($scope.detailData.RecordType_ID == 1) { //业务类型
        console.info("[跟踪权限]这是一个业务类型的意向订单");
        if (!judegeMeAsAAllSale()) {
          console.info("[跟踪权限]你不是私顾、计调、线路经理、中心经理，不可以跟踪");
          return false;
        }
        /*if ($scope.detailData.Sales.ID != $rootScope.userinfo._id.$id) {
          console.info("[跟踪权限]你不是这个订单的私顾，不可以跟踪");
          return false;
        }*/
      } else if ($scope.detailData.RecordType_ID == 0) {
        console.info("[跟踪权限]这是一个非业务类型的意向订单");
        if (!judgeMeAsAServer()) {
          console.info("[跟踪权限]你不是客服，不可以跟踪");
          return false;
        }
        /*if ($scope.detailData.UserInfo.ID != $rootScope.userinfo._id.$id) {
          console.info("[跟踪权限]你不是这个订单的客服，不可以跟踪");
          return false;
        }*/
      }
      return true;
    }
    /**
     * 编辑权限
     */
    function editPermit() {
      if ($scope.detailData.AddType == 2) { // 市场营销意向订单
        console.info("[编辑权限]这是一个市场营销意向订单");
        if(judgeMeAsConnSpeciManager()){
          console.info("[编辑权限]你是接线专员经理，可以编辑")
          return true;
        }
        if (judgeNotMineOrder()) {
          console.info("[编辑权限]这不是你的市场营销意向订单，不可编辑")
          return false;
        }
        if (saleConfirmed()) {
          console.info("[编辑权限]私顾已经认领这个订单，因此不能编辑");
          return false;
        }
        if (judgeMoreThan30Minutes()) {
          console.info("[编辑权限]超过30分钟之后，不可编辑")
          return false;
        }
        if (serverConfirmed() && $scope.detailData.UserInfo.ID != $rootScope.userinfo._id.$id) {
          console.info("[编辑权限]这个订单已经被客服认领，不可编辑")
          return false;
        }
        return true;
      } else if ($scope.detailData.AddType == 1) { // 400添加的意向订单
        console.info("[编辑权限]这是一个400客服意向订单");
        if(judgeMeAsConnSpeciManager()){
          console.info("[编辑权限]你是接线专员经理，可以编辑")
          return true;
        }
        if (!judgeMeAsAServer()) {
          console.info("[编辑权限]你不是客服，因此不能编辑");
          return false;
        }
        if (IAmNotTheOrderServer()) {
          console.info("[编辑权限]你不是这个订单的客服，因此不能编辑");
          return false;
        }
        if (saleConfirmed()) {
          console.info("[编辑权限]私顾已经认领这个订单，因此不能编辑");
          return false;
        }
        if (judgeMoreThan30Minutes()) {
          console.info("[编辑权限]下单超过30分钟之后，不可编辑")
          return false;
        }
        return true;
      }

      return false;
    }
    // 客服认领过
    function serverConfirmed() {
      if ($scope.detailData.UserInfo.ID) {
        return true
      }
      return false;
    }
    // 私顾认领过
    function saleConfirmed() {
      if ($scope.detailData.Sales.ID) {
        return true
      }
      return false;
    }
    // 我不是这个订单的私顾
    function IAmNotTheOrderSale() {
      if ($scope.detailData.Sales.ID == $rootScope.userinfo._id.$id) {
        return false;
      }
      return true;
    }
    // 我不是这个订单的客服
    function IAmNotTheOrderServer() {
      if ($scope.detailData.UserInfo.ID == $rootScope.userinfo._id.$id) {
        return false;
      }
      return true;
    }
    // 我不是订单的创建者
    function judgeNotMineOrder() {
      if ($scope.detailData.CreateUserID == $rootScope.userinfo._id.$id) {
        return false;
      }
      if ($scope.detailData.UserInfo.ID == $rootScope.userinfo._id.$id) {
        return false;
      }
      return true;
    }

    //客服是否刚刚接受了转移
    function judgeIJustAcceptTheTransfer() {
      ////console.log($scope.detailData.UserInfo.ShiftLogs);
      if ($scope.detailData.UserInfo.ShiftLogs.length) {
        var lastTransferLog = $scope.detailData.UserInfo.ShiftLogs[$scope.detailData.UserInfo.ShiftLogs.length - 1];
        if (lastTransferLog.ToID == $rootScope.userinfo._id.$id && lastTransferLog.State == 1) {
          return true;
        }
        return false;
      }
      return false;
    }
    // 距离创建时间已经30分钟以上
    function judgeMoreThan30Minutes() {
      var orderTime = moment($scope.detailData.Record_Time).format();
      if (judgeIJustAcceptTheTransfer()) {
        orderTime = moment($scope.detailData.UserInfo.ShiftLogs[$scope.detailData.UserInfo.ShiftLogs.length - 1].CreateTime).format();
      } else if (!IAmNotTheOrderServer()) {
        orderTime = moment($scope.detailData.UserInfo.ClaimTime).format();
      }
      var now = moment(Date.now() - 30 * 60 * 1000).format();
      if (now > orderTime) {
        return true;
      }
      return false;
    }
    /**
     * 产品推荐权限
     */
    function productRecommendPermit() {
      if (judgeMeAsASale() && ($rootScope.userinfo._id.$id == $scope.detailData.Sales.ID)) {
        var reviewStateI= parseInt($scope.detailData.Review.Review_State);
        if (reviewStateI>=5) {
          //$scope.detailData.Review.Review_State == "000000000000000000000007"
          // 这个订单已签，不能再进行推荐
          console.info("[推荐产品权限]这个订单已签，不能再进行推荐");
          return false;
        } else {
          if ($scope.detailData.Sales.ID != $rootScope.userinfo._id.$id) {
            console.info("[推荐产品权限]你不是这个订单的私顾，不能推荐");
            return false;
          }
          if (!$scope.detailData.productRecommedList) {
            getRecommendProduct();
          }
          return true;
        }
      }
      console.info("[推荐产品权限]你不是私顾，不能进行推荐");
      return false;
    }
    /**
     * 确认转移权限
     */
    function confirmTransferPermit() {
      if ($rootScope.currentHandleStatus) {
        console.info("[确认转移权限]已经处理过,因此没有权限");
        return false;
      }
      if ($rootScope.listType != "informationList") {
        console.info("[确认转移权限]这不是提醒事项页面,因此没有权限");
        return false;
      }
      return true;
    }
    /**
     * 回访权限
     */
    function trackPermit() {
      if (judgeMeAsAServer()) {
        var acceptableReviewState = ["000000000000000000000012", "000000000000000000000013"];
        if (_.indexOf(acceptableReviewState, $scope.detailData.Review.Review_State) > -1) {
          if ($scope.detailData.UserInfo.ID != $rootScope.userinfo._id.$id) {
            console.info("[回访权限]你不是这个订单的客服，没有回访权限");
            return false;
          }
          return true;
        } else {
          console.info("[回访权限]还不是结束跟踪或者旅行归来状态，没有回访权限");
          return false;
        }
      } else {
        console.info("[回访权限]你不是客服，没有回访权限");
        return false;
      }
    }
    /**
     * 删除权限
     */
    function delPermit() {
      if ($scope.detailData.AddType == 2) {
        if ($scope.detailData.CreateUserID == $rootScope.userinfo._id.$id && !$scope.detailData.UserInfo.ID) {
          return true;
        } else {
          console.info("[删除权限]你不是这个市场营销意向订单的创建者，不可删除");
          return false;
        }
      } else if ($scope.detailData.AddType == 1) {
        if (judgeMeAsServerManager()) {
          return true;
        } else {
          console.info("[删除权限]你不是客服部经理，不可删除");
          return false;
        }
      }

    }
    /**
     * 认领权限
     */
    function orderConfirmationPermit() {
      if (judgeMeAsAServer()) {
        if ($rootScope.listType == "orderConfirmation" && !$scope.detailData.UserInfo.Name) {
          return true;
        }
      } else if (judgeMeAsASale() || judgeMeAsAnOperator()) {
        if ($rootScope.listType == "orderConfirmation" && !$scope.detailData.Sales.Name) {
          return true;
        }
      }
      console.info("[认领权限]这不是认领页面，不满足认领的条件");
      return false;
    }
    /**
     * 评价权限
     */
    function assessmentPermit() {
      if ($scope.detailData.RecordType_ID == 0) {
        console.info("[评价权限]这个订单是非业务类型订单，不能评价");
        return false;
      }
      var avalibaleStates = ["000000000000000000000012", "000000000000000000000009", "000000000000000000000013", "000000000000000000000008"];
      if (_.indexOf(avalibaleStates, $scope.detailData.Review.Review_State) > -1) {
        if (judgeMeAsAServer()) {
          if ($scope.detailData.IsValid == 0) {
            return true;
          } else {
            console.info("[评价权限]这个订单已经被评价过，不能评价");
            return false;
          }
        } else {
          console.info("[评价权限]你不是客服，不能评价");
          return false;
        }
      } else {
        console.info("[评价权限]跟踪状态不是订单取消或者结束跟踪，不能评价");
        return false;
      }
    }
    /**
     * 转移权限
     */
    function taskTranferPermit() {
      if($scope.listType=="addedCustomers"){
        console.info("[转移权限]你是在已添加页面看到详情，无法处理");
        return false;
      }
      $scope.detailData.transferState = {};
      var labels = _.pluck($rootScope.userinfo.Label, "labelNo");
      var SaleTransfer = true;
      $scope.detailData.transferState.canTransferSale = SaleTransfer && judegeMeAsASaleJiDiao();

      var ServerTransfer = true;
      $scope.detailData.transferState.canTransferServer = ServerTransfer && judgeMeAsAServer(labels);
      if($scope.detailData.UserInfo.ID!=null){
        if ($scope.detailData.UserInfo.ID != $rootScope.userinfo._id.$id) {
          if (!judgeMeAsServerManager()) {
            $scope.detailData.transferState.canTransferServer = false;
            console.info("[转移权限]你不是客服总监，不能转移客服");
          } else {
            $scope.detailData.transferState.canTransferServer = true;
          }
        }
      }else {
        $scope.detailData.transferState.canTransferServer = false;
        console.info("[转移权限]这条订单未被客服认领，不能转移客服");
      }

      if($scope.detailData.Sales.ID!=null){
        if ($scope.detailData.Sales.ID != $rootScope.userinfo._id.$id) {
          if (!judgeMeAsServerManager()) {
            $scope.detailData.transferState.canTransferSale = false;
            console.info("[转移权限]你不是这个订单的私顾，不能转移私顾");
          } else {
            $scope.detailData.transferState.canTransferSale  = true;
          }
          /*$scope.detailData.transferState.canTransferSale = false;
           console.info("[转移权限]你不是这个订单的私顾，不能转移私顾");*/
        }
      }else {
        $scope.detailData.transferState.canTransferSale = false;
        console.info("[转移权限]这条订单未被私顾认领，不能转移私顾");
      }

      var saleShiftLogLength = $scope.detailData.Sales.ShiftLogs.length;
      var serverShiftLogLength = $scope.detailData.UserInfo.ShiftLogs.length;
      if (saleShiftLogLength > 0) {
        var undealIndex = _.findIndex($scope.detailData.Sales.ShiftLogs, function(searchItem) {
          return searchItem.State == 0;
        });
        ////console.log(undealIndex);
        if (undealIndex != -1) {
          SaleTransfer = false;
          $scope.detailData.SaleShiftID = $scope.detailData.Sales.ShiftLogs[undealIndex]._id;
          $scope.detailData.transferState.canTransferSale = false;
          console.info("[转移权限]这个订单不能转移私顾，因为有未处理完的私顾转移信息");
        }
      }
      if (serverShiftLogLength > 0) {
        var undealIndex = _.findIndex($scope.detailData.UserInfo.ShiftLogs, function(searchItem) {
          return searchItem.State == 0;
        });
        ////console.log(undealIndex);
        if (undealIndex != -1) { // 只有在未处理状态，才不能继续转移，否则，可见者一定可以转移
          $scope.detailData.ServerShiftID = $scope.detailData.UserInfo.ShiftLogs[undealIndex]._id;
          ServerTransfer = false;
          $scope.detailData.transferState.canTransferServer = false;
          console.info("[转移权限]这个订单不能转移客服，因为有未处理完的客服转移信息");
        }
      }
      if ($scope.detailData.IsValid > 0) {
        console.info("[转移权限]这个订单已经被评价过，不能转移");
        return false;
      }

      if ($scope.detailData.transferState.canTransferSale || $scope.detailData.transferState.canTransferServer) {
        return true;
      } else {
        console.info("[转移权限]不具备客服转移和私顾转移权限，不能转移");
        return false;
      }
    }
  }
  // 加载顾客的信息
  function loadCustomerInfo() {
    var customerID = $rootScope.customerID;
    if (customerID && customerID != "000000000000000000000000") {
      getMemberByID(customerID, loadDataToPanel);
    }

    function loadDataToPanel(response) {
      //console.log(response);
      if (response.CustomerName) {
        $scope.detailData.CustomerInfo.GenderType = response.Enlarge.GenderTypeID == 1 ? "先生" : "女士";
        $scope.detailData.CustomerInfo.Name = response.CustomerName;
        $scope.detailData.CustomerInfo.MemberType = response.Enlarge.CustomerLevelID.$id;
      } else {
        $scope.detailData.CustomerInfo.GenderType = "非会员";
        $scope.detailData.CustomerInfo.MemberType = "非会员";
      }

    }
  }

  function getUserNameByID(userid) {
    if (userid) {
      getUserByID(userid, function(response) {
        if (response.length > 0) {
          $scope.detailData.Valid_Name = response[0].FullName;
        } else {
          $scope.detailData.Valid_Name = "未知";
        }
      });
    }

  }

  function getOrder(orderID) {
    getOrderByOrderID(orderID, loadDataToPanel);

    function loadDataToPanel(response) {
      if (response) {
        $scope.detailData.order = response;
      } else {
        $scope.detailData.order = undefined;
      }
    }
  }

  function doTheTransferShift(data, callback) {
    var params = data;
    params.RecordID = $scope.detailData._id;
    params.toUserID = $rootScope.userinfo._id.$id;
    params.toUserName = $rootScope.userinfo.FullName;
    if ($rootScope.ICSubType == 19) {
      params.shiftType = 1;
      params.ShiftID = $scope.detailData.ServerShiftID;
    } else if ($rootScope.ICSubType == 20) {
      params.shiftType = 2;
      params.ShiftID = $scope.detailData.SaleShiftID;
    }
    ////console.log(params);
    finalConfirmAnOrder(params, callback);
  }

  function refuseTransfer() {
    var data = {
      shiftState: 2,
      content: "拒绝转移"
    };
    doTheTransferShift(data, callback);

    function callback(response) {
      if (response.code >= 600 && response.code < 800) {
        ////console.log(response);
        $scope.detailData.IHaveJustRefused = true;
        if ($rootScope.ICSubType == 19) {
          var shiftLogIndex = _.findIndex($scope.detailData.UserInfo.ShiftLogs, function(i) {
            return i._id == $scope.detailData.ServerShiftID;
          });
          if ($scope.detailData.UserInfo.ShiftLogs[shiftLogIndex]) {
            $scope.detailData.UserInfo.ShiftLogs[shiftLogIndex].State = 2;
          }

        } else if ($rootScope.ICSubType == 20) {
          var shiftLogIndex = _.findIndex($scope.detailData.Sales.ShiftLogs, function(i) {
            return i._id == $scope.detailData.SaleShiftID;
          });
          if ($scope.detailData.Sales.ShiftLogs[shiftLogIndex]) {
            $scope.detailData.Sales.ShiftLogs[shiftLogIndex].State = 2;

          }
        }
        buttonPermissionConfig();
        IHaveDealtWithThisItem();
      }

    }
  }

  function confirmTransfer() {
    var data = {
      shiftState: 1,
      content: "同意转移"
    };
    doTheTransferShift(data, callback);

    function callback(response) {
      if (response.code >= 600 && response.code < 800) {
        ////console.log(response);
        $scope.detailData.IHaveJustAcceptIT = true;
        if ($rootScope.ICSubType == 19) {
          $scope.detailData.UserInfo.ID = $rootScope.userinfo._id.$id;
          $scope.detailData.UserInfo.Name = $rootScope.userinfo.FullName;
          var shiftLogIndex = _.findIndex($scope.detailData.UserInfo.ShiftLogs, function(i) {
            return i._id == $scope.detailData.ServerShiftID;
          });
          if ($scope.detailData.UserInfo.ShiftLogs[shiftLogIndex]) {
            $scope.detailData.UserInfo.ShiftLogs[shiftLogIndex].State = 1;
          }
        } else if ($rootScope.ICSubType == 20) {
          $scope.detailData.Sales.ID = $rootScope.userinfo._id.$id;
          $scope.detailData.Sales.Name = $rootScope.userinfo.FullName;
          var shiftLogIndex = _.findIndex($scope.detailData.Sales.ShiftLogs, function(i) {
            return i._id == $scope.detailData.SaleShiftID;
          });
          if ($scope.detailData.Sales.ShiftLogs[shiftLogIndex]) {
            $scope.detailData.Sales.ShiftLogs[shiftLogIndex].State = 1;
          }
        }
        buttonPermissionConfig();
        IHaveDealtWithThisItem();
      }
    }
  }
  /**
   * 已处理
   */
  function IHaveDealtWithThisItem() {
    var data = {
      isHandled: true,
      remindId: $rootScope.currentICListItemID
    };
    changeInformationStatus(data, function(response) {
      if ($rootScope.listType == "informationList") {
        var itemIndex = _.findIndex($scope.mainData.list, function(i) {
          return i._id.$id == $rootScope.currentICListItemID;
        });
        $scope.mainData.list[itemIndex].isHandled = true;
      }

    });
  }

  function modifyAssessment() {
    saveAssessment(true)
  }
  /**
   * 保存评价
   */
  function saveAssessment(modifyFlag) {

    if (checkInput() || vm.editor.assessment.validState == 1) {
      showWarningBox("确定保存此评价？", function() {
        vm.detailTipInfo.text = "正在保存评审内容...";
        vm.detailTipInfo.type = "info";
        var orderID = $scope.detailData._id;
        var data = vm.editor.assessment;
        data.RecordID = orderID;
        workAssessment(data, changeScope);
      });
    } else {
      vm.detailTipInfo.text = "备注和问题不可为空";
      vm.detailTipInfo.type = "error";
    }

    function checkInput() {
      if (!vm.editor.assessment.validContent && !$scope.detailData.Valid_Content) {
        return false;
      }
      if (vm.editor.assessment.validState == 2 || !$scope.detailData.IsValid == 2) {
        if (!vm.editor.assessment.validType && !$scope.detailData.Valid_Type) {
          return false;
        }
      }
      return true;
    }

    function changeScope(response) {
      vm.detailTipInfo.text = "成功保存评审内容";
      vm.detailTipInfo.type = "success";
      if (vm.editor.assessment.validState) {
        // if (!modifyFlag) {
        $scope.detailData.IsValid = vm.editor.assessment.validState;
        $scope.detailData.Valid_Name = $rootScope.userinfo.FullName;
        $scope.detailData.Valid_ID = $rootScope.userinfo._id.$id;
        $scope.detailData.Valid_Content = vm.editor.assessment.validContent;
        if (vm.editor.assessment.validType) {
          $scope.detailData.Valid_TypeName = _.filter(vm.ValidType, function(i) {
            return i._id == vm.editor.assessment.validType;
          })[0].ValidName;
        }
        // }
      }
      ////console.log($scope.detailData);
      buttonPermissionConfig();
    }

  }

  function editMode(title, detailSwitchVal) {
    $rootScope.IntentionCustomerEditor = "Edit";
    $rootScope.IntentionCustomerEditorData = {};
    $rootScope.IntentionCustomerEditorData = $scope.detailData;
    $scope.showSubHead(title + "的意向订单", detailSwitchVal);
    $scope.fetch(vm.addLink + "?recordID=" + $scope.detailData._id);
  }

  /**
   * 保存回访记录
   */
  function saveRecord() {
    if (checkInput()) {
      vm.savingRecord = true;
      var orderID = $scope.detailData._id;
      var data = {
        RecordID: orderID,
        Content: vm.editor.track_content
      };
      addTrackRecord(data, changeScope);

    } else {
      vm.detailTipInfo.text = "回访记录内容不可以为空";
      vm.detailTipInfo.type = "error";
    }

    function checkInput() {
      if (vm.editor.track_content) {
        return true;
      } else {
        return false;
      }
    }

    function changeScope(response) {
      if (response.code == 700) {
        vm.detailTipInfo.text = "添加回访记录成功";
        vm.detailTipInfo.type = "success";
        $scope.detailData.RecordList.push(response.data);
        vm.editor.track_content = "";
      }
      vm.savingRecord = false;
    }
  }
  /**
   * 显示日志中的跟踪日志
   */
  function showLogTracker() {
    var workflow = StateFlow();
    var steps = {};
    activate();

    function activate() {
      angular.forEach(steps, workflow.setStep);
      workflow.run(memberID);
    }
  }
  /**
   * 查看订单详细
   */
  function showOrderDetail() {
    var workflow = StateFlow();
    var steps = {};
    activate();

    function activate() {
      angular.forEach(steps, workflow.setStep);
      workflow.run(memberID);
    }
  }
  /**
   * 显示日志中的通话记录
   */
  function showLogPhone() {
    var workflow = StateFlow();
    var steps = {};
    activate();

    function activate() {
      angular.forEach(steps, workflow.setStep);
      workflow.run(memberID);
    }
  }

  /**
   * 保存跟踪
   */
  function saveTracker() {
    var workflow = StateFlow();
    var steps = {};
    activate();

    function activate() {
      angular.forEach(steps, workflow.setStep);
      workflow.run(memberID);
    }
  }
  /**
   * 显示日志
   */
  function showLog(title, detailSwitchVal) {
    $rootScope.IntentionCustomer.CurrentIntentionOrder = $scope.detailData;
    angular.copy($scope.detailData, global.IntentionCustomer.CurrentIntentionOrder);
    $scope.showSubHead("返回" + title + "的意向详情", detailSwitchVal);
    $scope.fetch("intentionCustomer/ICOrder/log", false);
    $scope.openItem();
  }
  /**
   * 显示/关闭转移
   */
  function toggleTransfer() {
    var workflow = StateFlow();
    var steps = {};
    activate();

    function activate() {
      angular.forEach(steps, workflow.setStep);
      workflow.run(memberID);
    }
  }
  /**
   * 显示/关闭发送信息
   */
  function toggleMessage() {
    var workflow = StateFlow();
    var steps = {};
    activate();

    function activate() {
      angular.forEach(steps, workflow.setStep);
      workflow.run(memberID);
    }
  }
  /**
   * 保存转移
   */
  function saveTransfer() {
    if (checkInput()) {
      var text = constructTip();
      showWarningBox(text, activate);
    }

    function checkInput() {

      if(($scope.detailData.transferState.canTransferServer && !vm.editor.transfer.kfID)&&
          ($scope.detailData.transferState.canTransferSale && !vm.editor.transfer.siguID)){
        vm.detailTipInfo.text = "请选择转移人员";
        vm.detailTipInfo.type = "error";
      }
      /*if ($scope.detailData.transferState.canTransferServer && !vm.editor.transfer.kfID) {
        vm.detailTipInfo.text = "请选择客服";
        vm.detailTipInfo.type = "error";
        return false;
      }
      if ($scope.detailData.transferState.canTransferSale && !vm.editor.transfer.siguID) {
        vm.detailTipInfo.text = "请选择私顾";
        vm.detailTipInfo.type = "error";
        return false;
      }*/
      return true;
    }

    function constructTip() {
      var text = "确定要转移给";
      if (vm.editor.transfer.kfID) {
        text += "客服" + vm.editor.transfer.kfName;
      }
      if (vm.editor.transfer.siguID) {
        if (vm.editor.transfer.kfID) {
          text += "以及";
        }
        text += "私顾" + vm.editor.transfer.siguName;
      }
      text += "?";
      return text;
    }

    function activate() {
      vm.editor.transfer.RecordID = $scope.detailData._id;
      var data = vm.editor.transfer;
      if (data.siguName) {
        data.siguName = data.siguName.split(" ")[1];
      }
      data.title = $scope.detailData.CustomerInfo.Name + "的意向订单转移请求";
      data.content = $scope.detailData.Record_Content;
      transferAnOrder(data, changeScope);
    }

    function changeScope() {
      if (vm.editor.transfer.kfID) {
        $scope.detailData.UserInfo.ShiftLogs.push({
          CreateTime: Date.now(),
          CreateUserID: $rootScope.userinfo._id.$id,
          CreateUserName: $rootScope.userinfo.FullName,
          State: 0,
          ToName: vm.editor.transfer.kfName
        });
        console.log(vm.editor.transfer.kfID);
        sendICGTDMessage($rootScope.detailData._id,vm.editor.transfer.kfID);
      }
      if (vm.editor.transfer.siguID) {
        $scope.detailData.Sales.ShiftLogs.push({
          CreateTime: Date.now(),
          CreateUserID: $rootScope.userinfo._id.$id,
          CreateUserName: $rootScope.userinfo.FullName,
          State: 0,
          ToName: vm.editor.transfer.siguName
        });
        console.log(vm.editor.transfer.siguID);
        sendICGTDMessage($rootScope.detailData._id,vm.editor.transfer.siguID);
      }
      buttonPermissionConfig();
      sendICGTDMessage($rootScope.detailData._id);
    }
  }
  /**
   * 显示日志中的短信
   */
  function showLogMessage() {
    var workflow = StateFlow();
    var steps = {};
    activate();

    function activate() {
      angular.forEach(steps, workflow.setStep);
      workflow.run(memberID);
    }
  }

  vm.uRecordState = [{
    '_id': '000000000000000000000001',
    'StateTitle': '意向客户'
  }, {
    '_id': '000000000000000000000002',
    'StateTitle': '跟踪客户'
  },{
    '_id': '000000000000000000000005',
    'StateTitle': '订单暂留'
  },{
    '_id': '000000000000000000000007',
    'StateTitle': '已签合同'
  }];
}
/**
 *
 */
angular.module("HY").controller("ICOrderLogController", ICOrderLogController);

function ICOrderLogController($timeout, getCancelTypes, saveTrackerRecord, getLogTrackerList, messageList,
  getLogRecordList, $scope, $rootScope, $filter,$sce) {
  var vm = this;
  var record_path = 'http://192.168.10.252/';
  vm.template = {};
  vm.log = {
    moduleID: 1
  };
  vm.detailTipInfo = {};
  // vm config functions
  vm.activate = activate;
  vm.configUrl = configUrl;
  vm.activate();
  vm.getRecordHistory = getRecordHistory;
  vm.getMessageList = getMessageList; // 获取手机短信列表
  vm.getTrackerList = getTrackerList; // 获取跟踪列表
  vm.saveTracker = saveTracker; // 保存跟踪记录


  /**
   * 保存跟踪记录
   */
  function saveTracker() {
    vm.detailTipInfo.text = "保存跟踪记录中...";
    vm.detailTipInfo.type = "info";
    var data = $scope.detailData.trackerEditor;
    data.RecordID = $scope.detailData._id;
    if(data.rIsNext==0){
      data.isAsk=0;
    }
    if(data.isAsk==0){
      data.reviewTime=null;
    }else {
      data.reviewTime = $filter("date")(data.reviewDate, "yyyy-MM-dd") + " " + data.hour + ":" + data.minute + ":00";
    }



    saveTrackerRecord(data, changeScope);

    function changeScope(response) {
      if (response.code == 700) {
        vm.detailTipInfo.text = "已保存跟踪记录";
        vm.detailTipInfo.type = "success";
        response.data.ReviewStateName = $filter("reviewStateFilter")(response.data.ReviewStateID);
        response.data.ReviewTime = data.reviewTime;
        $scope.detailData.trackLog.push(response.data);
        /*$scope.detailData.Review.Review_State = '000000000000000000000002';
        $scope.detailData.Review.Review_StateName = "跟踪客户";*/

        $scope.detailData.Review.Review_State = response.data.ReviewStateID;
        $scope.detailData.Review.Review_StateName = response.data.ReviewStateName;

        var mainDataItemIndex = _.findIndex($scope.mainData.list, function(item) {
          return item.orderID == $scope.detailData._id;
        });
        $scope.mainData.list[mainDataItemIndex].trackType = response.data.ReviewStateName;
        $scope.detailData.openTrackEditor = false;
        //sendICGTDMessage($scope.detailData._id);
      } else {
        vm.detailTipInfo.text = response.messages;
        vm.detailTipInfo.type = "error";
      }

    }
  }
  /**
   * 获取跟踪列表
   */
  function getTrackerList() {

    $scope.detailData.trackLogLoading = true;
    var orderID = $scope.detailData._id;
    getLogTrackerList(orderID, showTrackerList);

    function showTrackerList(response) {
      if (response.code == 700) {
        $scope.detailData.trackLog = response.data;
        angular.forEach($scope.detailData.trackLog, function(log) {
          if (moment(log.ReviewTime).format("x") > moment().format("x")) {
            log.showReviewTime = true;
          } else {
            log.showReviewTime = false;
          }
        });
        $scope.detailData.trackLogLoading = false;
      }
    }
  }
  /**
   * 获取信息列表
   */
  function getMessageList() {
    $scope.detailData.messageLogLoading = true;
    var orderID = $scope.detailData._id;
    messageList(orderID, changeScope);

    function changeScope(response) {
      if (response.code >= 700) {
        if (response.data) {
          $scope.detailData.messageLog = response.data;
        } else {
          $scope.detailData.messageLog = [];
        }
        $scope.detailData.messageLogLoading = false;
      }
    }
  }

  function getRecordHistory() {
    $scope.detailData.recordingLogLoading = true;
    var params = constructParam();
    getLogRecordList(params, showRecording);
    // /////////////////////////////////////
    /**
     * 构建参数
     */
    function constructParam() {
      // 所有电话全部输入到telsArray
      var telsArray = [];
      if ($rootScope.IntentionCustomer.CurrentIntentionOrder.CustomerInfo.MT) {
        telsArray.push($rootScope.IntentionCustomer.CurrentIntentionOrder.CustomerInfo.MT);
      }
      if ($rootScope.IntentionCustomer.CurrentIntentionOrder.CustomerInfo.Tel) {
        telsArray.push($rootScope.IntentionCustomer.CurrentIntentionOrder.CustomerInfo.Tel);
      }
      telsArray = _.uniq(telsArray); // 去重
      var data = {
        tels: telsArray.join(","),
        StartTime: $filter("date")($rootScope.IntentionCustomer.CurrentIntentionOrder.Record_Time, "yyyy-MM-dd")
      };
      return data;
    }
    /**
     * 显示通话记录
     */
    function showRecording(response) {
      response.data.forEach(function(item) {
        if (item.path2 !== "") {
          item.path3 = $sce.trustAsResourceUrl(record_path + item.path2);
        }
      });
      $scope.detailData.recordingLog = response.data;
      $scope.detailData.recordingLogLoading = false;
    }
  }

  function activate() {
    vm.configUrl();
    getBasicData();
    initializeDetailData();

  }

  function getBasicData() {
    getCancelTypes(function(response) {
      vm.cancelTypes = response.data;
      global.IntentionCustomer.cancelTypes = response.data;
    });
  }

  function initializeDetailData() {
    $scope.detailData = $rootScope.IntentionCustomer.CurrentIntentionOrder;
    $scope.detailData.trackerEditor = {
      isAsk: 1,
      rIsNext: 1,
      reviewDate: $filter("date")(Date.now(), "yyyy-MM-dd"),
      hour: $filter("date")(Date.now(), "HH"),
      minute: Math.ceil($filter("date")(Date.now(), "m") / 10) * 10 + ""
    };

    if ($scope.detailData.trackerEditor.minute == "60") {
      $scope.detailData.trackerEditor.minute = "00";
    }

  }

  function configUrl() {
    vm.template.baseUrl = "/public/angularView/intentionCustomer/ICOrder/GadgetICOrderLog/";
    vm.template.GadgetLogMessage = vm.template.baseUrl + "ICOrderGadgetLogMessage.html";
    vm.template.GadgetLogPhone = vm.template.baseUrl + "ICOrderGadgetLogPhone.html";
    vm.template.GadgetLogTracker = vm.template.baseUrl + "ICOrderGadgetLogTracker.html";
    vm.template.GadgetLogTrackerEditor = vm.template.baseUrl + "ICOrderGadgetLogTrackerEditor.html";
    vm.template.GadgetTransferLog = vm.template.baseUrl + "ICOrderGadgetTransferLog.html";
  }

}
angular.module("HY").controller("ICCustomerEditorController", ICCustomerEditorController);
function ICCustomerEditorController() {
	var vm = this;
	vm.toggleIntentionType = toggleIntentionType;// 切换意向类型
	vm.toggleIntentionRequirement = toggleIntentionRequirement;// 切换业务类型
	vm.saveAddress = saveAddress;// 保存联系地址
	vm.editAddress = editAddress;// 编辑联系地址
	vm.selectAddress = selectAddress;// 选择联系地址
	vm.deleteAddress = deleteAddress;// 删除联系地址
	vm.saveCustomer = saveCustomer;// 保存意向客户
	vm.toggleActivity = toggleActivity;// 是否参加活动
	vm.toggleCustomerType = toggleCustomerType;// 切换顾客类型
	/**
	 * 切换意向类型
	 */
	function toggleIntentionType() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 切换业务类型
	 */
	function toggleIntentionRequirement() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 保存联系地址
	 */
	function saveAddress() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 编辑联系地址
	 */
	function editAddress() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 选择联系地址
	 */
	function selectAddress() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 删除联系地址
	 */
	function deleteAddress() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 保存意向客户
	 */
	function saveCustomer() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 是否参加活动
	 */
	function toggleActivity() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
	/**
	 * 切换顾客类型
	 */
	function toggleCustomerType() {
		var workflow = StateFlow();
		var steps = {};
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run(memberID);
		}
	}
}
angular.module("HY").controller("ICOrderController", ICOrderController);

function ICOrderController(addRefreshPageByID, getCustomerServerList, getICUsersToNotice, getICOrderAddedList, updateIntentionOrder, getValidType, getCustomerLevels, getIntentionCustomerSource, getIntentionCustomerDifficultyDegree, getIntentionCustomerRecordType,
    getIntentionCustomerReviewState, getIntentionCustomerActivity, getIntentionCustomerQuestionType, getSalesByTagID, addRefreshPageByID, getCustomerHistory, checkIfMemberByPhone, getOrderList,
    $scope, $filter, $rootScope, checkAndGetCustomerInfo, saveAnOrder, saveAMember, getICOrderFollowList) {
    var vm = this;
    vm.page = 1;

    vm.pageSize = 20;
    //vm.addMarketLink = "intentionCustomer/ICOrder/add"; // 添加市场意向客户的
    //vm.addLink = "intentionCustomer/ICOrder/add?inteCustomer=ordinary";// 添加意向客户的
    vm.addLink = "intentionCustomer/ICOrder/add"; // 添加意向客户的
    vm.editLink = "intentionCustomer/ICOrder/edit"; // 编辑意向客户的url
    vm.autoLink = "intentionCustomer/ICOrder/autoAdd"; // 自动弹出界面url
    // editor是保存
    vm.editor = {
        history: {
            status: "empty"
        },
        tel: 0, // 手机号
        add: {
            CustomerTelAreaCode: "0574",
            addType: 2,
            RecordType_ID: 1,
            memberNotEditable: false,
            Is_Activity: 0,
            SDID: "000000000000000000000001",
            Record_Type: 1,
            HavePassport: 0,
            HaveVisa: 0,
            CompanyCustomer: false,
            destinations: [],
            canPickSalesman: false,
            salesLoading: true,
            MessyDegree: 1,
            Adult_Num: 1,
            GenderTypeID: 2
        }
    };

    vm.datepickerOptions = {
        playStartTime: {
            minDate: Date.now()
        },
        playEndTime: {
            minDate: vm.editor.add.Play_StartTime ? vm.editor.add.Play_StartTime.getTime() : Date.now()
        }
    };

    vm.changeEndDateOption = changeEndDateOption;
    vm.stations = $rootScope.Station;
    vm.template = {};
    vm.templateBasicUrl = "/public/angularView/intentionCustomer/ICOrder/GadgetICOrderAdd/";
    vm.template.customerInfo = vm.templateBasicUrl + "ICOrderEditCustomerInfoForm.html";
    vm.template.callingInTab = vm.templateBasicUrl + "ICOrderEditCallingInTab.html";
    vm.template.customerHistory = vm.templateBasicUrl + "ICOrderEditCustomerHistory.html";
    vm.template.intentionRequirement = vm.templateBasicUrl + "ICOrderEditIntentionRequirement.html";
    vm.commonOrderList = "/public/angularView/intentionCustomer/ICCommonOrderList.html";
    vm.searchList = searchList;
    vm.fetch = fetch;
    vm.searchSubmit = searchSubmit;
    vm.addANewIntentionCustomer = addANewIntentionCustomer;
    //vm.addANewMarketInteCustomer=addANewMarketInteCustomer;
    vm.changeAreaType = changeAreaType;
    vm.changeRecordType = changeRecordType;
    vm.editorRecordTypeChanged = editorRecordTypeChanged;
    vm.editorLineTypeChanged = editorLineTypeChanged;
    vm.editorProductAreaChanged = editorProductAreaChanged;
    vm.destinationPickerBuilder = destinationPickerBuilder;
    vm.saleChange = saleChange;
    vm.filter = {
        serviceTypeID: 1
    };
    vm.IntentionCustomer = {};
    vm.save = save;
    vm.destinations = $rootScope.SelectedAddress;
    vm.initDetailPage = initDetailPage;
    // $rootScope.orderFromCallingIn = false;
    // 客户类型：如果是主动呼入，则为false，如果是手动添加，则为
    // vm.save = manualSave;// 保存客户类型，
    vm.clearEditor = clearEditor;
    vm.activate = activate;
    vm.changeSource = changeSource;
    vm.checkIfMember = checkIfMember;
    vm.checkIntentionCustomerBasicInfo = checkIntentionCustomerBasicInfo;
    vm.updateAnIntentionOrder = updateAnIntentionOrder;
    vm.buildCustomerTel = buildCustomerTel;
    vm.editor.addValid = true;
    vm.isCellphone = isCellphone;
    vm.setListType = setListType;
    vm.getSales = getSales;
    vm.changeSite = changeSite;
    vm.judgeMeAsAServer = judgeMeAsAServer;
    vm.fetchAddPanelByPhone = fetchAddPanelByPhone;
    activate();

    function changeSite() {
        var index = _.findIndex($rootScope.Station, function(station) {
            return station._id.$id == vm.editor.add.SDID;
        });
        if (index > -1) {
            vm.editor.add.SDName = $rootScope.Station[index].Station_Name;
        }
    }

    function changeEndDateOption() {
        vm.datepickerOptions.playEndTime.minDate = vm.editor.add.Play_StartTime.getTime();
    }

    function setListType(name) {
        $rootScope.listType = name;
        vm.listType = name;
    }

    function isCellphone(cellphone) {
        var cellphoneREGEXP = /^1[3|4|5|7|8]\d{9}$/;
        if (cellphoneREGEXP.test(modelValue)) {
            return true;
        } else {
            return false;
        }
    }

    function buildCustomerTel() {
        var reg = new RegExp("^[0-9]*$");
        if (reg.test(vm.editor.add.CustomerTelAreaCode) && reg.test(vm.editor.add.CustomerTelNum)) {
            vm.editor.add.CustomerTel = vm.editor.add.CustomerTelAreaCode + "-" + vm.editor.add.CustomerTelNum;
        } else {
            vm.editor.addValid = false;
            vm.detailTipInfo = "固定电话必须由数字组成";
            vm.detailTipInfoType = "error";
        }
    }

    function checkIntentionCustomerBasicInfo() {
        vm.IntentionCustomer = global.IntentionCustomer;
        if (!$rootScope.IntentionCustomer.addHistory) {
            $rootScope.IntentionCustomer.addHistory = [];
        }
        if (global.IntentionCustomer.Source == undefined) {
            getIntentionCustomerSource(function(data) {
                $rootScope.IntentionCustomer.Source = data;
                global.IntentionCustomer.Source = data;
            });
        }
        if (global.IntentionCustomer.DifficultyDegree == undefined) {
            getIntentionCustomerDifficultyDegree(function(data) {
                $rootScope.IntentionCustomer.DifficultyDegree = data;
                global.IntentionCustomer.DifficultyDegree = data;
            });
        }
        if (global.IntentionCustomer.RecordType == undefined) {
            getIntentionCustomerRecordType(function(data) {
                $rootScope.IntentionCustomer.RecordType = data;
                global.IntentionCustomer.RecordType = data;
            });
        }
        if (global.IntentionCustomer.ReviewState == undefined) {
            getIntentionCustomerReviewState(function(data) {
                $rootScope.IntentionCustomer.ReviewState = data;
                global.IntentionCustomer.ReviewState = data;
            });
        }
        if (global.IntentionCustomer.Activities == undefined) {
            getIntentionCustomerActivity(function(data) {
                $rootScope.IntentionCustomer.Activities = data;
                global.IntentionCustomer.Activities = data;
            });
        }
        if (global.IntentionCustomer.QuestionType == undefined) {
            getIntentionCustomerQuestionType(function(data) {
                $rootScope.IntentionCustomer.QuestionType = data;
                global.IntentionCustomer.QuestionType = data;
            });
        }
        if (global.IntentionCustomer.CustomerLevel == undefined) {
            // getValidType(function(data){
            // $rootScope.IntentionCustomer.ValidType = data;
            // global.IntentionCustomer.ValidType = data;
            // });
            getCustomerLevels(function(data) {
                $rootScope.IntentionCustomer.CustomerLevel = data;
                global.IntentionCustomer.CustomerLevel = data;
            });
        }
    }

    /*添加意向客户*/
    function addANewIntentionCustomer(listType) {
        $rootScope.IntentionCustomerEditor = "Add";
        // $rootScope.callingInTelNo = false;
        if ($rootScope.callingInTelNos) {
            if ($rootScope.callingInTelNos.length == 0) {
                $rootScope.callingInTelNo = false;
                $rootScope.currentCallingInNo = false;
                $rootScope.currentCallingInNoTel = false;
                $rootScope.currentCallingInNoCellphone = false;
            }
        }
        $scope.fetch(vm.addLink, false);
        $scope.openItem();
    }

    /*/!*添加市场意向客户*!/
    function addANewMarketInteCustomer(listType) {
      $rootScope.IntentionCustomerEditor = "Add";
      // $rootScope.callingInTelNo = false;
      $scope.fetch(vm.addMarketLink, false);
      $scope.openItem();
    }*/

    function activate() {
        console.log('%cACTIVATE', 'background:black;color:blue;', 'now activating')

        //检查基本信息，如果没有特定的基础信息，要进行加载
        checkIntentionCustomerBasicInfo();
        // 需求来源不同，则保存动作处理的方式不同，一开始进行数据加载的方式不同
        if (judgeMeAsAServer()) { //如果我是个客服
            //var inteCustomerType=$rootScope[position[2]].inteCustomer;//意向类型
            if ($rootScope.callingInTelNo && $rootScope.IntentionCustomerEditor != "Edit") { // 如果是
                vm.editor.tel = $rootScope.currentCallingInNo;

                vm.editor.add.addType = 1;
                if ((/^1[3|4|5|7|8]\d{9}$/.test($rootScope.callingInTelNo))) { // 如果不是手机号码
                    //vm.editor.add.CustomerMobile = $rootScope.currentCallingInNo;
                } else if (/^\d+$/.test($rootScope.callingInTelNo)) {
                    //vm.editor.add.CustomerTel = $rootScope.currentCallingInNo;
                }
                $rootScope.IntentionCustomerEditor = "Add";
                //autoOpenAddCustomer();
                buildPanelDataWhenCallingIn();
            }
            /*else if(inteCustomerType!==null&&inteCustomerType!==undefined && $rootScope.IntentionCustomerEditor != "Edit"){
              vm.editor.add.addType = 1;
              $rootScope.callingInTelNo = undefined;
            }*/
        } else {
            $rootScope.callingInTelNo = undefined;
        }
        if ($rootScope.IntentionCustomerEditor == "Edit") {
            constructPanelDataWithRootScopeData();
        }
        if (!$rootScope.watchedCurrentCallingInNo) {
            $rootScope.watchedCurrentCallingInNo = true;
            $rootScope.$watch('currentCallingInNo', function(newValue, oldValue) {
                console.log(newValue, oldValue);
                if (newValue && oldValue) {
                    if (newValue !== oldValue) {
                        $rootScope.IntentionCustomer.addHistory[oldValue] = angular.copy(vm.editor.add);
                        vm.editor.add = $rootScope.IntentionCustomer.addHistory[newValue];
                        console.log($rootScope.IntentionCustomer.addHistory);

                    } else {
                        vm.editor.add = $rootScope.IntentionCustomer.addHistory[newValue];
                    }
                    checkIfMember();
                }

                // if (newValue !== oldValue) {
                //     console.log($rootScope.IntentionCustomer.addHistory);
                //     if (!$rootScope.IntentionCustomer.addHistory[oldValue]) {
                //         $rootScope.IntentionCustomer.addHistory[oldValue] = {}
                //     }
                //     if (vm.editor.add != clearedEditorAddData()) {
                //         $rootScope.IntentionCustomer.addHistory[oldValue] = JSON.parse(JSON.stringify(vm.editor.add));
                //     }
                //     console.info($rootScope.IntentionCustomer.addHistory);
                //
                //
                //     // if (_.keys($rootScope.IntentionCustomer.addHistory).indexOf(oldValue) < 0) { //如果上一条呼入电话的历史记录没有存，那么存储一下
                //     //   //将当前editor数据，存储到上一条历史记录里面
                //     //   console.info("上一条电话没有保存" + oldValue);
                //     //
                //     //
                //     // }
                //     if (_.keys($rootScope.IntentionCustomer.addHistory).indexOf(newValue) < 0) { //如果当前的电话，是新电话，那么清空当前编辑面板
                //         console.info("清空当前这一条");
                //         clearEditorAddData();
                //         console.info($rootScope.IntentionCustomer.addHistory);
                //         console.info("qingkongwanbi");
                //     }
                // }

                // console.info("--");
                // console.log(vm.editor.add);
                // console.info("--");
                // console.info("--");

            });
        }

    }

    function constructPanelDataWithRootScopeData() {
        $rootScope.callingInTelNo = false;
        vm.editor.add.OrderID = $rootScope.IntentionCustomerEditorData._id;
        vm.editor.add.memberNotEditable = true;
        vm.editor.add.MessyDegree = $rootScope.IntentionCustomerEditorData.CustomerInfo.MessyDegree;
        vm.editor.CustomerName = $rootScope.IntentionCustomerEditorData.CustomerInfo.Name;
        vm.editor.add.HaveVisa = $rootScope.IntentionCustomerEditorData.VisaInfo.HaveVisa;
        vm.editor.add.visa_time = $rootScope.IntentionCustomerEditorData.VisaInfo.ExpirationTime;
        vm.editor.add.HavePassport = $rootScope.IntentionCustomerEditorData.PassportInfo.HavePassport;
        vm.editor.add.passportTime = $rootScope.IntentionCustomerEditorData.PassportInfo.ExpirationTime;
        vm.editor.add.RecordType_ID = $rootScope.IntentionCustomerEditorData.RecordType_ID;
        if ($rootScope.IntentionCustomerEditorData.Source) {
            vm.editor.add.SourceID = $rootScope.IntentionCustomerEditorData.Source.ID;
        }
        vm.editor.add.Review = $rootScope.IntentionCustomerEditorData.Review;
        vm.editor.add.SDID = $rootScope.IntentionCustomerEditorData.SDID;
        vm.editor.add.SDName = $rootScope.IntentionCustomerEditorData.SDName;
        vm.editor.add.Adult_Num = $rootScope.IntentionCustomerEditorData.Adult_Num;
        vm.editor.add.destinations = [];
        constructDestinations();
        vm.editor.add.Is_Activity = $rootScope.IntentionCustomerEditorData.Is_Activity;
        vm.editor.add.ActivityID = $rootScope.IntentionCustomerEditorData.ActivityID;
        vm.editor.add.Play_StartTime = $rootScope.IntentionCustomerEditorData.Play_StartTime;
        vm.editor.add.Play_EndTime = $rootScope.IntentionCustomerEditorData.Play_EndTime;
        vm.editor.add.Record_Type = $rootScope.IntentionCustomerEditorData.Record_Type;
        vm.editor.add.ProductAreaType_ID = $rootScope.IntentionCustomerEditorData.ProductAreaType_ID;
        vm.editor.add.LineType_ID = $rootScope.IntentionCustomerEditorData.LineType_ID;
        vm.editor.add.Sales_ID = $rootScope.IntentionCustomerEditorData.Sales.ID
        changeSource();
        vm.editor.add.Record_Content = $rootScope.IntentionCustomerEditorData.Record_Content;
        vm.editor.add.QuestionType_ID = $rootScope.IntentionCustomerEditorData.QuestionType_ID;
        vm.editor.add.UserInfo = $rootScope.IntentionCustomerEditorData.UserInfo;

        function constructDestinations() {
            $rootScope.IntentionCustomerEditorData.DestinationInfo.Destination.forEach(function(item) {
                var cityOb = _.findIndex(vm.destinations, function(c) {
                    //table2
                    //  return c.GADDRID.$id == item.DestinationID;
                    //table1
                    return c._id.$id == item.DestinationID;

                });
                if (cityOb > -1) {
                    vm.editor.add.destinations.push(vm.destinations[cityOb]);
                }
                // vm.editor.add.destinations.push({
                // _id : {
                // $id : item.DestinationID
                // },
                // Title : item.DestinationName
                // })
            });
            destinationPickerBuilder();
        }
    }

    function updateAnIntentionOrder(orderID) {
        console.warn(vm.editor.add);
        var order = {};
        var acceptKeys = ["DestinationIDs", "Play_StartTime", "Play_EndTime", "CustomerID", "CustomerName", "MessyDegree", "CustomerTel", "CustomerMobile", "addType", "Phone", "Record_Content",
            "HavePassport", "HaveVisa", "SDID", "ActivityID", "Adult_Num", "passportTime", "visa_time", "Is_Activity", "Record_Type", "RecordType_ID", "ProductAreaType_ID", "LineType_ID",
            "QuestionType_ID", "SourceID", "SourceName", "Sales_ID", "Sales_Name", 'Review'
        ];
        var timeKeys = ["Play_StartTime", "Play_EndTime", "passportTime", "visa_time"];
        angular.forEach(vm.editor.add, function(value, key) {
            if (_.indexOf(acceptKeys, key) > -1) {
                order[key] = value;
                if (_.indexOf(timeKeys, key) > -1) {
                    order[key] = $filter("date")(value, "yyyy-MM-dd");
                }
            }
        });

        function refreshDetailPage() {
            addRefreshPageByID($rootScope[switchType[2]].id);
            $scope.fetch("intentionCustomer/ICOrder/detail?recordID=" + orderID);
        }

        updateIntentionOrder(constructParams(), callback);

        function constructParams() {
            destinationPickerBuilder();
            var params = {
                RecordID: orderID,
                MessyDegree: vm.editor.add.MessyDegree,
                DestinationIDs: vm.editor.add.DestinationIDs,
                Play_StartTime: $filter("date")(vm.editor.add.Play_StartTime, "yyyy-MM-dd"),
                Play_EndTime: $filter("date")(vm.editor.add.Play_EndTime, "yyyy-MM-dd"),
                Record_Content: vm.editor.add.Record_Content,
                Adult_Num: vm.editor.add.Adult_Num,
                HavePassport: vm.editor.add.HavePassport,
                passportTime: $filter("date")(vm.editor.add.passportTime, "yyyy-MM-dd"),
                HaveVisa: vm.editor.add.HaveVisa,
                visa_time: $filter("date")(vm.editor.add.visa_time, "yyyy-MM-dd"),
                SDID: vm.editor.add.SDID,
                Is_Activity: vm.editor.add.Is_Activity,
                ActivityID: vm.editor.add.ActivityID,
                Record_Type: vm.editor.add.Record_Type,
                RecordType_ID: vm.editor.add.RecordType_ID,
                ProductAreaType_ID: vm.editor.add.ProductAreaType_ID,
                LineType_ID: vm.editor.add.LineType_ID,
                QuestionType_ID: vm.editor.add.QuestionType_ID,
                SourceID: vm.editor.add.SourceID,
                SourceName: vm.editor.add.SourceName

            };
            return params;
        }

        function callback(response) {
            sendNoticeToAccepters(order);
            saveToDetailData();
            saveToMainData();
            $scope.closeSubView();
            fetch($rootScope.listType, "intentionCustomer/ICOrder/detail?recordID=" + orderID, orderID, vm.editor.add.CustomerID);


            function saveToDetailData() {
                console.log('VM.EDITOR.ADD', vm.editor.add)
                $rootScope.IntentionCustomerEditorData.ActivityID = vm.editor.add.ActivityID;
                $rootScope.IntentionCustomerEditorData.Adult_Num = vm.editor.add.Adult_Num;
                $rootScope.IntentionCustomerEditorData.MessyDegree = vm.editor.add.MessyDegree;
                $rootScope.IntentionCustomerEditorData.Is_Activity = vm.editor.add.Is_Activity;
                $rootScope.IntentionCustomerEditorData.LineType_ID = vm.editor.add.LineType_ID;
                $rootScope.IntentionCustomerEditorData.PassportInfo.HavePassport = vm.editor.add.HavePassport;
                $rootScope.IntentionCustomerEditorData.PassportInfo.ExpirationTime = vm.editor.add.passportTime;
                $rootScope.IntentionCustomerEditorData.VisaInfo.HaveVisa = vm.editor.add.HaveVisa;
                $rootScope.IntentionCustomerEditorData.VisaInfo.ExpirationTime = vm.editor.add.visa_time;
                $rootScope.IntentionCustomerEditorData.Play_EndTime = vm.editor.add.Play_EndTime;
                $rootScope.IntentionCustomerEditorData.Play_StartTime = vm.editor.add.Play_StartTime;
                $rootScope.IntentionCustomerEditorData.ProductAreaType_ID = vm.editor.add.ProductAreaType_ID;
                $rootScope.IntentionCustomerEditorData.QuestionType_ID = vm.editor.add.QuestionType_ID;
                $rootScope.IntentionCustomerEditorData.RecordType_ID = vm.editor.add.RecordType_ID;
                $rootScope.IntentionCustomerEditorData.Record_Content = vm.editor.add.Record_Content;
                $rootScope.IntentionCustomerEditorData.Record_Type = vm.editor.add.Record_Type;
                $rootScope.IntentionCustomerEditorData.SDID = vm.editor.add.SDID;
                $rootScope.IntentionCustomerEditorData.SDName = vm.editor.add.SDName;
                $rootScope.IntentionCustomerEditorData.Source.ID = vm.editor.add.SourceID;
                $rootScope.IntentionCustomerEditorData.Source.Name = vm.editor.add.SourceName;
                $rootScope.IntentionCustomerEditorData.DestinationInfo.Destination = constructDestinationInfo();
            }

            function saveToMainData() {
                var item = _.findIndex($scope.mainData.list, function(i) {
                    return i.orderID == orderID;
                });
                console.log(item);
                if (item > -1) {
                    console.log($scope.mainData.list[item]);
                    $scope.mainData.list[item] = updateToMainData();
                    console.log($scope.mainData.list[item]);
                }
            }

            function updateToMainData() {
                console.log($rootScope.IntentionCustomerEditorData);
                var orderData = {
                    "orderID": $rootScope.IntentionCustomerEditorData._id,
                    "destination": {
                        Destination: []
                    },
                    "members": vm.editor.add.Adult_Num,
                    "customerID": vm.editor.add.CustomerID,
                    "customerName": $rootScope.IntentionCustomerEditorData.CustomerInfo.Name,
                    "contact": $rootScope.IntentionCustomerEditorData.CustomerInfo.MT,
                    "CreateUserID": $rootScope.userinfo._id.$id,
                    "toDate": vm.editor.add.Play_EndTime,
                    "fromDate": vm.editor.add.Play_StartTime,
                    "intentionType": $filter("recordTypeFilter")(vm.editor.add.Record_Type),
                    "trackType": "意向客户",
                    "addDate": Date.now(),
                    "url": "intentionCustomer/ICOrder/detail?recordID=" + orderID

                };
                orderData.destination.Destination = constructDestinationInfo();
                if (judgeMeAsAServer()) {
                    orderData.customerServer = $rootScope.userinfo.FullName;
                }
                return orderData;
            }

            function constructDestinationInfo() {
                var data = [];
                vm.editor.add.destinations.forEach(function(item) {
                    data.push({
                        //  DestinationID: item.GADDRID.$id,
                        DestinationID: item._id.$id,
                        DestinationName: item.Title
                    });
                });
                return _.uniq(data);
            }
        }
    }

    function initDetailPage() {

    }

    function fetch(listType, url, orderID, customerID) {
        switch (listType) {
            case "order":
            case "addedCustomers":
            case "orderFollow":
            case "orderConfirmation":
                $rootScope.customerID = customerID;
                $scope.fetch(url, orderID);
                $scope.openItem();
                break;
            default:
                break;
        }

    }
    /**
     * 根据个人的标签来判断addType
     */
    function setAddType() {
        var addType = 2;
        $rootScope.userinfo.Label.forEach(function(labelItem) {
            var labelNo = labelItem.labelNo;
            switch (labelNo) {
                case 3000:
                case 3001:
                case 3002:
                case 3003:
                case 3004:
                    addType = 1;
                default:
                    break;
            }
        });
        return addType;
    }
    /**
     * 目的地选择器
     */
    function destinationPickerBuilder(value) {
        vm.editor.add.destinations = _.uniq(vm.editor.add.destinations);
        //vm.editor.add.DestinationIDs = _.pluck(_.pluck(vm.editor.add.destinations, "GADDRID"), "$id").join(",");
        vm.editor.add.DestinationIDs = _.pluck(_.pluck(vm.editor.add.destinations, "_id"), "$id").join(",");
        console.log(vm.editor.add.DestinationIDs);
    }
    /**
     * 改变来源
     */
    function changeSource() {
        var source = _.filter(vm.IntentionCustomer.Source, function(elem) {
            return elem._id == vm.editor.add.SourceID;
        });
        if (source.length > 0) {
            vm.editor.add.SourceName = source[0].Title;
        } else {
            vm.editor.add.SourceName = "未知类型";
        }
    }
    /**
     * 清空编辑器
     */
    function clearEditor() {
        $rootScope.callingInTelNo = null;
        vm.editor = {
            history: {
                status: "empty"
            },
            tel: 0, // 手机号
            add: {
                CustomerTelAreaCode: "0574",
                addType: 2,
                RecordType_ID: 1,
                memberNotEditable: false,
                Is_Activity: 0,
                SDID: "000000000000000000000001",
                Record_Type: 1,
                HavePassport: 0,
                HaveVisa: 0,
                CompanyCustomer: false,
                destinations: [],
                canPickSalesman: false,
                salesLoading: true,
                MessyDegree: 1,
                Adult_Num: 1,
                GenderTypeID: 2
            }
        };
    }
    /**
     * 自动打开新增意向客户
     */
    function autoOpenAddCustomer() {
        $rootScope.fetch(vm.autoLink, false);
        $scope.openItem();
    }
    /**
     * 根据所选的意向类型，获得私顾标签id
     */
    function pickTagID(recordTypeID, areaTypeID, lineTypeID) {
        switch (recordTypeID) {
            case 1: // 线路
                switch (lineTypeID) {
                    case 1: // 自由行
                        return 3;
                    case 2: // 组团游
                        switch (areaTypeID) {
                            case 1: // 周边
                                return 0;
                            case 2: // 国内
                                return 1;
                            case 3: // 出境
                                return 2;
                            default:
                                break;
                        }
                    case 3: // 邮轮游
                        return 2;
                    case 4: // 定制游
                        return 6;
                    case 5: // 自驾游
                        return 4;
                    default:
                        break;
                }
            case 2: // 签证
                return 5;
            case 3: // 门票
                return 0;
            default:
                break;
        }
        return -1;
    }
    /**
     * 改变私顾
     */
    function saleChange() {
        var salesman = _.filter(vm.sales, function(item) {
            return item._id.$id == vm.editor.add.Sales_ID;
        });
        vm.editor.add.Sales_Name = salesman[0].FullName;
        console.log(vm.editor.add);
    }
    /**
     * 获取私顾
     */
    function getSales() {
        vm.editor.add.salesLoading = true;
        var tagID = pickTagID(vm.editor.add.Record_Type, vm.editor.add.ProductAreaType_ID, vm.editor.add.LineType_ID);
        if (tagID > -1) {
            getSalesByTagID(tagID, function(response) {
                vm.sales = response;
                vm.editor.add.salesLoading = false;
            });
        } else {
            vm.sales = [];
        }
        vm.editor.add.salesLoading = false;
    }
    /**
     * 改变意向类型
     */
    function editorRecordTypeChanged() {
        if (vm.editor.add.Record_Type > 1) {
            // vm.detailTipInfo = "加载私顾中...";
            // vm.detailTipInfoType = "info";
            vm.editor.add.canPickSalesman = true;
            getSales();
        } else {
            vm.editor.add.canPickSalesman = false;
        }

    }
    /**
     * 改变产品区域
     */
    function editorProductAreaChanged() {
        if (vm.editor.add.ProductAreaType_ID && vm.editor.add.LineType_ID) {
            vm.editor.add.canPickSalesman = true;
            // vm.detailTipInfo = "加载私顾中...";
            // vm.detailTipInfoType = "info";
            getSales();
        } else {
            vm.editor.add.canPickSalesman = false;
        }
    }
    /**
     * 改变产品线路类型
     */
    function editorLineTypeChanged() {
        if (vm.editor.add.ProductAreaType_ID && vm.editor.add.LineType_ID) {
            vm.editor.add.canPickSalesman = true;
            // vm.detailTipInfo = "加载私顾中...";
            // vm.detailTipInfoType = "info";

            getSales();
        } else {
            vm.editor.add.canPickSalesman = false;
        }
    }
    /**
     * 显示提示
     */
    function showTip() {

    }
    /**
     * 从API获得数据之后，向面板中设置数值
     */
    function setEditorValues(response) {
        var memberData = response.list[0];
        vm.editor.memberID = memberData._id.$id;
        vm.editor.add.CustomerID = memberData._id.$id;
        vm.editor.add.CompanyCustomer = memberData.CompanyCustomer;
        vm.editor.add.CustomerCompanyName = memberData.CustomerCompanyName;
        vm.editor.add.CustomerName = memberData.CustomerName;
        if (memberData.Enlarge.CustomerTel && !vm.editor.add.CustomerTel) {
            vm.editor.add.CustomerTel = memberData.Enlarge.CustomerTel;
        }

        vm.editor.add.CustomerMobile = memberData.CustomerMobile;
        vm.editor.add.memberNotEditable = true;


        vm.editor.add.isMember = true;
        vm.editor.add.IsExistTouristBlacklist = memberData.IsExistTouristBlacklist;
        vm.editor.add.GenderTypeID = memberData.Enlarge.GenderTypeID;
    }
    /**
     * 检查是否是会员
     */
    function checkIfMember(cellphone) {
        vm.editor.add.callingTelNoSet = false;
        if (cellphone == undefined) {
            var cellphone;
            if ($rootScope.currentCallingInNoCellphone) { //手机呼入
                cellphone = $rootScope.currentCallingInNoCellphone;
            } else if ($rootScope.currentCallingInNoTel) { //固话呼入
                if (vm.editor.add.CustomerMobile != "" && vm.editor.add.CustomerMobile) { //这个电话第一次呼入
                    console.info("已经设置过手机号");
                    console.log($rootScope.callingInTelNos);
                    cellphone = vm.editor.add.CustomerMobile;
                } else { //这个电话已经在呼入列表里
                    console.info("还未设置手机号");
                    cellphone = $rootScope.currentCallingInNoTel;
                }
            } else { //手动填写
                cellphone = vm.editor.add.CustomerMobile;
            }
            if ($rootScope.currentCallingInNo && !vm.editor.add.callingTelNoSet) { // 有电话呼入，还没有设置电话到意向客户中
                // if ($rootScope.currentCallingInNoCellphone) { //当前有手机呼入
                //   cellphone = $rootScope.currentCallingInNoCellphone;
                // } else if ($rootScope.currentCallingInNoTel && !cellphone) { //当前有固话呼入，但是手机号是空
                //   cellphone = $rootScope.currentCallingInNoTel;
                // }

                if (!(/^1[3|4|5|7|8]\d{9}$/.test(cellphone))) { // 如果不是手机号码，即电话是固话
                    if (!(/^\d+$/.test(cellphone))) { // 如果不是固话，也就是输入不是电话号码
                        console.info("不是固话");
                        vm.editor.add.memberNotEditable = false;
                        vm.editor.add.TelNotChangable = false;
                        vm.editor.add.MobileNotChangable = false;
                        vm.editor.history.status = "empty";
                    } else { // 如果是固话
                        console.info("固话");
                        //vm.editor.add.CustomerTel = $rootScope.currentCallingInNoTel;
                        vm.editor.add.memberNotEditable = false;
                        vm.editor.history.status = "empty";
                        vm.editor.add.TelNotChangable = true;
                        vm.editor.add.callingTelNoSet = true;
                        vm.editor.add.MobileNotChangable = false;
                    }
                    return;
                } else { //如果是手机号码

                    if (!$rootScope.currentCallingInNoTel) {
                        vm.editor.add.TelNotChangable = false;
                        vm.editor.add.MobileNotChangable = true;
                    } else {
                        vm.editor.add.TelNotChangable = true;
                        vm.editor.add.MobileNotChangable = false;
                    }
                    if ($rootScope.currentCallingInNoCellphone) {
                        //vm.editor.add.CustomerMobile = $rootScope.currentCallingInNoCellphone;
                        vm.editor.add.MobileNotChangable = true;
                    }
                    vm.editor.add.callingTelNoSet = true;
                }
            } else {
                // （有呼入电话，设置了固话）或者（没呼入电话）
                if (!(/^1[3|4|5|7|8]\d{9}$/.test(cellphone))) { //不是手机，那么就不检查，直接返回
                    vm.editor.add.memberNotEditable = false;
                    vm.editor.history.status = "empty";
                    return;
                }
            }
        }
        console.info("checking：" + cellphone);
        // vm.detailTipInfo = "正在检测该顾客是否是会员...";
        // vm.detailTipInfoType = "info";
        vm.editor.add.memberNotEditable = true;
        checkIfMemberByPhone({
            TelPhone: cellphone
        }, function(response) {
            if (response.count == 0) { // 不是会员 //////
                vm.editor.add.memberNotEditable = false;
                vm.editor.add.isMember = false;
                if ($rootScope.currentCallingInNoCellphone) {
                    vm.editor.add.MobileNotChangable = true;
                    vm.editor.add.TelNotChangable = false;
                }
                if ($rootScope.currentCallingInNoTel) {
                    vm.editor.add.TelNotChangable = true;
                    vm.editor.add.MobileNotChangable = false;
                }
                // vm.detailTipInfo = "该顾客还不是会员";
                // vm.detailTipInfoType = "warning";

            } else { // 是会员 ///////
                vm.customer = response;
                // vm.detailTipInfo = "该顾客是会员，已加载会员信息";
                // vm.detailTipInfoType = "success";
                setEditorValues(response); // 向面板设置值 ///////
                vm.editor.history.status = "loading";
                loadMemberHistory();
            }
        });
    }

    function loadMemberHistory() {
        if (vm.editor.add.isMember) {
            getCustomerHistory({
                customerID: vm.editor.memberID
            }, function(response) {
                if (response.length == 0) {
                    vm.editor.history.status = "empty";
                } else {
                    vm.editor.history.status = "loaded";
                }

                vm.customer.history = response;
            });
        }
    }
    /**
     * 电话呼入时，构建操作面板的数据
     */
    function buildPanelDataWhenCallingIn() {

        checkIfMember();


    }

    /**
     * 更改订单类型时，要进行的操作
     */
    function changeRecordType() {
        if (vm.filter.recordType != 1) {
            vm.filter.districtType = null;
            vm.filter.lineType = null;
        }
    }
    /**
     * 更改大区时，要进行的操作
     */
    function changeAreaType() {
        if (vm.filter.districtType == null) {
            vm.filter.lineType = null;
        }
    }
    /**
     * 检索列表信息，并且加载到scope中去
     */
    function searchList(scrolling) {
        // if ($scope.mainData.allPageCount > 1) {
        if ($scope.mainData.allPageCount == undefined) {
            $scope.mainData.allPageCount = $scope.mainData.pageCount;
        }

        vm.listLoading = true;
        if (scrolling == undefined) { // 如果是直接检索，要进行初始化的操作//////////////////////
            vm.page = 1;
            vm.listMax = false;
            $scope.mainData.list = [];
        } else {
            if ($scope.mainData.allPageCount == 1 || vm.page == $scope.mainData.allPageCount) {
                vm.listLoading = false;
                $rootScope.isloadList = false;
                $rootScope.showProcessBar = false;
                return;
            }
            vm.page += 1;
        }

        var search = getInput(vm.filter);
        if (!vm.listMax) { // 没有达到最大页码
            // //////////////////////////////////////
            switch ($rootScope.listType) {
                case "addedCustomers":
                    getICOrderAddedList(search, changeScope);
                    break;
                case "order":
                    getOrderList(search, changeScope);
                    break;
                case "orderFollow":
                    if (scrolling) {
                        vm.listLoading = false;
                        $rootScope.isloadList = false;
                        $rootScope.showProcessBar = false;
                        return;
                    }
                case "orderConfirmation":
                    vm.listLoading = false;
                    $rootScope.isloadList = false;
                    $rootScope.showProcessBar = false;
                default:
                    break;
            }
        } else { // 最大页码 //////////////////////////////////////
            vm.listLoading = false;
            $rootScope.isloadList = false;
            $rootScope.showProcessBar = false;
        }
        // } else {
        // vm.listLoading = false;
        // $rootScope.isloadList = false;
        // $rootScope.showProcessBar = false;
        // }
        // functions //////////////////////////////////////
        function getInput(filter) {
            /**
             * page(int，第几页) pageSize(int,每页显示数量，不传值默认为10) keyWord(string，关键词)
             * recordType(int,意向类型) productAreaTypeID(int,产品区域类型)
             * lineTypeID(int,线路类型) reviewState(string,意向客户状态id)
             * startTime(dateTime,登记时间搜索开始) endTime(dateTime,登记时间搜索结束)
             */
            var data = {
                page: vm.page,
                pageSize: vm.pageSize
            };
            data.serviceTypeID = filter.serviceTypeID;
            // 关键字
            if (filter.keyword) {
                data.keyWord = filter.keyword;
            }
            // 订单类型
            if (filter.recordType) {
                data.recordType = filter.recordType.v;
            } else {

            }
            // 产品区域类型
            if (filter.districtType) {
                data.productAreaTypeID = filter.districtType.v;
            }
            // 线路类型
            if (filter.lineType > 0 && filter.lineType != null && filter.districtType != null) {
                data.lineTypeID = filter.lineType;
            }
            // 意向客户状态id
            if (filter.trackType) {
                data.reviewState = filter.trackType;
            }
            //是否已经点评，审评
            console.log(filter.isValid);
            if (filter.isValid !== null && filter.isValid !== '' && filter.isValid !== undefined) {
                data.isValid = filter.isValid;
            }
            // 登记时间搜索开始
            if (filter.startDate) {
                data.startTime = $filter("date")(filter.startDate, "yyyy-MM-dd");
            }
            // 登记时间搜索结束
            if (filter.endDate) {
                data.endTime = $filter("date")(filter.endDate, "yyyy-MM-dd");
            }
            console.log(data);
            return data;
        }
        /**
         * 将数据保存到scope。并进行显示层面的设置
         */
        function changeScope(data) {
            $scope.mainData.list = _.union($scope.mainData.list, data.list);
            $scope.mainData.allPageCount = data.allPageCount;
            if (vm.page == $scope.mainData.allPageCount) {
                vm.listMax = true;
            }
            vm.listLoading = false;
            $rootScope.isloadList = false;
            $rootScope.showProcessBar = false;
        }
    }
    /**
     * 输入框内容按下回车
     */
    function searchSubmit(keyEvent) {
        if (keyEvent.which === 13) {
            vm.searchList();
        }
    }
    /**
     * 如果点击保存按钮，执行如下的保存
     */
    function save() {
        initialPhoneFromCallingIn();
        if (checkInput()) {
            if (vm.editor.add.isMember) {
                saveOrder();
            } else {
                if (vm.editor.add.CustomerMobile) {
                    saveACustomerMember(saveOrder);
                } else {
                    saveOrder();
                }
            }
        }

        function initialPhoneFromCallingIn() {
            if ($rootScope.currentCallingInNoCellphone) {
                vm.editor.add.CustomerMobile = $rootScope.currentCallingInNoCellphone;
                //vm.editor.add.CustomerTel = $rootScope.currentCallingInNoTel;
            }
            if ($rootScope.currentCallingInNoTel) {
                //vm.editor.add.CustomerMobile = $rootScope.currentCallingInNoCellphone;
                vm.editor.add.CustomerTel = $rootScope.currentCallingInNoTel;
                $scope.ICOrderEditor.CustomerMobile.$error.required = false;
            }
        }

        function checkInput() {
            if (vm.editor.add.CompanyCustomer) { // 检查企业客户
                if (!checkCompanyCustomerMember()) {
                    return false;
                }
            } else {
                if (!checkIndividualMember()) { // 检查个人客户信息
                    return false;
                }
            }

            if (vm.editor.add.RecordType_ID) {
                if (!checkBusinessType()) {
                    return false;
                }
            } else {
                if (!checkInBusinessType()) {
                    return false;
                }
            }
            return true;

            function checkIndividualMember() {
                // 手机号码或者固定电话必须添加一个
                if (($scope.ICOrderEditor.CustomerMobile.$error.required) && (!vm.editor.add.CustomerTel)) { // 两个都没填
                    vm.detailTipInfo = "手机号码或者固定电话必须添加一个";
                    vm.detailTipInfoType = "error";
                    return false;
                } else { // 填了至少一个
                    if (vm.editor.add.CustomerTel) { // 填了固话
                        $scope.ICOrderEditor.CustomerMobile.$error.required = false;
                        if ($scope.ICOrderEditor.CustomerMobile.$error.cellphone) {
                            vm.detailTipInfo = "手机号码格式错误";
                            vm.detailTipInfoType = "error";
                            return false;
                        }
                    } else { // 只填手机
                        if ($scope.ICOrderEditor.CustomerMobile.$error.cellphone) {
                            vm.detailTipInfo = "手机号码格式错误";
                            vm.detailTipInfoType = "error";
                            return false;
                        }
                    }
                }
                var requiredList = ["CustomerName", "messyDegree"];
                if (vm.editor.add.HaveVisa) {
                    requiredList.push("visaTime");
                }
                if (vm.editor.add.HavePassport) {
                    requiredList.push("passportTime");
                }
                var flag = true;
                for (item in requiredList) {
                    flag = checkEmptyList(requiredList[item]);
                    if (flag == false) {
                        vm.detailTipInfo = "客户基本信息不完整";
                        vm.detailTipInfoType = "error";
                        break;
                    }
                }
                return flag;
            }

            function checkCompanyCustomerMember() {
                // 企业名称必须填写
                if (!vm.editor.add.CustomerCompanyName) {
                    return false;
                }
                return checkIndividualMember();
            }

            function checkBusinessType() {
                destinationPickerBuilder();
                if (!vm.editor.add.DestinationIDs) {
                    vm.detailTipInfo = "请填写意向目的地";
                    vm.detailTipInfoType = "error";
                    return false;
                }
                var requiredList = ["SourceID", "site", "AdultNum", "Record_Type", "PlayStart", "PlayEnd", "Record_Content"];
                if (vm.editor.add.Record_Type == 1) {
                    requiredList.push("ProductAreaType");
                    requiredList.push("LineType");
                }
                if (vm.editor.add.Is_Activity) {
                    requiredList.push("activity");
                }
                var flag = true;
                for (item in requiredList) {
                    flag = checkEmptyList(requiredList[item]);
                    if (flag == false) {
                        vm.detailTipInfo = "意向需求填写不完整";
                        vm.detailTipInfoType = "error";
                        break;
                    }
                }
                if (vm.editor.add.Play_EndTime.getTime() < vm.editor.add.Play_StartTime.getTime()) {
                    vm.detailTipInfo = "结束时间不能小于开始时间";
                    vm.detailTipInfoType = "error";
                    $scope.ICOrderEditor.PlayEnd.$error.required = true;
                    return false;
                }
                return flag;
            }

            function checkInBusinessType() {
                var requiredList = ["QuestionType", "Record_Content"];
                var flag = true;
                for (item in requiredList) {
                    flag = checkEmptyList(requiredList[item]);
                    if (flag == false) {
                        vm.detailTipInfo = "意向需求填写不完整";
                        vm.detailTipInfoType = "error";
                        break;
                    }
                }
                return flag;
            }

            function checkEmptyList(item) {
                if ($scope.ICOrderEditor[item].$error.required) {
                    return false;
                } else {
                    return true;
                }
            }
        }
    }
    /**
     * 保存一个新的意向顾客
     */
    function saveACustomerMember(callback) {
        vm.detailTipInfo = "正在保存新的会员...";
        vm.detailTipInfoType = "info";
        var cellphone = vm.editor.add.CustomerMobile;
        if ($rootScope.currentCallingInNoCellphone) {
            cellphone = $rootScope.currentCallingInNoCellphone;
        }
        // 会员必填项
        var member = {
            CompanyId: $rootScope.userinfo.CompanyID.$id,
            CustomerLevelID: "000000000000000000000001", // 默认添加为普通会员
            IsExistTouristBlacklist: false,
            CertificatesTypeId: '000000000000000000000001',
            CompanyCustomer: vm.editor.add.CompanyCustomer,
            CustomerCompanyName: vm.editor.add.CustomerCompanyName,
            CustomerAccountName: cellphone,
            CustomerName: vm.editor.add.CustomerName,
            GenderTypeID: vm.editor.add.GenderTypeID,
            CustomerMobile: cellphone
        };
        // 会员选填项
        if (vm.editor.add.CustomerTel) {
            member.CustomerTel = vm.editor.add.CustomerTel;
        } else if ($rootScope.currentCallingInNoTel) {
            member.CustomerTel = $rootScope.currentCallingInNoTel;
        }
        console.log('%ccellphone', 'background:red;color:white;', 'saveACustomerMember:' + cellphone);

        saveAMember(member, callback);
    }

    /**
     * 保存一个订单
     */
    function saveOrder(customerID) {
        if (customerID) {
            vm.editor.add.isMember = true;
            vm.editor.add.CustomerID = customerID;
        }
        if ($rootScope.callingInTelNo) {
            vm.editor.add.addType = 1;
            vm.editor.add.Phone = $rootScope.currentCallingInNo;
        }

        vm.detailTipInfo = "正在保存意向订单...";
        vm.detailTipInfoType = "info";

        var order = {};
        var acceptKeys = ["DestinationIDs", "Play_StartTime", "Play_EndTime", "CustomerID", "CustomerName", "MessyDegree", "CustomerTel", "CustomerMobile", "addType", "Phone", "Record_Content",
            "HavePassport", "HaveVisa", "SDID", "ActivityID", "Adult_Num", "passportTime", "visa_time", "Is_Activity", "Record_Type", "RecordType_ID", "ProductAreaType_ID", "LineType_ID",
            "QuestionType_ID", "SourceID", "SourceName", "Sales_ID", "Sales_Name", "Review", "UrgentState"
        ];
        var timeKeys = ["Play_StartTime", "Play_EndTime", "passportTime", "visa_time"];
        angular.forEach(vm.editor.add, function(value, key) {
            if (_.indexOf(acceptKeys, key) > -1) {
                order[key] = value;
                if (_.indexOf(timeKeys, key) > -1) {
                    order[key] = $filter("date")(value, "yyyy-MM-dd");
                }
            }
        });

        saveAnOrder(order, function(response) {
            console.log(order);
            vm.detailTipInfo = "已经保存意向订单";
            vm.detailTipInfoType = "success";
            saveToScope(response.data);
            clearCurrentTelTab();
            sendNoticeToAccepters(order);
            fetch($rootScope.listType, "intentionCustomer/ICOrder/detail?recordID=" + response.data, response.data, order.CustomerID);

            function clearCurrentTelTab() {
                $rootScope.callingInTelNos = _.without($rootScope.callingInTelNos, $rootScope.currentCallingInNo);
                $rootScope.currentCallingInNo = _.last($rootScope.callingInTelNos);
                if ($rootScope.currentCallingInNo) {
                    vm.fetchAddPanelByPhone($rootScope.currentCallingInNo);
                } else {
                    $rootScope.callingInTelNo = undefined;
                    $scope.closeSubView();
                }
            }

            function saveToScope(response) {
                $rootScope.callingInTelNo = false;
                switch ($rootScope.listType) {
                    case "order": // 只显示400客服添加的呼入订单
                        if (vm.editor.add.addType == 1) {
                            console.log("hello");
                            pushToMainData(response);
                        }
                        break;
                    case "orderConfirmation": // 如果是400客服，显示市场营销订单，其他人，不显示
                        if (judgeMeAsAServer()) {
                            pushToMainData(response);
                        }
                        break;
                    case "addedCustomers": // 只要是非呼入订单，都显示
                        if (vm.editor.add.addType == 2) {
                            console.log("In this");
                            pushToMainData(response);
                        }
                        break;
                    default:
                        break;
                }
            }

            function pushToMainData(response) {
                var orderData = {
                    "orderID": response,
                    "destination": {
                        Destination: []
                    },
                    "members": vm.editor.add.Adult_Num,
                    "customerID": vm.editor.add.CustomerID,
                    "customerName": vm.editor.add.CustomerName,
                    "contact": vm.editor.add.CustomerMobile,
                    "CreateUserID": $rootScope.userinfo._id.$id,
                    "toDate": vm.editor.add.Play_EndTime,
                    "fromDate": vm.editor.add.Play_StartTime,
                    "intentionType": $filter("recordTypeFilter")(vm.editor.add.Record_Type),
                    "trackType": "意向客户",
                    "addDate": Date.now(),
                    "url": "intentionCustomer/ICOrder/detail?recordID=" + response

                };
                console.log(orderData.intentionType);
                console.log(vm.editor.add.Record_Type);
                console.log($filter("recordTypeTableFilter")(vm.editor.add.Record_Type));
                orderData.destination.Destination = constructDestinationInfo();
                if (judgeMeAsAServer()) {
                    orderData.customerServer = $rootScope.userinfo.FullName;
                }
                console.log(orderData);
                $scope.mainData.list.unshift(orderData);

                function constructDestinationInfo() {
                    var data = [];
                    vm.editor.add.destinations.forEach(function(item) {
                        data.push({
                            DestinationID: item._id.$id,
                            DestinationName: item.Title
                        });
                    });
                    return data;
                }
            }
        });
    }


    function sendNoticeToAccepters(order) {
        if (order.Review) {
            if (order.Review.Review_State == "000000000000000000000000") {
                getCustomerServerList(function(response) {
                    var serversList = response.data.list;
                    serversList.forEach(function(ele) {
                        ele._id = ele._id.$id;
                    });
                    sendNotice({
                        code: 700,
                        data: serversList
                    });
                });
            } else if (order.Review.Review_State == "000000000000000000000001") {
                if (order.Sales_ID) {
                    console.log(order.Sales_ID);
                    sendNotice({
                        code: 700,
                        data: [{
                            _id: order.Sales_ID
                        }]
                    });
                } else {
                    var noticeInputData = generateInputData(order);
                    getICUsersToNotice(noticeInputData, sendNotice);
                }
            }
        } else {
            getCustomerServerList(function(response) {
                var serversList = response.data.list;
                serversList.forEach(function(ele) {
                    ele._id = ele._id.$id;
                });
                sendNotice({
                    code: 700,
                    data: serversList
                });
            });
        }



        function generateInputData(order) {
            var obj = {
                recordType: order.Record_Type,
                productAreaTypeID: order.ProductAreaType_ID,
                lineTypeID: order.LineType_ID,
                DestinationIDs: order.DestinationIDs,
                stationID: order.SDID
            };
            return obj;
        }

        function sendNotice(response) {
            if (response.code == 700) {
                var salesUserList = response.data;
                angular.forEach(salesUserList, function(user) {
                    //调用factory进行发送通知
                    console.log('[发送通知]' + user._id + user.FullName);
                    var sendData = {
                        sender: $rootScope.userinfo._id.$id,
                        recver: user._id,
                        title: '新的意向客户',
                        content: "有新的意向客户可以认领",
                        type: 6,
                        subType: 29,
                        messageType: 4
                    };
                    $rootScope.SocketConnectIO.sendMessage('sendRemind', sendData);
                });
            }
        }
    }
    /**
     * 我是否是客服
     */
    function judgeMeAsAServer(myLabels) {
        if (!myLabels) {
            myLabels = _.pluck($rootScope.userinfo.Label, "LabelGroup");
        }
        var labelGroupName = ["客服", "中心经理"];
        var tag = false;
        myLabels.forEach(function(item) {
            if (_.indexOf(labelGroupName, item) > -1) {
                tag = true;
            }
        });
        return tag;
    }
    /**
     * 我是否是私顾
     */
    function judgeMeAsASale(myLabels) {
        if (!myLabels) {
            myLabels = _.pluck($rootScope.userinfo.Label, "LabelGroup");
        }
        var labelGroupName = ["私顾", "中心经理"];
        var tag = false;
        myLabels.forEach(function(item) {
            if (_.indexOf(labelGroupName, item) > -1) {
                tag = true;
            }
        });
        return tag;
    }

    function getCurrentEditorAddData() {

        return JSON.parse(JSON.stringify(vm.editor.add));
    }

    function clearedEditorAddData() {
        return {
            CustomerTelAreaCode: "0574",
            addType: 1,
            RecordType_ID: 1,
            memberNotEditable: false,
            Is_Activity: 0,
            SDID: "000000000000000000000001",
            Record_Type: 1,
            HavePassport: 0,
            HaveVisa: 0,
            CustomerName: "",
            CompanyCustomer: false,
            destinations: [],
            canPickSalesman: false,
            salesLoading: true,
            MessyDegree: 1,
            Adult_Num: 1,
            GenderTypeID: 2
        };

    }

    function clearEditorAddData() {
        vm.editor.add = {
            CustomerTelAreaCode: "0574",
            addType: 1,
            RecordType_ID: 1,
            memberNotEditable: false,
            Is_Activity: 0,
            SDID: "000000000000000000000001",
            Record_Type: 1,
            HavePassport: 0,
            HaveVisa: 0,
            CustomerName: "",
            CompanyCustomer: false,
            destinations: [],
            canPickSalesman: false,
            salesLoading: true,
            MessyDegree: 1,
            Adult_Num: 1,
            GenderTypeID: 2
        };

    }

    function fetchAddPanelByPhone(phone) {
        // console.log("当前phone：", $rootScope.currentCallingInNo);
        // console.log("要跳转的phone：", phone);
        // if ($rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo] == undefined) { //当前电话还没有被存入到添加记录列表里面
        //
        //   $rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo] = {};
        //   angular.copy(vm.editor.add, $rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo]);
        //   if ($rootScope.currentCallingInNoCellphone) {
        //     $rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo].CustomerMobile = $rootScope.currentCallingInNoCellphone;
        //     $rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo].CustomerTel = undefined;
        //   } else {
        //     $rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo].CustomerTel = $rootScope.currentCallingInNoTel;
        //     $rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo].CustomerMobile = undefined;
        //   }
        // }
        // if ($rootScope.IntentionCustomer.addHistory[phone] == undefined) {
        //   $rootScope.IntentionCustomer.addHistory[phone] = {
        //     CustomerTelAreaCode: "0574",
        //     addType: 1,
        //     RecordType_ID: 1,
        //     memberNotEditable: false,
        //     Is_Activity: 0,
        //     SDID: "000000000000000000000001",
        //     Record_Type: 1,
        //     HavePassport: 0,
        //     HaveVisa: 0,
        //     CustomerName: "",
        //     CompanyCustomer: false,
        //     destinations: [],
        //     canPickSalesman: false,
        //     salesLoading: true,
        //     MessyDegree: 1,
        //     Adult_Num: 1,
        //     GenderTypeID: 2
        //   };
        // }
        if ((/^1[3|4|5|7|8]\d{9}$/.test(phone))) { // 如果是手机号码
            //$rootScope.IntentionCustomer.addHistory[phone].CustomerMobile = phone;
            $rootScope.currentCallingInNoCellphone = phone;
            $rootScope.currentCallingInNoTel = undefined;
        } else if (/^\d+$/.test(phone)) {
            //$rootScope.IntentionCustomer.addHistory[phone].CustomerTel = phone;
            $rootScope.currentCallingInNoTel = phone;
            $rootScope.currentCallingInNoCellphone = undefined;
        }

        //$rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo] = getCurrentEditorAddData();
        //console.info("上一条来电编辑内容：");
        //console.log($rootScope.IntentionCustomer.addHistory[$rootScope.currentCallingInNo])
        $rootScope.currentCallingInNo = phone;
        $rootScope.callingInTelNo = phone;
        // if ($rootScope.IntentionCustomer.addHistory[phone]) {
        //     vm.editor.add = angular.copy($rootScope.IntentionCustomer.addHistory[phone]);
        // }
        //console.log('%c$rootScope.IntentionCustomer.addHistory', 'background:red;color:white;', $rootScope.IntentionCustomer.addHistory);

        //checkIfMember();
    }

}
/**
 * 
 */
angular.module("HY").controller("ICOrderAssessmentController",ICOrderAssessmentController);
function ICOrderAssessmentController(){
	var vm=this;
	vm.addAssessment=addAssessment;
	vm.modifyAssessment=modifyAssessment;
	function addAssessment(){
		
	}
	
	function modifyAssessment(){
		
	}
}/**
 * 
 */
angular.module("HY").controller("ICOrderConfirmationController",ICOrderConfirmationController);
ICOrderConfirmationController.$inject=["confirmOrder"];
function ICOrderConfirmationController(confirmOrder){
	var vm=this;
	vm.confirm=confirm;
	
	function confirm(orderID){
		confirmOrder(orderID,responseFunc);
		function responseFunc(){

		}
	}
	 
}/**
 * 
 */
angular.module("HY").controller("ICOrderMessageController",ICOrderMessageController);

function ICOrderMessageController(){
	var vm=this;
	vm.sendMessage=sendMessage;
	
	function sendMessage(){
		
	}
}/**
 * 编辑考核分组信息
 */
angular.module("HY").controller("ICPerformanceManagementController", ICPerformanceManagementController);
ICPerformanceManagementController.$inject = [ "$rootScope", '$scope', '$q', '$timeout', 'submitPerformanceDetail',// 提交考核明细
"deleteAGroup", "deleteMember", "addPerformanceGroupMember", "addPerformanceGroup", "showWarningBox" ];
function ICPerformanceManagementController($rootScope, $scope, $q, $timeout, submitPerformanceDetail, deleteAGroup, deleteMember, addPerformanceGroupMember, addPerformanceGroup, showWarningBox) {
	var vm = this;
	// 常量
	vm.addGroupPageUrl = 'intentionCustomer/ICPerformanceManagement/add';
	vm.editor = {
		groupID : "newGroup",
		members : []
	};
	vm.addANewGroupState = false;
	vm.departmentOptions = departmentOptions();
	vm.editorTitle = "新增考核组";
	// ng-show、ng-hide等显示用到的变量
	vm.showTip = false;// 编辑时用到的提示信息
	vm.showPerformanceDetail = true;// 初始化，显示详细信息，不显示编辑面板
	// 界面变化用到的方法
	vm.closeTip = closeTip;// 关闭提示
	vm.togglePerformanceEditor = togglePerformanceEditor;// 切换编辑状态
	vm.showDeleteMemberWarining = showDeleteMemberWarining;// 删除提示
	// 数据交互方法
	vm.PerformanceEditorSave = PerformanceEditorSave;// 保存
	vm.deleteGroup = deleteGroup;// 删除分组
	vm.selectPerson = selectPerson;// 选择一个成员
	vm.addMember = addAMember;// 编辑时，添加一个成员
	vm.addPerformanceGroup = addAPerformanceGroup;// 添加一个分组
	vm.setTitle = setTitle;
	vm.cancelAddNewGroup = cancelAddNewGroup;// 取消添加分组
	vm.personStatus = personStatus;
	// /////

	activate();

	function activate() {
		$scope.selectPersonData = [];
		$scope.list = [];
		$scope.personStatus = vm.personStatus();
		$scope.selectPerson = vm.selectPerson;
		if ($scope.detailData.performanceDetail != undefined) {
			var department = _.find($rootScope.Departments, function(object) {
				return object._id.$id == $scope.detailData.performanceDetail.departmentID;
			});
			if (department != undefined) {
				vm.departmentName = _.find($rootScope.Departments, function(object) {
					return object._id.$id == $scope.detailData.performanceDetail.departmentID;
				}).Name;
			} else {
				vm.departmentName = "未知部门";
			}
		}
	}
	/**
	 * 获取opions
	 */
	function departmentOptions() {

		var departments = _.filter($rootScope.Departments, function(element) {
			return element.IsBusiness == 1;
		});
		return departments;

	}

	/**
	 * all the person in the data
	 */
	function personStatus() {
		var groupID = 0;
		if ($scope.detailData != undefined) {
			groupID = $scope.detailData.groupID;
		} else {
			groupID = "newGroup";
		}
		var status = {};
		activate();
		return status;

		function activate() {
			$scope.mainData.list.forEach(getStatusForGroup);
			getStatusForGroup(vm.editor);
			function getStatusForGroup(object, index) {
				if (object.members != undefined) {
					if (object.groupID == groupID) {
						object.members.forEach(insertIntoStatusIn);
					} else {
						object.members.forEach(insertIntoStatusInAnother);
					}
				}
				function insertIntoStatusIn(item) {
					status[item.memberID] = {
						status : "已在此组中"
					};
				}
				function insertIntoStatusInAnother(item) {
					status[item.memberID] = {
						status : "转到此组中"
					};
				}
			}
		}
	}
	/**
	 * 删除一个成员
	 */
	function showDeleteMemberWarining(memberID, groupID, memberName) {
		showWarningBox('确定要从这个分组中删除 "' + memberName + '" ？', deleteAMember);
		/**
		 * 删除一个成员
		 */
		function deleteAMember() {
			var workflow = StateFlow();
			if (vm.addANewGroupState) {// 添加新组
				var members = _.clone(vm.editor.members);
				var steps = {
					// 1.保存到vm.editor
					saveToEditor : {
						func : saveToEditor,
						success : {
							callback : changeView,
							name : "changeView",
							params : []
						}
					}
				};
			} else {// 编辑组
				var members = _.clone($scope.detailData.members);
				var steps = {
					// 1.保存到API中
					saveToAPI : {
						func : saveToAPI,
						success : {
							callback : saveToScope,
							name : "saveToScope",
							params : [],
						},
						netError : {
							callback : showEditorTip,
							name : 'showEditorTip',
							params : [ "网络错误，请检查网络" ]
						},
						apiError : {
							callback : showEditorTip,
							name : 'showEditorTip',
							params : []
						}
					},
					// 2.保存到Scope
					saveToScope : {
						func : saveToScope,
						success : {
							callback : changeView,
							name : "changeView",
							params : []
						}
					}
				};

			}
			activate();

			function activate() {
				angular.forEach(steps, workflow.setStep);
				workflow.run(memberID);
				$scope.personStatus = vm.personStatus();
			}
			/**
			 * 界面改变
			 */
			function changeView() {
				showEditorTip("已经删除" + _.find(members, function(object) {
					return object.memberID == memberID;
				}).memberName);
			}
			/**
			 * 保存到vm.editor中
			 */
			function saveToEditor() {
				var members = _.reject(vm.editor.members, function(object) {
					return object.memberID == memberID;
				});
				vm.editor.members = members;
				vm.editor.memberCount = members.length;
				return workflow.response();
			}
			/**
			 * 保存到scope中
			 */
			function saveToScope() {
				var members = _.reject($scope.detailData.members, function(object) {
					return object.memberID == memberID;
				});
				$scope.detailData.members = members;
				$scope.detailData.memberCount = members.length;
				var index = _.findWhere($scope.mainData.list, {
					groupID : groupID
				});
				console.log(index);
				index.members = members;

				return workflow.response();
			}
			/**
			 * 保存到API
			 */
			function saveToAPI() {
				deleteMember(groupID, memberID);
				return workflow.response();
			}
		}
	}
	function cancelAddNewGroup() {
		$scope.closeSubView();
	}
	/**
	 * 添加一个分组
	 */
	function addAPerformanceGroup() {
		var workflow = StateFlow();
		var steps = {
			saveToApi : {
				func : saveToApi,
				success : {
					callback : changeView,
					name : "changeView",
					params : [ true ]
				}
			}
		}
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run();
		}
		function saveToApi() {
			var data = addPerformanceGroup(vm.editor, saveToScope);
			return workflow.response("success", data);

			function saveToScope(response) {
				var newGroup = {
					groupID : response.data.data._id,
					groupName : response.data.data.Title,
					members : [],
					memberCount : 0,
					url : 'intentionCustomer/ICPerformanceManagement/detail' + "?BAGID=" + response.data.data._id
				};
				$scope.mainData.list.unshift(newGroup);
				return workflow.response();
			}
		}

		function changeView() {
			showEditorTip([ "添加成功" ]);
		}
		console.log("Add OK");
	}
	/**
	 * select person
	 */
	function selectPerson(memberData) {
		var groupID = 0;
		var memberGroupID = getAMemberGroupID(memberData._id.$id);
		if (!vm.addANewGroupState) {
			editGroupMember();
		} else {
			addNewGroupMember();
		}
		// 方法定义
		function addNewGroupMember() {
			vm.editor.toDelete = [];
			var member = {
				memberID : memberData._id.$id,
				memberName : memberData.FullName,
				groupID : memberGroupID
			}
			if ($scope.personStatus[memberData["_id"]["$id"]] == undefined) {
				vm.editor.members.push(member);
				$scope.personStatus = vm.personStatus();
			} else if ($scope.personStatus[memberData["_id"]["$id"]]["status"] == "转到此组中") {
				// vm.editor.toDelete.push(member);
				vm.editor.members.push(member);
				$scope.personStatus = vm.personStatus();
			} else if ($scope.personStatus[memberData._id.$id]["status"] == "已在此组中") {
				console.log("已在此组中");
			}
		}
		function editGroupMember() {
			groupID = $scope.detailData.groupID;
			if ($scope.personStatus[memberData["_id"]["$id"]] == undefined) {
				vm.addMember(groupID, memberData);
			} else if ($scope.personStatus[memberData["_id"]["$id"]]["status"] == "转到此组中") {
				// vm.deleteMember(memberData._id.$id, memberGroupID);
				vm.addMember(groupID, memberData)
			} else if ($scope.personStatus[memberData._id.$id]["status"] == "已在此组中") {
				console.log("已在此组中");
			}
		}
		function getAMemberGroupID(memberID) {
			console.log(memberID);
			for (item in $scope.mainData.list) {
				for (member in $scope.mainData.list[item].members) {
					if (member.memberID == memberID) {
						return $scope.mainData.list[item].groupID;
					}
				}
			}
			return 0;
		}
	}
	/**
	 * 添加一个成员
	 */
	function addAMember(groupID, memberData) {
		var workflow = StateFlow();
		var steps = {
			addToApi : {
				func : addToApi,
				success : {
					callback : saveToScope,
					name : "saveToScope",
					params : [ true ]
				}
			},
			saveToScope : {
				func : saveToScope,
				success : {
					callback : showEditorTip,
					name : "showEditorTip",
					params : [ "添加成功" ]
				}
			}
		}
		activate();
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run();
		}
		function addToApi() {
			addPerformanceGroupMember(groupID, memberData);
			return workflow.response();
		}
		function saveToScope() {
			var member = {};
			member.memberID = memberData["_id"]["$id"];
			member.memberName = memberData.FullName;

			$scope.detailData.members.push(member);
			_.find($scope.mainData.list, function(object) {
				return object.groupID == groupID;
			}).members = $scope.detailData.members;

			$scope.personStatus = vm.personStatus();
			return workflow.response();
		}

	}
	/**
	 * 设置详细页标题
	 */
	function setTitle(name) {
		vm.editorTitle = name;
	}
	/**
	 * 切换编辑状态
	 */
	function togglePerformanceEditor() {
		vm.showPerformanceDetail = !vm.showPerformanceDetail;
		vm.editor = angular.copy($scope.detailData);// 编辑器数据
	}
	/**
	 * 显示提示
	 */
	function showEditorTip(tip) {
		vm.tipText = tip;
		vm.showTip = true;
	}
	/**
	 * 关闭编辑提示
	 */
	function closeTip() {
		vm.showTip = false;
	}
	/**
	 * 保存编辑
	 */
	function PerformanceEditorSave() {
		// 操作流程
		// 见过这么酷的流程写法么？完全用配置，通过StateFlow类的对象来执行
		var workflow = StateFlow();
		var steps = {
			// 1.检查数据
			checkData : {
				func : checkData,
				success : {
					callback : saveToAPI,
					name : "saveToAPI",
					params : [ true ]
				},
				error : {
					callback : showEditorTip,
					name : "showEditorTip",
					params : [ "数据格式错误" ]
				}
			},
			// 2.保存到API
			saveToAPI : {
				func : saveToAPI,
				success : {
					callback : saveToScope,
					name : "saveToScope",
					params : [ true ]
				},
				duplicatedName : {
					callback : showEditorTip,
					name : "showEditorTip",
					params : [ "名称重复" ]
				},
				netError : {
					callback : showEditorTip,
					name : "showEditorTip",
					params : [ "网络连接超时，请检查网络" ]
				},
				authError : {
					callback : showEditorTip,
					name : "showEditorTip",
					params : [ "长时间未操作，请重新登录" ]
				},
				apiError : {
					callback : showEditorTip,
					name : "showEditorTip",
					params : [ true ]
				}
			},
			// 3.保存到Scope
			saveToScope : {
				func : saveToScope,
				success : {
					callback : changeView,
					name : "changeView",
					params : [ true ]
				}
			},
		};

		activate();

		/**
		 * 运行
		 */
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.setFirstStep("checkData");
			workflow.run();
		}

		/**
		 * 检查数据格式
		 */
		function checkData() {
			return workflow.response();
		}
		/**
		 * 保存到API
		 */
		function saveToAPI() {
			submitPerformanceDetail(vm.editor);
			return workflow.response();
		}
		function changeView() {
			vm.togglePerformanceEditor();// 隐藏编辑状态
		}

		// 将数据保存到$scope
		function saveToScope() {
			$scope.detailData.performanceDetail = angular.copy(vm.editor.performanceDetail);
			return workflow.response();
		}

	}

	/**
	 * 删除分组
	 */
	function deleteGroup(groupID) {
		var workflow = StateFlow();
		var steps = {
			// 0.检查数组是否为空
			checkMember : {
				func : checkMember,
				success : {
					callback : saveToAPI,
					name : "saveToAPI",
					params : []
				},
				error : {
					callback : warningCantDelete,
					name : "warningCantDelete",
					params : []
				}
			},
			// 1.保存到API
			saveToAPI : {
				func : saveToAPI,
				success : {
					callback : saveToScope,
					name : "saveToScope",
					params : [],
				},
				netError : {
					callback : showEditorTip,
					name : 'showEditorTip',
					params : [ "网络错误，请检查网络" ]
				},
				apiError : {
					callback : showEditorTip,
					name : 'showEditorTip',
					params : []
				}
			},
			// 2.保存到Scope
			saveToScope : {
				func : saveToScope,
				success : {
					callback : changeView,
					name : "changeView",
					params : []
				}
			}
		};
		showWarningBox("确定要删除这个分组？", activate);
		function warningCantDelete() {
			showWarningBox("这个组内有成员正在考核中，请将成员转移到其他分组，此组才能删除。");
		}
		function checkMember() {
			if ($scope.detailData.members.length) {
				return workflow.response("error");
			} else {
				return workflow.response("success");
			}
		}
		function activate() {
			angular.forEach(steps, workflow.setStep);
			workflow.run();
			$scope.personStatus = vm.personStatus();
		}
		function saveToAPI() {
			deleteAGroup(groupID);
			return workflow.response();
		}
		function saveToScope() {
			var list = _.reject($scope.mainData.list, function(object) {
				return object.groupID == groupID;
			});
			$scope.mainData.list = list;
			return workflow.response();
		}
		function changeView() {
			showEditorTip("已经删除了分组");
			$timeout($scope.closeSubView, 100);
		}
	}

}
/**
 * 
 */angular.module("HY").controller("ICCityAssignmentController", ICCityAssignmentController);

function ICCityAssignmentController(getPerformanceGroupList, updatePerformanceSetting, $rootScope, $scope, $window, deleteCitySite, showWarningBox, saveCityForSites, deleteACity, $filter) {
  var vm = this;
  // 数据
  vm.template = {};
  vm.detailTipInfo = {};
  vm.stations = $rootScope.Station.reverse();
  vm.positions = $rootScope.Position;
  vm.addresses = cityAssignmentCities();
  vm.template.baseUrl = "/public/angularView/intentionCustomer/ICCityAssignment/";
  vm.template.GadgetSiteInfo = vm.template.baseUrl + "ICCityAssignmentGadgetSiteInfo.html" + "?" + Math.random();
  vm.template.GadgetSiteEditor = vm.template.baseUrl + "ICCityAssignmentGadgetSiteEditor.html" + "?" + Math.random();
  vm.template.GadgetMemberInfo = vm.template.baseUrl + "ICCityAssignmentGadgetMemberInfo.html" + "?" + Math.random();
  vm.template.GadgetAssessmentEditor = vm.template.baseUrl + "ICCityAssignmentGadgetAssessmentEditor.html" + "?" + Math.random();
  vm.departmentOptions = departmentOptions();
  vm.detailData = $scope.detailData;
  // 显示用变量
  vm.showEditor = false; // show the city and site editor.
  vm.showCopySite = false; // show the copy site panel.
  vm.showAssessment = false; // show the edit

  // 页面操作
  vm.deleteSite = deleteSite; // delete a site.
  vm.deleteCity = deleteCity; // delete a city.
  vm.addACity = addACity;
  // vm.changeSite = changeSite; // change the panel to anther site.
  vm.setAssessment = setAssessment; // modify the assessment
  vm.toggleEditor = toggleEditor; // toggle the site editor
  vm.toggleAssessmentEditor = toggleAssessmentEditor; // toggle the assessment
  // editor
  vm.toggleCopyEditor = toggleCopyEditor; // toggle the copy editor
  vm.stationCityCheckInList = {};
  vm.assessmentEditor = {
    personnelID: $scope.detailData.memberID,
    startTime: $scope.detailData.AssessStartTime,
    BAGID: $scope.detailData.BAGID,
    ISPA: $scope.detailData.ISPA
  };
  vm.checkIn = checkIn;
  $scope.pageStatus = {
    showapanel: false
  };
  activate();

  function activate() {
    var memberID = $scope.detailData.memberID;
    getPerformanceGroupList([], activate);

    function activate(response) {
      $scope.groups = response.list;
      global.IntentionCustomer.groups = response.list;
      $scope.selected = _.find($scope.groups, function(group) {
        if (group.members) {
          if (_.find(group.members, function(member) {
              return member.memberID == memberID;
            })) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      });

    }
  }
  $scope.showApanel = function(isShow) {
    $scope.pageStatus.showapanel = isShow;
  };

  $scope.$watch("detailData.memberName", checkIn);
  changeCityEditorHeight();

  function showTipInfo(param) {
    console.log(param);
  }

  function changeCityEditorHeight() {
    var w = angular.element($window);
    $scope.getWindowDimensions = function() {
      return {
        'h': w.height(),
        'w': w.width()
      };
    };
    $scope.$watch($scope.getWindowDimensions, function(newValue, oldValue) {
      $scope.windowHeight = newValue.h;
      $scope.windowWidth = newValue.w;
      vm.cityListHeight = newValue.h - 300;
    }, true);

    w.bind('resize', function() {
      $scope.$apply();
    });
  }
  /**
   * 城市是否已经被设置
   */
  function checkIn() {
    vm.settedCityCount = {};
    if ($scope.detailData.site) {
      clearDestinationCheckData();
      $scope.detailData.site.forEach(getStationCityCheckInList);
      vm.destinations.forEach(addCheckInData);
    } else {
      return;
    }

    function clearDestinationCheckData() {
      vm.destinations.forEach(clearCheckForAType);

      function clearCheckForAType(element, index, array) {
        element.list.forEach(clearCheckForACity);

        function clearCheckForACity(elem, idx, arr) {
          vm.destinations[index].list[idx].checkInData = {};
        }
      }
    }

    function getStationCityCheckInList(elem, idx) {
      if (elem.DestinationList) {
        vm.stationCityCheckInList[elem.StationID] = _.pluck(elem.DestinationList, "DestinationID");
      }
    }

    function addCheckInData(elem, idx, array) {
      vm.stations.forEach(addCheckInDataForStation);

      function addCheckInDataForStation(e, i, a) {
        var id = e._id.$id;
        vm.settedCityCount[id] = 0;
        if (vm.stationCityCheckInList[id]) {
          elem.list.forEach(addCheckInForACity);

          function addCheckInForACity(cityelem, cityidx, cityarray) {
            if (vm.stationCityCheckInList[id]) {
              if (vm.destinations[idx].list[cityidx]["checkInData"] == undefined) {
                vm.destinations[idx].list[cityidx]["checkInData"] = {};
              }
              if (_.find(vm.stationCityCheckInList[id], function(e) {
                  return e == cityelem.id;
                })) {
                vm.destinations[idx].list[cityidx]["checkInData"][id] = true;
                vm.settedCityCount[id]++;
              } else {
                vm.destinations[idx].list[cityidx]["checkInData"][id] = false;
              }
            } else {
              // console.log(id+" is not in
              // vm.stationCityCheckInList");
            }
          }
        } else {

        }

      }
    }
  }

  /**
   * toggle the copy editor
   */
  function toggleCopyEditor() {
    vm.copySite = !vm.copySite;
  }

  function cityAssignmentCities() {

  }
  /**
   * 获取opions
   */
  function departmentOptions() {

    var departments = _.filter($rootScope.Departments, function(element) {
      return element.IsBusiness == 1;
    });
    return departments;

  }
  /**
   * toggle the assessment editor
   */
  function toggleAssessmentEditor() {
    vm.showAssessment = !vm.showAssessment;
  }

  /**
   * toggle the site editor
   */
  function toggleEditor() {
    vm.showEditor = !vm.showEditor;
  }

  function setAssessment() {
    console.log("Hello");
    console.log($scope.groups);
    var data = _.clone(vm.assessmentEditor);
    data.startTime = $filter("date")(data.startTime, "yyyy-MM-dd");
    if (data.ISPA) {
      if (!data.startTime || !data.BAGID) {
        vm.detailTipInfo.text = "请填写开始时间和考核分组";
        vm.detailTipInfo.type = "error";
        return;
      }
    }
    updatePerformanceSetting(data, function(response) {
      if (response.code >= 700 && response.code < 800) {
        vm.detailTipInfo.text = "保存成功";
        vm.detailTipInfo.type = "success";
        $scope.detailData.ISPA = vm.assessmentEditor.ISPA;
        $scope.detailData.AssessStartTime = data.startTime;
        $scope.detailData.BAGID = vm.assessmentEditor.BAGID;

      }
    });
  }

  /**
   * 添加一个站点的一个城市
   */
  function addACity(cityID, stationID, cityName, checkInStatus) {
    if (checkInStatus) {
      console.log("It's already in the list;")
      return;
    }
    var memberID = $scope.detailData.memberID;
    var companyID = $rootScope.userinfo.CompanyID.$id;
    var departmentID = $rootScope.userinfo.Department.ID.$id;
    var departmentName = $rootScope.userinfo.Department.Name;
    var stationName = _.find(vm.stations, function(e) {
      return e._id.$id == stationID;
    }).Station_Name;
    var workflow = StateFlow();
    var steps = {
      saveToAPI: {
        func: saveToAPI,
        success: {
          callback: saveToScope,
          name: "saveToScope",
          params: []
        }
      },
      saveToScope: {
        func: saveToScope,
        success: {
          callback: checkIn,
          name: "checkIn",
          params: []
        }
      }
    };
    // /////
    angular.forEach(steps, workflow.setStep);
    workflow.run();
    // ////
    function saveToAPI() {
      saveCityForSites(cityID, stationID, memberID, companyID, departmentID, departmentName, stationName);
      return workflow.response();
    }

    function saveToScope() {
      var siteidx = _.findIndex($scope.detailData.site, function(e) {
        return e.StationID == stationID;
      });
      var departmentObj = {
        StationID: stationID,
        StationName: stationName
      };
      var cityObj = {
        DestinationID: cityID,
        DestinationName: cityName
      };
      if (siteidx > -1) {
        $scope.detailData.site[siteidx].DestinationList.push(cityObj);
      } else {
        departmentObj["DestinationList"] = [cityObj];
        $scope.detailData.site.push(departmentObj);
        var memberidx = _.findIndex($scope.mainData.list, function(e) {
          return e.memberID == memberID;
        })
        $scope.mainData.list[memberidx].city.push(departmentObj);
      }
      return workflow.response();
    }
  }
  /**
   * 删除一个站点的一个城市
   */
  function deleteCity(cityID, siteID, memberID) {
    var workflow = StateFlow();
    var steps = {
      saveToAPI: {
        func: saveToAPI,
        success: {
          callback: saveToScope,
          name: "saveToScope",
          params: []
        }
      },
      saveToScope: {
        func: saveToScope,
        success: {
          callback: checkIn,
          name: "checkIn",
          params: []
        }
      }
    };
    angular.forEach(steps, workflow.setStep);
    workflow.run();

    function saveToAPI() {
      deleteACity(cityID, siteID, memberID);
      return workflow.response();
    }

    function saveToScope() {
      var siteidx = _.findIndex($scope.detailData.site, function(e) {
        return e.StationID == siteID;
      });
      $scope.detailData.site[siteidx].DestinationList = _.reject($scope.detailData.site[siteidx].DestinationList, function(e) {
        return e.DestinationID == cityID;
      });
      if ($scope.detailData.site[siteidx].DestinationList.length == 0) {

        var memberidx = _.findIndex($scope.mainData.list, function(e) {
          return e.memberID == memberID;
        })
        $scope.mainData.list[memberidx].city = _.reject($scope.mainData.list[memberidx].city, function(e) {
          return e.StationID == siteID;
        });
      }
      return workflow.response();
    }
  }

  /**
   * 删除一个站点
   */
  function deleteSite(siteID, memberID) {
    showWarningBox("确定要删除这个站点？删除后，将不具备此站点的管理权限。", activate);

    function activate() {
      var workflow = StateFlow();
      var steps = {
        saveToAPI: {
          func: saveToAPI,
          success: {
            callback: saveToScope,
            name: "saveToScope",
            params: []
          }
        },
        saveToScope: {
          func: saveToScope,
          success: {
            callback: checkIn,
            name: "checkIn",
            params: []
          }
        }
      };
      angular.forEach(steps, workflow.setStep);
      workflow.run();

      function saveToAPI() {
        deleteCitySite(memberID, siteID);
        return workflow.response();
      }

      function saveToScope() {
        $scope.detailData.site = _.reject($scope.detailData.site, function(s) {
          return s.StationID == siteID;
        });
        checkIn();
        // delete vm.stationCityCheckInList[siteID];
        var memberidx = _.findIndex($scope.mainData.list, function(e) {
          return e.memberID == memberID;
        });
        console.log(memberidx);
        $scope.mainData.list[memberidx].city = _.reject($scope.mainData.list[memberidx].city, function(e) {
          return e.StationID == siteID;
        });
        return workflow.response();
      }
    }
  }

  vm.destinations = [{
    'name': '北京',
    'list': [{
      'name': '北京',
      'id': '000000000000000000000008'
    }]
  }, {
    'name': '上海',
    'list': [{
      'name': '上海',
      'id': '000000000000000000000009'
    }, {
      'name': '迪士尼',
      'id': '5781d9ec8695557942336108'
    }]
  }, {
    'name': '天津',
    'list': [{
      'name': '天津',
      'id': '000000000000000000000010'
    }]
  }, {
    'name': '重庆',
    'list': [{
      'name': '重庆',
      'id': '000000000000000000000011'
    }]
  }, {
    'name': '黑龙江',
    'list': [{
      'name': '哈尔滨',
      'id': '000000000000000000000133'
    }, {
      'name': '齐齐哈尔',
      'id': '000000000000000000000153'
    }, {
      'name': '牡丹江',
      'id': '000000000000000000000170'
    }, {
      'name': '佳木斯',
      'id': '000000000000000000000181'
    }, {
      'name': '大庆',
      'id': '000000000000000000000193'
    }, {
      'name': '鸡西',
      'id': '000000000000000000000203'
    }, {
      'name': '双鸭山',
      'id': '000000000000000000000213'
    }, {
      'name': '伊春',
      'id': '000000000000000000000222'
    }, {
      'name': '七台河',
      'id': '000000000000000000000240'
    }, {
      'name': '鹤岗',
      'id': '000000000000000000000245'
    }, {
      'name': '黑河',
      'id': '000000000000000000000254'
    }, {
      'name': '绥化',
      'id': '000000000000000000000261'
    }, {
      'name': '大兴安岭',
      'id': '000000000000000000000272'
    }, {
      'name': '漠河',
      'id': '000000000000000000000274'
    }, {
      'name': '雪乡',
      'id': '000000000000000000003612'
    }]
  }, {
    'name': '吉林',
    'list': [{
      'name': '长春',
      'id': '000000000000000000000280'
    }, {
      'name': '吉林',
      'id': '000000000000000000000291'
    }, {
      'name': '四平',
      'id': '000000000000000000000301'
    }, {
      'name': '辽源',
      'id': '000000000000000000000308'
    }, {
      'name': '通化',
      'id': '000000000000000000000309'
    }, {
      'name': '白山',
      'id': '000000000000000000000310'
    }, {
      'name': '松原',
      'id': '000000000000000000000311'
    }, {
      'name': '白城',
      'id': '000000000000000000000312'
    }, {
      'name': '延边',
      'id': '000000000000000000000313'
    }, {
      'name': '延吉',
      'id': '000000000000000000002301'
    }, {
      'name': '长白山',
      'id': '000000000000000000003607'
    }]
  }, {
    'name': '辽宁',
    'list': [{
      'name': '沈阳',
      'id': '000000000000000000000314'
    }, {
      'name': '大连',
      'id': '000000000000000000000315'
    }, {
      'name': '鞍山',
      'id': '000000000000000000000316'
    }, {
      'name': '抚顺',
      'id': '000000000000000000000317'
    }, {
      'name': '本溪',
      'id': '000000000000000000000318'
    }, {
      'name': '丹东',
      'id': '000000000000000000000319'
    }, {
      'name': '锦州',
      'id': '000000000000000000000320'
    }, {
      'name': '葫芦岛',
      'id': '000000000000000000000321'
    }, {
      'name': '营口',
      'id': '000000000000000000000322'
    }, {
      'name': '盘锦',
      'id': '000000000000000000000323'
    }, {
      'name': '阜新',
      'id': '000000000000000000000324'
    }, {
      'name': '辽阳',
      'id': '000000000000000000000325'
    }, {
      'name': '铁岭',
      'id': '000000000000000000000326'
    }, {
      'name': '朝阳',
      'id': '000000000000000000000327'
    }]
  }, {
    'name': '内蒙古',
    'list': [{
      'name': '呼和浩特',
      'id': '000000000000000000000328'
    }, {
      'name': '包头',
      'id': '000000000000000000000329'
    }, {
      'name': '乌海',
      'id': '000000000000000000000330'
    }, {
      'name': '赤峰',
      'id': '000000000000000000000331'
    }, {
      'name': '通辽',
      'id': '000000000000000000000332'
    }, {
      'name': '鄂尔多斯',
      'id': '000000000000000000000333'
    }, {
      'name': '呼伦贝尔',
      'id': '000000000000000000000334'
    }, {
      'name': '乌兰察布',
      'id': '000000000000000000000335'
    }, {
      'name': '锡林郭勒',
      'id': '000000000000000000000336'
    }, {
      'name': '巴彦淖尔',
      'id': '000000000000000000000337'
    }, {
      'name': '阿拉善',
      'id': '000000000000000000000338'
    }, {
      'name': '兴安',
      'id': '000000000000000000000339'
    }, {
      'name': '额济纳旗',
      'id': '000000000000000000002498'
    }]
  }, {
    'name': '新疆',
    'list': [{
      'name': '乌鲁木齐',
      'id': '000000000000000000000340'
    }, {
      'name': '克拉玛依',
      'id': '000000000000000000000341'
    }, {
      'name': '吐鲁番',
      'id': '000000000000000000000342'
    }, {
      'name': '哈密',
      'id': '000000000000000000000343'
    }, {
      'name': '和田',
      'id': '000000000000000000000344'
    }, {
      'name': '阿克苏',
      'id': '000000000000000000000345'
    }, {
      'name': '喀什',
      'id': '000000000000000000000346'
    }, {
      'name': '克孜勒苏',
      'id': '000000000000000000000347'
    }, {
      'name': '巴音郭楞',
      'id': '000000000000000000000348'
    }, {
      'name': '昌吉',
      'id': '000000000000000000000349'
    }, {
      'name': '博尔塔拉',
      'id': '000000000000000000000350'
    }, {
      'name': '伊犁',
      'id': '000000000000000000000351'
    }, {
      'name': '塔城',
      'id': '000000000000000000000352'
    }, {
      'name': '阿勒泰',
      'id': '000000000000000000000353'
    }, {
      'name': '石河子',
      'id': '000000000000000000000354'
    }, {
      'name': '库车',
      'id': '000000000000000000002531'
    }, {
      'name': '喀纳斯',
      'id': '000000000000000000003614'
    }, {
      'name': '天山天池',
      'id': '000000000000000000003616'
    }]
  }, {
    'name': '西藏',
    'list': [{
      'name': '拉萨',
      'id': '000000000000000000000358'
    }, {
      'name': '那曲',
      'id': '000000000000000000000359'
    }, {
      'name': '昌都',
      'id': '000000000000000000000360'
    }, {
      'name': '山南',
      'id': '000000000000000000000361'
    }, {
      'name': '日喀则',
      'id': '000000000000000000000362'
    }, {
      'name': '阿里',
      'id': '000000000000000000000363'
    }, {
      'name': '林芝',
      'id': '000000000000000000000364'
    }, {
      'name': '纳木错',
      'id': '000000000000000000003618'
    }]
  }, {
    'name': '河北',
    'list': [{
      'name': '石家庄',
      'id': '000000000000000000000365'
    }, {
      'name': '唐山',
      'id': '000000000000000000000366'
    }, {
      'name': '秦皇岛',
      'id': '000000000000000000000367'
    }, {
      'name': '邯郸',
      'id': '000000000000000000000368'
    }, {
      'name': '邢台',
      'id': '000000000000000000000369'
    }, {
      'name': '保定',
      'id': '000000000000000000000370'
    }, {
      'name': '张家口',
      'id': '000000000000000000000371'
    }, {
      'name': '承德',
      'id': '000000000000000000000372'
    }, {
      'name': '廊坊',
      'id': '000000000000000000000373'
    }, {
      'name': '衡水',
      'id': '000000000000000000000374'
    }, {
      'name': '沧州',
      'id': '000000000000000000000375'
    }]
  }, {
    'name': '山西',
    'list': [{
      'name': '太原',
      'id': '000000000000000000000376'
    }, {
      'name': '大同',
      'id': '000000000000000000000377'
    }, {
      'name': '阳泉',
      'id': '000000000000000000000378'
    }, {
      'name': '长治',
      'id': '000000000000000000000379'
    }, {
      'name': '晋城',
      'id': '000000000000000000000380'
    }, {
      'name': '朔州',
      'id': '000000000000000000000381'
    }, {
      'name': '晋中',
      'id': '000000000000000000000382'
    }, {
      'name': '运城',
      'id': '000000000000000000000383'
    }, {
      'name': '忻州',
      'id': '000000000000000000000384'
    }, {
      'name': '临汾',
      'id': '000000000000000000000385'
    }, {
      'name': '吕梁',
      'id': '000000000000000000000386'
    }]
  }, {
    'name': '陕西',
    'list': [{
      'name': '西安',
      'id': '000000000000000000000387'
    }, {
      'name': '铜川',
      'id': '000000000000000000000388'
    }, {
      'name': '宝鸡',
      'id': '000000000000000000000389'
    }, {
      'name': '咸阳',
      'id': '000000000000000000000390'
    }, {
      'name': '渭南',
      'id': '000000000000000000000391'
    }, {
      'name': '延安',
      'id': '000000000000000000000392'
    }, {
      'name': '汉中',
      'id': '000000000000000000000393'
    }, {
      'name': '榆林',
      'id': '000000000000000000000394'
    }, {
      'name': '安康',
      'id': '000000000000000000000395'
    }, {
      'name': '商洛',
      'id': '000000000000000000000396'
    }]
  }, {
    'name': '甘肃',
    'list': [{
      'name': '兰州',
      'id': '000000000000000000000397'
    }, {
      'name': '金昌',
      'id': '000000000000000000000398'
    }, {
      'name': '白银',
      'id': '000000000000000000000399'
    }, {
      'name': '天水',
      'id': '000000000000000000000400'
    }, {
      'name': '嘉峪关',
      'id': '000000000000000000000401'
    }, {
      'name': '武威',
      'id': '000000000000000000000402'
    }, {
      'name': '张掖',
      'id': '000000000000000000000403'
    }, {
      'name': '平凉',
      'id': '000000000000000000000404'
    }, {
      'name': '酒泉',
      'id': '000000000000000000000405'
    }, {
      'name': '庆阳',
      'id': '000000000000000000000406'
    }, {
      'name': '定西',
      'id': '000000000000000000000407'
    }, {
      'name': '陇南',
      'id': '000000000000000000000408'
    }, {
      'name': '甘南',
      'id': '000000000000000000000409'
    }, {
      'name': '临夏',
      'id': '000000000000000000000410'
    }, {
      'name': '敦煌',
      'id': '000000000000000000003106'
    }]
  }, {
    'name': '宁夏',
    'list': [{
      'name': '银川',
      'id': '000000000000000000000411'
    }, {
      'name': '石嘴山',
      'id': '000000000000000000000412'
    }, {
      'name': '吴忠',
      'id': '000000000000000000000413'
    }, {
      'name': '固原',
      'id': '000000000000000000000414'
    }]
  }, {
    'name': '青海',
    'list': [{
      'name': '西宁',
      'id': '000000000000000000000416'
    }, {
      'name': '海东',
      'id': '000000000000000000000417'
    }, {
      'name': '海北',
      'id': '000000000000000000000418'
    }, {
      'name': '黄南',
      'id': '000000000000000000000419'
    }, {
      'name': '海南',
      'id': '000000000000000000000420'
    }, {
      'name': '果洛',
      'id': '000000000000000000000421'
    }, {
      'name': '玉树',
      'id': '000000000000000000000422'
    }, {
      'name': '海西',
      'id': '000000000000000000000423'
    }, {
      'name': '青海湖二郎剑景区',
      'id': '000000000000000000003619'
    }]
  }, {
    'name': '山东',
    'list': [{
      'name': '济南',
      'id': '000000000000000000000424'
    }, {
      'name': '青岛',
      'id': '000000000000000000000425'
    }, {
      'name': '淄博',
      'id': '000000000000000000000426'
    }, {
      'name': '枣庄',
      'id': '000000000000000000000427'
    }, {
      'name': '东营',
      'id': '000000000000000000000428'
    }, {
      'name': '潍坊',
      'id': '000000000000000000000429'
    }, {
      'name': '烟台',
      'id': '000000000000000000000430'
    }, {
      'name': '威海',
      'id': '000000000000000000000431'
    }, {
      'name': '济宁',
      'id': '000000000000000000000432'
    }, {
      'name': '泰安',
      'id': '000000000000000000000433'
    }, {
      'name': '日照',
      'id': '000000000000000000000434'
    }, {
      'name': '莱芜',
      'id': '000000000000000000000435'
    }, {
      'name': '临沂',
      'id': '000000000000000000000436'
    }, {
      'name': '德州',
      'id': '000000000000000000000437'
    }, {
      'name': '聊城',
      'id': '000000000000000000000438'
    }, {
      'name': '滨州',
      'id': '000000000000000000000439'
    }, {
      'name': '菏泽',
      'id': '000000000000000000000440'
    }, {
      'name': '蓬莱',
      'id': '000000000000000000003277'
    }, {
      'name': '曲阜',
      'id': '000000000000000000003300'
    }, {
      'name': '泰山',
      'id': '000000000000000000003301'
    }]
  }, {
    'name': '河南',
    'list': [{
      'name': '郑州',
      'id': '000000000000000000000441'
    }, {
      'name': '开封',
      'id': '000000000000000000000442'
    }, {
      'name': '平顶山',
      'id': '000000000000000000000443'
    }, {
      'name': '焦作',
      'id': '000000000000000000000444'
    }, {
      'name': '鹤壁',
      'id': '000000000000000000000445'
    }, {
      'name': '新乡',
      'id': '000000000000000000000446'
    }, {
      'name': '安阳',
      'id': '000000000000000000000447'
    }, {
      'name': '濮阳',
      'id': '000000000000000000000448'
    }, {
      'name': '许昌',
      'id': '000000000000000000000449'
    }, {
      'name': '漯河',
      'id': '000000000000000000000450'
    }, {
      'name': '三门峡',
      'id': '000000000000000000000451'
    }, {
      'name': '南阳',
      'id': '000000000000000000000452'
    }, {
      'name': '商丘',
      'id': '000000000000000000000453'
    }, {
      'name': '信阳',
      'id': '000000000000000000000454'
    }, {
      'name': '周口',
      'id': '000000000000000000000455'
    }, {
      'name': '驻马店',
      'id': '000000000000000000000456'
    }, {
      'name': '洛阳',
      'id': '000000000000000000000457'
    }]
  }, {
    'name': '江苏',
    'list': [{
      'name': '南京',
      'id': '000000000000000000000459'
    }, {
      'name': '徐州',
      'id': '000000000000000000000460'
    }, {
      'name': '连云港',
      'id': '000000000000000000000461'
    }, {
      'name': '淮安',
      'id': '000000000000000000000462'
    }, {
      'name': '宿迁',
      'id': '000000000000000000000463'
    }, {
      'name': '盐城',
      'id': '000000000000000000000464'
    }, {
      'name': '扬州',
      'id': '000000000000000000000465'
    }, {
      'name': '泰州',
      'id': '000000000000000000000466'
    }, {
      'name': '南通',
      'id': '000000000000000000000467'
    }, {
      'name': '镇江',
      'id': '000000000000000000000468'
    }, {
      'name': '常州',
      'id': '000000000000000000000469'
    }, {
      'name': '无锡',
      'id': '000000000000000000000470'
    }, {
      'name': '苏州',
      'id': '000000000000000000000471'
    }, {
      'name': '江宁',
      'id': '000000000000000000001025'
    }, {
      'name': '句容',
      'id': '000000000000000000001089'
    }, {
      'name': '武进',
      'id': '000000000000000000001097'
    }, {
      'name': '吴中',
      'id': '000000000000000000001107'
    }, {
      'name': '吴江',
      'id': '000000000000000000001115'
    }, {
      'name': '滨湖',
      'id': '000000000000000000003999'
    }]
  }, {
    'name': '安徽',
    'list': [{
      'name': '合肥',
      'id': '000000000000000000000472'
    }, {
      'name': '芜湖',
      'id': '000000000000000000000473'
    }, {
      'name': '蚌埠',
      'id': '000000000000000000000474'
    }, {
      'name': '淮南',
      'id': '000000000000000000000475'
    }, {
      'name': '马鞍山',
      'id': '000000000000000000000476'
    }, {
      'name': '淮北',
      'id': '000000000000000000000477'
    }, {
      'name': '铜陵',
      'id': '000000000000000000000478'
    }, {
      'name': '安庆',
      'id': '000000000000000000000479'
    }, {
      'name': '黄山',
      'id': '000000000000000000000480'
    }, {
      'name': '滁州',
      'id': '000000000000000000000481'
    }, {
      'name': '阜阳',
      'id': '000000000000000000000482'
    }, {
      'name': '宿州',
      'id': '000000000000000000000483'
    }, {
      'name': '巢湖',
      'id': '000000000000000000000484'
    }, {
      'name': '六安',
      'id': '000000000000000000000485'
    }, {
      'name': '亳州',
      'id': '000000000000000000000486'
    }, {
      'name': '池州',
      'id': '000000000000000000000487'
    }, {
      'name': '宣城',
      'id': '000000000000000000000488'
    }, {
      'name': '屯溪',
      'id': '000000000000000000001166'
    }, {
      'name': '徽州',
      'id': '000000000000000000001167'
    }, {
      'name': '休宁',
      'id': '000000000000000000001168'
    }, {
      'name': '黟县',
      'id': '000000000000000000001172'
    }, {
      'name': '九华山',
      'id': '000000000000000000003598'
    }]
  }, {
    'name': '湖北',
    'list': [{
      'name': '武汉',
      'id': '000000000000000000000494'
    }, {
      'name': '黄石',
      'id': '000000000000000000000495'
    }, {
      'name': '襄樊',
      'id': '000000000000000000000496'
    }, {
      'name': '十堰',
      'id': '000000000000000000000497'
    }, {
      'name': '荆州',
      'id': '000000000000000000000498'
    }, {
      'name': '宜昌',
      'id': '000000000000000000000499'
    }, {
      'name': '荆门',
      'id': '000000000000000000000500'
    }, {
      'name': '鄂州',
      'id': '000000000000000000000501'
    }, {
      'name': '孝感',
      'id': '000000000000000000000502'
    }, {
      'name': '黄冈',
      'id': '000000000000000000000503'
    }, {
      'name': '咸宁',
      'id': '000000000000000000000504'
    }, {
      'name': '随州',
      'id': '000000000000000000000505'
    }, {
      'name': '恩施',
      'id': '000000000000000000000506'
    }]
  }, {
    'name': '浙江',
    'list': [{
      'name': '杭州',
      'id': '000000000000000000000511'
    }, {
      'name': '宁波',
      'id': '000000000000000000000512'
    }, {
      'name': '温州',
      'id': '000000000000000000000513'
    }, {
      'name': '嘉兴',
      'id': '000000000000000000000514'
    }, {
      'name': '湖州',
      'id': '000000000000000000000515'
    }, {
      'name': '绍兴',
      'id': '000000000000000000000516'
    }, {
      'name': '金华',
      'id': '000000000000000000000517'
    }, {
      'name': '衢州',
      'id': '000000000000000000000518'
    }, {
      'name': '舟山',
      'id': '000000000000000000000519'
    }, {
      'name': '台州',
      'id': '000000000000000000000520'
    }, {
      'name': '丽水',
      'id': '000000000000000000000521'
    }, {
      'name': '桐庐',
      'id': '000000000000000000000929'
    }, {
      'name': '建德',
      'id': '000000000000000000000930'
    }, {
      'name': '临安',
      'id': '000000000000000000000931'
    }, {
      'name': '淳安',
      'id': '000000000000000000000936'
    }, {
      'name': '富阳',
      'id': '000000000000000000000937'
    }, {
      'name': '镇海',
      'id': '000000000000000000000940'
    }, {
      'name': '象山',
      'id': '000000000000000000000941'
    }, {
      'name': '余姚',
      'id': '000000000000000000000942'
    }, {
      'name': '奉化',
      'id': '000000000000000000000943'
    }, {
      'name': '北仑',
      'id': '000000000000000000000945'
    }, {
      'name': '鄞州',
      'id': '000000000000000000000946'
    }, {
      'name': '宁海',
      'id': '000000000000000000000947'
    }, {
      'name': '慈溪',
      'id': '000000000000000000000948'
    }, {
      'name': '洞头',
      'id': '000000000000000000000956'
    }, {
      'name': '海宁',
      'id': '000000000000000000000965'
    }, {
      'name': '德清',
      'id': '000000000000000000000967'
    }, {
      'name': '安吉',
      'id': '000000000000000000000968'
    }, {
      'name': '南浔',
      'id': '000000000000000000000969'
    }, {
      'name': '长兴',
      'id': '000000000000000000000970'
    }, {
      'name': '武义',
      'id': '000000000000000000000978'
    }, {
      'name': '武义',
      'id': '000000000000000000000978'
    }, {
      'name': '浦江',
      'id': '000000000000000000000983'
    }, {
      'name': '兰溪',
      'id': '000000000000000000000984'
    }, {
      'name': '江山',
      'id': '000000000000000000000989'
    }, {
      'name': '开化',
      'id': '000000000000000000000991'
    }, {
      'name': '岱山',
      'id': '000000000000000000000993'
    }, {
      'name': '嵊泗',
      'id': '000000000000000000000994'
    }, {
      'name': '普陀',
      'id': '000000000000000000000995'
    }, {
      'name': '普陀',
      'id': '000000000000000000000995'
    }, {
      'name': '遂昌',
      'id': '000000000000000000001011'
    }, {
      'name': '云和',
      'id': '000000000000000000001012'
    }, {
      'name': '景宁',
      'id': '000000000000000000001013'
    }, {
      'name': '西塘',
      'id': '000000000000000000003600'
    }, {
      'name': '横店',
      'id': '000000000000000000003602'
    }, {
      'name': '溪口',
      'id': '000000000000000000003606'
    }, {
      'name': '普陀山',
      'id': '000000000000000000003611'
    }, {
      'name': '普陀山',
      'id': '000000000000000000003611'
    }, {
      'name': '慈城古镇',
      'id': '000000000000000000004504'
    }, {
      'name': '乌镇',
      'id': '000000000000000000004818'
    }, {
      'name': '雁荡山',
      'id': '000000000000000000008297'
    }, {
      'name': '千岛湖',
      'id': '000000000000000000009892'
    }]
  }, {
    'name': '湖南',
    'list': [{
      'name': '长沙',
      'id': '000000000000000000000522'
    }, {
      'name': '株洲',
      'id': '000000000000000000000523'
    }, {
      'name': '湘潭',
      'id': '000000000000000000000524'
    }, {
      'name': '衡阳',
      'id': '000000000000000000000525'
    }, {
      'name': '邵阳',
      'id': '000000000000000000000526'
    }, {
      'name': '岳阳',
      'id': '000000000000000000000527'
    }, {
      'name': '常德',
      'id': '000000000000000000000528'
    }, {
      'name': '张家界',
      'id': '000000000000000000000529'
    }, {
      'name': '益阳',
      'id': '000000000000000000000530'
    }, {
      'name': '郴州',
      'id': '000000000000000000000531'
    }, {
      'name': '永州',
      'id': '000000000000000000000532'
    }, {
      'name': '怀化',
      'id': '000000000000000000000533'
    }, {
      'name': '娄底',
      'id': '000000000000000000000534'
    }, {
      'name': '湘西',
      'id': '000000000000000000000535'
    }, {
      'name': '韶山',
      'id': '000000000000000000001329'
    }, {
      'name': '凤凰',
      'id': '000000000000000000001433'
    }]
  }, {
    'name': '江西',
    'list': [{
      'name': '南昌',
      'id': '000000000000000000000536'
    }, {
      'name': '景德镇',
      'id': '000000000000000000000537'
    }, {
      'name': '萍乡',
      'id': '000000000000000000000538'
    }, {
      'name': '九江',
      'id': '000000000000000000000539'
    }, {
      'name': '新余',
      'id': '000000000000000000000540'
    }, {
      'name': '鹰潭',
      'id': '000000000000000000000541'
    }, {
      'name': '赣州',
      'id': '000000000000000000000542'
    }, {
      'name': '吉安',
      'id': '000000000000000000000543'
    }, {
      'name': '宜春',
      'id': '000000000000000000000544'
    }, {
      'name': '抚州',
      'id': '000000000000000000000545'
    }, {
      'name': '上饶',
      'id': '000000000000000000000546'
    }, {
      'name': '庐山',
      'id': '000000000000000000001457'
    }, {
      'name': '井冈山',
      'id': '000000000000000000001498'
    }, {
      'name': '袁州',
      'id': '000000000000000000001505'
    }, {
      'name': '婺源',
      'id': '000000000000000000001531'
    }, {
      'name': '三清山',
      'id': '000000000000000000003596'
    }, {
      'name': '龙虎山景区',
      'id': '000000000000000000003597'
    }]
  }, {
    'name': '福建',
    'list': [{
      'name': '福州',
      'id': '000000000000000000000547'
    }, {
      'name': '厦门',
      'id': '000000000000000000000548'
    }, {
      'name': '三明',
      'id': '000000000000000000000549'
    }, {
      'name': '莆田',
      'id': '000000000000000000000550'
    }, {
      'name': '泉州',
      'id': '000000000000000000000551'
    }, {
      'name': '漳州',
      'id': '000000000000000000000552'
    }, {
      'name': '南平',
      'id': '000000000000000000000553'
    }, {
      'name': '龙岩',
      'id': '000000000000000000000554'
    }, {
      'name': '宁德',
      'id': '000000000000000000000555'
    }, {
      'name': '武夷山',
      'id': '000000000000000000001606'
    }, {
      'name': '潮汕',
      'id': '000000000000000000008976'
    }]
  }, {
    'name': '广东',
    'list': [{
      'name': '广州',
      'id': '000000000000000000000556'
    }, {
      'name': '深圳',
      'id': '000000000000000000000557'
    }, {
      'name': '珠海',
      'id': '000000000000000000000558'
    }, {
      'name': '汕头',
      'id': '000000000000000000000559'
    }, {
      'name': '韶关',
      'id': '000000000000000000000560'
    }, {
      'name': '惠州',
      'id': '000000000000000000000561'
    }, {
      'name': '河源',
      'id': '000000000000000000000562'
    }, {
      'name': '梅州',
      'id': '000000000000000000000563'
    }, {
      'name': '汕尾',
      'id': '000000000000000000000564'
    }, {
      'name': '东莞',
      'id': '000000000000000000000565'
    }, {
      'name': '中山',
      'id': '000000000000000000000566'
    }, {
      'name': '江门',
      'id': '000000000000000000000567'
    }, {
      'name': '佛山',
      'id': '000000000000000000000568'
    }, {
      'name': '阳江',
      'id': '000000000000000000000569'
    }, {
      'name': '湛江',
      'id': '000000000000000000000570'
    }, {
      'name': '茂名',
      'id': '000000000000000000000571'
    }, {
      'name': '肇庆',
      'id': '000000000000000000000572'
    }, {
      'name': '清远',
      'id': '000000000000000000000573'
    }, {
      'name': '潮州',
      'id': '000000000000000000000574'
    }, {
      'name': '揭阳',
      'id': '000000000000000000000575'
    }, {
      'name': '云浮',
      'id': '000000000000000000000576'
    }]
  }, {
    'name': '广西',
    'list': [{
      'name': '南宁',
      'id': '000000000000000000000577'
    }, {
      'name': '柳州',
      'id': '000000000000000000000578'
    }, {
      'name': '桂林',
      'id': '000000000000000000000579'
    }, {
      'name': '梧州',
      'id': '000000000000000000000580'
    }, {
      'name': '北海',
      'id': '000000000000000000000581'
    }, {
      'name': '防城港',
      'id': '000000000000000000000582'
    }, {
      'name': '钦州',
      'id': '000000000000000000000583'
    }, {
      'name': '贵港',
      'id': '000000000000000000000584'
    }, {
      'name': '玉林',
      'id': '000000000000000000000585'
    }, {
      'name': '百色',
      'id': '000000000000000000000586'
    }, {
      'name': '贺州',
      'id': '000000000000000000000587'
    }, {
      'name': '河池',
      'id': '000000000000000000000588'
    }, {
      'name': '来宾',
      'id': '000000000000000000000589'
    }, {
      'name': '崇左',
      'id': '000000000000000000000590'
    }, {
      'name': '阳朔',
      'id': '000000000000000000001778'
    }, {
      'name': '巴马',
      'id': '000000000000000000001839'
    }]
  }, {
    'name': '贵州',
    'list': [{
      'name': '贵阳',
      'id': '000000000000000000000591'
    }, {
      'name': '六盘水',
      'id': '000000000000000000000592'
    }, {
      'name': '遵义',
      'id': '000000000000000000000593'
    }, {
      'name': '安顺',
      'id': '000000000000000000000594'
    }, {
      'name': '铜仁',
      'id': '000000000000000000000595'
    }, {
      'name': '毕节',
      'id': '000000000000000000000596'
    }, {
      'name': '黔西南',
      'id': '000000000000000000000597'
    }, {
      'name': '黔东南',
      'id': '000000000000000000000598'
    }, {
      'name': '黔南',
      'id': '000000000000000000000599'
    }, {
      'name': '凯里',
      'id': '000000000000000000001906'
    }]
  }, {
    'name': '四川',
    'list': [{
      'name': '成都',
      'id': '000000000000000000000600'
    }, {
      'name': '自贡',
      'id': '000000000000000000000601'
    }, {
      'name': '攀枝花',
      'id': '000000000000000000000602'
    }, {
      'name': '泸州',
      'id': '000000000000000000000603'
    }, {
      'name': '德阳',
      'id': '000000000000000000000604'
    }, {
      'name': '绵阳',
      'id': '000000000000000000000605'
    }, {
      'name': '广元',
      'id': '000000000000000000000606'
    }, {
      'name': '遂宁',
      'id': '000000000000000000000607'
    }, {
      'name': '内江',
      'id': '000000000000000000000608'
    }, {
      'name': '乐山',
      'id': '000000000000000000000609'
    }, {
      'name': '南充',
      'id': '000000000000000000000610'
    }, {
      'name': '宜宾',
      'id': '000000000000000000000611'
    }, {
      'name': '广安',
      'id': '000000000000000000000612'
    }, {
      'name': '达州',
      'id': '000000000000000000000613'
    }, {
      'name': '眉山',
      'id': '000000000000000000000614'
    }, {
      'name': '雅安',
      'id': '000000000000000000000615'
    }, {
      'name': '巴中',
      'id': '000000000000000000000616'
    }, {
      'name': '资阳',
      'id': '000000000000000000000617'
    }, {
      'name': '阿坝',
      'id': '000000000000000000000618'
    }, {
      'name': '甘孜',
      'id': '000000000000000000000619'
    }, {
      'name': '凉山',
      'id': '000000000000000000000620'
    }, {
      'name': '峨眉山',
      'id': '000000000000000000002015'
    }, {
      'name': '九寨沟',
      'id': '000000000000000000002076'
    }, {
      'name': '稻城',
      'id': '000000000000000000002096'
    }, {
      'name': '海螺沟',
      'id': '000000000000000000003604'
    }, {
      'name': '黄龙风景名胜区',
      'id': '000000000000000000003605'
    }]
  }, {
    'name': '云南',
    'list': [{
      'name': '昆明',
      'id': '000000000000000000000621'
    }, {
      'name': '曲靖',
      'id': '000000000000000000000622'
    }, {
      'name': '玉溪',
      'id': '000000000000000000000623'
    }, {
      'name': '保山',
      'id': '000000000000000000000624'
    }, {
      'name': '昭通',
      'id': '000000000000000000000625'
    }, {
      'name': '思茅',
      'id': '000000000000000000000626'
    }, {
      'name': '临沧',
      'id': '000000000000000000000627'
    }, {
      'name': '丽江',
      'id': '000000000000000000000628'
    }, {
      'name': '文山',
      'id': '000000000000000000000629'
    }, {
      'name': '红河',
      'id': '000000000000000000000630'
    }, {
      'name': '西双版纳',
      'id': '000000000000000000000631'
    }, {
      'name': '楚雄',
      'id': '000000000000000000000632'
    }, {
      'name': '大理',
      'id': '000000000000000000000633'
    }, {
      'name': '德宏',
      'id': '000000000000000000000634'
    }, {
      'name': '怒江',
      'id': '000000000000000000000635'
    }, {
      'name': '迪庆',
      'id': '000000000000000000000636'
    }, {
      'name': '罗平',
      'id': '000000000000000000002138'
    }, {
      'name': '腾冲',
      'id': '000000000000000000002155'
    }, {
      'name': '元阳',
      'id': '000000000000000000002205'
    }, {
      'name': '瑞丽',
      'id': '000000000000000000002239'
    }, {
      'name': '香格里拉',
      'id': '000000000000000000002249'
    }, {
      'name': '普者黑',
      'id': '000000000000000000008414'
    }]
  }, {
    'name': '海南',
    'list': [{
      'name': '海口',
      'id': '000000000000000000000637'
    }, {
      'name': '三亚',
      'id': '000000000000000000000638'
    }, {
      'name': '三亚',
      'id': '000000000000000000000638'
    }, {
      'name': '保亭',
      'id': '000000000000000000000654'
    }, {
      'name': '西沙',
      'id': '000000000000000000008370'
    }]
  }, {
    'name': '亚洲',
    'list': [{
      'name': '阿塞拜疆',
      'id': '000000000000000000000699'
    }, {
      'name': '蒙古',
      'id': '000000000000000000000700'
    }, {
      'name': '菲律宾',
      'id': '000000000000000000000705'
    }, {
      'name': '巴基斯坦',
      'id': '000000000000000000000716'
    }, {
      'name': '哈萨克斯坦',
      'id': '000000000000000000000717'
    }, {
      'name': '吉尔吉斯斯坦',
      'id': '000000000000000000000720'
    }, {
      'name': '塔吉克斯坦',
      'id': '000000000000000000000722'
    }, {
      'name': '土库曼斯坦',
      'id': '000000000000000000000723'
    }, {
      'name': '乌兹别克斯坦',
      'id': '000000000000000000000725'
    }, {
      'name': '巴林',
      'id': '000000000000000000000729'
    }, {
      'name': '伊拉克',
      'id': '000000000000000000000731'
    }, {
      'name': '黎巴嫩',
      'id': '000000000000000000000735'
    }, {
      'name': '阿曼',
      'id': '000000000000000000000736'
    }, {
      'name': '卡塔尔',
      'id': '000000000000000000000737'
    }, {
      'name': '叙利亚',
      'id': '000000000000000000000739'
    }, {
      'name': '阿联酋',
      'id': '000000000000000000000740'
    }, {
      'name': '也门',
      'id': '000000000000000000000741'
    }, {
      'name': '多哈',
      'id': '000000000000000000007934'
    }]
  }, {
    'name': '欧洲',
    'list': [{
      'name': '爱沙尼亚',
      'id': '000000000000000000000746'
    }, {
      'name': '英国',
      'id': '000000000000000000000748'
    }, {
      'name': '比利时',
      'id': '000000000000000000000749'
    }, {
      'name': '法国',
      'id': '000000000000000000000750'
    }, {
      'name': '德国',
      'id': '000000000000000000000751'
    }, {
      'name': '意大利',
      'id': '000000000000000000000752'
    }, {
      'name': '奥地利',
      'id': '000000000000000000000753'
    }, {
      'name': '荷兰',
      'id': '000000000000000000000754'
    }, {
      'name': '西班牙',
      'id': '000000000000000000000755'
    }, {
      'name': '希腊',
      'id': '000000000000000000000756'
    }, {
      'name': '瑞士',
      'id': '000000000000000000000757'
    }, {
      'name': '丹麦',
      'id': '000000000000000000000758'
    }, {
      'name': '马耳他',
      'id': '000000000000000000000759'
    }, {
      'name': '俄罗斯',
      'id': '000000000000000000000760'
    }, {
      'name': '爱尔兰',
      'id': '000000000000000000000761'
    }, {
      'name': '芬兰',
      'id': '000000000000000000000762'
    }, {
      'name': '捷克',
      'id': '000000000000000000000763'
    }, {
      'name': '冰岛',
      'id': '000000000000000000000764'
    }, {
      'name': '瑞典',
      'id': '000000000000000000000765'
    }, {
      'name': '挪威',
      'id': '000000000000000000000766'
    }, {
      'name': '匈牙利',
      'id': '000000000000000000000767'
    }, {
      'name': '葡萄牙',
      'id': '000000000000000000000768'
    }, {
      'name': '斯洛伐克',
      'id': '000000000000000000000769'
    }, {
      'name': '波兰',
      'id': '000000000000000000000770'
    }, {
      'name': '罗马尼亚',
      'id': '000000000000000000000772'
    }, {
      'name': '克罗地亚',
      'id': '000000000000000000000775'
    }, {
      'name': '保加利亚',
      'id': '000000000000000000000776'
    }, {
      'name': '白俄罗斯',
      'id': '000000000000000000000778'
    }, {
      'name': '乌克兰',
      'id': '000000000000000000000782'
    }, {
      'name': '马其顿',
      'id': '000000000000000000000783'
    }, {
      'name': '摩尔多瓦',
      'id': '000000000000000000000785'
    }, {
      'name': '塞尔维亚',
      'id': '000000000000000000000787'
    }, {
      'name': '卢森堡',
      'id': '000000000000000000000788'
    }, {
      'name': '蒙特塞拉特',
      'id': '000000000000000000000791'
    }, {
      'name': '米兰',
      'id': '000000000000000000003572'
    }, {
      'name': '巴黎',
      'id': '000000000000000000003577'
    }]
  }, {
    'name': '北美洲',
    'list': [{
      'name': '加勒比',
      'id': '000000000000000000000793'
    }, {
      'name': '加拿大',
      'id': '000000000000000000000794'
    }, {
      'name': '美国',
      'id': '000000000000000000000795'
    }, {
      'name': '墨西哥',
      'id': '000000000000000000000796'
    }, {
      'name': '古巴',
      'id': '000000000000000000000801'
    }, {
      'name': '哥斯达黎加',
      'id': '000000000000000000000808'
    }, {
      'name': '纽约',
      'id': '000000000000000000003561'
    }, {
      'name': '洛杉矶',
      'id': '000000000000000000003562'
    }, {
      'name': '夏威夷',
      'id': '000000000000000000003566'
    }, {
      'name': '拉斯维加斯',
      'id': '000000000000000000004208'
    }, {
      'name': '旧金山',
      'id': '000000000000000000007597'
    }, {
      'name': '华盛顿',
      'id': '000000000000000000007599'
    }, {
      'name': '东海岸',
      'id': '000000000000000000009930'
    }, {
      'name': '西海岸',
      'id': '000000000000000000009931'
    }, {
      'name': '黄石公园',
      'id': '000000000000000000009933'
    }]
  }, {
    'name': '南美洲',
    'list': [{
      'name': '阿鲁巴',
      'id': '000000000000000000000820'
    }, {
      'name': '委内瑞拉',
      'id': '000000000000000000000822'
    }, {
      'name': '巴西',
      'id': '000000000000000000000823'
    }, {
      'name': '智利',
      'id': '000000000000000000000824'
    }, {
      'name': '阿根廷',
      'id': '000000000000000000000825'
    }, {
      'name': '秘鲁',
      'id': '000000000000000000000826'
    }, {
      'name': '厄瓜多尔',
      'id': '000000000000000000000827'
    }, {
      'name': '巴拉圭',
      'id': '000000000000000000000828'
    }, {
      'name': '福克兰群岛',
      'id': '000000000000000000000830'
    }, {
      'name': '牙买加',
      'id': '000000000000000000000833'
    }]
  }, {
    'name': '非洲',
    'list': [{
      'name': '利比亚',
      'id': '000000000000000000000841'
    }, {
      'name': '埃塞俄比亚',
      'id': '000000000000000000000849'
    }, {
      'name': '多哥',
      'id': '000000000000000000000851'
    }, {
      'name': '刚果（金）',
      'id': '000000000000000000000852'
    }, {
      'name': '刚果（布）',
      'id': '000000000000000000000853'
    }, {
      'name': '津巴布韦',
      'id': '000000000000000000000854'
    }, {
      'name': '纳米尼亚',
      'id': '000000000000000000000855'
    }, {
      'name': '塞内加尔',
      'id': '000000000000000000000856'
    }, {
      'name': '塞内加尔',
      'id': '000000000000000000000856'
    }, {
      'name': '塞舌尔',
      'id': '000000000000000000000857'
    }, {
      'name': '赞比亚',
      'id': '000000000000000000000859'
    }, {
      'name': '阿尔及利亚',
      'id': '000000000000000000000860'
    }, {
      'name': '安哥拉',
      'id': '000000000000000000000862'
    }, {
      'name': '加纳',
      'id': '000000000000000000000863'
    }, {
      'name': '贝宁',
      'id': '000000000000000000000864'
    }, {
      'name': '几内亚',
      'id': '000000000000000000000865'
    }, {
      'name': '卢旺达',
      'id': '000000000000000000000866'
    }, {
      'name': '博茨瓦纳',
      'id': '000000000000000000000867'
    }, {
      'name': '几内亚比绍',
      'id': '000000000000000000000868'
    }, {
      'name': '布隆迪',
      'id': '000000000000000000000873'
    }, {
      'name': '莱索托',
      'id': '000000000000000000000874'
    }, {
      'name': '喀麦隆',
      'id': '000000000000000000000875'
    }, {
      'name': '利比里亚',
      'id': '000000000000000000000876'
    }, {
      'name': '马里',
      'id': '000000000000000000000878'
    }, {
      'name': '马拉维',
      'id': '000000000000000000000879'
    }, {
      'name': '苏丹',
      'id': '000000000000000000000880'
    }, {
      'name': '科特迪瓦',
      'id': '000000000000000000000881'
    }, {
      'name': '毛里塔尼亚',
      'id': '000000000000000000000882'
    }, {
      'name': '赤道几内亚',
      'id': '000000000000000000000886'
    }, {
      'name': '莫桑比克',
      'id': '000000000000000000000887'
    }, {
      'name': '乌干达',
      'id': '000000000000000000000888'
    }, {
      'name': '厄立特里亚',
      'id': '000000000000000000000889'
    }, {
      'name': '尼日利亚',
      'id': '000000000000000000000890'
    }, {
      'name': '加蓬',
      'id': '000000000000000000000891'
    }, {
      'name': '尼日尔',
      'id': '000000000000000000000892'
    }, {
      'name': '塞拉利昂',
      'id': '000000000000000000000893'
    }, {
      'name': '中非',
      'id': '000000000000000000000894'
    }, {
      'name': '马达加斯加',
      'id': '000000000000000000000895'
    }, {
      'name': '索马里',
      'id': '000000000000000000000896'
    }, {
      'name': '乍得',
      'id': '000000000000000000000897'
    }]
  }, {
    'name': '大洋洲',
    'list': [{
      'name': '法属波利尼西亚',
      'id': '000000000000000000000904'
    }, {
      'name': '澳大利亚',
      'id': '000000000000000000000906'
    }, {
      'name': '新西兰',
      'id': '000000000000000000000907'
    }, {
      'name': '关岛',
      'id': '000000000000000000000923'
    }, {
      'name': '北马里亚纳',
      'id': '000000000000000000000924'
    }, {
      'name': '奥克兰',
      'id': '000000000000000000003544'
    }, {
      'name': '悉尼',
      'id': '000000000000000000003550'
    }, {
      'name': '大溪地',
      'id': '000000000000000000003588'
    }, {
      'name': '塔斯马尼亚',
      'id': '000000000000000000009002'
    }]
  }, {
    'name': '台湾',
    'list': [{
      'name': '台北',
      'id': '000000000000000000000679'
    }, {
      'name': '基隆',
      'id': '000000000000000000000680'
    }, {
      'name': '宜兰',
      'id': '000000000000000000000681'
    }, {
      'name': '桃园',
      'id': '000000000000000000000682'
    }, {
      'name': '新竹',
      'id': '000000000000000000000683'
    }, {
      'name': '苗栗',
      'id': '000000000000000000000684'
    }, {
      'name': '台中',
      'id': '000000000000000000000685'
    }, {
      'name': '彰化',
      'id': '000000000000000000000686'
    }, {
      'name': '南投',
      'id': '000000000000000000000687'
    }, {
      'name': '云林',
      'id': '000000000000000000000688'
    }, {
      'name': '嘉义',
      'id': '000000000000000000000689'
    }, {
      'name': '台南',
      'id': '000000000000000000000690'
    }, {
      'name': '高雄',
      'id': '000000000000000000000691'
    }, {
      'name': '��东',
      'id': '000000000000000000000692'
    }, {
      'name': '台东',
      'id': '000000000000000000000693'
    }, {
      'name': '花莲',
      'id': '000000000000000000000694'
    }, {
      'name': '澎湖',
      'id': '000000000000000000000695'
    }, {
      'name': '垦丁公园',
      'id': '000000000000000000005196'
    }, {
      'name': '台湾离岛',
      'id': '000000000000000000009510'
    }, {
      'name': '西海岸',
      'id': '000000000000000000009511'
    }, {
      'name': '环岛',
      'id': '000000000000000000009512'
    }]
  }, {
    'name': '泰国',
    'list': [{
      'name': '象岛',
      'id': '000000000000000000000701'
    }, {
      'name': '曼谷',
      'id': '000000000000000000003534'
    }, {
      'name': '清迈',
      'id': '000000000000000000003535'
    }, {
      'name': '芭提雅',
      'id': '000000000000000000008977'
    }, {
      'name': '沙美岛',
      'id': '000000000000000000009278'
    }, {
      'name': '甲米',
      'id': '000000000000000000009502'
    }]
  }, {
    'name': '日本',
    'list': [{
      'name': '东京',
      'id': '000000000000000000003514'
    }, {
      'name': '大阪',
      'id': '000000000000000000003515'
    }, {
      'name': '北海道',
      'id': '000000000000000000003516'
    }, {
      'name': '冲绳',
      'id': '000000000000000000003517'
    }, {
      'name': '京都',
      'id': '000000000000000000003518'
    }, {
      'name': '箱根',
      'id': '000000000000000000003519'
    }, {
      'name': '九州',
      'id': '000000000000000000003520'
    }, {
      'name': '名古屋',
      'id': '000000000000000000003521'
    }, {
      'name': '奈良',
      'id': '000000000000000000003522'
    }, {
      'name': '福冈',
      'id': '000000000000000000003524'
    }, {
      'name': '长崎',
      'id': '000000000000000000003525'
    }, {
      'name': '静冈',
      'id': '000000000000000000003655'
    }, {
      'name': '鹿儿岛',
      'id': '000000000000000000003656'
    }, {
      'name': '本州',
      'id': '000000000000000000009932'
    }]
  }, {
    'name': '韩国',
    'list': [{
      'name': '首尔',
      'id': '000000000000000000003526'
    }, {
      'name': '济州岛',
      'id': '000000000000000000003527'
    }, {
      'name': '釜山',
      'id': '000000000000000000003528'
    }, {
      'name': '仁川',
      'id': '000000000000000000003529'
    }, {
      'name': '丽水',
      'id': '000000000000000000003658'
    }, {
      'name': '大邱',
      'id': '000000000000000000003659'
    }, {
      'name': '光州',
      'id': '000000000000000000003660'
    }, {
      'name': '庆州',
      'id': '000000000000000000004417'
    }]
  }, {
    'name': '朝鲜',
    'list': []
  }, {
    'name': '港澳',
    'list': [{
      'name': '香港',
      'id': '000000000000000000000039'
    }, {
      'name': '澳门',
      'id': '000000000000000000000040'
    }, {
      'name': '九龙城',
      'id': '000000000000000000000656'
    }, {
      "name": '孝心卡',
      'id': '000000000000000000010592'
    }]
  }, {
    'name': '东南亚',
    'list': [{
      'name': '新加坡',
      'id': '000000000000000000000696'
    }, {
      'name': '马来西亚',
      'id': '000000000000000000000702'
    }]
  }, {
    'name': '南亚',
    'list': [{
      'name': '印度尼西亚',
      'id': '000000000000000000000706'
    }, {
      'name': '越南',
      'id': '000000000000000000000707'
    }, {
      'name': '缅甸',
      'id': '000000000000000000000708'
    }, {
      'name': '尼泊尔',
      'id': '000000000000000000000709'
    }, {
      'name': '印度',
      'id': '000000000000000000000710'
    }, {
      'name': '柬埔寨',
      'id': '000000000000000000000711'
    }, {
      'name': '斯里兰卡',
      'id': '000000000000000000000712'
    }, {
      'name': '老挝',
      'id': '000000000000000000000715'
    }, {
      'name': '孟加拉国',
      'id': '000000000000000000000719'
    }, {
      'name': '不丹',
      'id': '000000000000000000000721'
    }, {
      'name': '岘港',
      'id': '000000000000000000003587'
    }, {
      'name': '吴哥窟',
      'id': '000000000000000000009269'
    }, {
      'name': '顺化',
      'id': '000000000000000000009513'
    }, {
      'name': '会安',
      'id': '000000000000000000009514'
    }, {
      'name': '芽庄',
      'id': '000000000000000000009515'
    }]
  }, {
    'name': '澳洲',
    'list': [{
      'name': '澳大利亚',
      'id': '000000000000000000000906'
    }, {
      'name': '新西兰',
      'id': '000000000000000000000907'
    }, {
      'name': '斐济',
      'id': '000000000000000000000908'
    }, {
      'name': '墨尔本',
      'id': '000000000000000000003551'
    }, {
      'name': '凯恩斯',
      'id': '000000000000000000003554'
    }, {
      'name': '大洋路',
      'id': '000000000000000000008951'
    }, {
      'name': '塔斯马尼亚',
      'id': '000000000000000000009002'
    }, {
      'name': '新西兰北岛',
      'id': '000000000000000000009934'
    }, {
      'name': '新西兰南岛',
      'id': '000000000000000000009935'
    }, {
      'name': '大堡礁',
      'id': '000000000000000000009936'
    }, {
      'name': '南澳',
      'id': '000000000000000000009937'
    }, {
      'name': '北领地',
      'id': '000000000000000000009938'
    }]
  }, {
    'name': '中东非洲',
    'list': [{
      'name': '土耳其',
      'id': '000000000000000000000726'
    }, {
      'name': '伊朗',
      'id': '000000000000000000000730'
    }, {
      'name': '以色列',
      'id': '000000000000000000000732'
    }, {
      'name': '约旦',
      'id': '000000000000000000000733'
    }, {
      'name': '埃及',
      'id': '000000000000000000000845'
    }, {
      'name': '南非',
      'id': '000000000000000000000846'
    }, {
      'name': '肯尼亚',
      'id': '000000000000000000000847'
    }, {
      'name': '突尼斯',
      'id': '000000000000000000000848'
    }, {
      'name': '摩洛哥',
      'id': '000000000000000000000850'
    }, {
      'name': '坦桑尼亚',
      'id': '000000000000000000000858'
    }, {
      'name': '迪拜',
      'id': '000000000000000000003608'
    }, {
      'name': '阿布扎比',
      'id': '000000000000000000003653'
    }, {
      'name': '沙迦',
      'id': '000000000000000000003654'
    }]
  }, {
    'name': '国外海岛',
    'list': [{
      'name': '马尔代夫',
      'id': '000000000000000000000697'
    }, {
      'name': '文莱',
      'id': '000000000000000000000713'
    }, {
      'name': '毛里求斯',
      'id': '000000000000000000000844'
    }, {
      'name': '塞舌尔',
      'id': '000000000000000000000857'
    }, {
      'name': '巴厘岛',
      'id': '000000000000000000003532'
    }, {
      'name': '普吉岛',
      'id': '000000000000000000003536'
    }, {
      'name': '苏梅岛',
      'id': '000000000000000000003537'
    }, {
      'name': '沙巴',
      'id': '000000000000000000003539'
    }, {
      'name': '关岛',
      'id': '000000000000000000003564'
    }, {
      'name': '长滩岛',
      'id': '000000000000000000003586'
    }, {
      'name': '大溪地',
      'id': '000000000000000000003588'
    }, {
      'name': '民丹岛',
      'id': '000000000000000000003589'
    }, {
      'name': '兰卡威',
      'id': '000000000000000000003590'
    }, {
      'name': '宿务岛',
      'id': '000000000000000000003591'
    }, {
      'name': '爪哇岛',
      'id': '000000000000000000003592'
    }, {
      'name': '天宁岛',
      'id': '000000000000000000003593'
    }, {
      'name': '塞班岛',
      'id': '000000000000000000003594'
    }, {
      'name': '薄荷岛',
      'id': '000000000000000000003595'
    }, {
      'name': '邦咯岛',
      'id': '000000000000000000006852'
    }, {
      'name': '停泊岛',
      'id': '000000000000000000006860'
    }]
  }, {
    'name': '邮轮',
    'list': [{
      'name': '港澳邮轮',
      'id': '000000000000000000008489'
    }, {
      'name': '地中海邮轮',
      'id': '000000000000000000008490'
    }, {
      'name': '北欧邮轮',
      'id': '000000000000000000008491'
    }, {
      'name': '澳新邮轮',
      'id': '000000000000000000008492'
    }, {
      'name': '台湾邮轮',
      'id': '000000000000000000008493'
    }, {
      'name': '日韩邮轮',
      'id': '000000000000000000008494'
    }, {
      'name': '东南亚邮轮',
      'id': '000000000000000000008495'
    }, {
      'name': '中东邮轮',
      'id': '000000000000000000008496'
    }, {
      'name': '北美邮轮',
      'id': '000000000000000000008497'
    }, {
      'name': '加勒比海邮轮',
      'id': '000000000000000000008498'
    }, {
      'name': '南美邮轮',
      'id': '000000000000000000008499'
    }, {
      'name': '南极邮轮',
      'id': '000000000000000000008500'
    }, {
      'name': '北极邮轮',
      'id': '000000000000000000008501'
    }, {
      'name': '环球邮轮',
      'id': '000000000000000000008502'
    }]
  }];

}
