app.controller("OMCruiseDetailController", function($scope, $rootScope, _, $filter, getCruiseOrderCustomerList,
  getCertificatesTypes, orderCancelRoomArrange, UpdateOrderViewLight,delOrderPriceRecord,
  getCarsTouristsByOrderIdnCar, getCarsByOrderIdnPlanId, Pagination, quitTeamFromOrder,
  getEnumeration, saveOrderTouristsToCruises, modifyCruiseCustomer, getAddrData, randomSeatingArrangement,
  getNoneCarArrangeTouristsInfo, getCarArrangeTouristsInfo, showWarningBox, cancelCarSeatArrange,
  touristOccupyCarSeatArrange, modifyCruiseSalesman, removeOrderTouristByTouristID, addRefreshPageByID,
  modifyOrderConvention, modifyOrderNotes, modifyHandleFeeInfo, insertOrderPriceRecord, editShipRoom,
  getArrangeTouristsByOrderID, orderTouristRoomArrange, orderRandomRoomArrangement,
  getOrderTouristRoomArrangeByOrderID, orderTransferCustomer,sendOrderInfo) {
  $scope.orderMemberSearch = {
    PageIndex: 1,
    PageSize: pageSize
  };
  var pageSize = 10;
  $scope.feeCensus = 0;
  $scope.orderMemberSearch = {
    PageIndex: 1,
    PageSize: pageSize
  };
  $scope.popConf = {
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 485,
        useArrow: true
      },
      popconf: {
        left: -405,
        position: 'bottom'
      }
    },
    distribution: {
      arrow: {
        left: 280,
        useArrow: true
      },
      popconf: {
        left: -200,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 255,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 600,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    record: {
      arrow: {
        left: 240,
        useArrow: true
      },
      popconf: {
        left: 220,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 670,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    delay: {
      arrow: {
        left: 100,
        useArrow: true
      },
      popconf: {
        left: 365,
        position: 'bottom'
      }
    },
    rechedule: {
      arrow: {
        left: 320,
        useArrow: true
      },
      popconf: {
        left: 20,
        position: 'bottom'
      }
    },
    contract: {
      arrow: {
        left: 350,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    changeTime: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    precollar: {
      arrow: {
        left: 710,
        useArrow: false
      },
      popconf: {
        left: -635,
        position: 'bottom'
      }
    },
    selectSaleman: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    }
  };
  $scope.genders = ['男', '女', '保密'];
  $scope.Pagination = {};
  $scope.orderMemberInfo = [];
  $scope.touristInsuranceInfo = [];
  $scope.fee = {
    insuranceType: []
  };
  //是否同意购买保险
  $scope.AgreeBuyInsurance = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //按下列方式解决
  $scope.AgreeNoGroup = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  //旅行社履行合同
  $scope.MoveTravelAgency = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //延期出团
  $scope.AgreeDelayGroup = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //改签其他线路出团
  $scope.AgreeChangeOtherLine = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //拼团预约
  $scope.AgreeFightGroupsAppointment = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  //解除合同
  $scope.AgreeTerminationContract = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  $scope.agreeContract = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  $scope.status = {};

  (function activate() {
    // $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(0, pageSize);
    // $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, 1, pageSize);
    // $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(0, pageSize);
    // $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, 1, pageSize);

    getCertificatesTypes(function(certificates) {
      $scope.Certificates = certificates;
    });

    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });

    getEnumeration('ETouristSingleRoomTypes', function(response) {
      $scope.TouristSingleRoomTypes = response;
    });
  })();

  $scope.chooseCustomer = function(customer) {
    orderTransferCustomer({
      OrderId: $rootScope[position[2]].OrderInfos._id,
      OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
      NewCustomerId: customer._id.$id
    }, function(response) {
      $scope.showChangeCustomer = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.orderMemberPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;
    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
  };

  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };
  /**
   * 编辑业务员
   * @return {[type]} [description]
   */
  $scope.editSaleMan = function() {
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = true;
    $rootScope[position[2]].scopeInfo.editSalesmanInfo = {
      saleMan: {},
      SalesmanID: $rootScope[position[2]].OrderInfos.SalesmanID,
      SalesmanName: $rootScope[position[2]].OrderInfos.SalesmanName
    };
  };

  $scope.saveSalesman = function() {
    var salesman = $rootScope[position[2]].scopeInfo.editSalesmanInfo.saleMan;
    var SalesmanID = salesman._id? salesman._id.$id : '';
    var SalesmanName = salesman.FullName ? salesman.FullName : '';

    modifyCruiseSalesman($rootScope[position[2]].OrderInfos._id, SalesmanID, SalesmanName, function() {
      //给页面上的SalesmanName赋值
      $rootScope[position[2]].OrderInfos.SalesmanID = SalesmanID;
      $rootScope[position[2]].OrderInfos.SalesmanName = SalesmanName;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = false;
  };



  /**
   * 编辑客户信息
   * @return {[type]} [description]
   */
  $scope.editContractInfo = function() {
    /*判断编辑字段变成true：页面上显示正在编辑的资料*/
    $rootScope[position[2]].scopeInfo.isContractEditMode = true;
    //编辑时，将要编辑的信息赋值到各个字段上
    $rootScope[position[2]].scopeInfo.customerInfo = angular.copy($rootScope[position[2]].OrderInfos.CustomerEnlarge);

    $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes = $rootScope[position[2]].OrderInfos.EmergencyContactNotes;
    //判断地址对象是否为空
    if (!$rootScope[position[2]].scopeInfo.customerInfo.address)
    //给地址里面的字段赋值
      $rootScope[position[2]].scopeInfo.customerInfo.address = {
      //根据国家ID来找国家名称:如果为空就不做处理
      country: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country && $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country.ForeignKeyID,
      //根据省份ID来找省份名称
      region: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province && $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province.ForeignKeyID,
      //根据地区ID来找地区
      AreaID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area && $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area.ForeignKeyID,
      //根据城市ID来找城市
      city: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City && $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City.ForeignKeyID,
      //根据街道ID来找街道
      StreetID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street && $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street.ForeignKeyID
    };
  };


  //保存联系人信息
  $scope.saveContractInfo = function() {
    /*接口需要传的参数*/
    var data = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderInfos._id,
      /*游客名称*/
      CustomerName: $rootScope[position[2]].scopeInfo.customerInfo.CustomerName,
      /*游客手机*/
      CustomerMobile: $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile,
      /*证件类型ID*/
      CertificatesTypeID: $rootScope[position[2]].scopeInfo.customerInfo.CertificatesType.ForeignKeyID,
      /*证件号码*/
      TouristDocumentNumber: $rootScope[position[2]].scopeInfo.customerInfo.TouristDocumentNumber,
      /*游客Email*/
      CustomerEmail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerEMail,
      /*所在国家ID*/
      CustomerCountryID: $rootScope[position[2]].scopeInfo.customerInfo.address.country,
      /*所在省份ID*/
      CustomerProvinceID: $rootScope[position[2]].scopeInfo.customerInfo.address.region,
      /*所在城市ID*/
      CustomerCityID: $rootScope[position[2]].scopeInfo.customerInfo.address.city,
      /*所在地区ID*/
      CustomerAreaID: $rootScope[position[2]].scopeInfo.customerInfo.address.AreaID,
      /*所在街道ID*/
      CustomerStreetID: $rootScope[position[2]].scopeInfo.customerInfo.address.StreetID,
      /*详细地址*/
      CustomerPositionDetail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.CustomerPositionDetail,
      BodyStateNotes: $rootScope[position[2]].scopeInfo.customerInfo.BodyStateNotes,
      EmergencyContactNotes: $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes
    };
    /*接口：方法注入*/
    modifyCruiseCustomer(data, function() {
      /*继承  修改保存后列表数据显示*/
      $rootScope[position[2]].OrderInfos.CustomerEnlarge = angular.extend($rootScope[position[2]].scopeInfo.customerInfo);
      $rootScope[position[2]].OrderInfos.EmergencyContactNotes = $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
    /*判断编辑字段变成false：页面上显示编辑后的资料*/
    $rootScope[position[2]].scopeInfo.isContractEditMode = false;
  };


  /**
   * 全选参团游客
   * @return {[type]} [description]
   */
  $scope.checkAllMember = function() {
    $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(item){
      if(item.TouristStatus != '正常') return;
      item.isSelected = $rootScope[position[2]].scopeInfo.memberCheckAll;
    });
  };

  /**
   * 选择船舱：判断是否在编辑状态
   * @return {[type]} [description]
   */
  $scope.editCruiseRoom = function() {
    //判断是否编辑的值
    $rootScope[position[2]].scopeInfo.isCruiseRoomsEditMode = true;
    //先循环查找productPlanPriceInfo里面的数据
    $rootScope[position[2]].productPlanPriceInfo.forEach(function(item) {
      //再循环查找CruiseRoomList里面的数据
      $rootScope[position[2]].CruiseRoomList.forEach(function(obj) {
        //如果找到相对应的房间，就在选择船舱里面将对应的房间打上钩
        if (item.Pricetitle == obj.ProductPlanPriceName) {
          item.isSelectRoom = true;
        }
      });
    });
    //复制出备用数组保存初始房间，用于取消
    $rootScope[position[2]].CruiseRoomList_copy = angular.copy($rootScope[position[2]].CruiseRoomList);

  };

  $scope.saveCruiseRoom = function() {
    //判断是否编辑的值
    var cruiseRooms = [];
    $rootScope[position[2]].CruiseRoomList.forEach(function(item){
      if(item.OrderRoomTotalNumber!==0){
         cruiseRooms.push({
        CruiseCabinID: item.CruiseCabinId,
        CruiseCabinName: item.CruiseCabinName,
        ShippingSpaceTypeID: item.ShippingSpaceType.ID,
        ShippingSpaceTypeName: item.ShippingSpaceType.Name,
        MinNumber: item.MinNumber,
        MaxNumber: item.MaxNumber,
        ProductPlanPriceID: item.ProductPlanPriceID,
        ProductPlanPriceName: item.ProductPlanPriceName,
        OrderRoomTotalNumber: item.OrderRoomTotalNumber,
        OrderRoomAdultTotalNumber: item.OrderRoomAdultTotalNumber,
        OrderRoomChildTotalNumber: item.OrderRoomChildTotalNumber,
        RoomsPrice: item.OrderRoomTotalNumber * item.singleRoomPrice
      });
      }
    });


    editShipRoom($rootScope[position[2]].OrderInfos._id, cruiseRooms, function(response) {
      $rootScope[position[2]].scopeInfo.isCruiseRoomsEditMode = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
    });
  };


 $scope.cancelCruiseRoom = function(){
   $rootScope[position[2]].scopeInfo.isCruiseRoomsEditMode = false;
   //如果点击"取消"，就将原房间数还原,然后取消打钩
   $rootScope[position[2]].CruiseRoomList = angular.copy($rootScope[position[2]].CruiseRoomList_copy);
    $rootScope[position[2]].productPlanPriceInfo.forEach(function(item) {
      $rootScope[position[2]].CruiseRoomList.forEach(function(obj) {
        if (item.Pricetitle == obj.ProductPlanPriceName) {
          item.isSelectRoom = true;
        }else{
          item.isSelectRoom = false;
        }
      });
    });
 };


  /**
   * 选择船舱：判断是否勾选房间
   * @return {[type]} [description]
   */
  $scope.SelectRoom = function(item) {
    //如果没有打勾
    if (item.isSelectRoom === false) {
      //索引：以相同名称查找
      var removeIndex = _.findIndex($rootScope[position[2]].CruiseRoomList, {
        ProductPlanPriceName: item.Pricetitle
      });
      /*
       *如果将房间前面的勾去掉，就将对应房间的值都删掉（赋值为0）
       */
      //总价=总价-小计
      $rootScope[position[2]].OrderInfos.TotalSalesPrice -= $rootScope[position[2]].CruiseRoomList[removeIndex].RoomsPrice;
      //出游人数=出游人数-成年人数-小孩人数
      $rootScope[position[2]].OrderInfos.TotalNumber = $rootScope[position[2]].OrderInfos.TotalNumber - $rootScope[position[2]].CruiseRoomList[removeIndex].OrderRoomChildTotalNumber - $rootScope[position[2]].CruiseRoomList[removeIndex].OrderRoomAdultTotalNumber;
      //房间数=房间数-订的房间数
      $rootScope[position[2]].OrderRoomTotalNumber -= $rootScope[position[2]].CruiseRoomList[removeIndex].OrderRoomTotalNumber;
      //剩余房间数=剩余房间数+订的房间数
      //item.MorethanNumber += $rootScope[position[2]].CruiseRoomList[removeIndex].OrderRoomTotalNumber;

      //移除打钩的房间
      $rootScope[position[2]].CruiseRoomList.splice(removeIndex, 1);
    } else {
      //计算单间房间的价格
      var singleRoomPrice = 0;
      if (item.ShippingSpace.MaxNumber > 2) {
        singleRoomPrice = item.DefaultPrice * 2 + item.DefaultPrice34 * (item.ShippingSpace.MaxNumber - 2);
      } else {
        singleRoomPrice = item.DefaultPrice * 2;
      }
      var room = {
        ProductPlanPriceName: item.Pricetitle,
        OrderRoomAdultTotalNumber: 0,
        OrderRoomChildTotalNumber: 0,
        OrderRoomTotalNumber: 0,
        moreThanNumber: item.MorethanNumber,
        allRoomNumber: item.MorethanNumber,
        MaxNumber:item.ShippingSpace.MaxNumber,
        MinNumber:0,
        RoomsPrice: 0,
        singleRoomPrice: singleRoomPrice,
        CruiseCabinID:item.ShippingSpace.ForeignKeyID,
        CruiseCabinName:item.ShippingSpace.Title,
        ProductPlanPriceID:item._id,
        ShippingSpaceType:{
            ID:item.ShippingSpace.ShippingSpaceType.ID,
            Name:item.ShippingSpace.ShippingSpaceType.Name
        }
      };
      //增加一行房间信息
      $rootScope[position[2]].CruiseRoomList.push(room);
    }
  };

  //观察是否变化
  $scope.$watch('detailData.CruiseRoomList', function(newList, oldList) {


    if ($rootScope[position[2]].CruiseRoomList !== undefined) {
      //将总房间数、总人数、总计赋值为0 方便下面计算
      $rootScope[position[2]].OrderRoomTotalNumber = 0;
      $rootScope[position[2]].OrderInfos.TotalNumber = 0;
      $rootScope[position[2]].OrderInfos.TotalRoomPrice = 0;
      $rootScope[position[2]].CruiseRoomList.forEach(function(item) {
        item.OrderRoomAdultTotalNumber = parseInt(item.OrderRoomAdultTotalNumber);
        item.OrderRoomChildTotalNumber = parseInt(item.OrderRoomChildTotalNumber);
        item.OrderRoomTotalNumber = parseInt(item.OrderRoomTotalNumber);
        //总房间数
        $rootScope[position[2]].OrderRoomTotalNumber += item.OrderRoomTotalNumber;
        //总人数
        $rootScope[position[2]].OrderInfos.TotalNumber += item.OrderRoomAdultTotalNumber;
        $rootScope[position[2]].OrderInfos.TotalNumber += item.OrderRoomChildTotalNumber;
        //价格计算
        item.RoomsPrice = item.singleRoomPrice * item.OrderRoomTotalNumber;
        //总计
        $rootScope[position[2]].OrderInfos.TotalRoomPrice += item.RoomsPrice;
      });
    }
  }, true);


  /**
   * 选择舱房的大类：默认为内舱房
   * @return true
   */
  $scope.productPlanPriceInfo = _.filter($rootScope[position[2]].productPlanPriceInfo, function(obj) {
    if (obj.ShippingSpace.ShippingSpaceType.ID == 4)
      return true;
  });
  /**
   * 选择舱房的大类：点击不同的舱房显示不同的类型
   * @return true
   */
  $scope.changeID = function(item) {
    $scope.productPlanPriceInfo = _.filter($rootScope[position[2]].productPlanPriceInfo, function(obj) {
      if (obj.ShippingSpace.ShippingSpaceType.ID == item)
      //真值检验
        return true;
    });
  };


  //***************岸上观光模块Start*******************//
  /**
   * 编辑岸上观光
   * @return {[type]} [description]
   */
  $scope.editShoreSightseeing = function() {
    $rootScope[position[2]].scopeInfo.isShoreSightseeingEditMode = true;
    //判断是否在$rootScope[position[2]].Packages之中找到相应的值
    $rootScope[position[2]].scopeInfo.selectedPackage = _.find($rootScope[position[2]].Packages, function(item) {
      if ($rootScope[position[2]].OrderInfos.CruisePackages[0] !== undefined) {
        if (item.ForeignKeyID.$id === $rootScope[position[2]].OrderInfos.CruisePackages[0].ForeignKeyID) return true;
      }
    });
  };

  //保存岸上观光
  $scope.saveShoreSightseeingInfo = function() {
    var param = {
      OrderID: $rootScope[position[2]].OrderInfos._id,
      Package: {
        CruisePackage: {
          PackagesTitle: $rootScope[position[2]].scopeInfo.selectedPackage?$rootScope[position[2]].scopeInfo.selectedPackage.PackagesType:'',
          PackagesContent: $rootScope[position[2]].scopeInfo.selectedPackage.PackagesContent,
          ForeignKeyID: $rootScope[position[2]].scopeInfo.selectedPackage.ForeignKeyID.$id
        },
        OrderCruisePackageAdultTotalNumber: 0,
        OrderCruisePackageChildTotalNumber: 0,
        TotalNumber: $rootScope[position[2]].OrderInfos.TotalNumber,
        PackagesPrice: $rootScope[position[2]].scopeInfo.selectedPackage.PackagesPrice,
        ForeignKeyID: $rootScope[position[2]].scopeInfo.selectedPackage.ForeignKeyID.$id
      }
    };
    UpdateOrderViewLight(param, function(response) {
      $rootScope[position[2]].OrderInfos.CruisePackages.forEach(function(item) {
        item.CruisePackage.PackagesTitle = param.Package.CruisePackage.PackagesTitle;
        item.CruisePackage.PackagesContent = param.Package.CruisePackage.PackagesContent;
        $rootScope[position[2]].OrderInfos.TotalNumber = param.Package.TotalNumber;
        item.PackagesPrice = param.Package.PackagesPrice;
      });
      $rootScope[position[2]].scopeInfo.isShoreSightseeingEditMode = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });

  };

  //***************岸上观光模块End*******************//

  //***************游客模块Start*******************//
  //添加或编辑游客
  $scope.addTourist = function(item) {
    //编辑游客
    if (item) {
      //编辑时，将要编辑的信息赋值到各个字段上
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
      //舱房种类对象：编辑时显示有的舱房种类

      $rootScope[position[2]].addTouristInfo.RoomType = _.find($rootScope[position[2]].CruiseRoomList, function(roomDetail){
        return roomDetail.ProductPlanPriceID === item.Enlarge.ProductPlanPriceID;
      });
      console.log($rootScope[position[2]].addTouristInfo.RoomType);
      //给房差种类赋值：编辑时显示有的房差种类
      $rootScope[position[2]].addTouristInfo.Enlarge.TouristSingleRoomTypeID = item.Enlarge.TouristSingleRoomTypeID;
    } else {
      //添加游客，并为证件类型、性别、人群赋初值
      $rootScope[position[2]].addTouristInfo = {
        TouristName: '游客',
        CertificatesType: {
          ForeignKeyID: '000000000000000000000001'
        },
        GenderTypeID: 1,
        TouristTypeID: 2,
      };
    }
  };



  //保存游客的基本信息
  $scope.saveTourist = function() {
    if(!$rootScope[position[2]].addTouristInfo.RoomType){
      $rootScope[position[2]].info = "请选择舱房类型";
      return false;
    }
    /*接口需要传的参数*/
    var param = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderInfos._id,
      /*游客ID*/
      TouristID: $rootScope[position[2]].addTouristInfo._id,
      /*游客名称*/
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      /*游客类型ID*/
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      /*性别ID*/
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      /*舱房种类ID*/
      ProductPlanPriceID: $rootScope[position[2]].addTouristInfo.RoomType.ProductPlanPriceID,
      /*舱房种类名称*/
      ProductPlanPriceName: $rootScope[position[2]].addTouristInfo.RoomType.ProductPlanPriceName,
      /*？？？？？*/
      IsOccupying: true,
      /*证件类型ID*/
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesType.ForeignKeyID,
      /*证件类型ID*/
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesType.ForeignKeyID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      /*证件类型号码*/
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      /*游客手机号码*/
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      /*游客生日*/
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthday, 'yyyy-MM-dd')
    };
    /*接口：方法注入*/
    saveOrderTouristsToCruises(param, function(ID) {
      //判断是否存在游客ID,如果存在根据游客ID对游客内容进行修改保存
      if ($rootScope[position[2]].addTouristInfo._id) {
        //找到对应修改游客的index
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          _id: $rootScope[position[2]].addTouristInfo._id
        });
        /*继承  修改保存后列表数据显示*/
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
      } else {
        //新建ID并赋值给新建的游客ID
        param._id = ID;
        //在列表添加一条游客信息
        $rootScope[position[2]].OrderTourists.push(param);
      }
      //保存之后关闭保存（修改）页面
      $scope.closeAllAddTouristPop();
      //刷新订单页面
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };
  //取消
  $scope.closeAllAddTouristPop = function() {
    if ($scope.status.addTourist)
      $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };

  //游客退团：ps by鲁 翻页
  $scope.quitTeam = function(member, ExitTeamNotes) {
    if($scope.isLoading) return;
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify([member._id]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
    });
  };

  //观察游客列表是否变化，如果变化，则执行下面的方法
  $scope.$watch('detailData.OrderTourists', function(value) {
    //判断是否有游客
    if (value !== undefined) {
      //初始化成年人、小孩、婴儿、总价
      $rootScope[position[2]].OrderInfos.TotalNumber = 0;
      $rootScope[position[2]].OrderInfos.AdultNumber = 0;
      $rootScope[position[2]].OrderInfos.BabyNumber = 0;
      $rootScope[position[2]].OrderInfos.ChildNumber = 0;
      $rootScope[position[2]].OrderInfos.TotalSalesPrice = 0;
      //循环游客列表
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        //找到是成人，成人数+1
        if (item.TouristTypeID == 1 || item.TouristTypeID == 2) {
          $rootScope[position[2]].OrderInfos.AdultNumber++;
        }
        //找到是小孩，小孩数+1
        else if ($rootScope[position[2]].TouristTypeID == 3) {
          $rootScope[position[2]].OrderInfos.ChildNumber++;
        }
        //找到是婴儿，婴儿数+1
        else {
          $rootScope[position[2]].OrderInfos.BabyNumber++;
        }
        //不管找到谁，总人数+1
        $rootScope[position[2]].OrderInfos.TotalNumber++;
        //计算总价
        if(item.PriceEnlarge){
          $rootScope[position[2]].OrderInfos.TotalSalesPrice += item.PriceEnlarge.TouristPrice;
        }

      });
    }
  }, true);

  //批量游客退团：ps by鲁
  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member._id);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function() {
      $scope.status.quitTeamOpen = false;
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function(response){
      $scope.isLoading = false;
    });
  };
  //***************游客模块End*******************//


  //***************订单约定模块Start*******************//
  /**
   * 编辑订单约定
   * @return {[type]} [description]
   */
  $scope.editOrderConvention = function() {
    $rootScope[position[2]].scopeInfo.isOrderConventionEditMode = true;
    $rootScope[position[2]].scopeInfo.OrderConventionInfo = angular.copy($rootScope[position[2]].OrderInfos.ContractEnlarge);
    if (!$rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments) {
      $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments = [];
    }

  };

  /**
   * 保存订单约定
   * @return {[type]} [description]
   */
  $scope.saveOrderConventionInfo = function() {

    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.forEach(function(item) {
      item.StartDay = $filter('date')(item.StartDay, 'yyyy-MM-dd');
      item.EndDay = $filter('date')(item.StartDay, 'yyyy-MM-dd');
    });
    /*接口需要传的参数*/
    var data = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderInfos._id,
      /*解决方式*/
      IsAgreeNoGroup: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeNoGroup,
      /*转至其他旅行社*/
      IsMoveTravelAgency: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsMoveTravelAgency,
      /*旅行社名称*/
      TravelAgencyName: $rootScope[position[2]].scopeInfo.OrderConventionInfo.TravelAgencyName,
      /*延迟期限*/
      IsAgreeDelayGroup: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeDelayGroup,
      /*换成其他路线*/
      IsAgreeChangeOtherLine: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeChangeOtherLine,
      /*终止合同*/
      IsAgreeTerminationContract: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeTerminationContract,
      /*拼团约定*/
      IsAgreeFightGroupsAppointment: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeFightGroupsAppointment,
      /*拼团约定旅行社名称*/
      FightGroupTravelAgencyName: $rootScope[position[2]].scopeInfo.OrderConventionInfo.FightGroupTravelAgencyName,
      /*约定支付类型和时间*/
      // ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractPayTypeAndTime,
      /*其他约定*/
      //  OtherAppointment: $rootScope[position[2]].scopeInfo.OrderConventionInfo.OtherAppointment,
      /*预约合同*/
      ContractAppointment: angular.toJson($rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments, true)
    };
    /*接口：方法注入*/
    modifyOrderConvention(data, function() {
      /*继承  修改保存后列表数据显示*/
      $rootScope[position[2]].OrderInfos.ContractEnlarge = angular.extend($rootScope[position[2]].scopeInfo.OrderConventionInfo);
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });

    /*判断编辑字段变成false：页面上显示编辑后的资料*/
    $rootScope[position[2]].scopeInfo.isOrderConventionEditMode = false;

  };

  //添加黄金周特别约定
  $scope.addOrderHolidayAppointment = function() {

    var value = {
      StartDay: 0,
      EndDay: 0,
      CompanyBreachOfContractRatio: 0,
      TouristBreachOfContractRatio: 0
    };
    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.push(value);
  };
  //删除黄金周特别约定
  $scope.delOrderHolidayAppointment = function(index, item) {
    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.splice(index, 1);
  };
  //***************订单约定模块End*******************//
  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openFlightDatePicker = function($even, type, item) {
    item[type] = true;
  };


  // $scope.getEnumeration = function() {
  //   getEnumeration('ETouristTypes', function(TouristTypes) {
  //     $scope.TouristTypes = TouristTypes;
  //   });
  // };
  // $scope.getEnumeration();

  //***************订单备注模块Start*******************//
  /**
   * 编辑订单备注
   * @return {[type]} [description]
   */
  $scope.editOrderNotes = function() {
    $rootScope[position[2]].scopeInfo.orderNoteTmp = {
      /*支付时间和方式*/
      ContractPayTypeAndTime: $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime,
      /*其他约定*/
      OtherAppointment: $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment,
      /*备注*/
      OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
    };
    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = true;
  };

  /**
   * 保存订单备注
   * @return {[type]} [description]
   */
  $scope.saveOrderNotes = function() {
    var data = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderInfos._id,
      /*支付时间和方式*/
      ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime,
      /*其他约定*/
      OtherAppointment: $rootScope[position[2]].scopeInfo.orderNoteTmp.OtherAppointment,
      /*备注*/
      OrderNote: $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes
    };
    /*接口：方法注入*/
    modifyOrderNotes(data, function() {
      /*继承  修改保存后列表数据显示*/
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime = data.ContractPayTypeAndTime;
      $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment = data.OtherAppointment;
      $rootScope[position[2]].OrderInfos.OrderNotes = data.OrderNote;
    });

    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = false;
  };
  //***************订单备注模块End*******************//

  /**
   * 管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.handleFee = function(isAdd) {
    //清空一下数据
    $rootScope[position[2]].scopeInfo.isHandleFee = {};
    if (isAdd) {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    } else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
    }
  };

  /**
   * 保存管理费用信息
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.saveHandleFeeInfo = function(isAdd) {
    var param = {};
    if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 2,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
        BusinessMainTypeID: 2,
        BusinessMainTypeName: '增加费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        BusinessTypeID: 1
      };
      if (!param.Name) {
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
      if (!param.Price) {
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    } else {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 3,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
        BusinessMainTypeID: 3,
        BusinessMainTypeName: '减少费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        BusinessTypeID: 2
      };
      if (!param.Name) {
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
      if (!param.Price) {
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    }
    insertOrderPriceRecord(param, function() {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
    $scope.cancelHandleFee();
  };

  /**
   * 取消管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */

  $scope.cancelHandleFee = function(fee){
    if(typeof fee == 'object'){
      fee.isEdit = false;
    }else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    }
  };

  //****************房间安排开始***************************//
  $scope.roomArrange = function() {
    getEnumeration('ETouristRoomStatus', function(response) {
      $scope.ETouristRoomStatus = response;
    });
    getRoomArrangeInfo(1);
    getArrangeTouristsByOrderID({
      OrderID: $rootScope[position[2]].OrderInfos._id
    }, function(response) {
      $rootScope[position[2]].scopeInfo.roomTouristsList = response;
    });
  };

  function getRoomArrangeInfo(page) {
    getOrderTouristRoomArrangeByOrderID({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      PageIndex: 1,
      PageSize: pageSize,
      SearchInfo: ""
    }, function(roomInfo) {
      $rootScope[position[2]].scopeInfo.Pagination.roomPagination = new Pagination(roomInfo.count, page, pageSize);
      $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList = roomInfo.list;
    });
  }

  $scope.roomArrangePageChange = function(page) {
    if ($rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing) {
      $rootScope[position[2]].info = '正在编辑房间信息，请先完成编辑';
      return;
    }
    if (!page) {
      page = 1;
    }
    getRoomArrangeInfo(page);
  };

  $scope.editRoomArrangeInfo = function(room) {
    if ($rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing) {
      $rootScope[position[2]].info = '正在编辑房间信息，请先完成编辑';
      return;
    }
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = true;
    room.isEditMode = true;
    $rootScope[position[2]].scopeInfo.roomTmp.status = room.TouristRoomStatus;
    if (room.Tourists[0]) {
      $rootScope[position[2]].scopeInfo.roomTmp.tourist = room.Tourists[0].TouristID;
    }
    if (room.Tourists[1]) {
      $rootScope[position[2]].scopeInfo.roomTmp.touristOther = room.Tourists[1].TouristID;
    }
  };

  $scope.saveRoomArrangeInfo = function(room) {
    room.isEditMode = false;
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = false;
    var data = [];
    var tempId = "";
    if ($rootScope[position[2]].scopeInfo.roomTmp.tourist) {
      tempId = room.Tourists[0] ? room.Tourists[0].TouristID : '';
      if ($rootScope[position[2]].scopeInfo.roomTmp.tourist != tempId) {
        data.push({
          InTouristID: $rootScope[position[2]].scopeInfo.roomTmp.tourist,
          OutTouristID: room.Tourists[0] ? room.Tourists[0].TouristID : ''
        });
      }
    }
    if ($rootScope[position[2]].scopeInfo.roomTmp.touristOther) {
      tempId = room.Tourists[1] ? room.Tourists[1].TouristID : '';
      if ($rootScope[position[2]].scopeInfo.roomTmp.touristOther != tempId) {
        data.push({
          InTouristID: $rootScope[position[2]].scopeInfo.roomTmp.touristOther,
          OutTouristID: room.Tourists[1] ? room.Tourists[1].TouristID : ''
        });
      }
    }
    // $rootScope[position[2]].scopeInfo.roomTmp.tourist;
    orderTouristRoomArrange({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristRoomStatus: $rootScope[position[2]].scopeInfo.roomTmp.status,
      RoomTourists: JSON.stringify(data),
      RoomNumber: room.RoomNumber
    }, function(response) {
      console.log(response);
      $rootScope[position[2]].info = '修改成功';
    });
  };

  $scope.delRoomArrangeInfo = function(room, index) {
    showWarningBox('是否确认要删除房间？', function() {
      var data = [];
      room.Tourists.forEach(function(tourist) {
        data.push(tourist.TouristID);
      });
      orderCancelRoomArrange({
        Tourists: JSON.stringify(data)
      }, function(response) {
        console.log(response);
        $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList.splice(index, 1);
      });
    });
  };

  // $scope.addOrderRoomArrangeInfo = function(){
  //  $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList.push({
  //    isEditMode:true
  //  });
  // };

  $scope.orderRoomArrangeRandom = function() {
    orderRandomRoomArrangement({
      OrderID: $rootScope[position[2]].OrderInfos._id
    }, function(response) {
      $rootScope[position[2]].info = '成功随机安排房间';
      getRoomArrangeInfo(1);
    });
  };

  $scope.cancelSaveRoomArrangeInfo = function(room) {
    $rootScope[position[2]].scopeInfo.roomTmp = {};
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = false;
    room.isEditMode = false;
  };

  //****************房间安排结束***************************//

  $scope.editFee = function(fee){
    fee.isEdit = !fee.isEdit;
    $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
  };

  $scope.saveEditFeeInfo = function(fee){
    updateOrderPriceRecord({
      ForeignKeyID: fee.ForeignKeyID,
      OrderID: $rootScope[position[2]].OrderInfos._id,
      BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
      BusinessMainTypeID: fee.BusinessMainTypeID,
      PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
      Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
    }, function(response){
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.deleteSubFee = function(fee){
    showWarningBox("确定要删除该费用吗", function(){
      delOrderPriceRecord({
        RecordID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderInfos._id
      }, function(response){
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    });
  };

  $scope.changePersonNumber = function(room){
    var count  = room.OrderRoomAdultTotalNumber + room.OrderRoomChildTotalNumber;
    var minRoomCount = Math.floor(count/room.MaxNumber);
    if(count%room.MaxNumber !== 0){
      minRoomCount++;
    }
    if(room.OrderRoomTotalNumber < minRoomCount){
      room.OrderRoomTotalNumber = minRoomCount;
    }
    if(room.OrderRoomTotalNumber === 0){
      room.OrderRoomAdultTotalNumber = 0;
      room.OrderRoomChildTotalNumber = 0;
    }
  };

});
app.controller("OMFreeTourController", function($scope, $rootScope, OMFreeTour, $filter, HyDate) {
  $scope.searchTeamtourPlan = function(type) {
    $rootScope.isloadList = true;
    $rootScope.showProcessBar = true;
    var search = {};
    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');

    OMFreeTour.list(function(response) {
      $rootScope[position[1]].list = response.list;
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {iPageIndex:1};
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMFreeTour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };
});
app.controller("OMCustomTourController", function($scope, $rootScope, OMCustomTour, $filter,
  getCertificatesTypes, modifyOneTeamCustomer, addRefreshPageByID, modifyAirTicekSalesman,
  saveFreeTourOrderNotes, removeOrderTouristByTouristID, saveOrderTouristsToCustomized, getEnumeration,
  getComboxInsuranceStatus, insertOrderPriceRecord, saveCustomTourOrderProject, delOrderPriceRecord,
  saveCustomTourOrderProjectEntrust, getTrafficListDatas, getAddrData, getTrafficMethods, getHotelStarType,
  getBasicData, Pagination, showWarningBox, quitTeamFromOrder, orderTransferCustomer,sendOrderInfo) {


  /**
   * 订单名单翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  var pageSize = 10;
  $scope.orderMemberPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
  };

  /**
   * 订单保险翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };

  $scope.chooseCustomer = function(customer) {
    orderTransferCustomer({
      OrderId: $rootScope[position[2]].OrderInfos._id,
      OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
      NewCustomerId: customer._id.$id
    }, function(response) {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?ID=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.searchTeamtourPlan = function(type) {
    $scope.isLoading = true;
    var search = {};

    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');

    OMCustomTour.list(function(response) {
      $scope.isLoading = false;
      $rootScope[position[1]].list = response.list;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.popConf = {
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 580,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 510,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    contract: {
      arrow: {
        left: 260,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    record: {
      arrow: {
        left: 150,
        useArrow: true
      },
      popconf: {
        left: 220,
        position: 'bottom'
      }
    },
    precollar: {
      arrow: {
        left: 710,
        useArrow: false
      },
      popconf: {
        left: -635,
        position: 'bottom'
      }
    },
    changeTime: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    selectSaleman: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    distribution: {
      arrow: {
        left: 205,
        useArrow: true
      },
      popconf: {
        left: 450,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 485,
        useArrow: true
      },
      popconf: {
        left: -405,
        position: 'bottom'
      }
    }
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {iPageIndex:1};
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMCustomTour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };

  /**
   * 编辑联系人
   * @return {[type]}      [description]
   */
  $scope.editContractInfo = function() {
    $rootScope[position[2]].scopeInfo.isContractEditMode = true;
    $rootScope[position[2]].scopeInfo.customerInfo = angular.copy($rootScope[position[2]].OrderInfos.CustomerEnlarge);
    $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes = $rootScope[position[2]].OrderInfos.EmergencyContactNotes;
    $rootScope[position[2]].scopeInfo.customerInfo.address = {
      city: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City.ForeignKeyID : '',
      region: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province.ForeignKeyID : '',
      country: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country.ForeignKeyID : ''
    };
  };

  /**
   * 保存联系人
   * @return {[type]}      [description]
   */
  $scope.saveContractInfo = function() {
    $scope.isSubmit = true;
    modifyOneTeamCustomer({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      CustomerName: $rootScope[position[2]].scopeInfo.customerInfo.CustomerName,
      CustomerMobile: $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile,
      CertificatesTypeID: $rootScope[position[2]].scopeInfo.customerInfo.CertificatesType.ForeignKeyID,
      TouristDocumentNumber: $rootScope[position[2]].scopeInfo.customerInfo.TouristDocumentNumber,
      CustomerEmail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerEMail,
      CustomerCountryID: $rootScope[position[2]].scopeInfo.customerInfo.address.country,
      CustomerProvinceID: $rootScope[position[2]].scopeInfo.customerInfo.address.region,
      CustomerCityID: $rootScope[position[2]].scopeInfo.customerInfo.address.city,
      CustomerAreaID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area.ForeignKeyID : '',
      CustomerStreetID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street.ForeignKeyID : '',
      CustomerPositionDetail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.CustomerPositionDetail,
      BodyStateNotes: $rootScope[position[2]].scopeInfo.customerInfo.BodyStateNotes,
      EmergencyContactNotes: $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes
    }, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].scopeInfo.isContractEditMode = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?ID=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  (function activate() {
    getCertificatesTypes(function(certificates) {
      $scope.Certificates = certificates;
    });
    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });
    getComboxInsuranceStatus(function(orderStatus) {
      $scope.orderStatus = orderStatus;
    });
  })();

  $scope.editSaleMan = function() {
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = true;
    $rootScope[position[2]].scopeInfo.saleMan = {
      id: $rootScope[position[2]].OrderInfos.SalesmanID,
      name: $rootScope[position[2]].OrderInfos.SalesmanName,
      detail: {}
    };
  };

  $scope.saveSaleManInfo = function() {
    $scope.isSubmit = true;
    var detail = $rootScope[position[2]].scopeInfo.saleMan.detail;
    var saleManID = detail._id ? detail._id.$id : '';
    var saleManName = detail._id ? detail.FullName : '';
    modifyAirTicekSalesman($rootScope[position[2]].OrderInfos._id, saleManID, saleManName, function() {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.isSubmit = false;
      $rootScope[position[2]].scopeInfo.isSaleManEditMode = false;
      $rootScope[position[2]].OrderInfos.SalesmanID = saleManID;
      $rootScope[position[2]].OrderInfos.SalesmanName = saleManName;
    });
  };

  $scope.editAdditionalInfo = function() {
    $rootScope[position[2]].scopeInfo.isAdditionalEditMode = true;
    $rootScope[position[2]].scopeInfo.additional = angular.copy($rootScope[position[2]].EntrustProject);
    $rootScope[position[2]].scopeInfo.additional.selectAdditional = angular.copy($rootScope[position[2]].Additionals);
    $rootScope[position[2]].scopeInfo.additional.selectAdditional.forEach(function(item) {
      var e = _.find($rootScope[position[2]].scopeInfo.additional.Entrusts, function(e) {
        if (e.EInnerEntrustTypeID == item.Value) {
          item.isSelected = true;
          return true;
        }
      });
    });
  };

  $scope.saveAdditionalInfo = function() {
    $scope.isSubmit = true;
    var param = {
      EntrustPrice: $rootScope[position[2]].scopeInfo.additional.EntrustPrice,
      TotalEntrustPrice: $rootScope[position[2]].scopeInfo.additional.TotalEntrustPrice,
      EntrustDescription: $rootScope[position[2]].scopeInfo.additional.EntrustDescription,
      Additionals: [],
    };
    $rootScope[position[2]].scopeInfo.additional.selectAdditional.forEach(function(item) {
      if (item.isSelected) {
        param.Additionals.push({
          EInnerEntrustTypeID: item.Value
        });
      }
    });
    saveCustomTourOrderProjectEntrust($rootScope[position[2]].OrderInfos._id, param, function() {
      $rootScope[position[2]].scopeInfo.isAdditionalEditMode = false;
      $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?ID=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editOrderNotes = function() {
    $rootScope[position[2]].scopeInfo.orderNoteTmp = {
      ContractPayTypeAndTime: $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime,
      OtherAppointment: $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment,
      OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
    };
    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = true;
  };

  $scope.saveOrderNotes = function() {
    $scope.isSubmit = true;
    saveFreeTourOrderNotes({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime,
      OtherAppointment: $rootScope[position[2]].scopeInfo.orderNoteTmp.OtherAppointment,
      OrderNote: $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes
    }, function() {
      $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime = $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime;
      $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment = $rootScope[position[2]].scopeInfo.orderNoteTmp.OtherAppointment;
      $rootScope[position[2]].OrderInfos.OrderNotes = $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes;
      $rootScope[position[2]].scopeInfo.orderNoteTmp = {};
      $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = false;
      $scope.isSubmit = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.checkAllMember = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      if(item.TouristStatus != '正常') return;
      item.isSelected = $rootScope[position[2]].scopeInfo.memberCheckAll;
    });
  };

  $scope.delTourist = function(item) {
    removeOrderTouristByTouristID(item._id, function() {
      $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, _.find($rootScope[position[2]].OrderTourists, function(e) {
        if (e._id == item._id) {
          return true;
        }
      }));
    });
  };

  $scope.quitTeam = function(member, ExitTeamNotes) {
    if ($scope.isLoading) return;
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify([member._id]),
      "ExitTeamNotes": ExitTeamNotes 
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?ID=' + $rootScope[position[2]].OrderInfos._id);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].OrderTourists.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member._id);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $scope.status.quitTeamOpen = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?ID=' + $rootScope[position[2]].OrderInfos._id);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.showAddTourist = function(item) {
    if (item) {
      item.TouristBirthdayDate = new Date(item.TouristBirthday.substring(0, 4), parseInt(item.TouristBirthday.substring(5, 7)) - 1, item.TouristBirthday.substring(8, 10));
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
      $rootScope[position[2]].addTouristInfo.CertificatesTypeID = $rootScope[position[2]].addTouristInfo.CertificatesType.ForeignKeyID;
    } else {
      $rootScope[position[2]].addTouristInfo = {
        TouristName: '游客',
        CertificatesTypeID: '000000000000000000000001',
        GenderTypeID: 1,
        TouristTypeID: 2
      };
    }
  };

  $scope.saveTourist = function() {
    $scope.isSubmit = true;
    var param = {
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      IsOccupying: true,
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthdayDate, 'yyyy-MM-dd'),
      GenderTypeName: $rootScope[position[2]].addTouristInfo.GenderTypeID == 1 ? '男士' : '女士',
      TouristTypeName: $filter('showObjValueFormArray')($rootScope[position[2]].addTouristInfo.TouristTypeID, $scope.TouristTypes, 'Value', 'Text')
    };
    if ($rootScope[position[2]].addTouristInfo._id) {
      param.TouristID = $rootScope[position[2]].addTouristInfo._id;
    }
    saveOrderTouristsToCustomized(param, function(ID) {
      $scope.isSubmit = false;
      $scope.status.addTourist = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      addRefreshPageByID($rootScope[switchType[2]].id);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);


      param.CertificatesType = {
        CertificatesTypeName: param.CertificatesTypeName,
        ForeignKeyID: param.CertificatesTypeID
      };
      if ($rootScope[position[2]].addTouristInfo._id) {
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          ForeignKeyID: $rootScope[position[2]].addTouristInfo.ForeignKeyID
        });
        param._id = $rootScope[position[2]].addTouristInfo._id;
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
      } else {
        param._id = ID;
        param.TouristStatus = '正常';
        $rootScope[position[2]].OrderTourists.push(param);
      }
      $scope.closeAllAddTouristPop();
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.closeAllAddTouristPop = function() {
    $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };

  $scope.$watch('detailData.OrderTourists', function(value) {
    if (value !== undefined) {
      $rootScope[position[2]].OrderInfos.TotalNumber = 0;
      $rootScope[position[2]].OrderInfos.AdultNumber = 0;
      $rootScope[position[2]].OrderInfos.BabyNumber = 0;
      $rootScope[position[2]].OrderInfos.ChildNumber = 0;
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        if (item.TouristTypeID == 1 || item.TouristTypeID == 2) {
          $rootScope[position[2]].OrderInfos.AdultNumber++;
        } else if ($rootScope[position[2]].TouristTypeID == 3) {
          $rootScope[position[2]].OrderInfos.ChildNumber++;
        } else {
          $rootScope[position[2]].OrderInfos.BabyNumber++;
        }
        $rootScope[position[2]].OrderInfos.TotalNumber++;
      });
    }
  }, true);

  /**
   * 管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.handleFee = function(isAdd) {
    //清空一下数据
    $rootScope[position[2]].scopeInfo.isHandleFee = {};
    if (isAdd) {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    } else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
    }
  };

  /**
   * 保存管理费用信息
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.saveHandleFeeInfo = function(isAdd) {
    $scope.isSubmit = true;
    var param = {};
    if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 2,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
        BusinessMainTypeID: 2,
        BusinessMainTypeName: '增加费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle
      };
    } else {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 3,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
        BusinessMainTypeID: 3,
        BusinessMainTypeName: '减少费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle
      };
    }
    insertOrderPriceRecord(param, function() {
      $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?ID=' + $rootScope[position[2]].OrderInfos._id);
    });
    $scope.cancelHandleFee();
  };

  /**
   * 取消管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.cancelHandleFee = function(fee){
    if(typeof fee == 'object'){
      fee.isEdit = false;
    }else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    }
  };

  $scope.editPackage = function() {
    $rootScope[position[2]].scopeInfo.isPackageEditMode = true;
    $rootScope[position[2]].scopeInfo.packageInfo = {
      HotelSchemes: $rootScope[position[2]].HotelProject.Hotels ? angular.copy($rootScope[position[2]].HotelProject.Hotels) : [],
      HotelRoomPrice: $rootScope[position[2]].HotelProject.HotelRoomPrice,
      TotalHotelRoomPrice: $rootScope[position[2]].HotelProject.TotalHotelRoomPrice,
      AdultSellingPriceT: $rootScope[position[2]].TrafficProject.AdultSellingPrice,
      ChildSellingPriceT: $rootScope[position[2]].TrafficProject.ChildSellingPrice,
      BabySellingPricT: $rootScope[position[2]].TrafficProject.BabySellingPrice,
      TotalPrice: $rootScope[position[2]].TrafficProject.TotalPrice,
      TrafficSchemes: $rootScope[position[2]].TrafficProject.Traffics ? angular.copy($rootScope[position[2]].TrafficProject.Traffics) : [],
      VisaName: $rootScope[position[2]].Visa.Nationality ? $rootScope[position[2]].Visa.Nationality.AddressName : '',
      VisaMoney: $rootScope[position[2]].Visa.VisaMoney,
      VisaTotalprice: $rootScope[position[2]].Visa.TotalVisaMoney,
      VisaServiceMoney: $rootScope[position[2]].Visa.VisaServiceMoney
    };
  };

  $scope.savePackageInfo = function() {
    $rootScope[position[2]].scopeInfo.isPackageEditMode = false;
    var data = $rootScope[position[2]].scopeInfo.packageInfo;

    var param = {
      HotelSchemes: [],
      TrafficSchemes: [],
      AdultSellingPriceT: data.AdultSellingPriceT,
      ChildSellingPriceT: data.ChildSellingPriceT,
      BabySellingPricT: data.BabySellingPricT,
      TotalPrice: data.TotalPrice,
      HotelRoomPrice: data.HotelRoomPrice,
      TotalHotelRoomPrice: data.TotalHotelRoomPrice,
      VisaName: data.VisaName,
      VisaMoney: data.VisaMoney,
      VisaTotalprice: data.VisaTotalprice,
      VisaServiceMoney: data.VisaServiceMoney
    };

    data.HotelSchemes.forEach(function(item) {
      param.HotelSchemes.push({
        HotelGuid: item.HotelGuid || item.HotelID,
        HotelRoomGuid: '',
        StartTime: item.StartTime,
        EndTime: item.EndTime,
        BookingNumber: item.BookingNumber
      });
    });

    data.TrafficSchemes.forEach(function(item) {
      param.TrafficSchemes.push({
        TrafficGuid: item.TrafficGuid || item.TrafficID,
        StartTime: item.StartTime,
        RideCount: item.RideCount
      });
    });

    saveCustomTourOrderProject($rootScope[position[2]].OrderInfos._id, param, function() {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?ID=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.status = {
    addHotel: true,
    selectHotel: false,
    addTraffic: true,
    selectTraffic: false,
    addVisa: true,
    selectVisa: false,
    currentView: ''
  };

  $scope.basicData = {
    search: {
      iPageSize: $rootScope.embeddedPageLimt,
      iPageIndex: 1
    }
  };

  $scope.popoverStatusChange = function(type, status) {
    switch (type) {
      case 'hotel':
        {
          if (status == 'add') {
            $scope.status.addHotel = true;
            $scope.status.selectHotel = false;
          } else {
            $scope.status.addHotel = false;
            $scope.status.selectHotel = true;
            $scope.searchList(1);
          }
        }
        break;
      case 'traffic':
        {
          if (status == 'add') {
            $scope.status.addTraffic = true;
            $scope.status.selectTraffic = false;
          } else {
            $scope.status.addTraffic = false;
            $scope.status.selectTraffic = true;
            $scope.searchList(1);
          }
        }
        break;
      case 'visa':
        {
          if (status == 'add') {
            $scope.status.addVisa = true;
            $scope.status.selectVisa = false;
          } else {
            $scope.status.addVisa = false;
            $scope.status.selectVisa = true;
            $scope.searchList(1);
          }
        }
        break;
    }
  };

  $scope.getCountries = function() {
    if ($scope.basicData.countries) return;
    getAddrData(function(response) {
      $scope.basicData.countries = response;
    });
  };

  $scope.getRegions = function(country) {
    $scope.basicData.regions = [];
    $scope.basicData.cities = [];
    $scope.basicData.search.Provinceid = "";
    $scope.basicData.search.Cityid = "";

    if (!country) return;
    getAddrData(function(response) {
      $scope.basicData.regions = response;
    }, country);
  };

  $scope.getCities = function(region) {
    $scope.basicData.cities = [];
    $scope.basicData.search.Cityid = "";

    if (!region) return;
    getAddrData(function(response) {
      $scope.basicData.cities = response;
    }, region);
  };

  $scope.getTraffics = function() {
    if ($scope.basicData.traffics) return;
    getTrafficMethods(function(response) {
      $scope.basicData.traffics = response.data.list;
    });
  };

  $scope.getHotelStars = function() {
    if ($scope.basicData.hotelStars) return;
    getHotelStarType(function(response) {
      $scope.basicData.hotelStars = response.list;
    });
  };

  $scope.searchList = function(iPageIndex) {
    $scope.basicData.search.iPageIndex = iPageIndex;

    if ($scope.status.currentView == 'trafficList') {
      getTrafficListDatas($scope.basicData.search, function(data) {
        $scope.basicData.list = data.list;
        var page = new Pagination(data.count, iPageIndex);
        if (!$scope.Pagination) {
          $scope.Pagination = {};
        }
        $scope.Pagination.basicData = page;
      });
    } else if ($scope.status.currentView == 'hotelList') {
      getBasicData[$scope.status.currentView](function(data) {
        $scope.basicData.list = data.data.list;
        var page = new Pagination(data.data.count, iPageIndex);
        if (!$scope.Pagination) {
          $scope.Pagination = {};
        }
        $scope.Pagination.basicData = page;
      }, $scope.basicData.search);
    } else {

    }

  };

  $scope.addHotel = function() {
    if (!$rootScope[position[2]].hotelDetail.hotelStartTime) {
      $rootScope[position[2]].info = '请填写入住时间';
      return;
    }
    if (!$rootScope[position[2]].hotelDetail.hotelEndTime) {
      $rootScope[position[2]].info = '请填写退房时间';
      return;
    }
    if (!$rootScope[position[2]].hotelDetail.BookingNumber) {
      $rootScope[position[2]].info = '请填写房间数量';
      return;
    }
    if (!$rootScope[position[2]].choosedHotel) {
      $rootScope[position[2]].info = '请选择酒店';
      return;
    }
    $rootScope[position[2]].hotelDetail.HotelGuid = $rootScope[position[2]].choosedHotel.ID;
    $rootScope[position[2]].hotelDetail.HotelName = $rootScope[position[2]].choosedHotel.Name;
    $rootScope[position[2]].hotelDetail.StartTime = $filter('date')($rootScope[position[2]].hotelDetail.hotelStartTime, 'yyyy-MM-dd');
    $rootScope[position[2]].hotelDetail.EndTime = $filter('date')($rootScope[position[2]].hotelDetail.hotelEndTime, 'yyyy-MM-dd');
    $rootScope[position[2]].hotelDetail.hotel = angular.copy($rootScope[position[2]].choosedHotel);
    $rootScope[position[2]].hotelDetail.currentView = '';
    if ($scope.status.operationMode == 'edit') {
      if ($rootScope[position[2]].editIndex > -1) {
        $rootScope[position[2]].scopeInfo.packageInfo.HotelSchemes[$rootScope[position[2]].editIndex] = angular.copy($rootScope[position[2]].hotelDetail);
      }
    } else {
      $rootScope[position[2]].scopeInfo.packageInfo.HotelSchemes.push(angular.copy($rootScope[position[2]].hotelDetail));
    }
    $rootScope[position[2]].choosedHotel = '';
    $rootScope[position[2]].hotelDetail = {};
    $scope.status.currentView = "";
    $scope.status.operationMode = '';
    $rootScope[position[2]].editIndex = -1;
  };

  $scope.addTraffic = function() {
    if (!$rootScope[position[2]].trafficDetail.trafficStartTime) {
      $rootScope[position[2]].info = '请填写出发时间';
      return;
    }
    if (!$rootScope[position[2]].trafficDetail.RideCount) {
      $rootScope[position[2]].info = '请填写人数';
      return;
    }
    if (!$rootScope[position[2]].choosedTraffic) {
      $rootScope[position[2]].info = '请填写人数';
      return;
    }
    $rootScope[position[2]].trafficDetail.TrafficGuid = $rootScope[position[2]].choosedTraffic.ID || $rootScope[position[2]].choosedTraffic.TrafficID;
    $rootScope[position[2]].trafficDetail.StartTime = $filter('date')($rootScope[position[2]].trafficDetail.trafficStartTime, 'yyyy-MM-dd');
    if (typeof $rootScope[position[2]].choosedTraffic.StartCity == 'string') {
      $rootScope[position[2]].trafficDetail.StartCity = {
        AddressName: $rootScope[position[2]].choosedTraffic.StartCity
      };
    }
    if (typeof $rootScope[position[2]].choosedTraffic.ArriveCity == 'string') {
      $rootScope[position[2]].trafficDetail.ArriveCity = {
        AddressName: $rootScope[position[2]].choosedTraffic.ArriveCity
      };
    }
    if (typeof $rootScope[position[2]].choosedTraffic.TrafficCompany == 'string') {
      $rootScope[position[2]].trafficDetail.TrafficCompany = {
        TrafficCompanyName: $rootScope[position[2]].choosedTraffic.TrafficCompany
      };
    }
    $rootScope[position[2]].trafficDetail.TrafficName = $rootScope[position[2]].choosedTraffic.TrafficFlight;
    $rootScope[position[2]].trafficDetail.TrafficModel = $rootScope[position[2]].choosedTraffic.TrafficModel;
    $rootScope[position[2]].trafficDetail.ArriveTime = $rootScope[position[2]].choosedTraffic.ArriveTime;
    $rootScope[position[2]].trafficDetail.DepartureTime = $rootScope[position[2]].choosedTraffic.DepartureTime;
    $rootScope[position[2]].trafficDetail.StartAddress = $rootScope[position[2]].choosedTraffic.StartAddress;
    $rootScope[position[2]].trafficDetail.ArriveAddress = $rootScope[position[2]].choosedTraffic.ArriveAddress;


    $rootScope[position[2]].trafficDetail.currentView = '';
    if ($scope.status.operationMode == 'edit') {
      if ($rootScope[position[2]].editIndex > -1) {
        $rootScope[position[2]].scopeInfo.packageInfo.TrafficSchemes[$rootScope[position[2]].editIndex] = angular.copy($rootScope[position[2]].trafficDetail);
      }
    } else {
      $rootScope[position[2]].scopeInfo.packageInfo.TrafficSchemes.push(angular.copy($rootScope[position[2]].trafficDetail));
    }
    $rootScope[position[2]].choosedTraffic = '';
    $rootScope[position[2]].trafficDetail = {};
    $scope.status.currentView = "";
    $scope.status.operationMode = '';
    $rootScope[position[2]].editIndex = -1;
  };

  $scope.delHotel = function(item) {
    $rootScope[position[2]].scopeInfo.packageInfo.HotelSchemes = _.without($rootScope[position[2]].scopeInfo.packageInfo.HotelSchemes, item);
  };

  $scope.chooseHotel = function(item) {
    $rootScope[position[2]].choosedHotel = {
      Name: item.Name || item.HotelName,
      ID: item.ID || item.HotelID
    };
    $scope.selected.hotel = {};
    $scope.selected.hotel[item.ID] = true;
  };

  $scope.selected = {
    hotel: {},
    traffic: {},
    visa: {}
  };

  $scope.unchooseHotel = function() {
    $rootScope[position[2]].choosedHotel = '';
    $scope.selected.hotel = {};
  };

  $scope.openPopover = function(currentView, operationMode) {
    $scope.status.currentView = currentView;
    $scope.status.operationMode = operationMode;
    $rootScope[position[2]].editIndex = -1;
    if (currentView == 'hotelList') {
      $scope.popoverStatusChange('hotel', 'add');
    } else if (currentView == 'trafficList') {
      $scope.popoverStatusChange('traffic', 'add');
    }
  };

  $scope.toEditHotel = function(item, index) {
    item.currentView = "hotelList";
    $rootScope[position[2]].hotelDetail = angular.copy(item);
    $rootScope[position[2]].hotelDetail.hotelStartTime = new Date(item.StartTime);
    $rootScope[position[2]].hotelDetail.hotelEndTime = new Date(item.EndTime);
    $rootScope[position[2]].editIndex = index;
  };

  $scope.chooseTraffic = function(item) {
    $rootScope[position[2]].choosedTraffic = angular.copy(item);
    $scope.selected.traffic = {};
    $scope.selected.traffic[item.ID] = true;
  };

  $scope.unchooseTraffic = function() {
    $rootScope[position[2]].choosedTraffic = '';
    $scope.selected.traffic = {};
  };

  $scope.toEditTraffic = function(item, index) {
    item.currentView = "trafficList";
    $rootScope[position[2]].trafficDetail = angular.copy(item);
    $rootScope[position[2]].trafficDetail.trafficStartTime = new Date(item.StartTime.substring(0, 4), parseInt(item.StartTime.substring(5, 7)) - 1, item.StartTime.substring(8, 10));
    if ($rootScope[position[2]].trafficDetail.ID) {
      $rootScope[position[2]].trafficDetail.ID = item.TrafficID;
    }
    $rootScope[position[2]].editIndex = index;
  };

  $scope.delTraffic = function(item) {
    $rootScope[position[2]].scopeInfo.packageInfo.TrafficSchemes = _.without($rootScope[position[2]].scopeInfo.packageInfo.TrafficSchemes, item);
  };

  $scope.editFee = function(fee) {
    fee.isEdit = !fee.isEdit;
    $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
  };

  $scope.saveEditFeeInfo = function(fee) {
    updateOrderPriceRecord({
      ForeignKeyID: fee.ForeignKeyID,
      OrderID: $rootScope[position[2]].OrderInfos._id,
      BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
      BusinessMainTypeID: fee.BusinessMainTypeID,
      PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
      Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
    }, function(response) {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.deleteSubFee = function(fee) {
    showWarningBox("确定要删除该费用吗", function() {
      delOrderPriceRecord({
        RecordID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderInfos._id
      }, function(response) {
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    });
  };
});
app.controller("OMOneTeamController", function($scope, $rootScope, OMOneTeam, $filter,getCertificatesTypes,
  modifyOneTeamCustomer, modifyOneTeamIsNeedGuideStatus, saveOrderTouristsToOneGroup, getEnumeration,
  getComboxInsuranceStatus, insertOrderPriceRecord, delOrderPriceRecord, getOrderTouristRoomArrangeByOrderID, orderRandomRoomArrangement, getArrangeTouristsByOrderID, Pagination, removeOrderTouristByTouristID, modifyAirTicekSalesman, modifyOneTeamReceptionCompany, modifyOrderNotes, modifyOrderConvention, getSameProductPlanByOrderID, getCarArrangeTouristsInfo, getNoneCarArrangeTouristsInfo, getCarsByOrderIdnPlanId, getCarsTouristsByOrderIdnCar, showWarningBox, quitTeamFromOrder, addRefreshPageByID, orderTransferCustomer, getComboxTouristRoomStatus,sendOrderInfo) {
  var pageSize = 10;

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.popConf = {
    import: {
      arrow: {
        left: 215,
        useArrow: true
      },
      popconf: {
        left: 130,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 610,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 670,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    record: {
      arrow: {
        left: 240,
        useArrow: true
      },
      popconf: {
        left: 220,
        position: 'bottom'
      }
    },
    precollar: {
      arrow: {
        left: 710,
        useArrow: false
      },
      popconf: {
        left: -635,
        position: 'bottom'
      }
    },
    changeTime: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    selectSaleman: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    distribution: {
      arrow: {
        left: 280,
        useArrow: true
      },
      popconf: {
        left: -200,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 257,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 485,
        useArrow: true
      },
      popconf: {
        left: -405,
        position: 'bottom'
      }
    },
    cancelOrder: {
      arrow: {
        left: 330,
        useArrow: true
      },
      popconf: {
        left: 405,
        position: 'bottom'
      }
    },
    contract: {
      arrow: {
        left: 350,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    }
  };

/*  (function activate(){
    if($rootScope[position[2]].scopeInfo){
      $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(0, pageSize);
      $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, 1, pageSize);

      $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(0, pageSize);
      $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, 1, pageSize);
    }
  })();*/

  $scope.chooseCustomer = function(customer){
    orderTransferCustomer({
      OrderId: $rootScope[position[2]].OrderID,
      OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
      NewCustomerId: customer._id.$id
    }, function(response){
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderID);
    });
  };

  $scope.searchTeamtourPlan = function(type) {
    $scope.isLoading = true;
    var search = {};
    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');
    OMOneTeam.list(function(response) {
      $scope.isLoading = false;
      $rootScope[position[1]].list = response.list;
    }, search);
  };

  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };

  $scope.orderMemberPageChange = function(page) {
    if (!page) page = 1;
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);

    $rootScope[position[2]].isSelectAllTourist = false;
    $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(item){
      item.isSelected = false;
    });
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {iPageIndex: 1};
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMOneTeam.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };

  $scope.showEditCustomer = function() {
    $rootScope[position[2]].status.editCustomer = true;
    if (!$rootScope[position[2]].editCustomerInfo) {
      $rootScope[position[2]].editCustomerInfo = {
        OrderID: $rootScope[position[2]].OrderID,
        CustomerName: $rootScope[position[2]].CustomerName,
        CustomerMobile: $rootScope[position[2]].CustomerMobile,
        CertificatesTypeID: $rootScope[position[2]].CertificatesTypeID,
        TouristDocumentNumber: $rootScope[position[2]].TouristDocumentNumber,
        CustomerEmail: $rootScope[position[2]].CustomerEMail,
        CustomerCountryID: $rootScope[position[2]].CustomerLocationCountryID,
        CustomerProvinceID: $rootScope[position[2]].CustomerLocationProvinceID,
        CustomerCityID: $rootScope[position[2]].CustomerLocationCityID,
        CustomerAreaID: $rootScope[position[2]].CustomerLocationAreaID,
        CustomerStreetID: $rootScope[position[2]].CustomerLocationStreetID,
        CustomerPositionDetail: $rootScope[position[2]].CustomerPositionDetail,
        BodyStateNotes: $rootScope[position[2]].BodyStateNotes,
        EmergencyContactNotes: $rootScope[position[2]].EmergencyContactNotes,
        address: {
          city: $rootScope[position[2]].CustomerLocationCityID,
          region: $rootScope[position[2]].CustomerLocationProvinceID,
          country: $rootScope[position[2]].CustomerLocationCountryID,
        }
      };
    }
  };

  $scope.saveCustomer = function() {
    $scope.isSubmit = true;
    $rootScope[position[2]].editCustomerInfo.CustomerCountryID = $rootScope[position[2]].editCustomerInfo.address.country;
    $rootScope[position[2]].editCustomerInfo.CustomerProvinceID = $rootScope[position[2]].editCustomerInfo.address.region;
    $rootScope[position[2]].editCustomerInfo.CustomerCityID = $rootScope[position[2]].editCustomerInfo.address.city;
    modifyOneTeamCustomer($rootScope[position[2]].editCustomerInfo, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].CustomerName = $rootScope[position[2]].editCustomerInfo.CustomerName;
      $rootScope[position[2]].CustomerMobile = $rootScope[position[2]].editCustomerInfo.CustomerMobile;
      $rootScope[position[2]].CertificatesTypeID = $rootScope[position[2]].editCustomerInfo.CertificatesTypeID;
      $rootScope[position[2]].TouristDocumentNumber = $rootScope[position[2]].editCustomerInfo.TouristDocumentNumber;
      $rootScope[position[2]].CertificatesTypeName = $filter('getInnerObjValueFormArray')($scope.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName');
      $rootScope[position[2]].CustomerEMail = $rootScope[position[2]].editCustomerInfo.CustomerEmail;
      $rootScope[position[2]].BodyStateNotes = $rootScope[position[2]].editCustomerInfo.BodyStateNotes;
      $rootScope[position[2]].EmergencyContactNotes = $rootScope[position[2]].editCustomerInfo.EmergencyContactNotes;
      var address = $rootScope[position[2]].editCustomerInfo.address;
      $rootScope[position[2]].CustomerAddress = (address.countryName || '') + (address.regionName || '') + (address.cityName || '') + ($rootScope[position[2]].editCustomerInfo.CustomerPositionDetail || '');
      $rootScope[position[2]].status.editCustomer = false;
    });
  };

  $scope.editNeedGuideInfo = function() {
    $rootScope[position[2]].status.editNeedGuide = true;
    $rootScope[position[2]].editNeedGuide = {
      IsNeedGuide: $rootScope[position[2]].IsNeedGuide
    };
  };

  $scope.saveNeedGuideInfo = function() {
    $scope.isSubmit = true;
    modifyOneTeamIsNeedGuideStatus($rootScope[position[2]].OrderID, $rootScope[position[2]].editNeedGuide.IsNeedGuide, function() {
      $rootScope[position[2]].IsNeedGuide = $rootScope[position[2]].editNeedGuide.IsNeedGuide;
      $rootScope[position[2]].status.editNeedGuide = false;
      $scope.isSubmit = false;
    });
  };

  $scope.addTourist = function(item) {
    console.log(item);
    if (item) {
      item.TouristBirthdayDate = new Date(item.TouristBirthday.substring(0, 4), parseInt(item.TouristBirthday.substring(5, 7)) - 1, item.TouristBirthday.substring(8, 10));
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
    } else {
      $rootScope[position[2]].addTouristInfo = {
        TouristName: '游客',
        CertificatesTypeID: '000000000000000000000001',
        GenderTypeID: 1,
        TouristTypeID: 2
      };
    }
  };

  $scope.delTourist = function(item) {
    removeOrderTouristByTouristID(item.ForeignKeyID, function() {
      $rootScope[position[2]].info = "删除成功";
      var index = _.findIndex($rootScope[position[2]].OrderTourists, {
        ForeignKeyID: item.ForeignKeyID
      });
      $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, $rootScope[position[2]].OrderTourists[index]);
    });
  };
  $scope.quitTeam = function(member, ExitTeamNotes) {
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderID,
      "Tourists": JSON.stringify([member.ForeignKeyID]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderID);
    });
  };

  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].OrderTourists.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member.ForeignKeyID);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderID,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $scope.status.quitTeamOpen = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderID);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.saveTourist = function() {
    $scope.isSubmit = true;
    var param = {
      OrderID: $rootScope[position[2]].OrderID,
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      IsOccupying: true,
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthdayDate, 'yyyy-MM-dd'),
      GenderTypeName: $rootScope[position[2]].addTouristInfo.GenderTypeID == 1 ? '男士' : '女士',
      TouristTypeName: $filter('showObjValueFormArray')($rootScope[position[2]].addTouristInfo.TouristTypeID, $scope.TouristTypes, 'Value', 'Text')
    };
    if ($rootScope[position[2]].addTouristInfo.ForeignKeyID) {
      param.TouristID = $rootScope[position[2]].addTouristInfo.ForeignKeyID;
    }
    saveOrderTouristsToOneGroup(param, function(ID) {
      if ($rootScope[position[2]].addTouristInfo.ForeignKeyID) {
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          ForeignKeyID: $rootScope[position[2]].addTouristInfo.ForeignKeyID
        });
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
        $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      } else {
        param.ForeignKeyID = ID;
         param.TouristStatus='正常';
        $rootScope[position[2]].OrderTourists.push(param);
        $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      }
      $scope.status.addTourist = false;
      $scope.isSubmit = false;
    });
  };

 $scope.getEnumeration = function() {
    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });
     getCertificatesTypes(function(Certificates) {
        $scope.Certificates = Certificates;
      });
  };

  $scope.getEnumeration();


  $scope.closeAllAddTouristPop = function() {
    $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };


  $scope.batchDelTourist = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      if (item.isSelected) {
        $scope.delTourist(item);
      }
    });
  };

  $scope.clickSelectAllTourist = function() {
    $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(item) {
      if(item.TouristStatus != 1) return;
      item.isSelected = $rootScope[position[2]].isSelectAllTourist;
    });
  };

  $scope.editSaleMan = function() {
    $scope.status.isSaleManEditMode = true;
    $rootScope[position[2]].saleManInfo = {
      id: $rootScope[position[2]].SalesmanID,
      name: $rootScope[position[2]].SalesmanName,
      detail: {}
    };
  };

  $scope.saveSaleMan = function() {
    var detail = $rootScope[position[2]].saleManInfo.detail;
    var saleManID = detail._id ? detail._id.$id : '';
    var saleManName = detail._id ? detail.FullName : '';
    modifyAirTicekSalesman($rootScope[position[2]].OrderID, saleManID, saleManName, function() {
      $scope.isSubmit = false;
      $scope.status.isSaleManEditMode = false;
      $rootScope[position[2]].SalesmanID = saleManID;
      $rootScope[position[2]].SalesmanName = saleManName;
    });
  };

  $scope.editEntrust = function() {
    $scope.status.isEntrustEditMode = true;
    $rootScope[position[2]].entrustInfo = {
      id: $rootScope[position[2]].ReceptionCompanyID,
      name: $rootScope[position[2]].ReceptionCompanyName,
      detail: {}
    };
  };

  $scope.saveEntrust = function() {
    $scope.isSubmit = true;
    modifyOneTeamReceptionCompany($rootScope[position[2]].OrderID, $rootScope[position[2]].entrustInfo.detail.ID, $rootScope[position[2]].entrustInfo.detail.Name, function() {
      $scope.isSubmit = false;
      $scope.status.isEntrustEditMode = false;
      $rootScope[position[2]].ReceptionCompanyID = $rootScope[position[2]].entrustInfo.detail.ID;
      $rootScope[position[2]].ReceptionCompanyName = $rootScope[position[2]].entrustInfo.detail.Name;
    });
  };

  //***************订单约定模块Start*******************//
  //是否同意购买保险
  $scope.AgreeBuyInsurance = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //按下列方式解决
  $scope.AgreeNoGroup = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  //旅行社履行合同
  $scope.MoveTravelAgency = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //延期出团
  $scope.AgreeDelayGroup = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //改签其他线路出团
  $scope.AgreeChangeOtherLine = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //拼团预约
  $scope.AgreeFightGroupsAppointment = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  //解除合同
  $scope.AgreeTerminationContract = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  $scope.agreeContract = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  /**
   * 编辑订单约定
   * @return {[type]} [description]
   */
  $scope.editOrderConvention = function() {
    $rootScope[position[2]].scopeInfo.isOrderConventionEditMode = true;
    // $rootScope[position[2]].scopeInfo.OrderConventionInfo = angular.copy($rootScope[position[2]].ContractEnlarge);
    $rootScope[position[2]].scopeInfo.OrderConventionInfo = {
      IsOwnBuyInsurance: $rootScope[position[2]].IsOwnBuyInsurance,
      IsAgreeNoGroup: $rootScope[position[2]].IsAgreeNoGroup,
      IsMoveTravelAgency: $rootScope[position[2]].IsMoveTravelAgency,
      TravelAgencyName: $rootScope[position[2]].TravelAgencyName,
      IsAgreeDelayGroup: $rootScope[position[2]].IsAgreeDelayGroup,
      IsAgreeChangeOtherLine: $rootScope[position[2]].IsAgreeChangeOtherLine,
      IsAgreeTerminationContract: $rootScope[position[2]].IsAgreeTerminationContract,
      IsAgreeFightGroupsAppointment: $rootScope[position[2]].IsAgreeFightGroupsAppointment,
      FightGroupTravelAgencyName: $rootScope[position[2]].FightGroupTravelAgencyName,
      ContractPayTypeAndTime: $rootScope[position[2]].ContractPayTypeAndTime,
      OtherAppointment: $rootScope[position[2]].OtherAppointment,
      ContractAppointments: angular.copy($rootScope[position[2]].ContractAppointments)
    };
    if (!$rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments) {
      $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments = [];
    }
  };


  /**
   * 保存订单约定
   * @return {[type]} [description]
   */
  $scope.saveOrderConventionInfo = function() {

    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.forEach(function(item) {
      item.StartDay = $filter('date')(item.StartDay, 'yyyy-MM-dd');
      item.EndDay = $filter('date')(item.StartDay, 'yyyy-MM-dd');
    });
    /*接口需要传的参数*/
    var data = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderID,
      /*解决方式*/
      IsAgreeNoGroup: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeNoGroup,
      /*转至其他旅行社*/
      IsMoveTravelAgency: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsMoveTravelAgency,
      /*旅行社名称*/
      TravelAgencyName: $rootScope[position[2]].scopeInfo.OrderConventionInfo.TravelAgencyName,
      /*延迟期限*/
      IsAgreeDelayGroup: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeDelayGroup,
      /*换成其他路线*/
      IsAgreeChangeOtherLine: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeChangeOtherLine,
      /*终止合同*/
      IsAgreeTerminationContract: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeTerminationContract,
      /*拼团约定*/
      IsAgreeFightGroupsAppointment: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeFightGroupsAppointment,
      /*拼团约定旅行社名称*/
      FightGroupTravelAgencyName: $rootScope[position[2]].scopeInfo.OrderConventionInfo.FightGroupTravelAgencyName,
      /*约定支付类型和时间*/
      // ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractPayTypeAndTime,
      /*其他约定*/
      //  OtherAppointment: $rootScope[position[2]].scopeInfo.OrderConventionInfo.OtherAppointment,
      /*预约合同*/
      ContractAppointment: angular.toJson($rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments, true)
    };
    /*接口：方法注入*/
    modifyOrderConvention(data, function() {
      /*继承  修改保存后列表数据显示*/
      // $rootScope.$rootScope[position[2]].OrderInfos.ContractEnlarge = angular.extend($rootScope[position[2]].scopeInfo.OrderConventionInfo);
      angular.extend($rootScope[position[2]], $rootScope[position[2]].scopeInfo.OrderConventionInfo);
    });

    /*判断编辑字段变成false：页面上显示编辑后的资料*/
    $rootScope[position[2]].scopeInfo.isOrderConventionEditMode = false;
  };

  //添加黄金周特别约定
  $scope.addOrderHolidayAppointment = function() {

    var value = {
      StartDay: 0,
      EndDay: 0,
      CompanyBreachOfContractRatio: 0,
      TouristBreachOfContractRatio: 0
    };
    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.push(value);
  };
  //删除黄金周特别约定
  $scope.delOrderHolidayAppointment = function(index, item) {
    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.splice(index, 1);
  };
  //***************订单约定模块End*******************//

  //***************订单备注模块Start*******************//
  /**
   * 编辑订单备注
   * @return {[type]} [description]
   */
  $scope.editOrderNotes = function() {
    $rootScope[position[2]].scopeInfo.orderNoteTmp = {
      /*支付时间和方式*/
      ContractPayTypeAndTime: $rootScope[position[2]].ContractPayTypeAndTime,
      /*其他约定*/
      OtherAppointment: $rootScope[position[2]].OtherAppointment,
      /*备注*/
      OrderNotes: $rootScope[position[2]].OrderNotes
    };
    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = true;
  };

  /**
   * 保存订单备注
   * @return {[type]} [description]
   */
  $scope.saveOrderNotes = function() {
    var data = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderID,
      /*支付时间和方式*/
      ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime,
      /*其他约定*/
      OtherAppointment: $rootScope[position[2]].scopeInfo.orderNoteTmp.OtherAppointment,
      /*备注*/
      OrderNote: $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes
    };
    /*接口：方法注入*/
    modifyOrderNotes(data, function() {
      /*继承  修改保存后列表数据显示*/
      $rootScope[position[2]].ContractPayTypeAndTime = data.ContractPayTypeAndTime;
      $rootScope[position[2]].OtherAppointment = data.OtherAppointment;
      $rootScope[position[2]].OrderNotes = data.OrderNote;
    });

    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = false;
  };
  //***************订单备注模块End*******************//


  //****************房间安排开始***************************//
  $scope.roomArrange = function() {
    $rootScope[position[2]].scopeInfo.loadRoomInfo = true;
    if(!$scope.ETouristRoomStatus){
      getComboxTouristRoomStatus(function(response){
        $scope.ETouristRoomStatus = response;
      });
    }
    getRoomArrangeInfo(1);
    getArrangeTouristsByOrderID({
      OrderID: $rootScope[position[2]].OrderID
    }, function(response) {
      $rootScope[position[2]].scopeInfo.roomTouristsList = response;
    });
  };

  function getRoomArrangeInfo(page) {
    getOrderTouristRoomArrangeByOrderID({
      OrderID: $rootScope[position[2]].OrderID,
      PageIndex: 1,
      PageSize: pageSize,
      SearchInfo: ""
    }, function(roomInfo) {
      $rootScope[position[2]].scopeInfo.loadRoomInfo = false;
      $rootScope[position[2]].scopeInfo.Pagination.roomPagination = new Pagination(roomInfo.count, page, pageSize);
      $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList = roomInfo.list;
    });
  }

  $scope.roomArrangePageChange = function(page) {
    if ($rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing) {
      $rootScope[position[2]].info = '正在编辑房间信息，请先完成编辑';
      return;
    }
    if (!page) {
      page = 1;
    }
    getRoomArrangeInfo(page);
  };

  $scope.editRoomArrangeInfo = function(room) {
    if ($rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing) {
      $rootScope[position[2]].info = '正在编辑房间信息，请先完成编辑';
      return;
    }
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = true;
    room.isEditMode = true;
    $rootScope[position[2]].scopeInfo.roomTmp.status = room.TouristRoomStatus;
    if (room.Tourists[0]) {
      $rootScope[position[2]].scopeInfo.roomTmp.tourist = room.Tourists[0].TouristID;
    }
    if (room.Tourists[1]) {
      $rootScope[position[2]].scopeInfo.roomTmp.touristOther = room.Tourists[1].TouristID;
    }
  };

  $scope.saveRoomArrangeInfo = function(room) {
    var data = [];
    var tempId = "";
    room.isEditMode = false;
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = false;
    if ($rootScope[position[2]].scopeInfo.roomTmp.tourist) {
      tempId = room.Tourists[0] ? room.Tourists[0].TouristID : '';
      if ($rootScope[position[2]].scopeInfo.roomTmp.tourist != tempId || $rootScope[position[2]].scopeInfo.roomTmp.status != room.TouristRoomStatus) {
        data.push({
          InTouristID: $rootScope[position[2]].scopeInfo.roomTmp.tourist,
          OutTouristID: room.Tourists[0] ? room.Tourists[0].TouristID : ''
        });
      }
    }
    if ($rootScope[position[2]].scopeInfo.roomTmp.touristOther) {
      tempId = room.Tourists[1] ? room.Tourists[1].TouristID : '';
      if ($rootScope[position[2]].scopeInfo.roomTmp.touristOther != tempId || $rootScope[position[2]].scopeInfo.roomTmp.status != room.TouristRoomStatus) {
        data.push({
          InTouristID: $rootScope[position[2]].scopeInfo.roomTmp.touristOther,
          OutTouristID: room.Tourists[1] ? room.Tourists[1].TouristID : ''
        });
      }
    }

    orderTouristRoomArrange({
      OrderID: $rootScope[position[2]].OrderID,
      TouristRoomStatus: $rootScope[position[2]].scopeInfo.roomTmp.status,
      RoomTourists: JSON.stringify(data),
      RoomNumber: room.RoomNumber
    }, function(response) {
      $rootScope[position[2]].info = '修改成功';
      $rootScope[position[2]].scopeInfo.loadRoomInfo = true;
      getRoomArrangeInfo(1);
    });
  };

  $scope.delRoomArrangeInfo = function(room, index) {
    showWarningBox('是否确认要删除房间？', function() {
      var data = [];
      room.Tourists.forEach(function(tourist) {
        data.push(tourist.TouristID);
      });
      orderCancelRoomArrange({
        Tourists: JSON.stringify(data)
      }, function(response) {
        console.log(response);
        $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList.splice(index, 1);
      });
    });
  };

  // $scope.addOrderRoomArrangeInfo = function(){
  //  $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList.push({
  //    isEditMode:true
  //  });
  // };

  $scope.orderRoomArrangeRandom = function() {
    $rootScope[position[2]].scopeInfo.loadRoomInfo = true;
    orderRandomRoomArrangement({
      OrderID: $rootScope[position[2]].OrderID
    }, function(response) {
      $rootScope[position[2]].info = '成功随机安排房间';
      getRoomArrangeInfo(1);
    });
  };

  $scope.cancelSaveRoomArrangeInfo = function(room) {
    $rootScope[position[2]].scopeInfo.roomTmp = {};
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = false;
    room.isEditMode = false;
  };

  //****************房间安排结束***************************//

  /**
   * 管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.handleFee = function(isAdd) {
    //清空一下数据
    $rootScope[position[2]].scopeInfo.isHandleFee = {};
    if (isAdd) {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    } else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
    }
  };

  /**
   * 保存管理费用信息
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.saveHandleFeeInfo = function(isAdd) {
    var param = {};
    if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
      param = {
        OrderID: $rootScope[position[2]].OrderID,
        Type: 2,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
        BusinessMainTypeID: 2,
        BusinessMainTypeName: '增加费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle
      };
      if(!param.BusinessTypeName){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    } else {
      param = {
        OrderID: $rootScope[position[2]].OrderID,
        Type: 3,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
        BusinessMainTypeID: 3,
        BusinessMainTypeName: '减少费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle
      };
      if(!param.BusinessTypeName){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    }
    insertOrderPriceRecord(param, function() {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderID);
    });
    $scope.cancelHandleFee();
  };

  /**
   * 取消管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.cancelHandleFee = function(fee){
    if(typeof fee == 'object'){
      fee.isEdit = false;
    }else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    }
  };

  $scope.editFee = function(fee){
    fee.isEdit = !fee.isEdit;
    $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
  };

  $scope.saveEditFeeInfo = function(fee){
    updateOrderPriceRecord({
      ForeignKeyID: fee.ForeignKeyID,
      OrderID: $rootScope[position[2]].OrderID,
      BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
      BusinessMainTypeID: fee.BusinessMainTypeID,
      PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
      Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
    }, function(response){
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderID);
    });
  };

  $scope.deleteSubFee = function(fee){
    showWarningBox("确定要删除该费用吗", function(){
      delOrderPriceRecord({
        RecordID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderID
      }, function(response){
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderID);
      });
    });
  };

});
app.controller("OMAttractionTicketController", function($scope, $rootScope, OMAttractionTicket, $filter,
  getCertificatesTypes, modifyOneTeamCustomer, modifyAirTicekSalesman, removeOrderTouristByTouristID,
  addRefreshPageByID, getEnumeration, getComboxInsuranceStatus, saveOrderTouristsToTicket,
  insertOrderPriceRecord, saveFreeTourOrderNotes, updateScenicTicketInfo, getScenicTickets, showWarningBox,
  quitTeamFromOrder, orderTransferCustomer,sendOrderInfo,delOrderPriceRecord) {

  $scope.chooseCustomer = function(customer){
    orderTransferCustomer({
      OrderId: $rootScope[position[2]].OrderInfos._id,
      OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
      NewCustomerId: customer._id.$id
    }, function(response){
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.fetch($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.searchTeamtourPlan = function(type) {
    $scope.isLoading = true;
    $rootScope[position[1]].search.iPageIndex = 1;
    $rootScope[position[1]].search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    $rootScope[position[1]].search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    $rootScope[position[1]].search.TimeType = $rootScope[position[1]].search.TimeType;
    $rootScope[position[1]].search.TypeId = $rootScope[position[1]].search.TypeId;
    $rootScope[position[1]].search.SourceId = $rootScope[position[1]].search.SourceId;
    $rootScope[position[1]].search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    $rootScope[position[1]].search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    $rootScope[position[1]].search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    $rootScope[position[1]].search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    $rootScope[position[1]].search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    $rootScope[position[1]].search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');
    OMAttractionTicket.list(function(response) {
      $scope.isLoading = false;
      $rootScope[position[1]].list = response.list;
    }, $rootScope[position[1]].search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {
        iPageIndex: 1
      };
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMAttractionTicket.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };

  /**
   * 订单名单翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  var pageSize = 10;
  $scope.orderMemberPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
  };

  /**
   * 订单保险翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };
  /**
   * 编辑联系人
   * @return {[type]}      [description]
   */
  $scope.editContractInfo = function() {
    $rootScope[position[2]].scopeInfo.isContractEditMode = true;
    $rootScope[position[2]].scopeInfo.customerInfo = angular.copy($rootScope[position[2]].OrderInfos.CustomerEnlarge);
    $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes = $rootScope[position[2]].OrderInfos.EmergencyContactNotes;
    $rootScope[position[2]].scopeInfo.customerInfo.address = {
      city: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City.ForeignKeyID : '',
      region: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province.ForeignKeyID : '',
      country: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country.ForeignKeyID : ''
    };
  };

  /**
   * 保存联系人
   * @return {[type]}      [description]
   */
  $scope.saveContractInfo = function() {
    $scope.isSubmit = true;
    $rootScope[position[2]].scopeInfo.isContractEditMode = false;
    modifyOneTeamCustomer({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      CustomerName: $rootScope[position[2]].scopeInfo.customerInfo.CustomerName,
      CustomerMobile: $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile,
      CertificatesTypeID: $rootScope[position[2]].scopeInfo.customerInfo.CertificatesType.ForeignKeyID,
      TouristDocumentNumber: $rootScope[position[2]].scopeInfo.customerInfo.TouristDocumentNumber,
      CustomerEmail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerEMail,
      CustomerCountryID: $rootScope[position[2]].scopeInfo.customerInfo.address.country,
      CustomerProvinceID: $rootScope[position[2]].scopeInfo.customerInfo.address.region,
      CustomerCityID: $rootScope[position[2]].scopeInfo.customerInfo.address.city,
      CustomerAreaID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area.ForeignKeyID : '',
      CustomerStreetID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street.ForeignKeyID : '',
      CustomerPositionDetail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.CustomerPositionDetail,
      BodyStateNotes: $rootScope[position[2]].scopeInfo.customerInfo.BodyStateNotes,
      EmergencyContactNotes: $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes
    }, function() {
      $scope.isSubmit = false;
     addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.popConf = {
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 580,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 510,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    precollar: {
      arrow: {
        left: 710,
        useArrow: false
      },
      popconf: {
        left: -635,
        position: 'bottom'
      }
    },
    rechedule: {
      arrow: {
        left: 320,
        useArrow: true
      },
      popconf: {
        left: 20,
        position: 'bottom'
      }
    },
    record: {
      arrow: {
        left: 150,
        useArrow: true
      },
      popconf: {
        left: 220,
        position: 'bottom'
      }
    },
    changeTime: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    selectSaleman: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    contract: {
      arrow: {
        left: 260,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    distribution: {
      arrow: {
        left: 205,
        useArrow: true
      },
      popconf: {
        left: 450,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 170,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 485,
        useArrow: true
      },
      popconf: {
        left: -405,
        position: 'bottom'
      }
    }
  };

  $scope.editSaleMan = function() {
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = true;
    $rootScope[position[2]].scopeInfo.saleMan = {
      id: $rootScope[position[2]].OrderInfos.SalesmanID,
      name: $rootScope[position[2]].OrderInfos.SalesmanName,
      detail: {}
    };
  };

  $scope.saveSaleManInfo = function() {
    $scope.isSubmit = true;
    var detail = $rootScope[position[2]].scopeInfo.saleMan.detail;
    var saleManID = detail._id ? detail._id.$id : '';
    var saleManName = detail._id ? detail.FullName : '';
    modifyAirTicekSalesman($rootScope[position[2]].OrderInfos._id, saleManID, saleManName, function() {
      $rootScope[position[2]].scopeInfo.isSaleManEditMode = false;
      $rootScope[position[2]].OrderInfos.SalesmanID = saleManID;
      $rootScope[position[2]].OrderInfos.SalesmanName = saleManName;
      $scope.isSubmit = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editOrderNotes = function() {
    $rootScope[position[2]].scopeInfo.orderNoteTmp = {
      ContractPayTypeAndTime: $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime,
      OtherAppointment: $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment,
      OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
    };
    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = true;
  };

  $scope.saveOrderNotes = function() {
    $scope.isSubmit = true;
    saveFreeTourOrderNotes({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime,
      OtherAppointment: '',
      OrderNote: $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes
    }, function() {
      $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime = $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime;
      $rootScope[position[2]].OrderInfos.OrderNotes = $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes;
      $rootScope[position[2]].scopeInfo.orderNoteTmp = {};
      $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = false;
      $scope.isSubmit = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.checkAllMember = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.isSelected = $rootScope[position[2]].scopeInfo.memberCheckAll;
    });
  };

  $scope.delTourist = function(item) {
    removeOrderTouristByTouristID(item._id, function() {
      $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, _.find($rootScope[position[2]].OrderTourists, function(e) {
        if (e._id == item._id) {
          return true;
        }
      }));
    });
  };

  $scope.quitTeam = function(member, ExitTeamNotes) {
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify([member._id]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].OrderTourists.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member._id);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": "批量删除。"
    }, function(response) {
      $scope.isLoading = false;
      $scope.stauts.quitTeamOpen = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function() {
      $scope.isLoading = false;
    });
  };

  $scope.showAddTourist = function(item) {
    if (item) {
      item.TouristBirthdayDate = new Date(item.TouristBirthday.substring(0, 4), parseInt(item.TouristBirthday.substring(5, 7)) - 1, item.TouristBirthday.substring(8, 10));
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
      $rootScope[position[2]].addTouristInfo.CertificatesTypeID = $rootScope[position[2]].addTouristInfo.CertificatesType.ForeignKeyID;
    } else {
      $rootScope[position[2]].addTouristInfo = {
        CertificatesTypeID: '000000000000000000000001',
        GenderTypeID: 1,
        TouristTypeID: 2
      };
    }
  };

  $scope.saveTourist = function() {
    $scope.isSubmit = true;
    var param = {
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      IsOccupying: true,
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesTypeID,$scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthdayDate, 'yyyy-MM-dd'),
      GenderTypeName: $rootScope[position[2]].addTouristInfo.GenderTypeID == 1 ? '男士' : '女士',
      TouristTypeName: $filter('showObjValueFormArray')($rootScope[position[2]].addTouristInfo.TouristTypeID, $scope.TouristTypes, 'Value', 'Text')
    };
    if ($rootScope[position[2]].addTouristInfo._id) {
      param.TouristID = $rootScope[position[2]].addTouristInfo._id;
    }
    saveOrderTouristsToTicket(param, function(ID) {
      param.CertificatesType = {
        CertificatesTypeName: param.CertificatesTypeName,
        ForeignKeyID: param.CertificatesTypeID
      };
      if ($rootScope[position[2]].addTouristInfo._id) {
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          _id: $rootScope[position[2]].addTouristInfo._id
        });
        param._id = $rootScope[position[2]].addTouristInfo._id;
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
          addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      } else {
        param._id = ID;
         param.TouristStatus='正常';
        $rootScope[position[2]].OrderTourists.push(param);
          addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      }
      $scope.closeAllAddTouristPop();
      $scope.isSubmit = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.closeAllAddTouristPop = function() {
    $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };

  $scope.getEnumeration = function() {
    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });
    getComboxInsuranceStatus(function(orderStatus) {
      $scope.orderStatus = orderStatus;
    });
    getCertificatesTypes(function(Certificates) {
        $scope.Certificates = Certificates;
      });
  };

  $scope.getEnumeration();

  $scope.$watch('detailData.OrderTourists', function(value) {
    if (value !== undefined) {
      $rootScope[position[2]].OrderInfos.TotalNumber = 0;
      $rootScope[position[2]].OrderInfos.AdultNumber = 0;
      $rootScope[position[2]].OrderInfos.BabyNumber = 0;
      $rootScope[position[2]].OrderInfos.ChildNumber = 0;
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        if (item.TouristTypeID == 1 || item.TouristTypeID == 2) {
          $rootScope[position[2]].OrderInfos.AdultNumber++;
        } else if ($rootScope[position[2]].TouristTypeID == 3) {
          $rootScope[position[2]].OrderInfos.ChildNumber++;
        } else {
          $rootScope[position[2]].OrderInfos.BabyNumber++;
        }
        $rootScope[position[2]].OrderInfos.TotalNumber++;
      });
    }
  }, true);

  /**
   * 管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.handleFee = function(isAdd) {
    //清空一下数据
    $rootScope[position[2]].scopeInfo.isHandleFee = {};
    $rootScope[position[2]].scopeInfo.feeInfo = {};
    if (isAdd) {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    } else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
    }
  };

  /**
   * 保存管理费用信息
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.saveHandleFeeInfo = function(isAdd) {
    $scope.isSubmit = true;
    var param = {};
    if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 2,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
        BusinessMainTypeID: 2,
        BusinessMainTypeName: '增加费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        BusinessTypeID : 1
      };
       if(!param.Name){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    } else {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 3,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
        BusinessMainTypeID: 3,
        BusinessMainTypeName: '减少费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        BusinessTypeID : 2
      };
       if(!param.Name){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    }
    insertOrderPriceRecord(param, function() {
      $scope.isSubmit = false;
       addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
    $scope.cancelHandleFee();
  };


  $scope.editTicketInfo = function() {

    getScenicTickets(function(tickets) {
      $rootScope[position[2]].tickets = tickets;
      $rootScope[position[2]].ScenicTickets.forEach(function(ticket) {
        _.find($rootScope[position[2]].tickets, function(e) {
          if (e._id.$id == ticket.ForeignKeyID) {
            e.BookingCount = ticket.BookingCount;
            return true;
          }
        });
      });
      console.log($rootScope[position[2]].tickets);
      $rootScope[position[2]].scopeInfo.isTicketEditMode = true;
    }, $rootScope[position[2]].ProductInfo._id);
  };

  $scope.saveTicketInfo = function() {
    $scope.isSubmit = true;
    var param = {
      orderID: $rootScope[position[2]].OrderInfos._id,
      OrderScenicTickets: []
    };
    $rootScope[position[2]].tickets.forEach(function(item) {
      if (item.BookingCount) {
        param.OrderScenicTickets.push({
          TicketId: item._id.$id,
          BookingCount: item.BookingCount,
          TicketTotalPrice: item.BookingCount * item.DefaultPrice
        });
      }
    });
    updateScenicTicketInfo(param, function() {
      $scope.isSubmit = false;
       addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.$watch('detailData.tickets', function(value) {
    if (value !== undefined) {
      $rootScope[position[2]].totalTicketPrice = 0;
      $rootScope[position[2]].tickets.forEach(function(item) {
        if (item.BookingCount) {
          $rootScope[position[2]].totalTicketPrice += item.DefaultPrice * item.BookingCount;
        }
      });
    }
  }, true);

  $scope.nowTime = new Date().getTime();

  $scope.editFee = function(fee){
    fee.isEdit = !fee.isEdit;
    $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
  };

  $scope.saveEditFeeInfo = function(fee){
    updateOrderPriceRecord({
      ForeignKeyID: fee.ForeignKeyID,
      OrderID: $rootScope[position[2]].OrderInfos._id,
      BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
      BusinessMainTypeID: fee.BusinessMainTypeID,
      PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
      Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
    }, function(response){
       addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.cancelHandleFee = function(fee){
    if(typeof fee == 'object'){
      fee.isEdit = false;
    }else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    }
  };

  $scope.deleteSubFee = function(fee){
    showWarningBox("确定要删除该费用吗", function(){
      delOrderPriceRecord({
        RecordID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderInfos._id
      }, function(response){
         addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    });
  };

});
app.controller("OMTeamtourController",function($scope, $rootScope,OMteamtour,$filter,getTeamtourPlanList,HyDate){

$scope.showSeach=false;
$scope.searchTeamtourPlan = function(type) {
    $rootScope.isloadList = true;
    var search = {};
    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.FianceStatus = $rootScope[position[1]].search.FianceStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');
    OMteamtour.list(function(response) {
      $rootScope[position[1]].list = response.list;
      $rootScope.isloadList = false;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

 $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {iPageIndex:1};
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMteamtour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };
});
app.controller('OMAllOrderController',function($rootScope,$scope,OMAllOrder,$filter){

  $scope.fetchOrderDetail = function(orderType,orderID){
    var url = '';
    switch (orderType) {
      case '000000000000000000000001': //订单管理组团游
        {
          url = 'orderManagement/OMteamtour/detail?id=' + orderID;
        }
        break;
      case '000000000000000000000018': //订单管理邮轮游
        {
          url = 'orderManagement/OMCruise/detail?id=' + orderID;
        }
        break;
      case '000000000000000000000012': //订单管理自助游
        {
          url = 'orderManagement/OMFreeTour/detail?id=' + orderID;
        }
        break;
      case '000000000000000000000017': //订单管理定制游
        {
          url = 'orderManagement/OMCustomTour/detail?ID=' + orderID;
        }
        break;
      case '000000000000000000000013': //订单管理自驾游
        {
          url = 'orderManagement/OMDriveTour/detail?id=' + orderID;
        }
        break;
      case '000000000000000000000003': //订单管理景点门票
        {
          url = 'orderManagement/OMAttractionTicket/detail?id=' + orderID;
        }
        break;
      case '000000000000000000000002': //订单管理签证
        {
          url = 'orderManagement/OMVisa/detail?id=' + orderID;
        }
        break;
      case '000000000000000000000024': //订单管理机票
        {
          url = 'orderManagement/OMPlaneTicket/detail?OrderID=' + orderID;
        }
        break;
      case '000000000000000000000023': //订单管理一团一议
        {
          url = 'orderManagement/OMOneTeam/detail?id=' + orderID;
        }
        break;
      case '000000000000000000000009': //订单管理地接
        {
          url = 'orderManagement/OMPickUp/detail?id=' + orderID;
        }
        break;
    }
    $scope.fetch(url,orderID);
  };

  $scope.showSeach=false;
  $scope.searchTeamtourPlan = function(type) {
    $rootScope.isloadList = true;
    $rootScope.showProcessBar = true;
    var search = {};
    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');
    OMAllOrder.list(function(response) {
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
      $rootScope[position[1]].list = response.list;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {iPageIndex:1,iPageSize:pageLimit};
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMAllOrder.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };
});
app.controller("OMPickUpController", function($scope, $rootScope, OMPickUp, $filter, $timeout,
  addGroundOrder, closeSubView, showErrorInfo, modifyAirTicekSalesman, modifyAirTicekOrderNote,
  getProductInsurancesByProductIDWithNone, updateGroundOrderProductInfo, modifyOneTeamCustomer,
  updateGroundOrderReceptionCompany, modifyAirTicekPrice, getComboxInsuranceStatus, getEnumeration,
  removeOrderTouristByTouristID, saveOrderTouristsToReception, showWarningBox, quitTeamFromOrder,
  addRefreshPageByID,sendOrderInfo,getCertificatesTypes) {

  $scope.popConf = {
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 600,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 645,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 257,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 510,
        useArrow: true
      },
      popconf: {
        left: 210,
        position: 'bottom'
      }
    },
    travelAgency: {
      arrow: {
        left: 510,
        useArrow: true
      },
      popconf: {
        left: 210,
        position: 'bottom'
      }
    }
  };


  /**
   * 订单名单翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  var pageSize = 10;
  $scope.orderMemberPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
  };

  /**
   * 订单保险翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };
  $scope.searchTeamtourPlan = function(type) {
    $scope.isLoading = true;

    var search = {};
    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');

    OMPickUp.list(function(response) {
      $rootScope[position[1]].list = response.list;
      $scope.isLoading = false;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {iPageIndex: 1};
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMPickUp.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };

  $scope.chooseCustomer = function(customer) {
    var url = 'orderManagement/OMPickUp/add?mode=order&customerID=' + customer._id.$id;
    $scope.status.showSelectCustomer = false;
    $rootScope.reFetchDetail(url, '');
    $rootScope.showSubView = true;
    if (!$scope.$$phase) {
      $scope.$apply();
    } else {
      $timeout(function() {
        $scope.$apply();
      });
    }
  };

  $scope.saveOrder = function() {
    $scope.isSubmit = true;
    var param = {};
    param.ProductTitle = $rootScope[position[2]].ProductTitle;
    param.OrderSource = 2;
    param.OrderStatus = 3;
    param.AdultCount = $rootScope[position[2]].peopleCount.AdultCount;
    param.BabyCount = $rootScope[position[2]].peopleCount.BabyCount;
    param.ChildCount = $rootScope[position[2]].peopleCount.ChildCount;
    param.TeamStartTime = $filter('date')($rootScope[position[2]].StartTimeDate, "yyyy-MM-dd");
    param.TeamEndTime = $filter('date')($rootScope[position[2]].EndTimeDate, "yyyy-MM-dd");
    param.TotalNumber = $rootScope[position[2]].totalCount;

    param.CustomerName = $rootScope[position[2]].customer.CustomerName;
    param.Mobile = $rootScope[position[2]].customer.CustomerMobile;
    param.GenderTypeID = $rootScope[position[2]].customer.Enlarge.GenderTypeID;
    param.Fax = $rootScope[position[2]].fax;

    var salesman = $rootScope[position[2]].Salesman;
    param.SalesmanID = salesman._id ? salesman._id.$id : '';
    param.SalesmanName = salesman._id ? salesman.FullName : '';
    param.OrderNotes = $rootScope[position[2]].OrderNotes;
    param.TotalSalesPrice = $rootScope[position[2]].TotalSalesPrice;
    param.FinanceCompanyID = $rootScope[position[2]].FinanceCompany.ID ? $rootScope[position[2]].FinanceCompany.ID : '';

    param.OrderTourists = $rootScope[position[2]].OrderTourists;
    param.TotalSiteNumber = 0;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.CertificatesTypeID = item.Certificate.id;
      item.CertificatesTypeName = item.Certificate.value;
      item.TouristTypeID = item.TouristType.id;
      if (item.IsOccupying) {
        param.TotalSiteNumber++;
      }
    });

    param.Insures = [];
    $rootScope[position[2]].insurance.forEach(function(item) {
      if (item.isSelected) {
        item.InsurancePrice = item.ProductInsurancePrice;
        item.TotalInsurancePrice = item.ProductInsurancePrice * param.TotalNumber;
        param.Insures.push(item);
      }
    });

    addGroundOrder(param, function(response) {
      $scope.isSubmit = false;
      sendOrderInfo(response);
      addRefreshPageByID(($rootScope[switchType[2]].id));
      // closeSubView();
      // showErrorInfo('下单成功');
      $rootScope.fetch('orderManagement/OMPickUp/detail?id='+response,response);
      $scope.searchTeamtourPlan();
    });
  };

  $scope.editProductInfo = function() {
    $rootScope[position[2]].scopeInfo.isProductEditMode = true;
    $scope.productInfo = {
      ProductTitle: $rootScope[position[2]].OrderInfos.ProductTitle,
      StartTimeDate: new Date($rootScope[position[2]].OrderInfos.TeamStartTime.substring(0, 4), parseInt($rootScope[position[2]].OrderInfos.TeamStartTime.substring(5, 7)) - 1, $rootScope[position[2]].OrderInfos.TeamStartTime.substring(8, 10)),
      EndTimeDate: new Date($rootScope[position[2]].OrderInfos.TeamEndTime.substring(0, 4), parseInt($rootScope[position[2]].OrderInfos.TeamEndTime.substring(5, 7)) - 1, $rootScope[position[2]].OrderInfos.TeamEndTime.substring(8, 10))
    };
  };

  $scope.saveProductInfo = function() {
    updateGroundOrderProductInfo({
        OrderId: $rootScope[position[2]].OrderInfos._id,
        productTitle: $scope.productInfo.ProductTitle,
        TeamStartTime: $filter('date')($scope.productInfo.StartTimeDate, 'yyyy-MM-dd'),
        TeamEndTime: $filter('date')($scope.productInfo.EndTimeDate, 'yyyy-MM-dd')
      },
      function() {
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $rootScope[position[2]].scopeInfo.isProductEditMode = false;
        $rootScope[position[2]].OrderInfos.TeamStartTime = $filter('date')($scope.productInfo.StartTimeDate, 'yyyy-MM-dd');
        $rootScope[position[2]].OrderInfos.TeamEndTime = $filter('date')($scope.productInfo.EndTimeDate, 'yyyy-MM-dd');
        $rootScope[position[2]].OrderInfos.ProductTitle = $scope.productInfo.ProductTitle;
      });
  };

  $scope.editCustomerInfo = function() {
    $rootScope[position[2]].scopeInfo.isCustomerEditMode = true;
    $rootScope[position[2]].scopeInfo.customerInfo = {
      CustomerName: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerName,
      GenderTypeID: $rootScope[position[2]].OrderInfos.CustomerEnlarge.GenderTypeID,
      CustomerMobile: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerMobile,
      CustomerFax: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerFax
    };
  };

  $scope.saveCustomerInfo = function() {
    modifyOneTeamCustomer({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      CustomerName: $rootScope[position[2]].scopeInfo.customerInfo.CustomerName,
      CustomerMobile: $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile,
      sCustomerFax: $rootScope[position[2]].scopeInfo.customerInfo.CustomerFax,
      GenderTypeID: $rootScope[position[2]].scopeInfo.customerInfo.GenderTypeID,
   /*   CertificatesTypeID: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CertificatesType.ForeignKeyID,
      TouristDocumentNumber: $rootScope[position[2]].OrderInfos.CustomerEnlarge.TouristDocumentNumber,
      CustomerEmail: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerEMail,
      CustomerCountryID: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Country?$rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Country.ForeignKeyID:'',
      CustomerProvinceID: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Province?$rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Province.ForeignKeyID:'',
      CustomerCityID: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.City?$rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.City.ForeignKeyID:'',
      CustomerAreaID: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Area?$rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Area.ForeignKeyID:'',
      CustomerStreetID: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Street?$rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.Street.ForeignKeyID:'',
      CustomerPositionDetail: $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerLocation.CustomerPositionDetail,
      BodyStateNotes: "",
      EmergencyContactNotes: ""*/
      CertificatesTypeID: "000000000000000000000001",
      TouristDocumentNumber: "330227198507295256",
      CustomerEmail: "blackmeridian@126.com",
      CustomerCountryID:  "000000000000000000000000",
      CustomerProvinceID:  "000000000000000000000000",
      CustomerCityID:  "000000000000000000000000",
      CustomerAreaID:  "000000000000000000000000",
      CustomerStreetID: "000000000000000000000000",
      CustomerPositionDetail: "GoGoGo",
      BodyStateNotes: "",
      EmergencyContactNotes:""
    }, function() {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $rootScope[position[2]].scopeInfo.isCustomerEditMode = false;
      $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerName = $rootScope[position[2]].scopeInfo.customerInfo.CustomerName;
      $rootScope[position[2]].OrderInfos.CustomerEnlarge.GenderTypeID = $rootScope[position[2]].scopeInfo.customerInfo.GenderTypeID;
      $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerMobile = $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile;
      $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerFax = $rootScope[position[2]].scopeInfo.customerInfo.CustomerFax;
    });
  };

  $scope.editSaleMan = function() {
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = true;
    $rootScope[position[2]].scopeInfo.saleMan = {
      id: $rootScope[position[2]].OrderInfos.SalesmanID,
      name: $rootScope[position[2]].OrderInfos.SalesmanName,
      detail: {}
    };
  };

  $scope.saveSaleManInfo = function() {
    $scope.isSubmit = true;
    var detail = $rootScope[position[2]].scopeInfo.saleMan.detail;
    var saleManID = detail._id ? detail._id.$id : '';
    var saleManName = detail._id ? detail.FullName : '';
    modifyAirTicekSalesman($rootScope[position[2]].OrderInfos._id, saleManID, saleManName, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].scopeInfo.isSaleManEditMode = false;
      $rootScope[position[2]].OrderInfos.SalesmanID = saleManID;
      $rootScope[position[2]].OrderInfos.SalesmanName = saleManName;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editCompany = function() {
    $rootScope[position[2]].scopeInfo.isCompanyEditMode = true;
    $rootScope[position[2]].scopeInfo.ReceptionCompany = {
      detail: {},
      id: $rootScope[position[2]].OrderInfos.OtherEnlarge.ReceptionCompany ? $rootScope[position[2]].OrderInfos.OtherEnlarge.ReceptionCompany.ForeignKeyID : ''
    };

  };

  $scope.saveCompany = function() {
    updateGroundOrderReceptionCompany($rootScope[position[2]].OrderInfos._id, $rootScope[position[2]].scopeInfo.ReceptionCompany.detail.ID, function() {
      $rootScope[position[2]].OrderInfos.OtherEnlarge.ReceptionCompany = {
        CompanyName: $rootScope[position[2]].scopeInfo.ReceptionCompany.detail.Name,
        ForeignKeyID: $rootScope[position[2]].scopeInfo.ReceptionCompany.detail.ID
      };
      $rootScope[position[2]].scopeInfo.isCompanyEditMode = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editPrice = function() {
    $rootScope[position[2]].scopeInfo.isPriceEditMode = true;
    $rootScope[position[2]].scopeInfo.TotalFinalPrice = $rootScope[position[2]].OrderInfos.TotalFinalPrice;
  };

  $scope.savePrice = function() {
    modifyAirTicekPrice($rootScope[position[2]].OrderInfos._id, $rootScope[position[2]].scopeInfo.TotalFinalPrice, '', function() {
      $rootScope[position[2]].scopeInfo.isPriceEditMode = false;
      $rootScope[position[2]].OrderInfos.TotalFinalPrice = $rootScope[position[2]].scopeInfo.TotalFinalPrice;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editOrderNote = function() {
    $rootScope[position[2]].scopeInfo.editNote = true;
    $scope.isSubmit = true;
    if (!$rootScope[position[2]].editNote) {
      $rootScope[position[2]].editNote = {
        OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
      };
      $scope.isSubmit = false;
    }
  };

  $scope.saveOrderNote = function() {
    $scope.isSubmit = true;
    modifyAirTicekOrderNote($rootScope[position[2]].OrderInfos._id, $rootScope[position[2]].editNote.OrderNotes, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].OrderInfos.OrderNotes = $rootScope[position[2]].editNote.OrderNotes;
      $rootScope[position[2]].scopeInfo.editNote = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.addTourist = function(item) {
    if (item) {
      item.TouristBirthdayDate = new Date(item.TouristBirthday.substring(0, 4), parseInt(item.TouristBirthday.substring(5, 7)) - 1, item.TouristBirthday.substring(8, 10));
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
    } else {
      $rootScope[position[2]].addTouristInfo = {
        CertificatesTypeID: '000000000000000000000001',
        GenderTypeID: 1,
        TouristTypeID: 2
      };
    }
  };

  $scope.delTourist = function(item) {
    removeOrderTouristByTouristID(item.ForeignKeyID, function() {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $rootScope[position[2]].info = "删除成功";
      var index = _.findIndex($rootScope[position[2]].OrderTourists, {
        ForeignKeyID: item.ForeignKeyID
      });
      $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, $rootScope[position[2]].OrderTourists[index]);
    });
  };

  $scope.quitTeam = function(member,ExitTeamNotes) {
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify([member._id]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function(){
      $scope.isLoading = true;
    });
  };

  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].OrderTourists.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member._id);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $scope.status.quitTeamOpen = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function(){
      $scope.isLoading = true;
    });
  };

  $scope.saveTourist = function() {
    $scope.isSubmit = true;
    var param = {
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      IsOccupying: true,
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthdayDate, 'yyyy-MM-dd'),
      GenderTypeName: $rootScope[position[2]].addTouristInfo.GenderTypeID == 1 ? '男士' : '女士',
      TouristTypeName: $filter('showObjValueFormArray')($rootScope[position[2]].addTouristInfo.TouristTypeID, $scope.TouristTypes, 'Value', 'Text')
    };
    if ($rootScope[position[2]].addTouristInfo._id) {
      param.TouristID = $rootScope[position[2]].addTouristInfo._id;
    }
    saveOrderTouristsToReception(param, function(ID) {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      if ($rootScope[position[2]].addTouristInfo._id) {
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          _id: $rootScope[position[2]].addTouristInfo._id
        });
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
          $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      } else {
        param._id = ID;
        param.TouristStatus='正常';
        $rootScope[position[2]].OrderTourists.push(param);
          $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      }
      $scope.status.addTourist = false;
      $scope.isSubmit = false;
    });
  };

  $scope.getEnumeration = function() {
    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });
    getCertificatesTypes(function(Certificates) {
      $scope.Certificates = Certificates;
    });
  };

  $scope.getEnumeration();

  $scope.closeAllAddTouristPop = function() {
    $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };



  $scope.batchDelTourist = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      if (item.isSelected) {
        $scope.delTourist(item);
      }
    });
  };

  $scope.clickSelectAllTourist = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.isSelected = $rootScope[position[2]].isSelectAllTourist;
    });
  };

  $scope.$watch('detailData.peopleCount', function(value) {
    if (value !== undefined) {
      var removeIndexs = [];
      var adultCount = 0;
      var childCount = 0;
      var babyCount = 0;
      if ($rootScope[position[2]].OrderTourists) {
        $rootScope[position[2]].OrderTourists.forEach(function(item) {
          if (item.TouristType.id == 1 || item.TouristType.id == 2) {
            if (adultCount >= value.AdultCount) {
              removeIndexs.push(item.index);
            }
            adultCount++;
          } else if (item.TouristType.id == 3) {
            if (childCount >= value.ChildCount) {
              removeIndexs.push(item.index);
            }
            childCount++;
          } else if (item.TouristType.id == 4) {
            if (babyCount >= value.BabyCount) {
              removeIndexs.push(item.index);
            }
            babyCount++;
          }
        });
      }
      //删除多余的客户
      removeIndexs.forEach(function(item) {
        var removeCustomerIndex = _.findIndex($rootScope[position[2]].OrderTourists, {
          index: item
        });
        $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, $rootScope[position[2]].OrderTourists[removeCustomerIndex]);
      });
      var customer = {
        index: 0,
        TouristType: {
          id: 1,
          value: '老人'
        },
        TouristName: '',
        TouristMobile: '',
        GenderTypeID: 1,
        Certificate: {
          id: 1,
          value: '身份证'
        },
        TouristBirthday: '1949-10-01',
        IsOccupying: true
      };
      //添加不够的客户
      for (var i = 0; i < value.AdultCount - adultCount; i++) {
        $rootScope[position[2]].OrderTourists.push(angular.copy(customer));
      }
      for (var x = 0; x < value.ChildCount - childCount; x++) {
        customer.TouristType = {
          id: 3,
          value: '小孩'
        };
        $rootScope[position[2]].OrderTourists.push(angular.copy(customer));
      }
      for (var y = 0; y < value.BabyCount - babyCount; y++) {
        customer.TouristType = {
          id: 4,
          value: '婴儿'
        };
        customer.IsOccupying = false;
        $rootScope[position[2]].OrderTourists.push(angular.copy(customer));
      }
      //排序
      var newIndex = 1;
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        item.index = newIndex;
        newIndex++;
      });

      $rootScope[position[2]].totalCount = parseInt($rootScope[position[2]].peopleCount.AdultCount) + parseInt($rootScope[position[2]].peopleCount.BabyCount) + parseInt($rootScope[position[2]].peopleCount.ChildCount);
    }
  }, true);

  $scope.getInsurancePrice = function() {
    if ($rootScope[position[2]].StartTimeDate && $rootScope[position[2]].EndTimeDate) {
      var timeDiff = Math.abs($rootScope[position[2]].EndTimeDate - $rootScope[position[2]].StartTimeDate);
      $rootScope[position[2]].days = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;
      if ($rootScope[position[2]].days < 1) {
        $rootScope[position[2]].info = "请选择正确的出团时间";
        return;
      }
      getProductInsurancesByProductIDWithNone({
        ProductTypeID: "000000000000000000000009",
        ProductID: '000000000000000000000000',
        Days: $rootScope[position[2]].days,
      }, function(response) {
        var selectInsurance = {};
        $rootScope[position[2]].insurance.forEach(function(item) {
          if (item.isSelected) {
            selectInsurance[item.ProductInsuranceNo] = true;
          }
        });
        $rootScope[position[2]].insurance = response;
        $rootScope[position[2]].insurance.forEach(function(item) {
          if (selectInsurance[item.ProductInsuranceNo]) {
            item.isSelected = true;
          }
        });
      });
    }
  };

});
app
  .controller("OMFreeTourDetailController", function($scope, $rootScope, _, $filter, addRefreshPageByID,
    Pagination, quitTeamFromOrder, modifyOneTeamCustomer, getCertificatesTypes, removeOrderTouristByTouristID,
    getEnumeration, saveFreeTourTourist, saveFreeTourSaleMan, saveFreeTourOrderNotes, insertOrderPriceRecord,
    saveOrderProject, showWarningBox, orderTransferCustomer, delOrderPriceRecord, sendOrderInfo) {
    var pageSize = 6;

    $scope.genders = ['男', '女', '保密'];
    $scope.showMoreFunc = false;
    $scope.isShowPlanPriceDetail = false;
    $scope.isSaleManEditMode = false;
    $scope.isOrderNoteEditMode = false;

    $scope.feeCensus = 0;

    $scope.saleMan = {};
    $scope.sendNumber = {};
    $scope.delayTime = {};
    $scope.orderNoteTmp = {};
    $scope.orderMemberSearch = {
      PageIndex: 1,
      PageSize: pageSize
    };
    $scope.popConf = {
      import: {
        arrow: {
          left: 180,
          useArrow: true
        },
        popconf: {
          left: 90,
          position: 'bottom'
        }
      },
      policy: {
        arrow: {
          left: 130,
          useArrow: true
        },
        popconf: {
          left: 0,
          position: 'bottom'
        }
      },
      insurance: {
        arrow: {
          left: 510,
          useArrow: true
        },
        popconf: {
          left: 0,
          position: 'bottom'
        }
      },
      finance: {
        arrow: {
          left: 580,
          useArrow: true
        },
        popconf: {
          left: 0,
          position: 'bottom'
        }
      },
      record: {
        arrow: {
          left: 150,
          useArrow: true
        },
        popconf: {
          left: 220,
          position: 'bottom'
        }
      },
      sendMessage: {
        arrow: {
          left: 167,
          useArrow: true
        },
        popconf: {
          left: 50,
          position: 'bottom'
        }
      },
      delay: {
        arrow: {
          left: 147,
          useArrow: true
        },
        popconf: {
          left: 365,
          position: 'bottom'
        }
      },
      changeTime: {
        arrow: {
          left: 147,
          useArrow: true
        },
        popconf: {
          left: 50,
          position: 'bottom'
        }
      },
      selectSaleman: {
        arrow: {
          left: 147,
          useArrow: true
        },
        popconf: {
          left: 50,
          position: 'bottom'
        }
      },
      precollar: {
        arrow: {
          left: 710,
          useArrow: false
        },
        popconf: {
          left: -635,
          position: 'bottom'
        }
      },
      contract: {
        arrow: {
          left: 260,
          useArrow: true
        },
        popconf: {
          left: 0,
          position: 'bottom'
        }
      },
      distribution: {
        arrow: {
          left: 205,
          useArrow: true
        },
        popconf: {
          left: 450,
          position: 'bottom'
        }
      },
      transfer: {
        arrow: {
          left: 170,
          useArrow: true
        },
        popconf: {
          left: 270,
          position: 'bottom'
        }
      },
      transferRecord: {
        arrow: {
          left: 485,
          useArrow: true
        },
        popconf: {
          left: -405,
          position: 'bottom'
        }
      }
    };
    $scope.fee = {
      insuranceType: []
    };
    $scope.agreeContract = [{
      id: true,
      value: '同意'
    }, {
      id: false,
      value: '不同意'
    }];
    $scope.status = {};

    (function activate() {
      /*
      $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(0, pageSize);
      $rootScope[position[2]].Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, 1, pageSize);
      $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(0, pageSize);
      $rootScope[position[2]].Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, 1, pageSize);
      */

      getEnumeration('ETouristTypes', function(response) {
        $scope.TouristTypes = response;
      });

      getCertificatesTypes(function(response) {
        $scope.Certificates = response;
      });

      /*
      $rootScope[position[2]].TouristInsurances.forEach(function(insurance) {
        var ins = _.find($scope.fee.insuranceType, function(ins) {
          return insurance.InsurancesName == ins.name;
        });
        if (ins === undefined) {
          $scope.fee.insuranceType.push({
            count: 1,
            name: insurance.InsurancesName
          });
        } else {
          ins.count++;
        }
      });
      $scope.sendNumber.tel = $rootScope[position[2]].OrderInfos.CustomerEnlarge.CustomerMobile;
      $scope.delayTime.time = $filter('limitTo')($rootScope[position[2]].OrderInfos.OrderExpireTime, 19).replace('T', ' ');
      */

      /*
      if (angular.isArray($rootScope[position[2]].OrderInfos.PriceRecord))
        $rootScope[position[2]].OrderInfos.PriceRecord.forEach(function(fee) {
          if (fee.AdjustmentType)
            $scope.feeCensus += fee.Price;
          else
            $scope.feeCensus -= fee.Price;
        });
        */
    })();

    $scope.chooseCustomer = function(customer) {
      orderTransferCustomer({
        OrderId: $rootScope[position[2]].OrderInfos._id,
        OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
        NewCustomerId: customer._id.$id
      }, function(response) {
        $scope.showChangeCustomer = false;
        addRefreshPageByID(($rootScope[switchType[2]].id));
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    };

    $scope.editProductInfo = function() {
      $scope.productEdit = true;
      $rootScope[position[2]].OrderInfos.FreeCustomizedEnlarge.Additionals.forEach(function(item, index) {
        $rootScope[position[2]].Additionals[index].AdultNumber = item.AdultNumber;
        $rootScope[position[2]].Additionals[index].AdditionalPrice = item.AdditionalPrice;
      });

      var project = null;

      $rootScope[position[2]].selectedHotelProject = 0;
      project = _.find($rootScope[position[2]].hotelProject, function(item) {
        if (item.baseid.$id == $rootScope[position[2]].OrderInfos.FreeCustomizedEnlarge.HotelSchemes.ForeignKeyID) {
          return true;
        } else {
          $rootScope[position[2]].selectedHotelProject++;
          return false;
        }
      });
      if (project) {
        $rootScope[position[2]].OrderInfos.FreeCustomizedEnlarge.HotelSchemes.OrderPlanHotels.forEach(function(obj) {
          var room = null;

          for (var i = 0; i < project.Hotels.length; i++) {
            for (var j = 0; j < project.Hotels[i].HotelRooms.length; j++) {
              if (project.Hotels[i].HotelRooms[j].ForeignKeyID.$id === obj.Hotel.HotelRoom.ForeignKeyID)
                room = project.Hotels[i].HotelRooms[j];
              break;
            }

            if (room) break;
          }

          if(room) room.number = obj.BookingNumber;
        });
      }

      $rootScope[position[2]].selectedTrafficProject = 0;
      project = _.find($rootScope[position[2]].trafficProject, function(item) {
        if (item.baseid.$id == $rootScope[position[2]].OrderInfos.FreeCustomizedEnlarge.TrafficSchemes.ForeignKeyID) {
          return true;
        } else {
          $rootScope[position[2]].selectedTrafficProject++;
          return false;
        }
      });

      if(project){
        $rootScope[position[2]].OrderInfos.FreeCustomizedEnlarge.TrafficSchemes.OrderPlanTraffics.forEach(function(obj) {
          var traffic = _.find(project.Traffics, function(item) {
            if (item.Traffic.ForeignKeyID.$id == obj.Traffic.ForeignKeyID) return true;
          });

          if(traffic) traffic.isSelected = true;
        });        
      }
    };

    $scope.saveProductProject = function() {
      var hotelSchemes = [],
        trafficSchemes = [],
        additionals = [],
        project = null;

      project = $rootScope[position[2]].hotelProject[$rootScope[position[2]].selectedHotelProject];
      if (project)
        project.Hotels.forEach(function(hotel) {
          hotel.HotelRooms.forEach(function(room) {
            if (!room.isSelected) return;
            hotelSchemes.push({
              FAGuid: project.baseid.$id,
              HotelGuid: hotel.ForeignKeyID.$id,
              RoomGuid: room.ForeignKeyID.$id,
              StartTime: $filter('date')(hotel.DepartureTime.sec * 1000, 'yyyy-MM-dd'),
              EndTime: $filter('date')(hotel.DepartureTime.sec * 1000 + 24 * 3600 * 1000 * hotel.Days, 'yyyy-MM-dd'),
              BookingNumber: room.number,
              RoomPersonNumber: room.LiveNumber,
              RoomPrice: room.SellingPrice
            });
          });
        });

      var adult = child = baby = 0;

      $rootScope[position[2]].OrderTourists.forEach(function(tourist) {
        if (tourist.TouristStatus == '退保') return;

        switch (+tourist.TouristTypeID) {
          case 1:
          case 2:
            adult++;
            break;
          case 3:
            child++;
            break;
          case 4:
            baby++;
            break;
        }
      });

      project = $rootScope[position[2]].trafficProject[$rootScope[position[2]].selectedTrafficProject];
      if (project)
        project.Traffics.forEach(function(traffic) {
          if (traffic.isSelected) {
            trafficSchemes.push({
              FAGuid: project.baseid.$id,
              TrafficGuid: traffic.ForeignKeyID.$id,
              AdultNumber: adult,
              ChildNumber: child,
              BabyNumber: baby
            });
          }
        });

      $rootScope[position[2]].Additionals.forEach(function(item) {
        additionals.push({
          ProductGuid: item.ForeignKeyID.$id,
          FAGuid: 1,
          AdultNumber: item.AdultNumber,
          ChildNumber: 0,
          ProductType: item.ProductType.ForeignKeyID.$id
        });
      });

      var data = {
        PlanId: $rootScope[position[2]].OrderInfos.ProductPlanID,
        ProductId: $rootScope[position[2]].OrderInfos.ProductID,
        HotelSchemes: hotelSchemes,
        TrafficSchemes: trafficSchemes,
        Additionals: additionals
      };

      saveOrderProject({
        OrderID: $rootScope[position[2]].OrderInfos._id,
        RequestData: JSON.stringify(data)
      }, function(response) {
        addRefreshPageByID(($rootScope[switchType[2]].id));
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
        $scope.productEdit = false;
      });
    };

    $scope.$watch('detailData.hotelProject', function(projects) {
      if (!projects) return;
      projects.forEach(function(obj) {
        obj.totalPrice = 0;
        obj.Hotels.forEach(function(hotel) {
          hotel.HotelRooms.forEach(function(room) {
            obj.totalPrice += (room.number || 0) * room.SellingPrice;
          });
        });
      });
    }, true);

    $scope.$watch('detailData.trafficProject', function(projects) {
      if (!projects) return;

      projects.forEach(function(project) {
        project.totalAdultPrice = 0;
        project.totalChildPrice = 0;

        project.Traffics.forEach(function(traffic) {
          traffic.adultNumber = $rootScope[position[2]].OrderInfos.AdultNumber + $rootScope[position[2]].OrderInfos.ElderNumber;
          traffic.childNumber = $rootScope[position[2]].OrderInfos.ChildNumber;
          traffic.babyNumber = $rootScope[position[2]].OrderInfos.BabyNumber;

          if (traffic.isSelected) {
            project.totalAdultPrice += traffic.adultNumber * (traffic.AdultSellingPrice + traffic.AdultMachineBuildingFee);
            project.totalChildPrice += traffic.childNumber * (traffic.ChildSellingPrice + traffic.ChildMachineBuildingFee);
          }
        });
      });
    }, true);

    $scope.orderMemberPageChange = function(page) {
      if (!page) {
        page = 1;
      }
      var start = (page - 1) * pageSize;
      $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
      $rootScope[position[2]].Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
    };

    $scope.touristInsPageChange = function(page) {
      if (!page) {
        page = 1;
      }
      var start = (page - 1) * pageSize;
      $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
      $rootScope[position[2]].Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
    };

    $scope.editContractInfo = function() {
      var data = $rootScope[position[2]].OrderInfos.CustomerEnlarge;

      $scope.customerInfo = {
        CustomerName: data.CustomerName,
        CustomerMobile: data.CustomerMobile,
        CustomerEMail: data.CustomerEMail,
        CertificatesTypeID: data.CertificatesType.ForeignKeyID,
        TouristDocumentNumber: data.TouristDocumentNumber,
        CustomerPositionDetail: data.CustomerLocation.CustomerPositionDetail,
        BodyStateNotes: data.BodyStateNotes,
        EmergencyContactNotes: $rootScope[position[2]].OrderInfos.EmergencyContactNotes,
        address: {
          country: data.CustomerLocation.Country && data.CustomerLocation.Country.ForeignKeyID || '',
          region: data.CustomerLocation.Province && data.CustomerLocation.Province.ForeignKeyID || '',
          city: data.CustomerLocation.City && data.CustomerLocation.City.ForeignKeyID || ''
        }
      };

      $scope.isContractEditMode = true;
    };

    $scope.saveContractInfo = function() {
      var data = angular.extend({}, $scope.customerInfo);
      data.OrderID = $rootScope[position[2]].OrderInfos._id;
      data.CustomerCountryID = data.address.country;
      data.CustomerProvinceID = data.address.region;
      data.CustomerCityID = data.address.city;
      delete data.address;

      modifyOneTeamCustomer(data, function() {
        $rootScope[position[2]].info = "修改成功";
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        var customerEnlarge = $rootScope[position[2]].OrderInfos.CustomerEnlarge;
        customerEnlarge.CustomerName = data.CustomerName;
        customerEnlarge.CustomerMobile = data.CustomerMobile;
        customerEnlarge.TouristDocumentNumber = data.TouristDocumentNumber;
        customerEnlarge.CustomerEMail = data.CustomerEMail;
        customerEnlarge.BodyStateNotes = data.BodyStateNotes;
        $rootScope[position[2]].OrderInfos.EmergencyContactNotes = data.EmergencyContactNotes;


        var CertificatesType = _.find($scope.Certificates, function(obj) {
          if (obj._id.$id === data.CertificatesTypeID)
            return true;
        });

        customerEnlarge.CertificatesType = {
          CertificatesTypeName: CertificatesType ? CertificatesType.CertificatesTypeName : "",
          ForeignKeyID: CertificatesType ? CertificatesType._id.$id : ""
        };

        var address = $scope.customerInfo.address;

        customerEnlarge.CustomerLocation.Country = {
          AddressName: address.countryName || '',
          ForeignKeyID: address.country || ''
        };

        customerEnlarge.CustomerLocation.Province = {
          AddressName: address.regionName || '',
          ForeignKeyID: address.region || ''
        };

        customerEnlarge.CustomerLocation.City = {
          AddressName: address.cityName || '',
          ForeignKeyID: address.city || ''
        };
        customerEnlarge.CustomerLocation.CustomerPositionDetail = $scope.customerInfo.CustomerPositionDetail;

        customerEnlarge.CustomerLocation.CustomerAddress = (address.countryName || '') + (address.regionName || '') + (address.cityName || '') + ' ' + ($scope.customerInfo.CustomerPositionDetail || '');

        $scope.isContractEditMode = false;
      });
    };

    $scope.checkAllMember = function() {
      $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(member) {
        if (member.TouristStatus != '正常') return;
        member.isSelected = !!$rootScope[position[2]].scopeInfo.memberCheckAll;
      });
    };

    $scope.addTourist = function() {
      $rootScope[position[2]].addTouristInfo = {
        TouristTypeID: $scope.TouristTypes[0].Value,
        TouristName: '游客'
      };
    };

    $scope.quitTeam = function(member, ExitTeamNotes) {
      $scope.isLoading = true;
      quitTeamFromOrder({
        "OrderID": $rootScope[position[2]].OrderInfos._id,
        "Tourists": JSON.stringify([member._id]),
        "ExitTeamNotes": ExitTeamNotes
      }, function(response) {
        $scope.isLoading = false;
        $rootScope[position[2]].info = "操作成功";
        addRefreshPageByID(($rootScope[switchType[2]].id));
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      }, function(response){
        $scope.isLoading = false;
      });
    };

    $scope.quitTeamMulti = function(ExitTeamNotes) {
      var targetId = [];
      $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(member, key) {
        if (member.isSelected) {
          targetId.push(member._id);
        }
      });
      if (targetId.length <= 0) {
        $rootScope[position[2]].info = '未选择退团人员';
        return;
      }
      $scope.isLoading = true;
      quitTeamFromOrder({
        "OrderID": $rootScope[position[2]].OrderInfos._id,
        "Tourists": JSON.stringify(targetId),
        "ExitTeamNotes": ExitTeamNotes
      }, function(response) {
        $scope.isLoading = false;
        $scope.status.quitTeamOpen = false;
        addRefreshPageByID(($rootScope[switchType[2]].id));
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      }, function(response){
        $scope.isLoading = false;
      });
    };

    $scope.editTourist = function(member) {
      if (member.editTourist) {
        member.editTourist = false;
      } else {
        member.editTourist = true;
      }

      $rootScope[position[2]].addTouristInfo = {
        TouristID: member._id,
        TouristTypeID: member.TouristTypeID,
        GenderTypeID: member.GenderTypeID,
        TouristName: member.TouristName,
        TouristMobile: member.TouristMobile,
        TouristBirthdayDate: member.TouristBirthday,
        CertificatesTypeID: member.CertificatesType.ForeignKeyID,
        TouristDocumentNumber: member.TouristDocumentNumber
      };
    };

    $scope.openDatePicker = function(event, type) {
      $scope.status[type] = true;
    };

    $scope.saveTourist = function() {
      var data = angular.extend({
        OrderID: $rootScope[position[2]].OrderInfos._id,
        TouristID: '',
        IsOccupying: true,
        TouristName: '游客',
      }, $rootScope[position[2]].addTouristInfo);

      data.TouristBirthdayDate = $filter('date')(data.TouristBirthdayDate, 'yyyy-MM-dd');
      data.TouristBirthday = data.TouristBirthdayDate;

      if (data.CertificatesTypeID) {
        data.CertificatesTypeName = _.find($scope.Certificates, function(item) {
          if (item._id.$id == data.CertificatesTypeID) return true;
        }).CertificatesTypeName;
      }

      delete data.TouristBirthdayDate;

      var page = $rootScope[position[2]].Pagination.orderMemberPage;
      var start = (page.currentPage - 1) * page.limit;

      $scope.isSubmit = true;

      saveFreeTourTourist({
        Tourist: JSON.stringify(data)
      }, function(response) {
        addRefreshPageByID($rootScope[switchType[2]].id);
        $scope.status.addTourist = false;
        $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.isSubmit = false;
        return;

        $rootScope[position[2]].info = "保存成功";

        var tourist = {
          _id: response,
          TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
          TouristBirthday: $rootScope[position[2]].addTouristInfo.TouristBirthdayDate,
          TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
          TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
          TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
          IsOccupying: true,
          CertificatesType: {
            ForeignKeyID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
            CertificatesTypeName: data.CertificatesTypeName
          },
          TouristStatus: '正常',
          GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID
        };

        tourist.GenderTypeName = $scope.genders[tourist.GenderTypeID - 1];

        tourist.TouristTypeName = _.find($scope.TouristTypes, function(item) {
          if (item.Value === $rootScope[position[2]].addTouristInfo.TouristTypeID)
            return true;
        }).Text;

        var index = _.findIndex($rootScope[position[2]].OrderTourists, function(item) {
          if (item._id == tourist._id) return true;
        });

        if (index != -1)
          $rootScope[position[2]].OrderTourists[index] = tourist;
        else
          $rootScope[position[2]].OrderTourists.push(tourist);

        $rootScope[position[2]].OrderInfos.AdultNumber = 0;
        $rootScope[position[2]].OrderInfos.BabyNumber = 0;
        $rootScope[position[2]].OrderInfos.ChildNumber = 0;
        $rootScope[position[2]].OrderInfos.ElderNumber = 0;
        $rootScope[position[2]].OrderInfos.TotalNumber = 0;

        $rootScope[position[2]].OrderTourists.forEach(function(item) {
          $rootScope[position[2]].OrderInfos.TotalNumber++;
          switch (item.TouristTypeName) {
            case '成人':
              $rootScope[position[2]].OrderInfos.AdultNumber++;
              break;
            case '老人':
              $rootScope[position[2]].OrderInfos.ElderNumber++;
              break;
            case '小孩':
              $rootScope[position[2]].OrderInfos.ChildNumber++;
              break;
            case '婴儿':
              $rootScope[position[2]].OrderInfos.BabyNumber++;
              break;
          }
        });

        $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
        $rootScope[position[2]].Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page.currentPage, pageSize);

      }, function() {
        $scope.isSubmit = false;
      });
    };

    $scope.closeAllAddTouristPop = function() {
      if ($scope.status.addTourist)
        $scope.status.addTourist = false;

      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        item.editTourist = false;
      });
    };

    $scope.editSaleMan = function() {
      $scope.isSaleManEditMode = true;
      $scope.saleMan = {
        FullName: $rootScope[position[2]].OrderInfos.SalesmanName,
        _id: {
          $id: $rootScope[position[2]].OrderInfos.SalesmanID
        }
      };
    };

    $scope.saveSaleMan = function() {
      $scope.saveManInfo = true;
      $rootScope.isloadList = true;
      $rootScope.showProcessBar = true;
      saveFreeTourSaleMan({
        OrderID: $rootScope[position[2]].OrderInfos._id,
        SalesmanID: $scope.saleMan._id.$id,
        SalesmanName: $scope.saleMan.FullName
      }, function() {
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.saveManInfo = false;
        $rootScope.isloadList = false;
        $rootScope.showProcessBar = false;
        $rootScope[position[2]].info = "业务员保存成功";
        $rootScope[position[2]].OrderInfos.SalesmanName = $scope.saleMan.FullName;
        $rootScope[position[2]].OrderInfos.SalesmanID = $scope.saleMan._id.$id;
        $scope.isSaleManEditMode = false;
      });
    };

    $scope.editOrderNotes = function() {
      $scope.orderNoteTmp = {
        ContractPayTypeAndTime: $rootScope[position[2]].OrderInfos.ContractEnlarge && $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime || '',
        OtherAppointment: $rootScope[position[2]].OrderInfos.ContractEnlarge && $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment || '',
        OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
      };
      $scope.isOrderNoteEditMode = true;
    };

    $scope.saveOrderNotes = function() {
      console.log($scope.orderNoteTmp);
      var data = angular.extend({}, $scope.orderNoteTmp);
      data.OrderID = $rootScope[position[2]].OrderInfos._id;
      $rootScope.isloadList = true;
      $rootScope.showProcessBar = true;

      saveFreeTourOrderNotes(data, function() {
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $rootScope[position[2]].info = '订单备注信息保存成功';
        $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime = data.ContractPayTypeAndTime;
        $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment = data.OtherAppointment;
        $rootScope[position[2]].OrderInfos.OrderNotes = data.OrderNotes;
        $scope.isOrderNoteEditMode = false;
        $rootScope.isloadList = false;
        $rootScope.showProcessBar = false;
      });
    };


    /**
     * 管理费用
     * @param  {Boolean} isAdd [description]
     * @return {[type]}        [description]
     */
    $scope.handleFee = function(isAdd) {
      //清空一下数据
      $rootScope[position[2]].scopeInfo.isHandleFee = {};
      $rootScope[position[2]].scopeInfo.feeInfo = {};
      if (isAdd) {
        $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
        $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
      } else {
        $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
        $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
      }
    };

    /**
     * 保存管理费用信息
     * @param  {Boolean} isAdd [description]
     * @return {[type]}        [description]
     */
    $scope.saveHandleFeeInfo = function(isAdd) {
      var param = {};
      if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
        param = {
          OrderID: $rootScope[position[2]].OrderInfos._id,
          Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
          BusinessMainTypeID: 2,
          PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
          BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
          BusinessTypeID: 1
        };
        if (!param.BusinessTypeName) {
          $rootScope[position[2]].info = '请填写名称';
          return;
        }
        if (!param.Price) {
          $rootScope[position[2]].info = '请填写金额';
          return;
        }
      } else {
        param = {
          OrderID: $rootScope[position[2]].OrderInfos._id,
          Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
          BusinessMainTypeID: 3,
          PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
          BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
          BusinessTypeID: 2
        };
        if (!param.BusinessTypeName) {
          $rootScope[position[2]].info = '请填写名称';
          return;
        }
        if (!param.Price) {
          $rootScope[position[2]].info = '请填写金额';
          return;
        }
      }

      param.ForeignKeyID = "";

      insertOrderPriceRecord(param, function() {
        addRefreshPageByID(($rootScope[switchType[2]].id));
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
      $scope.cancelHandleFee();
    };

    $scope.cancelHandleFee = function(fee) {
      if (typeof fee == 'object') {
        fee.isEdit = false;
      } else {
        $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
        $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
      }
    };

    $scope.editFee = function(fee) {
      fee.isEdit = !fee.isEdit;
      $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
    };

    $scope.saveEditFeeInfo = function(fee) {
      updateOrderPriceRecord({
        ForeignKeyID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderInfos._id,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
        BusinessMainTypeID: fee.BusinessMainTypeID,
        PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
        Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
      }, function(response) {
        addRefreshPageByID(($rootScope[switchType[2]].id));
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    };

    $scope.deleteSubFee = function(fee) {
      showWarningBox("确定要删除该费用吗", function() {
        delOrderPriceRecord({
          RecordID: fee.ForeignKeyID,
          OrderID: $rootScope[position[2]].OrderInfos._id
        }, function(response) {
          addRefreshPageByID(($rootScope[switchType[2]].id));
          sendOrderInfo($rootScope[position[2]].OrderInfos._id);
          $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
        });
      });
    };
  });app.controller("OMCruiseController", function($scope, $rootScope, OMCruise, $filter, HyDate) {
  $scope.showSeach = false;
  $scope.searchTeamtourPlan = function(type) {
    $rootScope.isloadList = true;
    $rootScope.showProcessBar = true;
    var search = {

    };
    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');
    OMCruise.list(function(response) {
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;

      $rootScope[position[1]].list = response.list;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {
        iPageIndex: 1
      };
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMCruise.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };
});
app.controller("OMDriveTourController", function($scope, $rootScope, OMDriveTour, $filter,
  getCertificatesTypes, getEnumeration, getComboxInsuranceStatus, saveOrderTouristsToCustomized,
  removeOrderTouristByTouristID, saveFreeTourOrderNotes, modifyAirTicekSalesman, modifyOneTeamCustomer,
  addRefreshPageByID, saveOrderTouristsToSelfDriving, insertOrderPriceRecord, delOrderPriceRecord,
  updateSelfDrivingPackageInfo, getDrivingtourPackages, quitTeamFromOrder, showWarningBox, orderTransferCustomer,
  sendOrderInfo) {

  $scope.popConf = {
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 580,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 510,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    record: {
      arrow: {
        left: 150,
        useArrow: true
      },
      popconf: {
        left: 220,
        position: 'bottom'
      }
    },
    precollar: {
      arrow: {
        left: 710,
        useArrow: false
      },
      popconf: {
        left: -635,
        position: 'bottom'
      }
    },
    contract: {
      arrow: {
        left: 260,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    distribution: {
      arrow: {
        left: 205,
        useArrow: true
      },
      popconf: {
        left: 450,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 170,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 485,
        useArrow: true
      },
      popconf: {
        left: -405,
        position: 'bottom'
      }
    }
  };

  (function activate(){
    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });
    getComboxInsuranceStatus(function(orderStatus) {
      $scope.orderStatus = orderStatus;
    });
    getCertificatesTypes(function(certificates) {
      $scope.Certificates = certificates;
    });
  })();

  /**
   * 订单名单翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  var pageSize = 10;
  $scope.orderMemberPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
  };

  /**
   * 订单保险翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };

  $scope.chooseCustomer = function(customer) {
    orderTransferCustomer({
      OrderId: $rootScope[position[2]].OrderInfos._id,
      OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
      NewCustomerId: customer._id.$id
    }, function(response) {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.searchTeamtourPlan = function(type) {
    $scope.isLoading = true;
    var search = {};

    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');

    OMDriveTour.list(function(response) {
      $scope.isLoading = false;
      $rootScope[position[1]].list = response.list;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {iPageIndex: 1 };
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMDriveTour.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };

  /**
   * 编辑联系人
   * @return {[type]}      [description]
   */
  $scope.editContractInfo = function() {
    $rootScope[position[2]].scopeInfo.isContractEditMode = true;
    $rootScope[position[2]].scopeInfo.customerInfo = angular.copy($rootScope[position[2]].OrderInfos.CustomerEnlarge);
    $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes = $rootScope[position[2]].OrderInfos.EmergencyContactNotes;
    $rootScope[position[2]].scopeInfo.customerInfo.address = {
      city: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City.ForeignKeyID : '',
      region: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province.ForeignKeyID : '',
      country: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country.ForeignKeyID : ''
    };
  };

  /**
   * 保存联系人
   * @return {[type]}      [description]
   */
  $scope.saveContractInfo = function() {
    $scope.isSubmit = true;
    modifyOneTeamCustomer({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      CustomerName: $rootScope[position[2]].scopeInfo.customerInfo.CustomerName,
      CustomerMobile: $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile,
      CertificatesTypeID: $rootScope[position[2]].scopeInfo.customerInfo.CertificatesType.ForeignKeyID,
      TouristDocumentNumber: $rootScope[position[2]].scopeInfo.customerInfo.TouristDocumentNumber,
      CustomerEmail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerEMail,
      CustomerCountryID: $rootScope[position[2]].scopeInfo.customerInfo.address.country,
      CustomerProvinceID: $rootScope[position[2]].scopeInfo.customerInfo.address.region,
      CustomerCityID: $rootScope[position[2]].scopeInfo.customerInfo.address.city,
      CustomerAreaID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area.ForeignKeyID : '',
      CustomerStreetID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street.ForeignKeyID : '',
      CustomerPositionDetail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.CustomerPositionDetail,
      BodyStateNotes: $rootScope[position[2]].scopeInfo.customerInfo.BodyStateNotes,
      EmergencyContactNotes: $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes
    }, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].scopeInfo.isContractEditMode = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editSaleMan = function() {
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = true;
    $rootScope[position[2]].scopeInfo.saleMan = {
      id: $rootScope[position[2]].OrderInfos.SalesmanID,
      name: $rootScope[position[2]].OrderInfos.SalesmanName,
      detail: {}
    };
  };

  $scope.saveSaleManInfo = function() {
    $scope.isSubmit = true;
    var detail = $rootScope[position[2]].scopeInfo.saleMan.detail;
    var saleManID = detail._id ? detail._id.$id : '';
    var saleManName = detail._id ? detail.FullName : '';
    modifyAirTicekSalesman($rootScope[position[2]].OrderInfos._id, saleManID, saleManName, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].scopeInfo.isSaleManEditMode = false;
      $rootScope[position[2]].OrderInfos.SalesmanID = saleManID;
      $rootScope[position[2]].OrderInfos.SalesmanName = saleManName;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editOrderNotes = function() {
    $rootScope[position[2]].scopeInfo.orderNoteTmp = {
      ContractPayTypeAndTime: $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime,
      OtherAppointment: $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment,
      OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
    };
    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = true;
  };

  $scope.saveOrderNotes = function() {
    $scope.isSubmit = true;
    saveFreeTourOrderNotes({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime,
      OtherAppointment: $rootScope[position[2]].scopeInfo.orderNoteTmp.OtherAppointment,
      OrderNote: $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes
    }, function() {
      $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime = $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime;
      $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment = $rootScope[position[2]].scopeInfo.orderNoteTmp.OtherAppointment;
      $rootScope[position[2]].OrderInfos.OrderNotes = $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes;
      $rootScope[position[2]].scopeInfo.orderNoteTmp = {};
      $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = false;
      $scope.isSubmit = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.checkAllMember = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      if(item.TouristStatus != '正常') return;
      item.isSelected = $rootScope[position[2]].scopeInfo.memberCheckAll;
    });
  };

  $scope.quitTeam = function(member, ExitTeamNotes) {
    if ($scope.isLoading) return;
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify([member._id]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].OrderTourists.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member._id);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }

    $scope.isLoading = true;

    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $scope.status.quitTeamOpen = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function(response){
      $scope.isLoading = false;
    });
  };


  $scope.showAddTourist = function(item) {
    if (item) {
      item.TouristBirthdayDate = new Date(item.TouristBirthday.substring(0, 4), parseInt(item.TouristBirthday.substring(5, 7)) - 1, item.TouristBirthday.substring(8, 10));
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
      $rootScope[position[2]].addTouristInfo.CertificatesTypeID = $rootScope[position[2]].addTouristInfo.CertificatesType.ForeignKeyID;
    } else {
      $rootScope[position[2]].addTouristInfo = {
        TouristName: '游客',
        CertificatesTypeID: '000000000000000000000001',
        GenderTypeID: 1,
        TouristTypeID: 2
      };
    }
  };

  $scope.saveTourist = function() {
    $scope.isSubmit = true;
    var param = {
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      IsOccupying: true,
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthdayDate, 'yyyy-MM-dd'),
      GenderTypeName: $rootScope[position[2]].addTouristInfo.GenderTypeID == 1 ? '男士' : '女士',
      TouristTypeName: $filter('showObjValueFormArray')($rootScope[position[2]].addTouristInfo.TouristTypeID, $scope.TouristTypes, 'Value', 'Text')
    };
    if ($rootScope[position[2]].addTouristInfo._id) {
      param.TouristID = $rootScope[position[2]].addTouristInfo._id;
    }
    saveOrderTouristsToSelfDriving(param, function(ID) {
      $scope.isSubmit = false;
      $scope.status.addTourist = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      addRefreshPageByID($rootScope[switchType[2]].id);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      return;

      param.CertificatesType = {
        CertificatesTypeName: param.CertificatesTypeName,
        ForeignKeyID: param.CertificatesTypeID
      };
      if ($rootScope[position[2]].addTouristInfo._id) {
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          _id: $rootScope[position[2]].addTouristInfo._id
        });
        param._id = $rootScope[position[2]].addTouristInfo._id;
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
      } else {
        param._id = ID;
        param.TouristStatus = '正常';
        $rootScope[position[2]].OrderTourists.push(param);
      }
      $scope.closeAllAddTouristPop();
    });
  };

  $scope.closeAllAddTouristPop = function() {
    $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };

  $scope.$watch('detailData.OrderTourists', function(value) {
    if (value !== undefined) {
      $rootScope[position[2]].OrderInfos.TotalNumber = 0;
      $rootScope[position[2]].OrderInfos.AdultNumber = 0;
      $rootScope[position[2]].OrderInfos.BabyNumber = 0;
      $rootScope[position[2]].OrderInfos.ChildNumber = 0;
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        if (item.TouristTypeID == 1 || item.TouristTypeID == 2) {
          $rootScope[position[2]].OrderInfos.AdultNumber++;
        } else if ($rootScope[position[2]].TouristTypeID == 3) {
          $rootScope[position[2]].OrderInfos.ChildNumber++;
        } else {
          $rootScope[position[2]].OrderInfos.BabyNumber++;
        }
        $rootScope[position[2]].OrderInfos.TotalNumber++;
      });
    }
  }, true);

  /**
   * 管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.handleFee = function(isAdd) {
    //清空一下数据
    $rootScope[position[2]].scopeInfo.isHandleFee = {};
    if (isAdd) {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    } else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
    }
  };

  /**
   * 保存管理费用信息
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.saveHandleFeeInfo = function(isAdd) {
    $scope.isSubmit = true;
    var param = {};
    if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 2,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
        BusinessMainTypeID: 2,
        BusinessMainTypeName: '增加费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        BusinessTypeID: 1
      };
      if (!param.Name) {
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
      if (!param.Price) {
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    } else {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 3,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
        BusinessMainTypeID: 3,
        BusinessMainTypeName: '减少费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        BusinessTypeID: 2
      };
      if (!param.Name) {
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
      if (!param.Price) {
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    }
    insertOrderPriceRecord(param, function() {
      $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
    $scope.cancelHandleFee();
  };

  /**
   * 取消管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.cancelHandleFee = function(fee){
    if(typeof fee == 'object'){
      fee.isEdit = false;
    }else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    }
  };

  $scope.editPackageInfo = function() {
    $rootScope[position[2]].scopeInfo.isPackageEditMode = true;
    getDrivingtourPackages($rootScope[position[2]].ProductInfo._id, function(packages) {
      $rootScope[position[2]].packages = packages;
      $rootScope[position[2]].SelfdrivingPackages.forEach(function(item) {
        $rootScope[position[2]].selectedPackage = _.find($rootScope[position[2]].packages, function(e) {
          if (item.ForeignKeyID == e._id.$id) {
            e.BookingCount = item.BookingCount;
            return true;
          }
        });
      });
    });
  };

  $scope.savePackageInfo = function() {
    $scope.isSubmit = true;
    var param = {
      orderID: $rootScope[position[2]].OrderInfos._id,
      OrderSelfDrivingPackage: []
    };
    param.OrderSelfDrivingPackage.push({
      SelfDrivingPackageID: $rootScope[position[2]].selectedPackage?$rootScope[position[2]].selectedPackage._id.$id:'',
      BookingCount: $rootScope[position[2]].selectedPackage?$rootScope[position[2]].selectedPackage.BookingCount:'',
      PackageTotalPrice: $rootScope[position[2]].selectedPackage?$rootScope[position[2]].selectedPackage.DefaultPrice * $rootScope[position[2]].selectedPackage.BookingCount:''
    });
    updateSelfDrivingPackageInfo(param, function() {
      $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.editFee = function(fee) {
    fee.isEdit = !fee.isEdit;
    $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
  };

  $scope.saveEditFeeInfo = function(fee) {
    updateOrderPriceRecord({
      ForeignKeyID: fee.ForeignKeyID,
      OrderID: $rootScope[position[2]].OrderInfos._id,
      BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
      BusinessMainTypeID: fee.BusinessMainTypeID,
      PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
      Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
    }, function(response) {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.deleteSubFee = function(fee) {
    showWarningBox("确定要删除该费用吗", function() {
      delOrderPriceRecord({
        RecordID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderInfos._id
      }, function(response) {
        addRefreshPageByID(($rootScope[switchType[2]].id));
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    });
  };

});
app.controller("OMVisaController", function($scope, $rootScope, OMVisa, $filter, modifyOneTeamCustomer,
  getCertificatesTypes, modifyAirTicekSalesman, addRefreshPageByID, saveFreeTourOrderNotes,delOrderPriceRecord,
  removeOrderTouristByTouristID, getEnumeration, getComboxInsuranceStatus, insertOrderPriceRecord,
  saveOrderTouristsToVisa, quitTeamFromOrder, showWarningBox, orderTransferCustomer,sendOrderInfo) {


  /**
   * 订单名单翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  var pageSize = 10;
  $scope.orderMemberPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
  };

  /**
   * 订单保险翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };

  $scope.chooseCustomer = function(customer){
    orderTransferCustomer({
      OrderId: $rootScope[position[2]].OrderInfos._id,
      OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
      NewCustomerId: customer._id.$id
    }, function(response){
      addRefreshPageByID(($rootScope[switchType[2]].id));
      $scope.fetch($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.searchTeamtourPlan = function(type) {
    $scope.isLoading = true;

    var search = {};
    search.iPageIndex = 1;
    search.SearchInfo = $rootScope[position[1]].search.SearchInfo;
    search.StationId = $rootScope[position[1]].search.station ? $rootScope[position[1]].search.station._id.$id : '';
    search.TimeType = $rootScope[position[1]].search.TimeType;
    search.TypeId = $rootScope[position[1]].search.TypeId;
    search.SourceId = $rootScope[position[1]].search.SourceId;
    search.OrderPayStatus = $rootScope[position[1]].search.OrderPayStatus;
    search.CensusStatus = $rootScope[position[1]].search.CensusStatus;
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.InsureStatus = $rootScope[position[1]].search.InsureStatus;
    search.STime = $filter('date')($rootScope[position[1]].search.STime, 'yyyy-MM-dd');
    search.ETime = $filter('date')($rootScope[position[1]].search.ETime, 'yyyy-MM-dd');

    OMVisa.list(function(response) {
      $rootScope[position[1]].list = response.list;
      $scope.isLoading = false;
    }, search);
  };

  $scope.status = {
    sTime: false,
    eTime: false
  };

  $scope.popConf = {
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 510,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 580,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    rechedule: {
      arrow: {
        left: 320,
        useArrow: true
      },
      popconf: {
        left: 20,
        position: 'bottom'
      }
    },
    record:{
      arrow: {
        left: 150,
        useArrow: true
      },
      popconf: {
        left: 220,
        position: 'bottom'
      }
    },
    precollar: {
      arrow: {
        left: 710,
        useArrow: false
      },
      popconf: {
        left: -635,
        position: 'bottom'
      }
    },
    changeTime: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    selectSaleman: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    contract: {
      arrow: {
        left: 260,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    distribution: {
      arrow: {
        left: 205,
        useArrow: true
      },
      popconf: {
        left: 450,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 170,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 485,
        useArrow: true
      },
      popconf: {
        left: -405,
        position: 'bottom'
      }
    }
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadTeamourListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {
        iPageIndex: 1
      };
    }
    $rootScope[position[1]].search.iPageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMVisa.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };

  /**
   * 编辑联系人
   * @return {[type]}      [description]
   */
  $scope.editContractInfo = function() {
    $rootScope[position[2]].scopeInfo.isContractEditMode = true;
    $rootScope[position[2]].scopeInfo.customerInfo = angular.copy($rootScope[position[2]].OrderInfos.CustomerEnlarge);
    $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes = $rootScope[position[2]].OrderInfos.EmergencyContactNotes;
    $rootScope[position[2]].scopeInfo.customerInfo.address = {
      city: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City.ForeignKeyID : '',
      region: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province.ForeignKeyID : '',
      country: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country.ForeignKeyID : ''
    };
  };

  /**
   * 保存联系人
   * @return {[type]}      [description]
   */
  $scope.saveContractInfo = function() {
    $scope.isSubmit = true;
    $rootScope[position[2]].scopeInfo.isContractEditMode = false;
    modifyOneTeamCustomer({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      CustomerName: $rootScope[position[2]].scopeInfo.customerInfo.CustomerName,
      CustomerMobile: $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile,
      CertificatesTypeID: $rootScope[position[2]].scopeInfo.customerInfo.CertificatesType.ForeignKeyID,
      TouristDocumentNumber: $rootScope[position[2]].scopeInfo.customerInfo.TouristDocumentNumber,
      CustomerEmail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerEMail,
      CustomerCountryID: $rootScope[position[2]].scopeInfo.customerInfo.address.country,
      CustomerProvinceID: $rootScope[position[2]].scopeInfo.customerInfo.address.region,
      CustomerCityID: $rootScope[position[2]].scopeInfo.customerInfo.address.city,
      CustomerAreaID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area.ForeignKeyID : '',
      CustomerStreetID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street.ForeignKeyID : '',
      CustomerPositionDetail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.CustomerPositionDetail,
      BodyStateNotes: $rootScope[position[2]].scopeInfo.customerInfo.BodyStateNotes,
      EmergencyContactNotes: $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes
    }, function() {
      $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };


  $scope.editSaleMan = function() {
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = true;
    $rootScope[position[2]].scopeInfo.saleMan = {
      id: $rootScope[position[2]].OrderInfos.SalesmanID,
      name: $rootScope[position[2]].OrderInfos.SalesmanName,
      detail: {}
    };
  };

  $scope.saveSaleManInfo = function() {
    $scope.isSubmit = true;
    var detail = $rootScope[position[2]].scopeInfo.saleMan.detail;
    var saleManID = detail._id ? detail._id.$id : '';
    var saleManName = detail._id ? detail.FullName : '';
    modifyAirTicekSalesman($rootScope[position[2]].OrderInfos._id, saleManID, saleManName, function() {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.isSubmit = false;
      $rootScope[position[2]].scopeInfo.isSaleManEditMode = false;
      $rootScope[position[2]].OrderInfos.SalesmanID = saleManID;
      $rootScope[position[2]].OrderInfos.SalesmanName = saleManName;
    });
  };

  $scope.editOrderNotes = function() {
    $rootScope[position[2]].scopeInfo.orderNoteTmp = {
      ContractPayTypeAndTime: "",
      OtherAppointment: "",
      OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
    };
    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = true;
  };

  $scope.saveOrderNotes = function() {
    $scope.isSubmit = true;
    saveFreeTourOrderNotes({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      ContractPayTypeAndTime: '',
      OtherAppointment: '',
      OrderNote: $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes
    }, function() {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.isSubmit = false;
      $rootScope[position[2]].OrderInfos.OrderNotes = $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes;
      $rootScope[position[2]].scopeInfo.orderNoteTmp = {};
      $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = false;
    });
  };

  $scope.checkAllMember = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      if(item.TouristStatus != '正常') return;
      item.isSelected = $rootScope[position[2]].scopeInfo.memberCheckAll;
    });
  };

  $scope.delTourist = function(item) {
    removeOrderTouristByTouristID(item._id, function() {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, _.find($rootScope[position[2]].OrderTourists, function(e) {
        if (e._id == item._id) {
          return true;
        }
      }));
    });
  };

  $scope.quitTeam = function(member, ExitTeamNotes) {
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify([member._id]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].OrderTourists.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member._id);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $scope.status.quitTeamOpen = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.fetch($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.showAddTourist = function(item) {
    if (item) {
      item.TouristBirthdayDate = new Date(item.TouristBirthday.substring(0, 4), parseInt(item.TouristBirthday.substring(5, 7)) - 1, item.TouristBirthday.substring(8, 10));
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
      $rootScope[position[2]].addTouristInfo.CertificatesTypeID = $rootScope[position[2]].addTouristInfo.CertificatesType.ForeignKeyID;
    } else {
      $rootScope[position[2]].addTouristInfo = {
        TouristName: '游客',
        CertificatesTypeID: '000000000000000000000001',
        GenderTypeID: 1,
        TouristTypeID: 2
      };
    }
  };

  $scope.saveTourist = function() {
    $scope.isSubmit = true;
    var param = {
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      IsOccupying: true,
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthdayDate, 'yyyy-MM-dd'),
      GenderTypeName: $rootScope[position[2]].addTouristInfo.GenderTypeID == 1 ? '男士' : '女士',
      TouristTypeName: $filter('showObjValueFormArray')($rootScope[position[2]].addTouristInfo.TouristTypeID, $scope.TouristTypes, 'Value', 'Text'),
      TouristPrice:$rootScope[position[2]].ProductInfo.DefaultPrice
    };
    if ($rootScope[position[2]].addTouristInfo._id) {
      param.TouristID = $rootScope[position[2]].addTouristInfo._id;
    }
    saveOrderTouristsToVisa(param, function(ID) {
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      param.CertificatesType = {
        CertificatesTypeName: param.CertificatesTypeName,
        ForeignKeyID: param.CertificatesTypeID
      };
      if ($rootScope[position[2]].addTouristInfo._id) {
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          _id: $rootScope[position[2]].addTouristInfo._id
        });
        param._id = $rootScope[position[2]].addTouristInfo._id;
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
       $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      } else {
        param._id = ID;
         param.TouristStatus='正常';
        $rootScope[position[2]].OrderTourists.push(param);
      $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      }
      $scope.closeAllAddTouristPop();
      $scope.isSubmit = false;
    });
  };

  $scope.closeAllAddTouristPop = function() {
    $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };

  $scope.getEnumeration = function() {
    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });
    getComboxInsuranceStatus(function(orderStatus) {
      $scope.orderStatus = orderStatus;
    });
    getCertificatesTypes(function(Certificates) {
        $scope.Certificates = Certificates;
      });
  };

  $scope.getEnumeration();

  $scope.$watch('detailData.OrderTourists', function(value) {
    if (value !== undefined) {
      $rootScope[position[2]].OrderInfos.TotalNumber = 0;
      $rootScope[position[2]].OrderInfos.AdultNumber = 0;
      $rootScope[position[2]].OrderInfos.BabyNumber = 0;
      $rootScope[position[2]].OrderInfos.ChildNumber = 0;
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        if (item.TouristTypeID == 1 || item.TouristTypeID == 2) {
          $rootScope[position[2]].OrderInfos.AdultNumber++;
        } else if ($rootScope[position[2]].TouristTypeID == 3) {
          $rootScope[position[2]].OrderInfos.ChildNumber++;
        } else {
          $rootScope[position[2]].OrderInfos.BabyNumber++;
        }
        $rootScope[position[2]].OrderInfos.TotalNumber++;
      });
    }
  }, true);

  /**
   * 管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.handleFee = function(isAdd) {
    //清空一下数据
    $rootScope[position[2]].scopeInfo.isHandleFee = {};
    if (isAdd) {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    } else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
    }
  };

  /**
   * 保存管理费用信息
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.saveHandleFeeInfo = function(isAdd) {
    $scope.isSubmit = true;
    var param = {};
    if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 2,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
        BusinessMainTypeID: 2,
        BusinessMainTypeName: '增加费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        BusinessTypeID : 1
      };
      if(!param.BusinessTypeName){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    } else {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 3,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
        BusinessMainTypeID: 3,
        BusinessMainTypeName: '减少费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        BusinessTypeID : 2
      };
      if(!param.BusinessTypeName){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    }
    insertOrderPriceRecord(param, function() {
      $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
    $scope.cancelHandleFee();
  };

  /**
   * 取消管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.cancelHandleFee = function(fee){
    if(typeof fee == 'object'){
      fee.isEdit = false;
    }else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    }
  };

  $scope.editFee = function(fee){
    fee.isEdit = !fee.isEdit;
    $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
  };

  $scope.saveEditFeeInfo = function(fee){
    updateOrderPriceRecord({
      ForeignKeyID: fee.ForeignKeyID,
      OrderID: $rootScope[position[2]].OrderInfos._id,
      BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
      BusinessMainTypeID: fee.BusinessMainTypeID,
      PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
      Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
    }, function(response){
      $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.deleteSubFee = function(fee){
    showWarningBox("确定要删除该费用吗", function(){
      delOrderPriceRecord({
        RecordID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderInfos._id
      }, function(response){
        $scope.isSubmit = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    });
  };

});
app.controller('OMPlaneTicketController', function($scope, $rootScope, OMPlaneTicket, $filter,
  findInnerObjIndex, showSubHead, closeSubView, showErrorInfo, openSubView, $timeout, addAirTicketOrder,
  modifyAirTicekProductTitle, modifyAirTicekCustomer, modifyAirTicekFlights, getEnumeration,getCertificatesTypes,
  modifyAirTicekOrderNote, modifyAirTicekSalesman, modifyAirTicekPrice, saveOrderTouristsToPlanTicket,
  removeOrderTouristByTouristID, quitTeamFromOrder, showWarningBox, addRefreshPageByID,sendOrderInfo) {

  $scope.popConf = {
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 645,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    delay: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 365,
        position: 'bottom'
      }
    },
    changeTime: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    selectSaleman: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 310,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 510,
        useArrow: true
      },
      popconf: {
        left: 210,
        position: 'bottom'
      }
    }
  };

  $scope.searchPlaneTicketOrder = function(page) {
    $scope.isLoading = true;

    var search = {};
    search.PageIndex = page;
    search.StartTime = $filter('date')($rootScope[position[1]].search.StartTimeDate, 'yyyy-MM-dd');
    search.EndTime = $filter('date')($rootScope[position[1]].search.EndTimeDate, 'yyyy-MM-dd');
    search.OrderStatus = $rootScope[position[1]].search.OrderStatus;
    search.PayStatus = $rootScope[position[1]].search.PayStatus;
    search.SearchKey = $rootScope[position[1]].search.SearchKey;

    OMPlaneTicket.list(function(response) {
      $rootScope[position[1]].list = response.list;
      $scope.isLoading = false;
    }, search);
  };

  $scope.status = {
    StartTime: false,
    EndTime: false
  };

  $scope.openDatePicker = function($event, type) {
    $scope.status[type] = true;
  };

  $scope.openFlightDatePicker = function($even, type, item) {
    item[type] = true;
  };

  $scope.loadPlaneTicketListData = function() {
    if (!$rootScope[position[1]].search) {
      $rootScope[position[1]].search = {PageIndex: 1};
    }
    $rootScope[position[1]].search.PageIndex += 1;

    var data = angular.extend({}, $rootScope[position[1]].search);
    data.STime = $filter('date')(data.STime, 'yyyy-MM-dd');
    data.ETime = $filter('date')(data.ETime, 'yyyy-MM-dd');

    OMPlaneTicket.list(function(data) {
      $rootScope[position[1]].list = _.union($rootScope[position[1]].list, data.list);
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
    }, data);
  };

  $scope.chooseCustomer = function(customer) {
    var url = 'orderManagement/OMPlaneTicket/add?mode=order&customerID=' + customer._id.$id;
    $scope.status.showSelectCustomer = false;
    $scope.fetch(url, '');
    openSubView();
  };

  $scope.addOrderHolidayAppointment = function() {
    var item = {
      CompanyBreachOfContractRatio: 0,
      EndDay: 0,
      StartDay: 0,
      TouristBreachOfContractRatio: 0
    };
    $rootScope[position[2]].OrderContract.OrderHolidayAppointment.push(item);
  };

  $scope.$watch('detailData.peopleCount', function(value) {
    if (value !== undefined) {
      var removeIndexs = [];
      var adultCount = 0;
      var childCount = 0;
      var babyCount = 0;
      if ($rootScope[position[2]].OrderTourists) {
        $rootScope[position[2]].OrderTourists.forEach(function(item) {
          if (item.TouristType.id == 1 || item.TouristType.id == 2) {
            if (adultCount >= value.AdultCount) {
              removeIndexs.push(item.index);
            }
            adultCount++;
          } else if (item.TouristType.id == 3) {
            if (childCount >= value.ChildCount) {
              removeIndexs.push(item.index);
            }
            childCount++;
          } else if (item.TouristType.id == 4) {
            if (babyCount >= value.BabyCount) {
              removeIndexs.push(item.index);
            }
            babyCount++;
          }
        });
      }
      //删除多余的客户
      removeIndexs.forEach(function(item) {
        var removeCustomerIndex = _.findIndex($rootScope[position[2]].OrderTourists, {
          index: item
        });
        $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, $rootScope[position[2]].OrderTourists[removeCustomerIndex]);
      });
      var customer = {
        index: 0,
        TouristType: {
          id: 1,
          value: '老人'
        },
        TouristName: '',
        TouristMobile: '',
        GenderTypeID: 1,
        Certificate: {
          id: 1,
          value: '身份证'
        },
        TouristDocumentNumber: '',
        TouristBirthday: '1949-10-01',
        IsOccupying: true
      };
      //添加不够的客户
      for (var i = 0; i < value.AdultCount - adultCount; i++) {
        $rootScope[position[2]].OrderTourists.push(angular.copy(customer));
      }
      for (var x = 0; x < value.ChildCount - childCount; x++) {
        customer.TouristType = {
          id: 3,
          value: '小孩'
        };
        $rootScope[position[2]].OrderTourists.push(angular.copy(customer));
      }
      for (var y = 0; y < value.BabyCount - babyCount; y++) {
        customer.TouristType = {
          id: 4,
          value: '婴儿'
        };
        customer.IsOccupying = false;
        $rootScope[position[2]].OrderTourists.push(angular.copy(customer));
      }
      //排序
      var newIndex = 1;
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        item.index = newIndex;
        newIndex++;
      });

      $rootScope[position[2]].totalCount = parseInt($rootScope[position[2]].peopleCount.AdultCount) + parseInt($rootScope[position[2]].peopleCount.BabyCount) + parseInt($rootScope[position[2]].peopleCount.ChildCount);
    }
  }, true);

  $scope.addFlight = function() {
    $rootScope[position[2]].AirTicketFlight.push({
      FlightTypeID: 1
    });
  };

  $scope.delFlight = function(flight) {
    if ($rootScope[position[2]].AirTicketFlight.length <= 1) {
      $rootScope[position[2]].info = '至少需要添加一个航班信息';
      return;
    }
    $rootScope[position[2]].AirTicketFlight = _.without($rootScope[position[2]].AirTicketFlight, flight);
  };


  $scope.saveOrder = function(flag) {
    if(!flag) return;

    var param = {};
    param.IntentOrderID = '';
    param.OrderSourceTypeID = 2;
    param.AdultNumber = $rootScope[position[2]].peopleCount.AdultCount;
    param.BabyNumber = $rootScope[position[2]].peopleCount.BabyCount;
    param.ChildNumber = $rootScope[position[2]].peopleCount.ChildCount;
    if(param.AdultNumber===0&&param.BabyNumber===0&&param.ChildNumber===0){
       $rootScope[position[2]].info='请输入游客数量';
       return;
    }
    param.ProductTitle = $rootScope[position[2]].ProductTitle;
    param.CustomerName = $rootScope[position[2]].cusomer.CustomerName;
    param.CustomerMobile = $rootScope[position[2]].cusomer.CustomerMobile;
    param.CertificatesTypeID = $rootScope[position[2]].cusomer.Enlarge.CertificatesType.ForeignKeyID.$id;
    param.CertificatesTypeName = $filter('getInnerObjValueFormArray')(param.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName');
    param.TouristDocumentNumber = $rootScope[position[2]].cusomer.Enlarge.CustomerDocumentNumber;
    var salesman = $rootScope[position[2]].Salesman;
    param.SalesmanID = salesman._id ? salesman._id.$id : '';
    param.SalesmanName = salesman._id ? salesman.FullName : '';
    param.TotalFinalPrice = $rootScope[position[2]].TotalFinalPrice;
    param.OrderNotes = $rootScope[position[2]].OrderNotes;

    param.OrderTourists = $rootScope[position[2]].OrderTourists;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.CertificatesTypeID = (Array(24).join(0) + item.Certificate.id).slice(-24);
      item.CertificatesTypeName = item.Certificate.value;
      item.TouristTypeID = item.TouristType.id;
    });
    param.PriceRecord = [];
    param.AirTicketFlight = [];
    $rootScope[position[2]].AirTicketFlight.forEach(function(item) {
      item.StartTime = $filter('date')(item.StartTimeDate, 'yyyy-MM-dd');
      item.EndTime = $filter('date')(item.EndTimeDate, 'yyyy-MM-dd');
      param.AirTicketFlight.push(item);
    });
    param.FeeDescription = $rootScope[position[2]].FeeDescription;

    $scope.isSubmit = true;

    addAirTicketOrder(param, function(response) {
      $scope.isSubmit = false;
      sendOrderInfo(response._id);
      // closeSubView();
      // showErrorInfo('下单成功');
      $rootScope.fetch('orderManagement/OMPlaneTicket/detail?OrderID='+response._id,response._id);
      $scope.searchPlaneTicketOrder();
    },function(){
      $scope.isSubmit = false;
    });
  };

  $scope.showEditCustomer = function() {
    $rootScope[position[2]].status.editCustomer = true;
    if (!$rootScope[position[2]].editCustomerInfo) {
      $rootScope[position[2]].editCustomerInfo = {
        OrderID: $rootScope[position[2]].OrderID,
        CustomerName: $rootScope[position[2]].CustomerName,
        CustomerMobile: $rootScope[position[2]].CustomerMobile,
        CertificatesTypeID: $rootScope[position[2]].CertificatesTypeID,
        TouristDocumentNumber: $rootScope[position[2]].TouristDocumentNumber
      };
    }
  };

  $scope.saveCustomer = function() {
    $scope.isSubmit = true;
    modifyAirTicekCustomer($rootScope[position[2]].editCustomerInfo, function() {
      $rootScope[position[2]].CustomerName = $rootScope[position[2]].editCustomerInfo.CustomerName;
      $rootScope[position[2]].CustomerMobile = $rootScope[position[2]].editCustomerInfo.CustomerMobile;
      $rootScope[position[2]].CertificatesTypeID = $rootScope[position[2]].editCustomerInfo.CertificatesTypeID;
      $rootScope[position[2]].TouristDocumentNumber = $rootScope[position[2]].editCustomerInfo.TouristDocumentNumber;
      $rootScope[position[2]].CertificatesTypeName = $filter('getInnerObjValueFormArray')($scope.CertificatesTypeID, $scope.Certificates, ['_id', '$id'], 'CertificatesTypeName');
      $scope.isSubmit = false;
      sendOrderInfo($rootScope[position[2]].OrderID);
    });
    $rootScope[position[2]].status.editCustomer = false;
  };

  $scope.editTitle = function() {
    $rootScope[position[2]].status.editTitle = true;
    if (!$rootScope[position[2]].editTitle) {
      $rootScope[position[2]].editTitle = {
        OrderID: $rootScope[position[2]].OrderID,
        ProductTitle: $rootScope[position[2]].ProductTitle,
      };
    }
  };

  $scope.saveTitle = function() {
    $scope.isSubmit = true;
    modifyAirTicekProductTitle($rootScope[position[2]].editTitle.OrderID, $rootScope[position[2]].editTitle.ProductTitle, function() {
      $rootScope[position[2]].ProductTitle = $rootScope[position[2]].editTitle.ProductTitle;
      $scope.isSubmit = false;
      sendOrderInfo($rootScope[position[2]].OrderID);
    });
    $rootScope[position[2]].status.editTitle = false;
  };

  $scope.eidtFlight = function() {
    $rootScope[position[2]].status.editFlight = true;
    if (!$rootScope[position[2]].editFlight) {
      var OrderAirTickets = [];
      $rootScope[position[2]].OrderAirTickets.forEach(function(item) {
        if (item.StartTime.length >= 10) {
          item.StartTimeDate = new Date(item.StartTime.substring(0, 4), parseInt(item.StartTime.substring(5, 7)) - 1, item.StartTime.substring(8, 10));
        }
        if (item.EndTime.length >= 10) {
          item.EndTimeDate = new Date(item.EndTime.substring(0, 4), parseInt(item.EndTime.substring(5, 7)) - 1, item.EndTime.substring(8, 10));
        }
        OrderAirTickets.push(item);
      });
      $rootScope[position[2]].editFlight = {
        OrderID: $rootScope[position[2]].OrderID,
        OrderAirTickets: angular.copy(OrderAirTickets),
      };
    }
    if (!$rootScope[position[2]].FlightTypes) {
      getEnumeration('EFlightTypes', function(FlightTypes) {
        $rootScope[position[2]].FlightTypes = FlightTypes;
      });
    }
  };

  $scope.saveFlight = function(flag) {
    if(!flag) return;
    $scope.isSubmit = true;
    var OrderAirTickets = [];
    $rootScope[position[2]].editFlight.OrderAirTickets.forEach(function(item) {
      item.StartTime = $filter('date')(item.StartTimeDate, 'yyyy-MM-dd');
      item.EndTime = $filter('date')(item.EndTimeDate, 'yyyy-MM-dd');
      item.FlightTypeName = $filter('showObjValueFormArray')(item.FlightTypeID, $rootScope[position[2]].FlightTypes, 'Value', 'Text');
      OrderAirTickets.push(item);
    });
    modifyAirTicekFlights($rootScope[position[2]].editFlight.OrderID, OrderAirTickets, function() {
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.isSubmit = false;
      $rootScope[position[2]].OrderAirTickets = angular.copy($rootScope[position[2]].editFlight.OrderAirTickets);
    });
    $rootScope[position[2]].status.editFlight = false;
  };

  $scope.addEditFlight = function() {
    $rootScope[position[2]].editFlight.OrderAirTickets.push({
      FlightTypeID: 1
    });
  };

  $scope.delEditFlight = function(flight) {
    if ($rootScope[position[2]].editFlight.OrderAirTickets.length <= 1) {
      $rootScope[position[2]].info = '至少需要添加一个航班信息';
      return;
    }
    $rootScope[position[2]].editFlight.OrderAirTickets = _.without($rootScope[position[2]].editFlight.OrderAirTickets, flight);
  };

  //modifyAirTicekOrderNote

  $scope.editOrderNote = function() {
    $rootScope[position[2]].status.editNote = true;
    if (!$rootScope[position[2]].editNote) {
      $rootScope[position[2]].editNote = {
        OrderNotes: $rootScope[position[2]].OrderNotes
      };
    }
  };

  $scope.saveOrderNote = function() {
    $scope.isSubmit = true;
    modifyAirTicekOrderNote($rootScope[position[2]].OrderID, $rootScope[position[2]].editNote.OrderNotes, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].OrderNotes = $rootScope[position[2]].editNote.OrderNotes;
      $rootScope[position[2]].status.editNote = false;
      sendOrderInfo($rootScope[position[2]].OrderID);
    });
  };

  $scope.editSalesman = function() {
    $rootScope[position[2]].status.editSalesman = true;
    if (!$rootScope[position[2]].editSalesman) {
      $rootScope[position[2]].editSalesmanInfo = {
        SalesmanID: $rootScope[position[2]].SalesmanID,
        Salesman: {},
        SalesmanName: $rootScope[position[2]].SalesmanName
      };
    }
  };

  $scope.saveSalesman = function() {
    $scope.isSubmit = true;
    var salesman = $rootScope[position[2]].editSalesmanInfo.Salesman;
    var SalesmanID = salesman._id ? salesman._id.$id : '';
    var SalesmanName = salesman._id ? salesman.FullName : '';
    modifyAirTicekSalesman($rootScope[position[2]].OrderID, SalesmanID, SalesmanName, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].status.editSalesman = false;
      $rootScope[position[2]].SalesmanID = SalesmanID;
      $rootScope[position[2]].SalesmanName = SalesmanName;
      sendOrderInfo($rootScope[position[2]].OrderID);
    });
  };

  $scope.editCost = function() {
    $rootScope[position[2]].status.editCost = true;
    $rootScope[position[2]].editCostInfo = {
      TotalFinalPrice: $rootScope[position[2]].TotalFinalPrice,
      FeeDescription: $rootScope[position[2]].FeeDescription
    };
  };

  $scope.saveCost = function() {
    $scope.isSubmit = true;
    modifyAirTicekPrice($rootScope[position[2]].OrderID, $rootScope[position[2]].editCostInfo.TotalFinalPrice, $rootScope[position[2]].editCostInfo.FeeDescription, function() {
      $scope.isSubmit = false;
      $rootScope[position[2]].TotalFinalPrice = $rootScope[position[2]].editCostInfo.TotalFinalPrice;
      $rootScope[position[2]].FeeDescription = $rootScope[position[2]].editCostInfo.FeeDescription;
      $rootScope[position[2]].status.editCost = false;
      sendOrderInfo($rootScope[position[2]].OrderID);
    });
  };

  $scope.addTourist = function(item) {
    if (item) {
      item.TouristBirthdayDate = new Date(item.TouristBirthday.substring(0, 4), parseInt(item.TouristBirthday.substring(5, 7)) - 1, item.TouristBirthday.substring(8, 10));
      $rootScope[position[2]].addTouristInfo = angular.copy(item);
    } else {
      $rootScope[position[2]].addTouristInfo = {
        TouristName: '游客',
        CertificatesTypeID: '000000000000000000000001',
        GenderTypeID: 1,
        TouristTypeID: 2
      };
    }
  };

  $scope.delTourist = function(item) {
    removeOrderTouristByTouristID(item.ForeignKeyID, function() {
      sendOrderInfo($rootScope[position[2]].OrderID);
      var index = _.findIndex($rootScope[position[2]].OrderTourists, {
        ForeignKeyID: item.ForeignKeyID
      });
      $rootScope[position[2]].OrderTourists = _.without($rootScope[position[2]].OrderTourists, $rootScope[position[2]].OrderTourists[index]);
    });
  };

  $scope.quitTeam = function(member, ExitTeamNotes) {
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderID,
      "Tourists": JSON.stringify([member.ForeignKeyID]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.fetch($rootScope[switchType[2]].httpUrl + '?OrderID=' + $rootScope[position[2]].OrderID);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].OrderTourists.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member.ForeignKeyID);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderID,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $scope.status.quitTeamOpen = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.fetch($rootScope[switchType[2]].httpUrl + '?OrderID=' + $rootScope[position[2]].OrderID);
    }, function(){
      $scope.isLoading = false;
    });
  };

  $scope.saveTourist = function() {
    $scope.isSubmit = true;
    var param = {
      OrderID: $rootScope[position[2]].OrderID,
      TouristName: $rootScope[position[2]].addTouristInfo.TouristName,
      TouristTypeID: $rootScope[position[2]].addTouristInfo.TouristTypeID,
      GenderTypeID: $rootScope[position[2]].addTouristInfo.GenderTypeID,
      IsOccupying: true,
      CertificatesTypeID: $rootScope[position[2]].addTouristInfo.CertificatesTypeID,
      CertificatesTypeName: $filter('getInnerObjValueFormArray')($rootScope[position[2]].addTouristInfo.CertificatesTypeID,$scope.Certificates, ['_id', '$id'], 'CertificatesTypeName'),
      TouristDocumentNumber: $rootScope[position[2]].addTouristInfo.TouristDocumentNumber,
      TouristMobile: $rootScope[position[2]].addTouristInfo.TouristMobile,
      TouristBirthday: $filter('date')($rootScope[position[2]].addTouristInfo.TouristBirthdayDate, 'yyyy-MM-dd'),
      GenderTypeName: $rootScope[position[2]].addTouristInfo.GenderTypeID == 1 ? '男士' : '女士',
      TouristTypeName: $filter('showObjValueFormArray')($rootScope[position[2]].addTouristInfo.TouristTypeID, $scope.TouristTypes, 'Value', 'Text')
    };
    if ($rootScope[position[2]].addTouristInfo.ForeignKeyID) {
      param.TouristID = $rootScope[position[2]].addTouristInfo.ForeignKeyID;
    }
    saveOrderTouristsToPlanTicket(param, function(ID) {
      sendOrderInfo($rootScope[position[2]].OrderID);
      if ($rootScope[position[2]].addTouristInfo.ForeignKeyID) {
        var index = _.findIndex($rootScope[position[2]].OrderTourists, {
          ForeignKeyID: $rootScope[position[2]].addTouristInfo.ForeignKeyID
        });
        $rootScope[position[2]].OrderTourists[index] = angular.copy(param);
              $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      } else {
        param.ForeignKeyID = ID;
         param.TouristStatusName='正常';
        $rootScope[position[2]].OrderTourists.push(param);
         $scope.status.isLoading = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderID);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
      }
      $scope.status.addTourist = false;
      $scope.isSubmit = false;
    });
  };

  $scope.getEnumeration = function() {
    getEnumeration('ETouristTypes', function(TouristTypes) {
      $scope.TouristTypes = TouristTypes;
    });
    getCertificatesTypes(function(Certificates) {
        $scope.Certificates = Certificates;
      });
  };

  $scope.closeAllAddTouristPop = function() {
    $scope.status.addTourist = false;
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };

  $scope.getEnumeration();

  $scope.batchDelTourist = function(){
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      if(item.isSelected){
        $scope.delTourist(item);
      }
    });
  };

  $scope.clickSelectAllTourist = function(){
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      if(item.TouristStatus != '正常') return;
      item.isSelected = $rootScope[position[2]].isSelectAllTourist;
    });
  };

  $scope.$watch('detailData.OrderTourists', function(value) {
    if (value !== undefined) {
      $rootScope[position[2]].TotalNumber = 0;
      $rootScope[position[2]].AdultNumber = 0;
      $rootScope[position[2]].BabyNumber = 0;
      $rootScope[position[2]].ChildNumber = 0;
      $rootScope[position[2]].OrderTourists.forEach(function(item) {
        if (item.TouristTypeID == 1 || item.TouristTypeID == 2) {
          $rootScope[position[2]].AdultNumber++;
        } else if ($rootScope[position[2]].TouristTypeID == 3) {
          $rootScope[position[2]].ChildNumber++;
        } else {
          $rootScope[position[2]].BabyNumber++;
        }
        $rootScope[position[2]].TotalNumber++;
      });
    }
  }, true);

});
app.controller("OMTeamtourDetailController", function($scope, $rootScope, _, $filter, getTeamtourOrderCustomerList,
  Pagination, quitTeamFromOrder, getCertificatesTypes, getSameProductPlanByPlanId, getCarsByOrderIdnPlanId,
  getCarsTouristsByOrderIdnCar, touristOccupyCarSeatArrange, cancelCarSeatArrange, showWarningBox,
  getCarArrangeTouristsInfo, getComboxTouristRoomStatus, updateOrderPriceRecord, delOrderPriceRecord,
  getNoneCarArrangeTouristsInfo, randomSeatingArrangement, getOrderEmailContractByOrderID,
  getOrderFaxContractByOrderID, getComboxContentMainTypes, getOrderTouristRoomArrangeByOrderID,
  getEnumeration, getArrangeTouristsByOrderID, orderCancelRoomArrange, modifyOrderNotes,
  modifyOrderConvention, insertOrderPriceRecord, orderRandomRoomArrangement, orderTouristRoomArrange,
  modifyOneTeamCustomer, addRefreshPageByID, getTeamProductPriceByPlanID, saveTeamTourTourist,
  getTeamtourPlanList, orderRescheduleApplyToGroup, confirmOrder, orderTransferCustomer,
  saveFreeTourSaleMan, UpdateOrderTouristRelationship, $timeout,sendOrderInfo) {
  var pageSize = 10;

  $scope.status = {};

  $scope.orderMemberSearch = {
    PageIndex: 1,
    PageSize: pageSize
  };

  $scope.popConf = {
    import: {
      arrow: {
        left: 180,
        useArrow: true
      },
      popconf: {
        left: 90,
        position: 'bottom'
      }
    },
    policy: {
      arrow: {
        left: 130,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    record: {
      arrow: {
        left: 230,
        useArrow: true
      },
      popconf: {
        left: 220,
        position: 'bottom'
      }
    },
    contract: {
      arrow: {
        left: 350,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    precollar: {
      arrow: {
        left: 710,
        useArrow: false
      },
      popconf: {
        left: -635,
        position: 'bottom'
      }
    },
    insurance: {
      arrow: {
        left: 610,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    finance: {
      arrow: {
        left: 670,
        useArrow: true
      },
      popconf: {
        left: 0,
        position: 'bottom'
      }
    },
    sendMessage: {
      arrow: {
        left: 167,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    delay: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 365,
        position: 'bottom'
      }
    },
    changeTime: {
      arrow: {
        left: 147,
        useArrow: true
      },
      popconf: {
        left: 50,
        position: 'bottom'
      }
    },
    selectSaleman: {
      arrow: {
        left: 65,
        useArrow: true
      },
      popconf: {
        left: 10,
        position: 'bottom'
      }
    },
    distribution: {
      arrow: {
        left: 280,
        useArrow: true
      },
      popconf: {
        left: -200,
        position: 'bottom'
      }
    },
    transfer: {
      arrow: {
        left: 257,
        useArrow: true
      },
      popconf: {
        left: 270,
        position: 'bottom'
      }
    },
    transferRecord: {
      arrow: {
        left: 485,
        useArrow: true
      },
      popconf: {
        left: -405,
        position: 'bottom'
      }
    },
    cancelOrder: {
      arrow: {
        left: 330,
        useArrow: true
      },
      popconf: {
        left: 405,
        position: 'bottom'
      }
    }
  };
  //是否同意购买保险
  $scope.AgreeBuyInsurance = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //按下列方式解决
  $scope.AgreeNoGroup = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  //旅行社履行合同
  $scope.MoveTravelAgency = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //延期出团
  $scope.AgreeDelayGroup = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //改签其他线路出团
  $scope.AgreeChangeOtherLine = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];
  //拼团预约
  $scope.AgreeFightGroupsAppointment = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  //解除合同
  $scope.AgreeTerminationContract = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  $scope.agreeContract = [{
    id: true,
    value: '同意'
  }, {
    id: false,
    value: '不同意'
  }];

  (function activate() {
    getCertificatesTypes(function(certificates) {
      $scope.Certificates = certificates;
    });

    getEnumeration('ETouristTypes', function(response) {
      $scope.TouristTypes = response;
    });

    getEnumeration('ETouristSingleRoomTypes', function(response) {
      $scope.TouristSingleRoomTypes = response;
    });
  })();

  $scope.chooseCustomer = function(customer) {
    orderTransferCustomer({
      OrderId: $rootScope[position[2]].OrderInfos._id,
      OldCustomerId: $rootScope[position[2]].memberDetail._id.$id,
      NewCustomerId: customer._id.$id
    }, function(response) {
      $scope.showChangeCustomer = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  /**
   * 订单名单翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  $scope.orderMemberPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.orderMemberInfo = $rootScope[position[2]].OrderTourists.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage = new Pagination($rootScope[position[2]].OrderTourists.length, page, pageSize);
  };


  /**
   * 打开日期
   * @param  {Object} event 事件对象
   * @param  {String} type  类型
   * @return {[type]}       [description]
   */
  $scope.openDatePicker = function(event, type) {
    $scope.status[type] = true;
  };

  $scope.openDatePickerContract = function($even, type, item) {
    item[type] = true;
  };
  /**
   * 订单保险翻页
   * @param  {[type]} page [description]
   * @return {[type]}      [description]
   */
  $scope.touristInsPageChange = function(page) {
    if (!page) {
      page = 1;
    }
    var start = (page - 1) * pageSize;

    $rootScope[position[2]].scopeInfo.touristInsuranceInfo = $rootScope[position[2]].TouristInsurances.slice(start, start + pageSize);
    $rootScope[position[2]].scopeInfo.Pagination.touristInsurancesPage = new Pagination($rootScope[position[2]].TouristInsurances.length, page, pageSize);
  };

  /**
   * 编辑联系人
   * @return {[type]}      [description]
   */
  $scope.editContractInfo = function() {
    $rootScope[position[2]].scopeInfo.isContractEditMode = true;
    $rootScope[position[2]].scopeInfo.customerInfo = angular.copy($rootScope[position[2]].OrderInfos.CustomerEnlarge);
    $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes = $rootScope[position[2]].OrderInfos.EmergencyContactNotes;
    $rootScope[position[2]].scopeInfo.customerInfo.address = {
      city: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.City.ForeignKeyID : '',
      region: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Province.ForeignKeyID : '',
      country: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Country.ForeignKeyID : ''
    };
  };

  /**
   * 保存联系人
   * @return {[type]}      [description]
   */
  $scope.saveContractInfo = function() {
    $rootScope[position[2]].scopeInfo.isContractEditMode = false;
    if(!$rootScope[position[2]].scopeInfo.customerInfo.CustomerName){
        $rootScope[position[2]].scopeInfo.isContractEditMode = true;
       $rootScope[position[2]].info = "请填写联系人姓名";
       return;
    }
    if(!$rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile){
      $rootScope[position[2]].scopeInfo.isContractEditMode = true;
       $rootScope[position[2]].info = "请填写联系人电话";
       return;
    }
    modifyOneTeamCustomer({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      CustomerName: $rootScope[position[2]].scopeInfo.customerInfo.CustomerName,
      CustomerMobile: $rootScope[position[2]].scopeInfo.customerInfo.CustomerMobile,
      CertificatesTypeID: $rootScope[position[2]].scopeInfo.customerInfo.CertificatesType.ForeignKeyID,
      TouristDocumentNumber: $rootScope[position[2]].scopeInfo.customerInfo.TouristDocumentNumber,
      CustomerEmail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerEMail,
      CustomerCountryID: $rootScope[position[2]].scopeInfo.customerInfo.address.country,
      CustomerProvinceID: $rootScope[position[2]].scopeInfo.customerInfo.address.region,
      CustomerCityID: $rootScope[position[2]].scopeInfo.customerInfo.address.city,
      CustomerAreaID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Area.ForeignKeyID : '',
      CustomerStreetID: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street ? $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.Street.ForeignKeyID : '',
      CustomerPositionDetail: $rootScope[position[2]].scopeInfo.customerInfo.CustomerLocation.CustomerPositionDetail,
      BodyStateNotes: $rootScope[position[2]].scopeInfo.customerInfo.BodyStateNotes,
      EmergencyContactNotes: $rootScope[position[2]].scopeInfo.customerInfo.EmergencyContactNotes
    }, function() {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.freshDetailPage = function() {
    addRefreshPageByID(($rootScope[switchType[2]].id));
    $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
  };

  /**
   * 名单全选
   * @return {[type]} [description]
   */
  $scope.checkAllMember = function() {
    $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(member){
      if(member.TouristStatus != '正常') return;
      member.isSelected = !!$rootScope[position[2]].scopeInfo.memberCheckAll;
    });
  };

  /**
   * 单个退团
   * @param  {[type]} member [description]
   * @return {[type]}        [description]
   */
  $scope.quitTeam = function(member, ExitTeamNotes) {
    if($scope.isLoading) return;
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify([member._id]),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $rootScope[position[2]].info = "操作成功";
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.freshDetailPage();
    }, function(response){
      $scope.isLoading = false;
    });
  };

  /**
   * 多个退团
   * @param  {[type]} member [description]
   * @return {[type]}        [description]
   */
  $scope.quitTeamMulti = function(ExitTeamNotes) {
    var targetId = [];
    $rootScope[position[2]].scopeInfo.orderMemberInfo.forEach(function(member, key) {
      if (member.isSelected) {
        targetId.push(member._id);
      }
    });
    if (targetId.length <= 0) {
      $rootScope[position[2]].info = '未选择退团人员';
      return;
    }
    $scope.isLoading = true;
    quitTeamFromOrder({
      "OrderID": $rootScope[position[2]].OrderInfos._id,
      "Tourists": JSON.stringify(targetId),
      "ExitTeamNotes": ExitTeamNotes
    }, function(response) {
      $scope.isLoading = false;
      $scope.status.quitTeamOpen = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.freshDetailPage();
    }, function(){
      $scope.isLoading = true;
    });
  };

  /**
   * 打开游客信息编辑弹窗
   * @param  {Object} member 游客对象
   * @return {[type]}        [description]
   */
  $scope.editTourist = function(member) {
    if (member) {
      member.editTourist = true;

      $rootScope[position[2]].addTouristInfo = {
        TouristID: member._id,
        TouristTypeID: member.TouristTypeID,
        GenderTypeID: member.GenderTypeID,
        TouristName: member.TouristName,
        TouristMobile: member.TouristMobile,
        TouristBirthdayDate: member.TouristBirthday,
        CertificatesTypeID: member.CertificatesType.ForeignKeyID,
        TouristDocumentNumber: member.TouristDocumentNumber,
        ProductPlanPriceID: member.Enlarge.ProductPlanPriceID,
        TouristSingleRoomTypeID: member.Enlarge.TouristSingleRoomTypeID,
        TouristPrice: member.PriceEnlarge.TouristPrice,
        ProductPlanPrice: _.find($rootScope[position[2]].planPriceTypes, function(item) {
          if (item.PriceID == member.Enlarge.ProductPlanPriceID) return true;
        })
      };

      $scope.touristInfoChange();
    } else {
      $rootScope[position[2]].addTouristInfo = {
        TouristTypeID: 2,
        TouristSingleRoomTypeID: 1,
        SingleRoomPrice: 0,
        SingleRoomDiff: 0,
        TouristPrice: $rootScope[position[2]].ProductPlanInfo.ExitVisaFee,
        TouristName: '游客'
      };
    }
  };

  $scope.genders = ['男', '女', '保密'];
  /**
   * 保存游客信息
   * @return {[type]} [description]
   */
  $scope.saveTourist = function() {
    var data = angular.extend({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristID: '',
      IsOccupying: true
    }, $rootScope[position[2]].addTouristInfo);

    data.TouristBirthdayDate = $filter('date')(data.TouristBirthdayDate, 'yyyy-MM-dd');
    data.TouristBirthday = data.TouristBirthdayDate;

    if(data.CertificatesTypeID){
      data.CertificatesTypeName = _.find($scope.Certificates, function(item) {
        if (item._id.$id == data.CertificatesTypeID) return true;
      }).CertificatesTypeName;
    }else {
      $rootScope[position[2]].info = "请选择证件";
      return;
    }

    if(!data.ProductPlanPrice){
      $rootScope[position[2]].info = "请选择方案类型";
      return;
    }
    data.ProductPlanPriceID = data.ProductPlanPrice.PriceID;
    data.ProductPlanPriceName = data.ProductPlanPrice.PriceTypeName;
    delete data.ProductPlanPrice;
    delete data.TouristBirthdayDate;
    delete data.SingleRoomDiff;
    delete data.SingleRoomPrice;

    var page = $rootScope[position[2]].scopeInfo.Pagination.orderMemberPage;
    var start = (page.currentPage - 1) * page.limit;

    $scope.status.isLoading = true;
    saveTeamTourTourist({
      Tourist: JSON.stringify(data)
    }, function(response) {
      $scope.status.isLoading = false;
      $scope.status.addTourist = false;
      addRefreshPageByID($rootScope[switchType[2]].id);
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].targetUrl);
    }, function(){
      $scope.status.isLoading = false;
      $scope.status.addTourist = false;
    });
  };


  /**
   * 游客价格信息变更
   * @return {[type]} [description]
   */
  $scope.touristInfoChange = function() {
    var info = $rootScope[position[2]].addTouristInfo;
    if (!info.ProductPlanPrice) {
      info.SingleRoomPrice = 0;
      info.TouristPrice = 0;
      info.SingleRoomDiff = 0;
      return;
    }

    switch ($rootScope[position[2]].addTouristInfo.TouristSingleRoomTypeID) {
      case 1:
      case 2:
        info.SingleRoomDiff = 0;
        break;
      case 3:
        info.SingleRoomDiff = info.ProductPlanPrice.SingleRoomDiff || 0;
        break;
      case 4:
        info.SingleRoomDiff = -info.ProductPlanPrice.SingleRoomDiff || 0;
    }

    var source = $rootScope[position[2]].OrderInfos.OrderSourceTypeID == 4 ? 'Peer' : '';
    switch (info.TouristTypeID) {
      case 1:
      case 2:
        info.SingleRoomPrice = info.ProductPlanPrice[source + 'AdultPrice'];
        break;
      case 3:
        info.SingleRoomPrice = info.ProductPlanPrice[source + 'ChildPrice'];
        break;
      case 4:
        info.SingleRoomPrice = info.ProductPlanPrice[source + 'BabyPrice'];
    }



    info.TouristPrice = info.SingleRoomPrice + info.SingleRoomDiff + $rootScope[position[2]].ProductPlanInfo.ExitVisaFee;

    switch (info.TouristTypeID) {
      case 1:
      case 2:
        info.TouristPrice += $rootScope[position[2]].ProductPlanInfo.AdultMachineBuildingFee;
        break;
      case 3:
        info.TouristPrice += $rootScope[position[2]].ProductPlanInfo.ChildMachineBuildingFee;
        break;
    }

  };

  /**
   * 关闭所有游客信息弹窗
   * @return {[type]} [description]
   */
  $scope.closeAllAddTouristPop = function() {
    if ($scope.status.addTourist)
      $scope.status.addTourist = false;

    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.editTourist = false;
    });
  };

  /**
   * 编辑业务员
   * @return {[type]} [description]
   */

  $scope.editSaleMan = function() {
    $rootScope[position[2]].scopeInfo.isSaleManEditMode = true;
    $rootScope[position[2]].scopeInfo.saleMan = {
      FullName: $rootScope[position[2]].OrderInfos.SalesmanName,
      _id: {
        $id: $rootScope[position[2]].OrderInfos.SalesmanID
      }
    };
  };



  $scope.saveSaleMan = function() {
    $rootScope.isloadList = true;
    $rootScope.showProcessBar = true;
    saveFreeTourSaleMan({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      SalesmanID: $rootScope[position[2]].scopeInfo.saleMan._id.$id,
      SalesmanName: $rootScope[position[2]].scopeInfo.saleMan.FullName
    }, function() {
      $rootScope.isloadList = false;
      $rootScope.showProcessBar = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $rootScope[position[2]].info = "业务员保存成功";
      $rootScope[position[2]].OrderInfos.SalesmanName = $rootScope[position[2]].scopeInfo.saleMan.FullName;
      $rootScope[position[2]].OrderInfos.SalesmanID = $rootScope[position[2]].scopeInfo.saleMan._id.$id;
      $rootScope[position[2]].scopeInfo.isSaleManEditMode = false;
    });
  };

  //***************订单约定模块Start*******************//
  /**
   * 编辑订单约定
   * @return {[type]} [description]
   */
  $scope.editOrderConvention = function() {
    $rootScope[position[2]].scopeInfo.isOrderConventionEditMode = true;
    $rootScope[position[2]].scopeInfo.OrderConventionInfo = angular.copy($rootScope[position[2]].OrderInfos.ContractEnlarge);
    if (!$rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments) {
      $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments = [];
    }

  };

  /**
   * 保存游客关系
   * @return {[type]} [description]
   */

  $scope.saveRelationShip = function() {
    var param = {
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristRelationTypes: []
    };
    for (i = 0; i < $rootScope[position[2]].TouristRelationTypesList.length; i++) {
      if ($rootScope[position[2]].TouristRelationTypesList[i].isSelected) {
        var data = {
          ForeignKeyID: $rootScope[position[2]].TouristRelationTypesList[i]._id,
          TouristRelationTypeName: $rootScope[position[2]].TouristRelationTypesList[i].Name
        };
        param.TouristRelationTypes.push(data);
      }
    }

    UpdateOrderTouristRelationship(param, function() {

      $rootScope[position[2]].OrderInfos.TouristRelation = "";
      param.TouristRelationTypes.forEach(function(item) {
        $rootScope[position[2]].OrderInfos.TouristRelation = $rootScope[position[2]].OrderInfos.TouristRelation + " " + item.TouristRelationTypeName;
      });
      $rootScope[position[2]].scopeInfo.isRelationShopEditMode = false;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });
  };



  /**
   * 保存订单约定
   * @return {[type]} [description]
   */
  $scope.saveOrderConventionInfo = function() {

    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.forEach(function(item) {
      item.StartDay = $filter('date')(item.StartDay, 'yyyy-MM-dd');
      item.EndDay = $filter('date')(item.StartDay, 'yyyy-MM-dd');
    });
    /*接口需要传的参数*/
    var data = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderInfos._id,
      /*解决方式*/
      IsAgreeNoGroup: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeNoGroup,
      /*转至其他旅行社*/
      IsMoveTravelAgency: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsMoveTravelAgency,
      /*旅行社名称*/
      TravelAgencyName: $rootScope[position[2]].scopeInfo.OrderConventionInfo.TravelAgencyName,
      /*延迟期限*/
      IsAgreeDelayGroup: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeDelayGroup,
      /*换成其他路线*/
      IsAgreeChangeOtherLine: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeChangeOtherLine,
      /*终止合同*/
      IsAgreeTerminationContract: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeTerminationContract,
      /*拼团约定*/
      IsAgreeFightGroupsAppointment: $rootScope[position[2]].scopeInfo.OrderConventionInfo.IsAgreeFightGroupsAppointment,
      /*拼团约定旅行社名称*/
      FightGroupTravelAgencyName: $rootScope[position[2]].scopeInfo.OrderConventionInfo.FightGroupTravelAgencyName,
      /*约定支付类型和时间*/
      // ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractPayTypeAndTime,
      /*其他约定*/
      //  OtherAppointment: $rootScope[position[2]].scopeInfo.OrderConventionInfo.OtherAppointment,
      /*预约合同*/
      ContractAppointment: angular.toJson($rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments, true)
    };
    /*接口：方法注入*/
    modifyOrderConvention(data, function() {
      /*继承  修改保存后列表数据显示*/
      $rootScope[position[2]].OrderInfos.ContractEnlarge = angular.extend($rootScope[position[2]].scopeInfo.OrderConventionInfo);
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);

    });

    /*判断编辑字段变成false：页面上显示编辑后的资料*/
    $rootScope[position[2]].scopeInfo.isOrderConventionEditMode = false;
  };

  //添加黄金周特别约定
  $scope.addOrderHolidayAppointment = function() {

    var value = {
      StartDay: 0,
      EndDay: 0,
      CompanyBreachOfContractRatio: 0,
      TouristBreachOfContractRatio: 0
    };
    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.push(value);
  };
  //删除黄金周特别约定
  $scope.delOrderHolidayAppointment = function(index, item) {
    $rootScope[position[2]].scopeInfo.OrderConventionInfo.ContractAppointments.splice(index, 1);
  };
  //***************订单约定模块End*******************//



  //***************订单备注模块Start*******************//
  /**
   * 编辑订单备注
   * @return {[type]} [description]
   */
  $scope.editOrderNotes = function() {
    $rootScope[position[2]].scopeInfo.orderNoteTmp = {
      /*支付时间和方式*/
      ContractPayTypeAndTime: $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime,
      /*其他约定*/
      OtherAppointment: $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment,
      /*备注*/
      OrderNotes: $rootScope[position[2]].OrderInfos.OrderNotes
    };
    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = true;
  };

  /**
   * 保存订单备注
   * @return {[type]} [description]
   */
  $scope.saveOrderNotes = function() {
    var data = {
      /*订单ID*/
      OrderID: $rootScope[position[2]].OrderInfos._id,
      /*支付时间和方式*/
      ContractPayTypeAndTime: $rootScope[position[2]].scopeInfo.orderNoteTmp.ContractPayTypeAndTime,
      /*其他约定*/
      OtherAppointment: $rootScope[position[2]].scopeInfo.orderNoteTmp.OtherAppointment,
      /*备注*/
      OrderNote: $rootScope[position[2]].scopeInfo.orderNoteTmp.OrderNotes
    };
    /*接口：方法注入*/
    modifyOrderNotes(data, function() {
      /*继承  修改保存后列表数据显示*/
      $rootScope[position[2]].OrderInfos.ContractEnlarge.ContractPayTypeAndTime = data.ContractPayTypeAndTime;
      $rootScope[position[2]].OrderInfos.ContractEnlarge.OtherAppointment = data.OtherAppointment;
      $rootScope[position[2]].OrderInfos.OrderNotes = data.OrderNote;
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
    });

    $rootScope[position[2]].scopeInfo.isOrderNoteEditMode = false;
  };
  //***************订单备注模块End*******************//



  /**
   * 管理费用
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.handleFee = function(isAdd) {
    //清空一下数据
    $rootScope[position[2]].scopeInfo.isHandleFee = {};
    if (isAdd) {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = true;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    } else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = true;
    }
  };

  /**
   * 保存管理费用信息
   * @param  {Boolean} isAdd [description]
   * @return {[type]}        [description]
   */
  $scope.saveHandleFeeInfo = function(isAdd) {

    var param = {};
    if ($rootScope[position[2]].scopeInfo.isHandleFee.add) {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 2,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeAdd,
        BusinessMainTypeID: 2,
        BusinessMainTypeName: '增加费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeAddNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeAddTitle,
        BusinessTypeID : 1
      };
       if(!param.Name){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    } else {
      param = {
        OrderID: $rootScope[position[2]].OrderInfos._id,
        Type: 3,
        Name: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        Notes: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        Price: $rootScope[position[2]].scopeInfo.feeInfo.feeDel,
        BusinessMainTypeID: 3,
        BusinessMainTypeName: '减少费用',
        PriceNote: $rootScope[position[2]].scopeInfo.feeInfo.feeDelNotes,
        BusinessTypeName: $rootScope[position[2]].scopeInfo.feeInfo.feeDelTitle,
        BusinessTypeID : 2
      };
       if(!param.Name){
        $rootScope[position[2]].info = '请填写名称';
        return;
      }
       if(!param.Price){
        $rootScope[position[2]].info = '请填写金额';
        return;
      }
    }
    insertOrderPriceRecord(param, function() {
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
    $scope.cancelHandleFee();
  };

  //****************房间安排开始***************************//

  $scope.roomArrange = function() {
    $rootScope[position[2]].scopeInfo.loadRoomInfo = true;
    if(!$scope.ETouristRoomStatus){
      getComboxTouristRoomStatus(function(response){
        $scope.ETouristRoomStatus = response;
      });
    }
    getRoomArrangeInfo(1);
    getArrangeTouristsByOrderID({
      OrderID: $rootScope[position[2]].OrderInfos._id
    }, function(response) {
      $rootScope[position[2]].scopeInfo.roomTouristsList = response;
    });
  };

  function getRoomArrangeInfo(page) {
    getOrderTouristRoomArrangeByOrderID({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      PageIndex: 1,
      PageSize: pageSize,
      SearchInfo: ""
    }, function(roomInfo) {
      $rootScope[position[2]].scopeInfo.loadRoomInfo = false;
      $rootScope[position[2]].scopeInfo.Pagination.roomPagination = new Pagination(roomInfo.count, page, pageSize);
      $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList = roomInfo.list;
    });
  }

  $scope.roomArrangePageChange = function(page) {
    if ($rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing) {
      $rootScope[position[2]].info = '正在编辑房间信息，请先完成编辑';
      return;
    }
    if (!page) {
      page = 1;
    }
    getRoomArrangeInfo(page);
  };

  $scope.editRoomArrangeInfo = function(room) {
    if ($rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing) {
      $rootScope[position[2]].info = '正在编辑房间信息，请先完成编辑';
      return;
    }
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = true;
    room.isEditMode = true;
    $rootScope[position[2]].scopeInfo.roomTmp.status = room.TouristRoomStatus;
    if (room.Tourists[0]) {
      $rootScope[position[2]].scopeInfo.roomTmp.tourist = room.Tourists[0].TouristID;
    }
    if (room.Tourists[1]) {
      $rootScope[position[2]].scopeInfo.roomTmp.touristOther = room.Tourists[1].TouristID;
    }
  };

  $scope.saveRoomArrangeInfo = function(room) {
    var data = [];
    var tempId = "";
    room.isEditMode = false;
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = false;
    if ($rootScope[position[2]].scopeInfo.roomTmp.tourist) {
      tempId = room.Tourists[0] ? room.Tourists[0].TouristID : '';
      if ($rootScope[position[2]].scopeInfo.roomTmp.tourist != tempId || $rootScope[position[2]].scopeInfo.roomTmp.status != room.TouristRoomStatus) {
        data.push({
          InTouristID: $rootScope[position[2]].scopeInfo.roomTmp.tourist,
          OutTouristID: room.Tourists[0] ? room.Tourists[0].TouristID : ''
        });
      }
    }
    if ($rootScope[position[2]].scopeInfo.roomTmp.touristOther) {
      tempId = room.Tourists[1] ? room.Tourists[1].TouristID : '';
      if ($rootScope[position[2]].scopeInfo.roomTmp.touristOther != tempId || $rootScope[position[2]].scopeInfo.roomTmp.status != room.TouristRoomStatus) {
        data.push({
          InTouristID: $rootScope[position[2]].scopeInfo.roomTmp.touristOther,
          OutTouristID: room.Tourists[1] ? room.Tourists[1].TouristID : ''
        });
      }
    }

    orderTouristRoomArrange({
      OrderID: $rootScope[position[2]].OrderInfos._id,
      TouristRoomStatus: $rootScope[position[2]].scopeInfo.roomTmp.status,
      RoomTourists: JSON.stringify(data),
      RoomNumber: room.RoomNumber
    }, function(response) {
      $rootScope[position[2]].info = '修改成功';
      $rootScope[position[2]].scopeInfo.loadRoomInfo = true;
      getRoomArrangeInfo(1);
    });
  };

  $scope.delRoomArrangeInfo = function(room, index) {
    showWarningBox('是否确认要删除房间？', function() {
      var data = [];
      room.Tourists.forEach(function(tourist) {
        data.push(tourist.TouristID);
      });
      orderCancelRoomArrange({
        Tourists: JSON.stringify(data)
      }, function(response) {
        console.log(response);
        $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList.splice(index, 1);
      });
    });
  };

  // $scope.addOrderRoomArrangeInfo = function(){
  //  $rootScope[position[2]].scopeInfo.roomArrangeInfo.roomList.push({
  //    isEditMode:true
  //  });
  // };

  $scope.orderRoomArrangeRandom = function() {
    $rootScope[position[2]].scopeInfo.loadRoomInfo = true;
    orderRandomRoomArrangement({
      OrderID: $rootScope[position[2]].OrderInfos._id
    }, function(response) {
      $rootScope[position[2]].info = '成功随机安排房间';
      getRoomArrangeInfo(1);
    });
  };

  $scope.cancelSaveRoomArrangeInfo = function(room) {
    $rootScope[position[2]].scopeInfo.roomTmp = {};
    $rootScope[position[2]].scopeInfo.roomArrangeInfo.isEditing = false;
    room.isEditMode = false;
  };

  //****************房间安排结束***************************//
  //二维码
  $scope.isMakeQRCode = function() {
    $rootScope[position[2]].scopeInfo.isMadeCode = !$rootScope[position[2]].scopeInfo.isMadeCode;
    if ($rootScope[position[2]].scopeInfo.isMadeCode === true) {
      $('#code').qrcode({
        width: 200, //宽度
        height: 200, //高度
        text: "http://rpc.iflying.com/Order/TeamOrder/GetOrderInfo?OrderId=" + $rootScope[position[2]].OrderInfos._id //任意内容
      });
    } else {
      $('#code').empty();
    }

  };

  //*************************改期开始************************//
  $rootScope[position[2]].rescheduleInfo = {
    StartTime: $filter('limitTo')($rootScope[position[2]].OrderInfos.TeamStartTime, 10),
    EndTime: $filter('limitTo')($rootScope[position[2]].OrderInfos.TeamEndTime, 10),
    planPriceTypes: null,
    allPlanPriceTypes: {},
    planID: $rootScope[position[2]].OrderInfos.ProductPlanID
  };

  $scope.reshedule = function() {
    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      item.priceInfo = _.find($rootScope[position[2]].planPriceTypes, function(obj) {
        if (obj.PriceID == item.Enlarge.ProductPlanPriceID)
          return true;
      });

      $scope.reschedulePriceChange(item);
    });

    $rootScope[position[2]].rescheduleInfo.planPriceTypes = $rootScope[position[2]].planPriceTypes;
  };

  $scope.reschedulePriceChange = function(member) {
    var diff = 0;
    if (!member.priceInfo) {
      member.singlePrice = 0;
      return;
    }
    var source = $rootScope[position[2]].OrderInfos.OrderSourceTypeID == 4 ? 'Peer' : '';

    switch (member.Enlarge.TouristSingleRoomTypeID) {
      case 3:
        diff = member.priceInfo.SingleRoomDiff;
        break;
      case 4:
        diff = -member.priceInfo.SingleRoomDiff;
    }

    switch (member.TouristTypeID) {
      case 1:
      case 2:
        member.singlePrice = member.priceInfo[source + 'AdultPrice'];
        break;
      case 3:
        member.singlePrice = member.priceInfo[source + 'ChildPrice'];
        break;
      case 4:
        member.singlePrice = member.priceInfo[source + 'BabyPrice'];
    }

    member.singlePrice += diff;
    $rootScope[position[2]].rescheduleInfo.totalPrice = 0;

    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      $rootScope[position[2]].rescheduleInfo.totalPrice += item.singlePrice;
    });
  };

  //日历的配置
  $rootScope[position[2]].calendarOptions = {
    viewDate: $rootScope[position[2]].OrderInfos.TeamStartTime.slice(0,10),
    calendarClass: "datetimePicker",
    headClass: "calHead",
    bodyClass: "calBody",
    footClass: "calFoot",
    headDateClass: "calHeadDate",
    useShort: true,

    fillDay: function(day, date) {
      if (!$rootScope[position[2]].productPlanList) {
        $rootScope[position[2]].productPlanList = [];
      }
      var planDetail = _.find($rootScope[position[2]].productPlanList, function(item) {
        return item.StartTime.sec === date.getTime() / 1000;
      });
      var html = '<div class="cell_date">' + $filter('date')(date, 'dd') + '</div>';
      if (undefined !== planDetail) {
        html = '<div ng-click="operate.showPlanDetail(\'' + 　planDetail._id.$id + '\');"><div class="cell_date yw">' + $filter('date')(date, 'dd') + '</div>';
        var MorethanNumber = planDetail.MorethanNumber && planDetail.MorethanNumber !== '' ? planDetail.MorethanNumber : 0;
        MorethanNumber = parseInt(MorethanNumber);
        MorethanNumber = MorethanNumber > 9 ? '<span class="gT">库存充足</span>' : '库存：<font>' + MorethanNumber + '</font>';

        var price = '价格无';
        if (angular.isArray(planDetail.ProductPlanPrice)){
          var defaultPrice = _.find(planDetail.ProductPlanPrice, {isDefault: 1});
          if(defaultPrice){
            if(defaultPrice.Deductiblevoucher) html = '<span class="offset">抵</span>' + html;

            price = '￥' + defaultPrice.DefaultPrice;
          }
        }

        html += '<div class="priceRow">' + price + '</div><div class="seatRow">' + MorethanNumber + '</div></div>';
      }
      return html;
    },

    monthChange: function(datetime) {
      getTeamtourPlanList({
        ProductID: $rootScope[position[2]].OrderInfos.ProductID,
        StartTime: $filter('date')(datetime, 'yyyy-MM')
      }, function(response) {
        $rootScope[position[2]].productPlanList = response.list;
        $rootScope[position[2]].reFill = true;
      });
    }
  };

  $scope.operate = {
    showPlanDetail: function(planDetailId) {
      if (this.planID != planDetailId) {
        var plan = _.find($rootScope[position[2]].productPlanList, function(item) {
          if (item._id.$id == planDetailId) return true;
        });

        if (plan.MorethanNumber < $rootScope[position[2]].OrderTourists.length) {
          $rootScope[position[2]].info = "余位不足，请选择其他计划";
          return;
        }

        this.planID = planDetailId;
        this.plan = plan;
        $scope.status.reschedule = false;
      }
    },
    planID: "",
    plan: null
  };

  $scope.$watch('status.reschedule', function(newValue, oldValue) {
    if (oldValue === true && newValue === false) {
      var plan = $scope.operate.plan;
      if (!plan) return;

      var rescheduleInfo = $rootScope[position[2]].rescheduleInfo;
      rescheduleInfo.StartTime = $filter('date')(plan.StartTime.sec * 1000, 'yyyy-MM-dd');
      rescheduleInfo.EndTime = $filter('date')((plan.StartTime.sec + 3600 * 24 * $rootScope[position[2]].ProductInfo.LateNight) * 1000, 'yyyy-MM-dd');
      rescheduleInfo.planID = plan._id.$id;
      rescheduleInfo.totalPrice = 0;

      if (!rescheduleInfo.allPlanPriceTypes[rescheduleInfo.StartTime]) {
        getTeamProductPriceByPlanID({
          ProducePlanID: $scope.operate.planID
        }, function(response) {
          rescheduleInfo.allPlanPriceTypes[rescheduleInfo.StartTime] = response;
          rescheduleInfo.planPriceTypes = response;
        });
      } else {
        rescheduleInfo.planPriceTypes = rescheduleInfo.allPlanPriceTypes[rescheduleInfo.StartTime];
      }
    }
  });

  $scope.saveReschedule = function() {
    // if ($rootScope[position[2]].OrderInfos.OrderStatus != 2) {
    //   $rootScope[position[2]].info = "该订单不可以改期";
    //   return;
    // }

    if ($rootScope[position[2]].rescheduleInfo.planID == $rootScope[position[2]].OrderInfos.ProductPlanID) {
      $rootScope[position[2]].info = '所选计划未变更';
      return;
    }

    var data = {};
    data.OrderID = $rootScope[position[2]].OrderInfos._id;
    data.ReschedulePrice = $rootScope[position[2]].rescheduleInfo.totalPrice;
    data.RescheduleReason = $rootScope[position[2]].rescheduleInfo.RescheduleReason;
    data.ToProductPlanID = $rootScope[position[2]].rescheduleInfo.planID;
    data.Tourists = [];

    $rootScope[position[2]].OrderTourists.forEach(function(item) {
      data.Tourists.push({
        TouristID: item._id,
        TouristName: item.TouristName,
        GenderTypeID: item.GenderTypeID,
        TouristPrice: item.singlePrice,
        ProductPlanPriceID: item.priceInfo.PriceID,
        TouristSingleRoomTypeID: item.Enlarge.TouristSingleRoomTypeID
      });
    });

    data.Tourists = JSON.stringify(data.Tourists);
    $scope.status.isSubmit = true;
    orderRescheduleApplyToGroup(data, function(response) {
      $rootScope[position[2]].info = '已经提交申请';
      $scope.status.isSubmit = false;
      $rootScope[position[2]].scopeInfo.reschedule = false;
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };
  //*************************改期结束************************//

  $scope.editFee = function(fee){
    fee.isEdit = !fee.isEdit;
    $rootScope[position[2]].scopeInfo.feeTemp = angular.copy(fee);
  };

  $scope.saveEditFeeInfo = function(fee){
    updateOrderPriceRecord({
      ForeignKeyID: fee.ForeignKeyID,
      OrderID: $rootScope[position[2]].OrderInfos._id,
      BusinessTypeName: $rootScope[position[2]].scopeInfo.feeTemp.BusinessTypeName,
      BusinessMainTypeID: fee.BusinessMainTypeID,
      PriceNote: $rootScope[position[2]].scopeInfo.feeTemp.PriceNote,
      Price: $rootScope[position[2]].scopeInfo.feeTemp.Price
    }, function(response){
      addRefreshPageByID(($rootScope[switchType[2]].id));
      sendOrderInfo($rootScope[position[2]].OrderInfos._id);
      $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
    });
  };

  $scope.cancelHandleFee = function(fee){
    if(typeof fee == 'object'){
      fee.isEdit = false;
    }else {
      $rootScope[position[2]].scopeInfo.isHandleFee.add = false;
      $rootScope[position[2]].scopeInfo.isHandleFee.del = false;
    }
  };

  $scope.deleteSubFee = function(fee){
    showWarningBox("确定要删除该费用吗", function(){
      delOrderPriceRecord({
        RecordID: fee.ForeignKeyID,
        OrderID: $rootScope[position[2]].OrderInfos._id
      }, function(response){
        sendOrderInfo($rootScope[position[2]].OrderInfos._id);
        addRefreshPageByID(($rootScope[switchType[2]].id));
        $scope.reFetchDetail($rootScope[switchType[2]].httpUrl + '?id=' + $rootScope[position[2]].OrderInfos._id);
      });
    });
  };

});
