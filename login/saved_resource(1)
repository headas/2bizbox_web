angular.module('Dialog', ['ngAnimate']).controller('DialogController', ['$scope', "$window", function($scope, $window) {
    $scope.choose = function(value) {
      $scope.DialogValue = value;
    };

    $scope.showDialog = function($element) {
      $scope.isShow = true;
      $window.onclick = function() {
        $scope.isShow = false;
        $scope.$apply();
      };
    };

  }])
  // 优先级
  .directive('dialogPriority', function($http) {
    return {
      restrict: 'CEA',
      templateUrl: '/public/angularView/common/priority.html',
      link: function($scope, $element) {
        $scope.$watch('DialogValue', function(value) {
          if (value) {
            var url = $($element).attr('url');
            var keys = $($element).attr('key').split(',');

            var data = $.param({
              value: value
            });
            $http({
              method: "POST",
              url: url,
              data: data,
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
              }
            }).then(function(response) {
              var temp = [];
              temp[0] = response.data;
              for (var i = 0; i < keys.length; i++) {
                temp[i + 1] = [];
                temp[i + 1][keys[i]] = temp[i];
              }
              $scope.detailData = temp[keys.length];
            });
          }
        });
      }
    };
  })
  // 员工列表
  .directive('dialogUserList', function() {
    return {
      restrict: 'CAE',
      templateUrl: '/public/angularView/common/userList.html',
    };
  });
/**
 * 用户模块，包含用户信息、登录、退出等
 */
var user = angular.module("User", ['ngAnimate']);
/**
 * 用户信息
 */
user.factory("userInfo", function userInfoFactory(ICFollowNotice, selectedAddress, getInformationTypes, $rootScope, $http, setPermission, connectIO, refreshToken, intentionCustomerLogin, componentsDepartment, componentsAddress,
  getStationAll, componentsPosition, getIntentionCustomerSource, getIntentionCustomerActivity, getIntentionCustomerDifficultyDegree, getIntentionCustomerRecordType,
  getIntentionCustomerReviewState, getIntentionCustomerQuestionType, getFinanceBaseType, getAddrList, getAllDestination, getVisaAddress,
  setRPCSession, $timeout, browser, getHandlingItems, erpMenus) {
  var userInfo = function() {
    console.log($rootScope);
    $rootScope.browser = browser();

    HYhttp($http, {
      url: baseUrl + 'common/user/getMyInfo',
      method: "POST"
    }).then(function successCallback(response) {
      if (response.data.code >= 700 && response.data.code < 800) {
        $rootScope.userinfo = response.data.data;
        global.userinfo = $rootScope.userinfo;
        userinfo = response.data.data;
        $rootScope.showUserinfo = true;
        setPermission();
        $rootScope.userinfo.roles = {};
        judgeMeAsFinance();
        intentionCustomerBasicData();

        $rootScope.SocketConnectIO = new connectIO();
        $rootScope.SocketConnectIO.connect();
        $rootScope.SocketConnectIO.sendMessage('remindLogin', $rootScope.userinfo.token);
        $rootScope.SocketConnectIO.startListen();
        global.SocketConnectIO = $rootScope.SocketConnectIO;
        refreshToken();
        // 消息中心 //////////////////////////////////////
        global.InformationCenter = {};
        $rootScope.InformationCenter = {};
        getInformationTypes(function(response) {
          if (response.code >= 700 && response.code < 800) {
            global.InformationCenter.RemindTypes = response.data;
            $rootScope.InformationCenter.RemindTypes = response.data;
          }
        });
        getHandlingItems(function(response) {
          global.InformationCenter.HandlingItemTypes = response.data;
          $rootScope.InformationCenter.HandlingItemTypes = response.data;
        });

        // 采购中心·迪斯尼 //////////////////////////////////////
        global.disney = {};

        // 部门
        componentsDepartment({}, function(response) {
          $rootScope.Departments = response.data;
          global.Departments = $rootScope.Departments;

        });
        // 站点
        getStationAll(function(response) {
          $rootScope.Station = response;
          global.Station = response;
        });
        // 地点
        componentsAddress({}, function(response) {
          $rootScope.Address = response;
          global.Address = response;
        });
        getAddrList(function(continent) {
          $rootScope.BasicGADDRInfo = continent;
          global.BasicGADDRInfo = continent;
          var country = _.find($rootScope.BasicGADDRInfo, function(item) {
            return item.Title == '中国';
          });
          getAddrList(function(regions) {
            $rootScope.BasicGADDRRegions = regions;
            global.BasicGADDRRegions = regions;
          }, country._id.$id);
        });
        //产品用的地址信息
        getAllDestination(function(des) {
          $rootScope.ProductAllAddr = des;
          global.ProductAllAddr = des;
        });
        //签证地点
        getVisaAddress({
          page: 1,
          limit: 9999
        }, function(response) {
          $rootScope.VisaAddress = response.data.list;
          global.VisaAddress = response.data.list;
        });
        // 精选地点
        selectedAddress(function(response) {
          $rootScope.SelectedAddress = response;
          global.SelectedAddress = response;
        });
        // 岗位
        componentsPosition({}, function(response) {
          $rootScope.Position = response;
          global.Position = response;
        });
        //console.info(userinfo.token);
        setRPCSession(userinfo.token, function(result) {
          // var Days = 30;
          // var exp  = new Date();
          // exp.setTime(exp.getTime() + Days*24*60*60*1000);
          // document.cookie = "RPCSession" + "="+ escape (result.data) + ";expires=" + exp.toGMTString()+';domain=.iflying.com';
          //console.info(result);
          // 财务基本信息
          getFinanceBaseType(function(response) {
            $rootScope.FinancesType = response;
            global.FinancesType = response;
          });

          //fetch首页
          var localtionHref = window.location.href;
          var fetchUrl = localtionHref.substring(localtionHref.indexOf('#') + 2);
          if (fetchUrl) {
            erpMenus(function() {
              var isFetch = false;
              angular.forEach($rootScope.erpMenus.subMenu, function(value, key) {
                $rootScope.erpMenus.subMenu[key].forEach(function(menu) {
                  if (menu.url == fetchUrl) {
                    isFetch = true;
                  }
                  menu.list.forEach(function(subMenu) {
                    if (subMenu.url == fetchUrl) {
                      isFetch = true;
                    }
                  });
                });
              });
              if (isFetch) {
                $rootScope.fetch(fetchUrl);
              } else {
                $rootScope.fetch('erpIndex/erpIndexTemp/list');
              }
            });
          } else {
            $rootScope.fetch('erpIndex/erpIndexTemp/list');
          }

        });

        intentionCustomerLogin(userinfo.token);
        $timeout(ICFollowNotice, 5000);
      } else {
        console.log(response.data);
      }

      function judgeMeAsFinance() {
        var myLabels = _.pluck($rootScope.userinfo.Label, "LabelGroup");
        var labelGroupName = ["财务"];
        var tag = false;
        myLabels.forEach(function(item) {
          if (_.indexOf(labelGroupName, item) > -1) {
            tag = true;
          }
        });
        $rootScope.userinfo.roles.finance = tag;
      }

      function intentionCustomerBasicData() {
        // 意向客户 //////////////////////////////////////
        $rootScope.IntentionCustomer = {};
        global.IntentionCustomer = {};
        getIntentionCustomerSource(function(data) {
          $rootScope.IntentionCustomer.Source = data;
          global.IntentionCustomer.Source = data;
        });
        getIntentionCustomerDifficultyDegree(function(data) {
          $rootScope.IntentionCustomer.DifficultyDegree = data;
          global.IntentionCustomer.DifficultyDegree = data;
        });
        getIntentionCustomerRecordType(function(data) {
          $rootScope.IntentionCustomer.RecordType = data;
          global.IntentionCustomer.RecordType = data;
        });
        getIntentionCustomerReviewState(function(data) {
          $rootScope.IntentionCustomer.ReviewState = data;
          global.IntentionCustomer.ReviewState = data;
        });
        getIntentionCustomerActivity(function(data) {
          $rootScope.IntentionCustomer.Activities = data;
          global.IntentionCustomer.Activities = data;
        });
        getIntentionCustomerQuestionType(function(data) {
          $rootScope.IntentionCustomer.QuestionType = data;
          global.IntentionCustomer.QuestionType = data;
        });
      }
    }, function errorCallback(response) {});
  };
  return userInfo;
});

user.factory("refreshToken", function($http, $rootScope, $interval, getNewToken) {
  var refresh = function() {
    getNewToken();
    $interval(function() {
      getNewToken();
    }, 1800 * 1000);
  };
  return refresh;
});

user.factory("intentionCustomerLogin", function($http, $rootScope, showErrorInfo) {
  var intentLogin = function(token) {
    HYhttp($http, {
      url: intentionCustomerUrl + '/getUserInfo',
      method: "POST",
      data: {
        "token": token
      }
    }).then(function successCallback(response) {
      if (response.data.code >= 700 && response.data.code < 800) {
        console.log(response.data);
      } else {
        showErrorInfo(response.data);
      }
    }, function errorCallback(response) {});
  };
  return intentLogin;
});

// user.factory("rpcLogin", function($http, $rootScope, showErrorInfo) {
//   var intentLogin = function(token, callback) {
//     HYhttp($http, {
//       url: dreamFlyUrl + 'Login.aspx',
//       method: "GET",
//       data: {
//         "token": token
//       }
//     }).then(function successCallback(response) {
//       if (response.data.code >= 700 && response.data.code < 800) {
//         console.log(response.data);
//         callback();
//       } else {
//         showErrorInfo(response.data);
//       }
//     }, function errorCallback(response) {});
//   };
//   return intentLogin;
// });


user.factory("setRPCSession", function($http, $rootScope, showErrorInfo) {
  var intentLogin = function(token, callback) {
    HYhttp($http, {
      url: dreamFlyUrl + 'Login/SetLoginSessionID',
      method: "POST",
      data: {
        "token": token
      }
    }).then(function successCallback(response) {
      callback(response);
    }, function errorCallback(response) {});
  };
  return intentLogin;
});

user.factory("getNewToken", function($http, $rootScope, showErrorInfo) {
  var getNewToken = function() {
    HYhttp($http, {
      url: baseUrl + 'common/user/refreshToken',
      method: "POST",
    }).then(function successCallback(response) {
      if (response.data.code >= 700 && response.data.code < 800) {
        userinfo = response.data.data;
      } else {
        window.location.href = baseUrl;
        //showErrorInfo(response.data);
      }
    }, function errorCallback(response) {});
  };
  return getNewToken;
});

user.factory("login", function($http, $rootScope) {
  var login = function(name, password, isRemember, successCallback, failCallBack) {
    HYhttp($http, {
      url: baseUrl + 'common/user/login',
      data: {
        userName: name,
        pwd: password,
        isRemember: isRemember
      },
      method: "POST"
    }).then(function(response) {
      if (response.data.code == 701) {
        successCallback(response);
      } else {
        failCallBack();
      }
    }, function() {});
  };
  return login;
});

user.factory("setPermission", function($http, $rootScope) {
  var setPermission = function(name, password) {
    HYhttp($http, {
      url: baseUrl + 'common/user/login',
      data: {
        userName: name,
        pwd: password
      },
      method: "POST"
    }).then(function(response) {
      console.log(response.data);
    }, function() {});
  };
  return setPermission;

});
/**
 * 列表模块
 */
var list=angular.module("List",["User","ngAnimate"]).run(function(){
	
});

/**
 * 
 */
var mainView=angular.module("MainView",[]);/**
 * 提醒模块
 */
var notice = angular.module("Notice", ['ngAnimate', "User"]);
/**
 * 提醒列表
 */

notice
  .factory(
    "noticeList",
    function(userInfo, $rootScope, connectIO) {
      var notice = function() {
        this.mSocketIO = new connectIO();

        //初次登录，显示提醒

      };
      return notice;
    });
/**
 * 边栏模块
 */
var sidebar = angular.module("Sidebar", ['ngAnimate', "Notice", "User", "LoadingBar"]);
// sidebar.config(function($httpProvider){
// $httpProvider.defaults.headers.post['Content-Type'] =
// 'application/x-www-form-urlencoded';
// });

/**
 * 切换菜单
 *
 * @param $rootScope
 * @param $http
 * @param $templateCache
 * @returns {String}
 */
sidebar.factory("changeMenu", function changeMenuFactory($rootScope, $http, $templateCache, menu, showLoading, hideLoading, $timeout, hideAllMenuAndNavi) {
  /**
   * 变化菜单
   */
  var changeMenu = function(item) {
    // 如果当前导航就是所点击导航，则隐藏导航但是不切换菜单
    if ($rootScope.currentNavi == item.title) {
      $timeout(function() {
        $rootScope.showGlobalNavi = false;
      }, 200);
      return;
    } else {
      // 隐藏所有导航和菜单
      hideAllMenuAndNavi();
    }
    $rootScope.currentNavi = item.title;
    // 请求菜单并显示

    menu(item);
  };
  return changeMenu;
});

sidebar.factory("hideAllMenuAndNavi", function changeMenuFactory($rootScope, $http, $templateCache, menu, showLoading, hideLoading, $timeout) {
  return function(item) {
    $rootScope.showGlobalNavi = false;
    $rootScope.tipMenu = false;
    $rootScope.defaultMenu = false;
    $rootScope.interactiveMenu = false;
    $rootScope.foldMenu = false;
    $rootScope.menus.list = [];
  };
});


/**
 * 请求菜单API并显示菜单
 */
sidebar.factory("menu", function menuFactory($rootScope, $http, $templateCache, hideLoading, showLoading) {
  var menu = function(item) {
    showLoading();
    if (!item._id) {
      $rootScope.menus = [];
      hideLoading();
      return;
    }
    if (item && $rootScope.erpMenus) {
      $rootScope.menus.list = $rootScope.erpMenus.subMenu[item.menuID];
      $rootScope.menus.title = item.title;
      $rootScope[item.menuType] = true;
    }
    if ($rootScope.tipMenu) {
      $rootScope.menuUrl = '/public/angularView/gadget/frame/left_menu/tip_menu.html';
    }
    if ($rootScope.defaultMenu) {
      $rootScope.menuUrl = '/public/angularView/gadget/frame/left_menu/default_menu.html';
    }
    if ($rootScope.interactiveMenu) {
      $rootScope.menuUrl = '/public/angularView/gadget/frame/left_menu/interactive_menu.html';

    }
    if ($rootScope.foldMenu) {
      $rootScope.menuUrl = '/public/angularView/gadget/frame/left_menu/fold_menu.html';
    }
    hideLoading();
  };
  return menu;
});
/**
 * 显示边栏
 *
 * @param $rootScope
 * @returns {Function}
 */
sidebar.factory("sidebarshow", function sidebarshowFactory($rootScope) {
  var show = function() {
    $rootScope.showSidebar = true;
  };
  return show;
});

sidebar.factory("erpMenus", function globalNaviFactory($rootScope, $http, $templateCache, showErrorInfo) {
  var erpMenus = function(callback) {
    $http({
      method: "POST",
      data: {
        navi: $rootScope.currentNavi
      },
      url: baseUrl + "menus/getAllMenus",
      cache: $templateCache
    }).then(function successCallback(response) {
      if (response.data.code >= 700 && response.data.code < 800) {
        $rootScope.erpMenus = response.data.data;
        $rootScope.globalNavi = response.data.data.navi;
        getInformationMenus();
        if(angular.isFunction(callback)){
          callback();
        }
      } else {
        showErrorInfo(response.data);
      }

      function getInformationMenus() {
        $rootScope.erpMenus.subMenu.informationCenter = getInformationMenuTree();
        $rootScope.erpMenus.navi.push(getInformationNavi());

        function getInformationNavi() {
          $rootScope.InformationNavi = {
            _id: {
              $id: "0"
            },
            class: "notice-item",
            companyID: "",
            icon: "",
            isDel: 0,
            list: [],
            menuID: "informationCenter",
            menuType: "foldMenu",
            parent: "",
            sort: 99,
            tip: "所有通知事项",
            title: "通知事项",
            url: ""
          };
          return $rootScope.InformationNavi;
        }

        function getInformationMenuTree() {
          var menusTree = [{
            list: [{
              // menuID : "informationCenterTasksHR",
              // title : "人资行政",
              // url :
              // "informationCenter/informationCenterTasks/list?type=HR"
              // },
              // {
              menuID: "ICTFinance",
              title: "财务中心",
              url: "informationCenter/informationCenterTasks/FinanceList"
            }, {
              menuID: "ICTOrder",
              title: "订单中心",
              url: "informationCenter/informationCenterTasks/OrderList"
            }, {
              menuID: "ICTServer",
              title: "客服中心",
              url: "informationCenter/informationCenterTasks/ServerList"
            }, {
              menuID: "ICTIntentionCustomer",
              title: "意向客户",
              url: "informationCenter/informationCenterTasks/IntentionCustomerList"
            }],
            menuID: "informationCenterTasks",
            menuType: "defaultMenu",
            parent: "informationCenter",
            sort: 0,
            tip: "处理事项",
            title: "处理事项"
          }, {
            list: [{
              menuID: "ICCRM",
              title: "CRM通知",
              url: "informationCenter/informationCenterCRM/list"
            }, {
              menuID: "提醒事项",
              title: "提醒事项",
              url: "informationCenter/informationCenterRemind/remindList"
            }],
            menuID: "informationCenterCRM",
            menuType: "defaultMenu",
            parent: "informationCenter",
            sort: 0,
            tip: "提醒事项",
            title: "提醒事项"
          }];
          return menusTree;
        }
      }
    }, function errorCallback(response) {

    });
  };
  return erpMenus;
});

sidebar.factory('oaMenus', function($rootScope, $http, showErrorInfo) {
  return function() {
    $rootScope.OAMenus = [{}];
  };
});

sidebar.factory('changeToOAMenu', function($rootScope, getOAMenus, hideAllMenuAndNavi) {
  function matchMenus(set) {
    var result = _.partition(set, function(item) {
      if (item.pId === 0) return true;
      else return false;
    });

    var roots = result[0],
      nodes = result[1];

    for (var i = 0; i < roots.length; i++) {
      nodes = getChildMenus(nodes, roots[i]);
    }
    return roots;
  }

  function getChildMenus(set, target) {
    if (!target.childs) target.childs = [];
    if (set.length <= 0) return set;
    var resetArr = [];

    for (var i = 0; i < set.length; i++) {
      if (target.id === set[i].pId) {
        target.childs.push(set[i]);
      } else {
        resetArr.push(set[i]);
      }
    }

    for (i = 0; i < target.childs.length; i++) {
      resetArr = getChildMenus(resetArr, target.childs[i]);
    }

    return resetArr;
  }

  function reformSetToMenu(set) {
    if (set.length <= 0) return;

    var result = [],
      r = null;
    for (var i = 0; i < set.length; i++) {
      r = {
        list: null,
        menuID: set [i].id,
        title: set [i].name,
        url: 'OA/OAMain/mainPage?path=' + Base64.encodeURI(set[i]._url.indexOf('http') >= 0 ? set[i]._url : (crmUrl + set[i]._url))
      };
      r.list = reformSetToMenu(set[i].childs);
      result.push(r);
    }

    return result;
  }

  return function() {
    if ($rootScope.currentNavi == 'OA') {
      $rootScope.fetch('OA/OAMain/mainPage?path=' + Base64.encodeURI('http://crm.feiyang.cn/crm/Crm_Home/index.asp'));
      return;
    }

    hideAllMenuAndNavi();

    if (!$rootScope.OAMenus) {
      getOAMenus({
        PersonnelID: $rootScope.userinfo.personID
      }, function(response) {
        console.time('match');
        $rootScope.OAMenus = reformSetToMenu(matchMenus(response));
        console.timeEnd('match');
        $rootScope.menus.list = $rootScope.OAMenus;
        console.log($rootScope.OAMenus);
        $rootScope.fetch('OA/OAMain/mainPage?path=' + Base64.encodeURI('http://crm.feiyang.cn/crm/Crm_Home/index.asp'));
      });
    } else {
      $rootScope.menus.list = $rootScope.OAMenus;
      $rootScope.fetch('OA/OAMain/mainPage?path=' + Base64.encodeURI('http://crm.feiyang.cn/crm/Crm_Home/index.asp'));
    }

    $rootScope.oaMenu = true;
    $rootScope.foldMenu = true;
    $rootScope.currentNavi = 'OA';
    $rootScope.menus.title = "OA菜单";
    $rootScope.menuUrl = '/public/angularView/gadget/frame/left_menu/fold_menu.html';
  };
});

/**
 * 常用菜单，收藏菜单，最近菜单
 */
sidebar.factory('showFunctionMenu', function($rootScope, $filter) {
  var showFunctionMenu = function(type) {
    var menu = {};
    if (type == 1) { //常用菜单
      menu = permissionCheck(getGeneralMenu());
    }
    $rootScope.currentFunctionStatusType = type;
    $rootScope.functionMenus = menu;
    console.log($rootScope.functionMenus);
  };

  function getGeneralMenu() {
    var generalMenu = {
      navi: [{
        erpMenuID: 'financialCenter',
        menuID: 'accountingTreatment',
        title: '账务处理',
        isShow: true
      }, {
        erpMenuID: 'orderManagement',
        menuID: 'orderManagement',
        title: '订单管理',
        isShow: true
      }, {
        erpMenuID: 'financialCenter',
        menuID: 'census',
        title: '三清单',
        isShow: true
      }, {
        erpMenuID: 'productCenter',
        menuID: 'productCenter',
        title: '产品管理',
        isShow: true
      }, {
        erpMenuID: 'intentionCustomer',
        menuID: 'intentionCustomer',
        title: '意向客户',
        isShow: true
      }, {
        erpMenuID: 'productOrder',
        menuID: 'productOrder',
        title: '产品下单',
        isShow: true
      }],
      subMenu: {
        accountingTreatment: [{
          menuID: 'guideReimbursementList',
          title: '订单预付款',
          isShow: false
        }, {
          menuID: 'guideReimbursementList',
          title: '订单暂借款',
          isShow: false,
          url: 'financeCenter/financeOrderAdvance/financeOrderBorrowList?nav=FinanceOrderBorrow'
        }],
        orderManagement: [{
          menuID: 'freetourOrderList',
          title: '自助游',
          isShow: false
        }, {
          menuID: 'productOrderTeamtourOrderList',
          title: '组团游',
          isShow: false
        }],
        census: [{
          menuID: 'makeAccountList',
          title: '做帐',
          isShow: false
        }, {
          menuID: 'generateTeamtourTask',
          title: '生成',
          isShow: false
        }],
        productCenter: [{
          menuID: 'ProductTeamList',
          title: '团队列表',
          isShow: false
        }],
        intentionCustomer: [{
          menuID: 'intentCustomList',
          title: '意向订单',
          isShow: false
        }, {
          menuID: 'orderList',
          title: '订单认领',
          isShow: false
        }],
        productOrder: [{
          menuID: 'teamtourOrderList',
          title: '组团游',
          isShow: false
        }, {
          menuID: 'productOrderFreetourOrderList',
          title: '自助游',
          isShow: false
        }]
      }
    };
    return generalMenu;
  }

  function permissionCheck(menu) {
    angular.forEach(menu.subMenu, function(value, key) {
      menu.subMenu[key].forEach(function(subMenu) {
        var index = _.findIndex(menu.navi, {
          menuID: key
        });
        if (index > -1) {
          if ($rootScope.erpMenus.subMenu[menu.navi[index].erpMenuID]) {
            _.find($rootScope.erpMenus.subMenu[menu.navi[index].erpMenuID], function(erpSubMenu) {
              if (erpSubMenu.menuID == subMenu.menuID) {
                subMenu.url = erpSubMenu.url;
                subMenu.isShow = true;
              }
              _.find(erpSubMenu.list, function(thirdSubMenu) {
                if (thirdSubMenu.menuID == subMenu.menuID) {
                  subMenu.url = thirdSubMenu.url;
                  subMenu.isShow = true;
                }
              });
            });
          }
        }
      });
    });
    menu.navi.forEach(function(navi) {
      var showArr = $filter('filter')(menu.subMenu[navi.menuID], {
        isShow: true
      });
      if (showArr.length === 0) {
        navi.isShow = false;
      }
    });
    return menu;
  }


  return showFunctionMenu;

});
/**
 *副屏
 */
var subView = angular.module("SubView", []).run(function config() {

});
/**
 * 副屏
 */
subView.directive("subpanel", function() {
  return {
    restrict: "CAE",
    templateUrl: "/public/angularView/gadget/sub_panel/single_sub_panel.html"
  };
});
/**
 * 打开副屏
 */
subView.factory("openSubView", function($rootScope, closeSubView, $window) {
  var openPage = function() {
    $rootScope.showSubView = true;
    angular.element(document).find("#main_con").bind('click', function() {
      closeSubView();
    });
    angular.element(document).find("#sideBar").bind('click', function() {
      closeSubView();
    });
    event.stopPropagation();
    // $window.onclick = function(){
    //   closeSubView();
    // }

  };
  return openPage;
});

subView.factory('closeSubView', function($rootScope, $timeout, $templateCache,setCache) {
  var closeSubView = function() {
    $rootScope.showSubView = false;
    $rootScope[activeStatus[2]] = [];
    $rootScope.showSubHeadTitle = false;
    $rootScope.subClass = {};
    angular.element(document).find("#main_con").unbind('click');
    angular.element(document).find("#sideBar").unbind('click');
    if (!$rootScope.$$phase) {
      $rootScope.$apply();
    } else {
      $timeout(function() {
        $rootScope.$apply();
      });
    }
    if ($rootScope[switchType[2]]) {
      setCache($rootScope[switchType[2]],$rootScope[position[2]]);
      $rootScope[switchType[2]] = {};
      $rootScope[position[2]] = {};
    }
  };
  return closeSubView;
});

subView.factory('showSubHead', function($rootScope, $templateCache) {
  var showSubHead = function(title, url) {
    $rootScope.showSubHeadTitle = true;
    $rootScope.subClass = {
      height: ($(window).height() - 50) + "px"
    };
    $rootScope.subHead = {};
    $rootScope.subHead.title = title;
    $rootScope.subHead.url = url;
    $templateCache.put($rootScope[switchType[2]].id, $rootScope[position[2]]);
  };
  return showSubHead;
});
/**
 * 进度条
 */
var loadingBar = angular.module('LoadingBar', []);
loadingBar.factory('showLoading', function showLoadingFactory($timeout, $rootScope) {
    var showAfter200ms = function (text) {
	if (text !== undefined) {
	    $rootScope.loadingText = text;
	}
	$rootScope.timer = $timeout(function () {
	    $rootScope.showProcessBar = true;
	}, 200);
    };
    return showAfter200ms;
});
loadingBar.factory("hideLoading", function hideLoadingFactory($timeout, $rootScope) {
    var hideLoading = function () {
	$timeout.cancel($rootScope.timer);
	$rootScope.showProcessBar = false;
    };
    return hideLoading;
});
/**
 *
 * @type @exp;angular@call;module
 * 滚动条
 */
var scroll = angular.module('Scroll', []);

//向下滚动加载数据
scroll.factory('scrollLoadData', function scrollDownLoadDataFactory() {
  var scrollDownLoadData = function() {
    this.busy = false;
    this.skip = 0;
    this.url = '';
    this.limit = 20;
  };

  return scrollDownLoadData;
});
/*
 * 权限
 */
var permission = angular.module("permission", []);


/*
 * 设置权限
 */
permission.factory("setPermission", function($rootScope, $http) {
  var setPermission = function() {
    HYhttp( $http, {
      url: baseUrl + 'common/user/getPermission',
    }).then(function(response) {
      if (response.data.code >= 700 && response.data.code < 800) {
        $rootScope.permission = response.data.data;
      } else {
        console.log(response.data);
      }
    }, function() {});
  };
  return setPermission;
});
var HYpage = angular.module("HYpage", []);

//翻页
HYpage.factory("nextPage", function($rootScope, showLoading, $http, $templateCache, hideLoading, _) {
    var nextPageFunction = function(viewID, url, condition, applyFunction) {
        if ($rootScope.isLoadingList[viewID] !== undefined && $rootScope.isLoadingList[viewID]) {
            return;
        }
        $rootScope.isLoadingList[viewID] = true;
        showLoading();
        HYhttp($http, {
            url: url,
            data: condition,
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                var tempData = applyFunction(response.data.data);
                if (viewID == $rootScope[switchType[1]]) {
                    $rootScope[position[1]] = _.extend($rootScope[position[1]], tempData);
                } else {
                    $templateCache.put(viewID, tempData);
                }
            }
            $rootScope.isLoadingList[viewID] = false;
            hideLoading();
        }, function() {});

    };
    return nextPageFunction;
});

HYpage.factory("setListHeight", function($rootScope) {
    var setListHeightFunction = function(viewID, viewType) {
        console.log(viewID + "---" + viewType);
        if (viewType == 1) {
            // var listHeight = $(window).height() - $("#" + viewID + " .toolBar_top").outerHeight(true) - 8;
            var listHeight = $(window).height() - 121 - 8;
            console.log(listHeight);
            if ($rootScope[position[1]] === undefined) {
                $rootScope[position[1]] = [];
            }
            $rootScope[position[1]].ListHeightStyle = {
                height: listHeight
            };
            $rootScope[position[1]].MainPaddingStyle = {
                // 'padding-top': $(".toolBar_top").outerHeight(true)
                'padding-top': 121
            };
        }
    };
    return setListHeightFunction;
});

HYpage.factory('Pagination', function(_) {
    var PaginationFunction = function(total1, currentPage1, limit1) {
        this.limit = limit1 ? limit1 : 5;
        this.total = total1;
        this.currentPage = Number(currentPage1);
        this.pageCount = Math.ceil(this.total / this.limit);
        this.focusPage = Number(currentPage1);
        this.pageNumber = createPage(this.currentPage, this.pageCount, this.focusPage);

        PaginationFunction.prototype.nextPage = function() {
            if (this.focusPage + 5 - this.pageCount > 0) {
                this.focusPage = this.pageCount;
            } else {
                this.focusPage = this.focusPage + 5;
            }
            this.pageNumber = createPage(this.currentPage, this.pageCount, this.focusPage);
        };

        PaginationFunction.prototype.PreviousPage = function() {
            if (this.focusPage - 5 < 0) {
                this.focusPage = 1;
            } else {
                this.focusPage = this.focusPage - 5;
            }
            this.pageNumber = createPage(this.currentPage, this.pageCount, this.focusPage);
        };

        //生成页码
        function createPage(currentPage, pageCount, focusPage) {
            var page = [];
            var clazz = '';
            if (pageCount <= 5) {
                for (var i = 0; i < pageCount; i++) {
                    clazz = '';
                    if (currentPage == i + 1)
                        clazz = 'active';
                    page.push({
                        type: 'number',
                        pageNumber: i + 1,
                        clazz: clazz
                    });
                }
            } else {
                var initPage = 0;
                clazz = '';
                if (currentPage == 1) clazz = 'active';
                page.push({
                    type: 'number',
                    pageNumber: 1,
                    clazz: clazz
                });
                page.push({
                    type: 'PreviousPage',
                    clazz: ""
                });
                if (focusPage <= 3) {
                    initPage = 1;
                } else if (pageCount - focusPage < 3) {
                    initPage = pageCount - 5;
                } else {
                    initPage = focusPage - 3;
                }
                for (var x = initPage; x < initPage + 5; x++) {
                    if (x == pageCount - 1) {
                        break;
                    }
                    clazz = '';
                    if (currentPage == x + 1) clazz = 'active';
                    page.push({
                        type: 'number',
                        pageNumber: x + 1,
                        clazz: clazz
                    });
                }
                clazz = '';
                if (currentPage == pageCount) clazz = 'active';
                page.push({
                    type: 'nextPage',
                    clazz: ""
                });
                page.push({
                    type: 'number',
                    pageNumber: pageCount,
                    clazz: clazz
                });
            }
            return page;
        }
    };
    return PaginationFunction;
});
/*
 * 共用的服务
 */
var commonFactory = angular.module("commonFactory", ['ngDialog']);

/**
 * 获取部门
 */
commonFactory.factory("componentsDepartment", function($http) {
    var departmentFunction = function(param, callBack) {
        HYhttp($http, {
            url: baseUrl + "common/department/getDepartment",
            data: param
        }).then(function(response) {
            callBack(response.data);
        }, function() {});
    };
    return departmentFunction;
});
/**
 * 保存缩略图
 */
commonFactory.factory('saveScreenShot', saveScreenShot);

function saveScreenShot($rootScope, replaceScreenShot) {
    return func;

    function func(url, type) {
        //初始化
        init();
        //获取当前打开页面的内容，并且存放到缩略图列表中
        addToScrrenShotList();
        //重置impress
        //resetImpress();

        //初始化
        function init() {
            if (!$rootScope.screenShotList) {
                $rootScope.screenShotList = [];
            }
        }

        //获取当前打开页面的内容，并且存放到缩略图列表中
        function addToScrrenShotList() {
            var currentItem = getCurrentOpenedWindow();
            $rootScope.screenShotList.unshift(currentItem);
            $rootScope.screenShotList = $rootScope.screenShotList.slice(0,9);
        }

        //获取当前打开页面的内容
        function getCurrentOpenedWindow() {
            var item = {
                title: "标题",
                type: type,
                path: url,
                content: document.getElementById('container').innerHTML.replace(/<\!\-\-[\s\S]*?\-\->/g,'')
            };
            return item;

        }

        function resetImpress() {
            console.log('%c$rootScope.screenShotList', 'background:red;color:white;', $rootScope.screenShotList);
            if (!$rootScope.impressInitianlized && $rootScope.screenShotList.length > 1) {
                impress().init();
                $rootScope.impressInitianlized = true;
            }
        }

    }
}
/**
 *删除缩略图
 */
commonFactory.factory('removeScreenShot', removeScreenShot);

function removeScreenShot() {
    return func;

    function func() {

    }
}
/**
 * 替换缩略图
 */
commonFactory.factory('replaceScreenShot', replaceScreenShot);

function replaceScreenShot() {
    return func;

    function func() {

    }
}


commonFactory.factory("openWindowTab", function() {
    var openWindowTab = function(url) {
        var el = document.createElement("a");
        document.body.appendChild(el);
        el.href = url; //url 是你得到的连接
        el.target = '_blank'; //指定在新窗口打开
        var e = document.createEvent('MouseEvents');
        e.initEvent('click', true, true);
        el.dispatchEvent(e);
        document.body.removeChild(el);
    };
    return openWindowTab;
});

/**
 * 验证是否为空
 * @param  {[type]} "inputCheckEmpty" [description]
 * @param  {[type]} function(         [description]
 * @return {[type]}                   [description]
 */
commonFactory.factory("inputCheckEmpty", function() {
    var isEmpty = function(item) {
        if (item === undefined || item === null || item === "" || item === "000000000000000000000000") {
            return false;
        } else {
            return true;
        }
    };
    return isEmpty;
});

/**
 * 验证是否为金额数据
 * @param  {[type]} "inputCheckEmpty" [description]
 * @param  {[type]} function(         [description]
 * @return {[type]}                   [description]
 */
commonFactory.factory("inputCheckPositivenumber", function() {
    var isEmpty = function(item) {
        return /^(([1-9][0-9]*\.[0-9][0-9]*)|([0]\.[0-9][0-9]*)|([1-9][0-9]*)|([0]{1}))$/
            .test(item);
    };
    return isEmpty;
});

/**
 * 获取岗位
 */
commonFactory.factory("componentsPosition", function($http, showErrorInfo) {
    var componentsPosition = function(param, callBack) {
        HYhttp($http, {
            url: baseUrl + "common/position/getPosition",
            data: param,
            method: "POST"
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callBack(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }, function() {});
    };
    return componentsPosition;
});

/**
 * 获取所有地点架构
 */
commonFactory.factory("componentsAddress", componentsAddress);

function componentsAddress($http, showErrorInfo) {
    return getAddressDataFuc;

    function getAddressDataFuc(param, callback) {
        HYhttp($http, {
            url: baseUrl + "common/Address/getAddress",
            method: "POST",
            data: param
        }).then(success, fail);

        function success(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callback(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }

        function fail(response) {

        }
    }
}

//根据条件获取地点
commonFactory.factory('getDistributingByCondition', function($http, showErrorInfo) {
    var getDistributing = function(param, callBack) {
        HYhttp($http, {
            url: baseUrl + "common/Address/getDistributing",
            data: param,
            method: "POST"
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callBack(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }, function() {});
    };
    return getDistributing;
});

/**
 * 获取职员
 */
commonFactory.factory("getPersonnel", function($http, showErrorInfo) {
    var getPersonnel = function(param, callBack) {
        HYhttp($http, {
            url: baseUrl + "common/user/getPersonnel",
            data: param,
            method: "POST"
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callBack(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }, function() {});
    };
    return getPersonnel;
});

/**
 * 获取员工详情
 * @param  {[type]} "getPersonDetail" [description]
 * @param  {[type]} function($http,   showErrorInfo [description]
 * @return {[type]}                   [description]
 */
commonFactory.factory("getPersonDetail", function($http, showErrorInfo) {
    return function(param, callBack) {
        HYhttp($http, {
            url: baseUrl + "common/user/getPersonDetail",
            data: param,
            method: "POST"
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callBack(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }, function() {});
    };
});

/**
 * 获取部门
 */
commonFactory.factory("getFirstDepartment", function($http, showErrorInfo) {
    var getFirstDepartment = function(callBack) {
        HYhttp($http, {
            url: baseUrl + "common/department/getOrgStructure",
            method: "POST"
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callBack(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }, function() {});
    };
    return getFirstDepartment;
});

/**
 * checkBox 选择
 */
commonFactory.factory("selectCheckbox", function(_) {
    var selectCheckbox = function(param1, param2, key) {
        if (param2) {
            param2.forEach(function(item) {
                var findValue = {};
                findValue[key] = item[key];
                var index = _.findIndex(param1, findValue);
                if (index > -1) {
                    param1[index].isSelect = true;
                } else {
                    console.log(findValue);
                }
            });
        }
        return param1;
    };
    return selectCheckbox;
});


/**
 * [查找内嵌key的数组]
 *
 * @param {[type]}
 *            "findInnerObjIndex" [description]
 * @param {[type]}
 *            function(_ [description]
 * @return {[type]} [description]
 */
commonFactory.factory("findInnerObjIndex", function(getKeyValue) {
    var findInnerObjIndex = function(param1, param2, value) {
        var index = -1;
        for (var i = 0; i < param1.length; i++) {
            if (getKeyValue(param1[i], param2) == value) {
                index = i;
                break;
            }
        }
        return index;
    };
    return findInnerObjIndex;
});

commonFactory.factory("getKeyValue", function() {
    var getKeyValue = function(obj, param) {
        var value = obj;
        param.forEach(function(item) {
            value = value[item];
        });
        return value;
    };
    return getKeyValue;
});

/**
 * [上传图片接口]
 *
 * @param {[type]}
 *            "uploadPic" [description]
 * @param {[type]}
 *            function($http,$rootScope [description]
 * @return {[type]} [description]
 */
commonFactory.factory("uploadPic", function($http, $rootScope, uploadFile) {
    var uploadPic = function(name, basecode, type, callback) {
        var str = basecode.substring(basecode.indexOf(",") + 1);
        var param = 'FileName=' + name + '&FileType=' + 1 + '&FileStream=' + str;
        uploadFile(param, function(response) {
            var result = {};
            result.url = response.data;
            result.name = name;
            callback(result);
        });
    };
    return uploadPic;
});

commonFactory.factory('addRefreshPageByTypeNotMe', function($rootScope) {
    var addRefreshPageByTypeNotMe = function(type, MYID) {
        var view = getUrlByHttpUrl(type, urlConfig);
        $rootScope[ViewList[view.type]].forEach(function(v) {
            if (v.id != MYID) {
                $rootScope.refreshPage.push(v.id);
            }
        });
    };
    return addRefreshPageByTypeNotMe;
});

commonFactory.factory('addAllRefreshPageByType', function($rootScope) {
    var addAllRefreshPageByType = function(type) {
        var view = getUrlByHttpUrl(type, urlConfig);
        $rootScope[ViewList[view.type]].forEach(function(v) {
            $rootScope.refreshPage.push(v.id);
        });
    };
    return addAllRefreshPageByType;
});

/**
 * [添加页面ID到需要刷新的数组里，下次打开页面的时候刷新]
 *
 * @param {[type]}
 *            'addRefreshPageByID' [description]
 * @param {[type]}
 *            function($rootScope,_ [description]
 * @return {[type]} [description]
 */
commonFactory.factory('addRefreshPageByID', function($rootScope, _) {
    var addRefreshPageByID = function(ID) {
        if (_.findIndex($rootScope.refreshPage, ID) < 0) {
            $rootScope.refreshPage.push(ID);
        }
    };
    return addRefreshPageByID;
});

/**
 * 显示错误信息
 * @param  {[type]} 'showErrorInfo'   [description]
 * @param  {[type]} function(ngDialog [description]
 * @return {[type]}                   [description]
 */
commonFactory.factory('showErrorInfo', function(ngDialog) {
    var showErrorInfo = function(value) {
        ngDialog.open({
            id: 'errorInfo',
            template: '/public/angularView/common/components/errorInfo.html',
            controller: function($scope) {
                $scope.info = $scope.ngDialogData.errorInfo;
            },
            data: {
                errorInfo: value
            }
        });
    };
    return showErrorInfo;
});

/**
 * 显示警告信息
 * @param  {[type]} 'showWarningBox'     [description]
 * @param  {[type]} function($rootScope, _,            ngDialog [description]
 * @return {[type]}                      [description]
 */
commonFactory.factory('showWarningBox', function($rootScope, _, ngDialog) {
    var showWarningBox = function(info, success) {
        ngDialog.open({
            id: 'warningBox',
            template: '/public/angularView/common/components/warning_box.html?' + Math.random(),
            controller: 'warningBoxController',
            data: {
                info: info,
                success: success
            }
        });
    };
    return showWarningBox;
});

angular.module("User").service("getPositions", getPositions);
//getPositions.$inject=['$scope'];
function getPositions($rootScope) {
    this.Position = $rootScope.Position;
}

//获取枚举类型
commonFactory.factory("getEnumeration", function($http, showErrorInfo) {
    var getEnumeration = function(title, callBack) {
        var param = {
            Title: title
        };
        HYhttp($http, {
            url: dreamFlyUrl + "BasicData/BasicComm/GetEnumeration",
            data: param,
            method: "POST"
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callBack(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }, function() {});
    };
    return getEnumeration;
});

/**
 * 上传文件
 * @param  {[type]} "uploadFile"    [description]
 * @param  {[type]} function($http, $rootScope    [description]
 * @return {[type]}                 [description]
 */
commonFactory.factory("uploadFile", function($http, $rootScope) {
    var uploadPic = function(param, callback) {
        $http({
            url: dreamFlyUrl + 'BasicData/SystemOperation/UploadFile',
            method: "POST",
            data: param,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        }).then(function(response) {
            callback(response.data);
        }, function(response) {
            console.log(response);
        });
    };
    return uploadPic;
});

commonFactory.factory("insertPersonSimple", function($http, $rootScope) {
    var uploadPic = function(param, callback) {
        HYhttp($http, {
            url: baseUrl + "common/user/insertPerson",
            method: "POST",
            data: param
        }).then(function(response) {
            callback(response.data);
        }, function() {});
    };
    return uploadPic;
});

/**
 * 获取短信模板
 * @param  {[type]} 'getComboxContentMainTypes' [description]
 * @param  {[type]} function($http,             showErrorInfo [description]
 * @return {[type]}                             [description]
 */
commonFactory.factory('getOperationTemplates', function($http, showErrorInfo, $httpParamSerializer) {
    return function(param, callback) {
        $http({
                method: 'POST',
                url: dreamFlyUrl + "BasicData/SystemOperation/GetOperationTemplates",
                data: $httpParamSerializer(param),
                headers: {
                  'Content-Type': 'application/x-www-form-urlencoded'
                },
                withCredentials: false
            })
            .then(
                function(response) {
                    if (response.data.code >= 700 && response.data.code < 800) {
                        callback(response.data.data);
                    } else {
                        showErrorInfo(response.data);
                    }
                },
                function() {});
    };
});

/**
 * 获取短信记录列表
 * @param  {[type]} 'getOperationTemplates' [description]
 * @param  {[type]} function($http,         showErrorInfo [description]
 * @return {[type]}                         [description]
 */
commonFactory.factory('getSMSListFromOrder', function($http, showErrorInfo, $httpParamSerializer) {
    return function(param, callback) {
        $http({
                method: 'POST',
                url: dreamFlyUrl + "BasicData/SystemOperation/GetSMSList",
                data: $httpParamSerializer(param),
                headers: {
                  'Content-Type': 'application/x-www-form-urlencoded'
                },
                withCredentials: false
            }).then(
            function(response) {
                if (response.data.code >= 700 && response.data.code < 800) {
                    callback(response.data.data);
                } else {
                    showErrorInfo(response.data);
                }
            },
            function() {});
    };
});

/**
 * 发送短信
 * "SMSRecord": "{\"OrderID\":\"订单主键\",\"OperationTypeID\":\"操作类型【正式订单短信 = 2；意向订单短信 = 8；客户短信 = 9】\",\"SMSOrderStatus\":\" 短信发送时订单状态（见意向订单状态枚举：EIntentOrderStatus；见正式订单状态枚举：EOrderStatus【暂留 = 2；已签 = 3】）\",\"OperationMobile\":\"18668251952\",\"OperationNotes\":\"Hello SMS Content!\",\"ValidateSign\":\"\"}"
 * @param  {[type]} 'getSMSListFromOrder' [description]
 * @param  {[type]} function($http,       showErrorInfo [description]
 * @return {[type]}                       [description]
 */
commonFactory.factory('addSMSRequest', function($http, showErrorInfo) {
    return function(param, callback) {
        HYhttp(
            $http, {
                url: dreamFlyUrl + "BasicData/SystemOperation/AddSMSRequest",
                data: {
                    SMSRecord: JSON.stringify(param)
                },
                method: "POST"
            }).then(
            function(response) {
                if (response.data.code >= 700 && response.data.code < 800) {
                    callback(response.data.data);
                } else {
                    showErrorInfo(response.data);
                }
            },
            function() {});
    };
});

//获取财务基础信息
commonFactory.factory('getFinanceBaseType', function($http, showErrorInfo) {
    return function(callback) {
        HYhttp(
            $http, {
                url: dreamFlyUrl + "BasicData/CommonData/GetFinanceBaseType",
                method: "POST"
            }).then(
            function(response) {
                if (response.data.code >= 700 && response.data.code < 800) {
                    callback(response.data.data);
                } else {
                    showErrorInfo(response.data);
                }
            },
            function() {});
    };
});

//获取签证地址
commonFactory.factory('getVisaAddress', function($http, showErrorInfo) {
    return function(param, callback) {
        HYhttp(
            $http, {
                url: baseUrl + "common/Address/getVisaCountries",
                data: param,
                method: "POST"
            }).then(
            function(response) {
                if (response.data.code >= 700 && response.data.code < 800) {
                    callback(response.data);
                } else {
                    showErrorInfo(response.data);
                }
            },
            function() {});
    };
});

commonFactory.factory('getAllLabels', function($http, showErrorInfo) {
    return function(callback) {
        HYhttp(
            $http, {
                url: baseUrl + "Check_config/getAllLabel",
                method: "POST"
            }).then(
            function(response) {
                if (response.data.code >= 700 && response.data.code < 800) {
                    callback(response.data.data.result);
                } else {
                    showErrorInfo(response.data);
                }
            },
            function() {});
    };
});

commonFactory.factory('getOAMenus', function($http, showErrorInfo) {
    return function(param, callback) {
        HYhttp(
            $http, {
                url: crmUrl + "CrmLogin/Ashx/LoginERP.ashx",
                method: "GET",
                data: param
            }).then(
            function(response) {
                if (response.data.code >= 700 && response.data.code < 800) {
                    callback(response.data.data);
                } else {
                    showErrorInfo(response.data);
                }
            },
            function() {});
    };
});

commonFactory.factory('getCrmRemindBusinessIdById', function($http, showErrorInfo) {
    return function(id, callback) {
        HYhttp(
            $http, {
                url: baseUrl + "common/remind/crmRemindGetBusinessById",
                method: "GET",
                data: {
                    targetId: id
                }
            }).then(
            function(response) {
                if (response.data.code >= 700 && response.data.code < 800) {
                    callback(response.data.data);
                } else {
                    showErrorInfo(response.data);
                }
            },
            function() {});
    };
});

commonFactory.factory('setCache', function($rootScope, $templateCache) {
    return function(view, temp) {
        var cacheIndex = _.indexOf(tempCache, view.id);
        if (cacheIndex >= 0) tempCache.splice(cacheIndex, 1);

        if (tempCache.length >= cacheMaxNum) {
            $templateCache.remove(tempCache.shift(0));
        }

        tempCache.push(view.id);
        $templateCache.put(view.id, temp);
    };
});

commonFactory.factory('browser', ['$window', function($window) {

    return function() {

        var userAgent = $window.navigator.userAgent;
        var browsers = {
            Edge: /Edge/i,
            chrome: /chrome/i,
            safari: /safari/i,
            firefox: /firefox/i,
            ie: /internet explorer/i
        };

        for (var key in browsers) {
            if (browsers[key].test(userAgent)) {
                return key;
            }
        }
        return 'unknown';
    };
}]);

/**
 * 获取职员照片
 */
commonFactory.factory("getPersonnelPhotos", function($http, showErrorInfo) {
    var getPersonnel = function(param, callBack) {
        HYhttp($http, {
            url: baseUrl + "common/user/getPersonPhoto",
            data: {
                ids: JSON.stringify(param)
            },
            method: "POST"
        }).then(function(response) {
            if (response.data.code >= 700 && response.data.code < 800) {
                callBack(response.data.data);
            } else {
                showErrorInfo(response.data);
            }
        }, function() {});
    };
    return getPersonnel;
});
/*!
 * ngImgCrop v0.3.2
 * https://github.com/alexk111/ngImgCrop
 *
 * Copyright (c) 2014 Alex Kaul
 * License: MIT
 *
 * edit by gengws gengws@163.com
 *
 * Generated at Wednesday, December 3rd, 2014, 3:54:12 PM
 */
(function() {
'use strict';

var crop = angular.module('ngImgCrop', []);

crop.factory('cropAreaSquare', ['cropArea', function(CropArea) {
  var CropAreaSquare = function() {
    CropArea.apply(this, arguments);

    this._resizeCtrlBaseRadius = 10;
    this._resizeCtrlNormalRatio = 0.75;
    this._resizeCtrlHoverRatio = 1;
    this._iconMoveNormalRatio = 0.9;
    this._iconMoveHoverRatio = 1.2;

    this._resizeCtrlNormalRadius = this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio;
    this._resizeCtrlHoverRadius = this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio;

    this._posDragStartX=0;
    this._posDragStartY=0;
    this._posResizeStartX=0;
    this._posResizeStartY=0;

    this._posResizeStartSizeX=0;
    this._posResizeStartSizeY=0;


    this._resizeCtrlIsHover = -1;
    this._areaIsHover = false;
    this._resizeCtrlIsDragging = -1;
    this._areaIsDragging = false;

  };

  CropAreaSquare.prototype = new CropArea();

  CropAreaSquare.prototype._calcSquareCorners=function() {
	var wSize=this._sizeX/2;
	var hSize=this._sizeY/2;
    return [
      [this._x-wSize, this._y-hSize],
      [this._x+wSize, this._y-hSize],
      [this._x-wSize, this._y+hSize],
      [this._x+wSize, this._y+hSize]
    ];

  };

  CropAreaSquare.prototype._calcSquareDimensions=function() {
	var wSize=this._sizeX/2;
	var hSize=this._sizeY/2;
    return {
      left: this._x-wSize,
      top: this._y-hSize,
      right: this._x+wSize,
      bottom: this._y+hSize
    };

  };

  CropAreaSquare.prototype._isCoordWithinArea=function(coord) {
    var squareDimensions=this._calcSquareDimensions();
    return (coord[0]>=squareDimensions.left&&coord[0]<=squareDimensions.right&&coord[1]>=squareDimensions.top&&coord[1]<=squareDimensions.bottom);
  };

  CropAreaSquare.prototype._isCoordWithinResizeCtrl=function(coord) {
    var resizeIconsCenterCoords=this._calcSquareCorners();
    var res=-1;
    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {
      var resizeIconCenterCoords=resizeIconsCenterCoords[i];
      if(coord[0] > resizeIconCenterCoords[0] - this._resizeCtrlHoverRadius && coord[0] < resizeIconCenterCoords[0] + this._resizeCtrlHoverRadius &&
         coord[1] > resizeIconCenterCoords[1] - this._resizeCtrlHoverRadius && coord[1] < resizeIconCenterCoords[1] + this._resizeCtrlHoverRadius) {
        res=i;
        break;
      }
    }
    return res;
  };

  CropAreaSquare.prototype._drawArea=function(ctx,centerCoords,size){
    var wSize=size[0]/2;
    var hSize=size[1]/2;
    ctx.rect(centerCoords[0]-wSize,centerCoords[1]-hSize,size[0],size[1]);
  };


  CropAreaSquare.prototype.draw=function() {
    CropArea.prototype.draw.apply(this, arguments);
    // draw move icon
    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);

    // draw resize cubes
    var resizeIconsCenterCoords=this._calcSquareCorners();
    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {
      var resizeIconCenterCoords=resizeIconsCenterCoords[i];
      this._cropCanvas.drawIconResizeCircle(resizeIconCenterCoords, this._resizeCtrlBaseRadius, this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio);
    }
  };

  CropAreaSquare.prototype.processMouseMove=function(mouseCurX, mouseCurY) {
    var cursor='default';
    var res=false;

    this._resizeCtrlIsHover = -1;
    this._areaIsHover = false;

    if (this._areaIsDragging) {
      this._x = mouseCurX - this._posDragStartX;
      this._y = mouseCurY - this._posDragStartY;
      this._areaIsHover = true;
      cursor='move';
      res=true;
      this._events.trigger('area-move');
    } else if (this._resizeCtrlIsDragging>-1) {
      var xMulti, yMulti;

	  var h=this._ctx.canvas.height,
        w=this._ctx.canvas.width;

      switch(this._resizeCtrlIsDragging) {
        case 0: // Top Left
          xMulti=-1;
          yMulti=-1;
          cursor = 'nwse-resize';
          break;
        case 1: // Top Right
          xMulti=1;
          yMulti=-1;
          cursor = 'nesw-resize';
          break;
        case 2: // Bottom Left
          xMulti=-1;
          yMulti=1;
          cursor = 'nesw-resize';
          break;
        case 3: // Bottom Right
          xMulti=1;
          yMulti=1;
          cursor = 'nwse-resize';
          break;
      }
      var iFX = (mouseCurX - this._posResizeStartX)*xMulti;

	  var iFY = 0;
	  if(this._ratio != 0 ){
		  iFY = iFX * this._ratio;
	  }else{
		  iFY = (mouseCurY - this._posResizeStartY)*yMulti;

	  }

      var iFRX = this._posResizeStartSizeX + iFX;
	  var iFRY = this._posResizeStartSizeY + iFY;

	  //设置框体最大值
	  if(iFRX > w){
		  iFRX = w;
	  }
	  if(iFRY > h){
	    iFRY = h;
	  }
	  if(this._ratio != 0){
		  if(iFRX > iFRY/this._ratio){
			  iFRX = iFRY/this._ratio;
		  }
		  if(iFRY > iFRX*this._ratio){
			  iFRY = iFRX*this._ratio;
		  }
	  }

      var wasSizeX=this._sizeX;
      var wasSizeY=this._sizeY;
      this._sizeX = Math.max(this._minSize, iFRX);
	  if(this._ratio != 0 ){
		  this._sizeY = this._sizeX * this._ratio;
	  }else{
		  this._sizeY = Math.max(this._minSize, iFRY);
	  }
      var posModifierX=(this._sizeX-wasSizeX)/2;
      var posModifierY=(this._sizeY-wasSizeY)/2;
      this._x+=posModifierX*xMulti;
      this._y+=posModifierY*yMulti;

      this._resizeCtrlIsHover = this._resizeCtrlIsDragging;
      res=true;
      this._events.trigger('area-resize');
    } else {
      var hoveredResizeBox=this._isCoordWithinResizeCtrl([mouseCurX,mouseCurY]);
      if (hoveredResizeBox>-1) {
        switch(hoveredResizeBox) {
          case 0:
            cursor = 'nwse-resize';
            break;
          case 1:
            cursor = 'nesw-resize';
            break;
          case 2:
            cursor = 'nesw-resize';
            break;
          case 3:
            cursor = 'nwse-resize';
            break;
        }
        this._areaIsHover = false;
        this._resizeCtrlIsHover = hoveredResizeBox;
        res=true;
      } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {
        cursor = 'move';
        this._areaIsHover = true;
        res=true;
      }
    }

    this._dontDragOutside();
    angular.element(this._ctx.canvas).css({'cursor': cursor});

    return res;
  };

  CropAreaSquare.prototype.processMouseDown=function(mouseDownX, mouseDownY) {
    var isWithinResizeCtrl=this._isCoordWithinResizeCtrl([mouseDownX,mouseDownY]);
    if (isWithinResizeCtrl>-1) {
      this._areaIsDragging = false;
      this._areaIsHover = false;
      this._resizeCtrlIsDragging = isWithinResizeCtrl;
      this._resizeCtrlIsHover = isWithinResizeCtrl;
      this._posResizeStartX=mouseDownX;
      this._posResizeStartY=mouseDownY;
      this._posResizeStartSizeX = this._sizeX;
      this._posResizeStartSizeY = this._sizeY;

      this._events.trigger('area-resize-start');
    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {
      this._areaIsDragging = true;
      this._areaIsHover = true;
      this._resizeCtrlIsDragging = -1;
      this._resizeCtrlIsHover = -1;
      this._posDragStartX = mouseDownX - this._x;
      this._posDragStartY = mouseDownY - this._y;
      this._events.trigger('area-move-start');
    }
  };

  CropAreaSquare.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {
    if(this._areaIsDragging) {
      this._areaIsDragging = false;
      this._events.trigger('area-move-end');
    }
    if(this._resizeCtrlIsDragging>-1) {
      this._resizeCtrlIsDragging = -1;
      this._events.trigger('area-resize-end');
    }
    this._areaIsHover = false;
    this._resizeCtrlIsHover = -1;

    this._posDragStartX = 0;
    this._posDragStartY = 0;
  };

  return CropAreaSquare;
}]);

crop.factory('cropArea', ['cropCanvas', function(CropCanvas) {
  var CropArea = function(ctx, events) {
    this._ctx=ctx;
    this._events=events;

    this._minSize=80;

    this._cropCanvas=new CropCanvas(ctx);

    this._image=new Image();
    this._x = 0;
    this._y = 0;
    this._sizeX = 200;
    this._sizeY = 200;

	this._ratio = 0;

  };


  CropArea.prototype.setResRatio=function(ratio){
	  this._ratio = ratio;
	  this._sizeY = this._sizeX * ratio;
  };

  /* GETTERS/SETTERS */

  CropArea.prototype.getImage = function () {
    return this._image;
  };
  CropArea.prototype.setImage = function (image) {
    this._image = image;
  };

  CropArea.prototype.getX = function () {
    return this._x;
  };
  CropArea.prototype.setX = function (x) {
    this._x = x;
    this._dontDragOutside();
  };

  CropArea.prototype.getY = function () {
    return this._y;
  };
  CropArea.prototype.setY = function (y) {
    this._y = y;
    this._dontDragOutside();
  };


  CropArea.prototype.getSize = function () {
    return [this._sizeX,this._sizeY];
  };
  CropArea.prototype.setSize = function (size) {

    this._sizeX = Math.max(this._minSize, size[0]);
	if(this._ratio != 0 ){
		this._sizeY = this._sizeX * this._ratio;
	}else{
		this._sizeY = Math.max(this._minSize, size[1]);
	}
    this._dontDragOutside();
  };


  CropArea.prototype.getMinSize = function () {
    return this._minSize;
  };
  CropArea.prototype.setMinSize = function (size) {


    this._minSize = size;
    this._sizeX = Math.max(this._minSize, this._sizeX);
	if(this._ratio != 0 ){
		this._sizeY = this._sizeX * this._ratio;
	}else{
		this._sizeY = Math.max(this._minSize, this._sizeY);
	}

    this._dontDragOutside();
  };

  /* FUNCTIONS */
  CropArea.prototype._dontDragOutside=function() {
    var h=this._ctx.canvas.height,
        w=this._ctx.canvas.width;

	if(this._sizeX>w) { this._sizeX=w; if(this._ratio != 0){this._sizeY = this._sizeX*this._ratio;}}
    if(this._sizeY>h) { this._sizeY=h;  if(this._ratio != 0 ){ this._sizeX = this._sizeY/this._ratio;}}
    if(this._x<this._sizeX/2) { this._x=this._sizeX/2; }
    if(this._x>w-this._sizeX/2) { this._x=w-this._sizeX/2; }
    if(this._y<this._sizeY/2) { this._y=this._sizeY/2; }
    if(this._y>h-this._sizeY/2) { this._y=h-this._sizeY/2; }

  };

  CropArea.prototype._drawArea=function() {};

  CropArea.prototype.draw=function() {
    // draw crop area
    this._cropCanvas.drawCropArea(this._image,[this._x,this._y],[this._sizeX,this._sizeY],this._drawArea);

  };

  CropArea.prototype.processMouseMove=function() {};

  CropArea.prototype.processMouseDown=function() {};

  CropArea.prototype.processMouseUp=function() {};

  return CropArea;
}]);

crop.factory('cropCanvas', [function() {
  // Shape = Array of [x,y]; [0, 0] - center
  var shapeArrowNW=[[-0.5,-2],[-3,-4.5],[-0.5,-7],[-7,-7],[-7,-0.5],[-4.5,-3],[-2,-0.5]];
  var shapeArrowNE=[[0.5,-2],[3,-4.5],[0.5,-7],[7,-7],[7,-0.5],[4.5,-3],[2,-0.5]];
  var shapeArrowSW=[[-0.5,2],[-3,4.5],[-0.5,7],[-7,7],[-7,0.5],[-4.5,3],[-2,0.5]];
  var shapeArrowSE=[[0.5,2],[3,4.5],[0.5,7],[7,7],[7,0.5],[4.5,3],[2,0.5]];
  var shapeArrowN=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]];
  var shapeArrowW=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]];
  var shapeArrowS=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]];
  var shapeArrowE=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]];

  // Colors
  var colors={
    areaOutline: '#fff',
    resizeBoxStroke: '#fff',
    resizeBoxFill: '#444',
    resizeBoxArrowFill: '#fff',
    resizeCircleStroke: '#fff',
    resizeCircleFill: '#444',
    moveIconFill: '#fff'
  };

  return function(ctx){

    /* Base functions */

    // Calculate Point
    var calcPoint=function(point,offset,scale) {
        return [scale*point[0]+offset[0], scale*point[1]+offset[1]];
    };

    // Draw Filled Polygon
    var drawFilledPolygon=function(shape,fillStyle,centerCoords,scale) {
        ctx.save();
        ctx.fillStyle = fillStyle;
        ctx.beginPath();
        var pc, pc0=calcPoint(shape[0],centerCoords,scale);
        ctx.moveTo(pc0[0],pc0[1]);

        for(var p in shape) {
            if (p > 0) {
                pc=calcPoint(shape[p],centerCoords,scale);
                ctx.lineTo(pc[0],pc[1]);
            }
        }

        ctx.lineTo(pc0[0],pc0[1]);
        ctx.fill();
        ctx.closePath();
        ctx.restore();
    };

    /* Icons */

    this.drawIconMove=function(centerCoords, scale) {
      drawFilledPolygon(shapeArrowN, colors.moveIconFill, centerCoords, scale);
      drawFilledPolygon(shapeArrowW, colors.moveIconFill, centerCoords, scale);
      drawFilledPolygon(shapeArrowS, colors.moveIconFill, centerCoords, scale);
      drawFilledPolygon(shapeArrowE, colors.moveIconFill, centerCoords, scale);
    };

    this.drawIconResizeCircle=function(centerCoords, circleRadius, scale) {
      var scaledCircleRadius=circleRadius*scale;
      ctx.save();
      ctx.strokeStyle = colors.resizeCircleStroke;
      ctx.lineWidth = 2;
      ctx.fillStyle = colors.resizeCircleFill;
      ctx.beginPath();
      ctx.arc(centerCoords[0],centerCoords[1],scaledCircleRadius,0,2*Math.PI);
      ctx.fill();
      ctx.stroke();
      ctx.closePath();
      ctx.restore();
    };

    this.drawIconResizeBoxBase=function(centerCoords, boxSize, scale) {
      var scaledBoxSize=boxSize*scale;
      ctx.save();
      ctx.strokeStyle = colors.resizeBoxStroke;
      ctx.lineWidth = 2;
      ctx.fillStyle = colors.resizeBoxFill;
      ctx.fillRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);
      ctx.strokeRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);
      ctx.restore();
    };
    this.drawIconResizeBoxNESW=function(centerCoords, boxSize, scale) {
      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);
      drawFilledPolygon(shapeArrowNE, colors.resizeBoxArrowFill, centerCoords, scale);
      drawFilledPolygon(shapeArrowSW, colors.resizeBoxArrowFill, centerCoords, scale);
    };
    this.drawIconResizeBoxNWSE=function(centerCoords, boxSize, scale) {
      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);
      drawFilledPolygon(shapeArrowNW, colors.resizeBoxArrowFill, centerCoords, scale);
      drawFilledPolygon(shapeArrowSE, colors.resizeBoxArrowFill, centerCoords, scale);
    };

    /* Crop Area */


    this.drawCropArea=function(image, centerCoords, size, fnDrawClipPath) {

	  var xRatio=image.width/ctx.canvas.width,
          yRatio=image.height/ctx.canvas.height,
          xLeft=centerCoords[0]-size[0]/2,
          yTop=centerCoords[1]-size[1]/2;

      ctx.save();
      ctx.strokeStyle = colors.areaOutline;
      ctx.lineWidth = 2;
      ctx.beginPath();
      fnDrawClipPath(ctx, centerCoords, size);
      ctx.stroke();
      ctx.clip();

      // draw part of original image
      if (size[0] > 0 && size[1] > 0) {
          ctx.drawImage(image, xLeft*xRatio, yTop*yRatio, size[0]*xRatio, size[1]*yRatio, xLeft, yTop, size[0], size[1]);
      }

      ctx.beginPath();
      fnDrawClipPath(ctx, centerCoords, size);

      ctx.stroke();
      ctx.clip();

      ctx.restore();
    };

  };
}]);

/**
 * EXIF service is based on the exif-js library (https://github.com/jseidelin/exif-js)
 */

crop.service('cropEXIF', [function() {
  var debug = false;

  var ExifTags = this.Tags = {

      // version tags
      0x9000 : "ExifVersion",             // EXIF version
      0xA000 : "FlashpixVersion",         // Flashpix format version

      // colorspace tags
      0xA001 : "ColorSpace",              // Color space information tag

      // image configuration
      0xA002 : "PixelXDimension",         // Valid width of meaningful image
      0xA003 : "PixelYDimension",         // Valid height of meaningful image
      0x9101 : "ComponentsConfiguration", // Information about channels
      0x9102 : "CompressedBitsPerPixel",  // Compressed bits per pixel

      // user information
      0x927C : "MakerNote",               // Any desired information written by the manufacturer
      0x9286 : "UserComment",             // Comments by user

      // related file
      0xA004 : "RelatedSoundFile",        // Name of related sound file

      // date and time
      0x9003 : "DateTimeOriginal",        // Date and time when the original image was generated
      0x9004 : "DateTimeDigitized",       // Date and time when the image was stored digitally
      0x9290 : "SubsecTime",              // Fractions of seconds for DateTime
      0x9291 : "SubsecTimeOriginal",      // Fractions of seconds for DateTimeOriginal
      0x9292 : "SubsecTimeDigitized",     // Fractions of seconds for DateTimeDigitized

      // picture-taking conditions
      0x829A : "ExposureTime",            // Exposure time (in seconds)
      0x829D : "FNumber",                 // F number
      0x8822 : "ExposureProgram",         // Exposure program
      0x8824 : "SpectralSensitivity",     // Spectral sensitivity
      0x8827 : "ISOSpeedRatings",         // ISO speed rating
      0x8828 : "OECF",                    // Optoelectric conversion factor
      0x9201 : "ShutterSpeedValue",       // Shutter speed
      0x9202 : "ApertureValue",           // Lens aperture
      0x9203 : "BrightnessValue",         // Value of brightness
      0x9204 : "ExposureBias",            // Exposure bias
      0x9205 : "MaxApertureValue",        // Smallest F number of lens
      0x9206 : "SubjectDistance",         // Distance to subject in meters
      0x9207 : "MeteringMode",            // Metering mode
      0x9208 : "LightSource",             // Kind of light source
      0x9209 : "Flash",                   // Flash status
      0x9214 : "SubjectArea",             // Location and area of main subject
      0x920A : "FocalLength",             // Focal length of the lens in mm
      0xA20B : "FlashEnergy",             // Strobe energy in BCPS
      0xA20C : "SpatialFrequencyResponse",    //
      0xA20E : "FocalPlaneXResolution",   // Number of pixels in width direction per FocalPlaneResolutionUnit
      0xA20F : "FocalPlaneYResolution",   // Number of pixels in height direction per FocalPlaneResolutionUnit
      0xA210 : "FocalPlaneResolutionUnit",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
      0xA214 : "SubjectLocation",         // Location of subject in image
      0xA215 : "ExposureIndex",           // Exposure index selected on camera
      0xA217 : "SensingMethod",           // Image sensor type
      0xA300 : "FileSource",              // Image source (3 == DSC)
      0xA301 : "SceneType",               // Scene type (1 == directly photographed)
      0xA302 : "CFAPattern",              // Color filter array geometric pattern
      0xA401 : "CustomRendered",          // Special processing
      0xA402 : "ExposureMode",            // Exposure mode
      0xA403 : "WhiteBalance",            // 1 = auto white balance, 2 = manual
      0xA404 : "DigitalZoomRation",       // Digital zoom ratio
      0xA405 : "FocalLengthIn35mmFilm",   // Equivalent foacl length assuming 35mm film camera (in mm)
      0xA406 : "SceneCaptureType",        // Type of scene
      0xA407 : "GainControl",             // Degree of overall image gain adjustment
      0xA408 : "Contrast",                // Direction of contrast processing applied by camera
      0xA409 : "Saturation",              // Direction of saturation processing applied by camera
      0xA40A : "Sharpness",               // Direction of sharpness processing applied by camera
      0xA40B : "DeviceSettingDescription",    //
      0xA40C : "SubjectDistanceRange",    // Distance to subject

      // other tags
      0xA005 : "InteroperabilityIFDPointer",
      0xA420 : "ImageUniqueID"            // Identifier assigned uniquely to each image
  };

  var TiffTags = this.TiffTags = {
      0x0100 : "ImageWidth",
      0x0101 : "ImageHeight",
      0x8769 : "ExifIFDPointer",
      0x8825 : "GPSInfoIFDPointer",
      0xA005 : "InteroperabilityIFDPointer",
      0x0102 : "BitsPerSample",
      0x0103 : "Compression",
      0x0106 : "PhotometricInterpretation",
      0x0112 : "Orientation",
      0x0115 : "SamplesPerPixel",
      0x011C : "PlanarConfiguration",
      0x0212 : "YCbCrSubSampling",
      0x0213 : "YCbCrPositioning",
      0x011A : "XResolution",
      0x011B : "YResolution",
      0x0128 : "ResolutionUnit",
      0x0111 : "StripOffsets",
      0x0116 : "RowsPerStrip",
      0x0117 : "StripByteCounts",
      0x0201 : "JPEGInterchangeFormat",
      0x0202 : "JPEGInterchangeFormatLength",
      0x012D : "TransferFunction",
      0x013E : "WhitePoint",
      0x013F : "PrimaryChromaticities",
      0x0211 : "YCbCrCoefficients",
      0x0214 : "ReferenceBlackWhite",
      0x0132 : "DateTime",
      0x010E : "ImageDescription",
      0x010F : "Make",
      0x0110 : "Model",
      0x0131 : "Software",
      0x013B : "Artist",
      0x8298 : "Copyright"
  };

  var GPSTags = this.GPSTags = {
      0x0000 : "GPSVersionID",
      0x0001 : "GPSLatitudeRef",
      0x0002 : "GPSLatitude",
      0x0003 : "GPSLongitudeRef",
      0x0004 : "GPSLongitude",
      0x0005 : "GPSAltitudeRef",
      0x0006 : "GPSAltitude",
      0x0007 : "GPSTimeStamp",
      0x0008 : "GPSSatellites",
      0x0009 : "GPSStatus",
      0x000A : "GPSMeasureMode",
      0x000B : "GPSDOP",
      0x000C : "GPSSpeedRef",
      0x000D : "GPSSpeed",
      0x000E : "GPSTrackRef",
      0x000F : "GPSTrack",
      0x0010 : "GPSImgDirectionRef",
      0x0011 : "GPSImgDirection",
      0x0012 : "GPSMapDatum",
      0x0013 : "GPSDestLatitudeRef",
      0x0014 : "GPSDestLatitude",
      0x0015 : "GPSDestLongitudeRef",
      0x0016 : "GPSDestLongitude",
      0x0017 : "GPSDestBearingRef",
      0x0018 : "GPSDestBearing",
      0x0019 : "GPSDestDistanceRef",
      0x001A : "GPSDestDistance",
      0x001B : "GPSProcessingMethod",
      0x001C : "GPSAreaInformation",
      0x001D : "GPSDateStamp",
      0x001E : "GPSDifferential"
  };

  var StringValues = this.StringValues = {
      ExposureProgram : {
          0 : "Not defined",
          1 : "Manual",
          2 : "Normal program",
          3 : "Aperture priority",
          4 : "Shutter priority",
          5 : "Creative program",
          6 : "Action program",
          7 : "Portrait mode",
          8 : "Landscape mode"
      },
      MeteringMode : {
          0 : "Unknown",
          1 : "Average",
          2 : "CenterWeightedAverage",
          3 : "Spot",
          4 : "MultiSpot",
          5 : "Pattern",
          6 : "Partial",
          255 : "Other"
      },
      LightSource : {
          0 : "Unknown",
          1 : "Daylight",
          2 : "Fluorescent",
          3 : "Tungsten (incandescent light)",
          4 : "Flash",
          9 : "Fine weather",
          10 : "Cloudy weather",
          11 : "Shade",
          12 : "Daylight fluorescent (D 5700 - 7100K)",
          13 : "Day white fluorescent (N 4600 - 5400K)",
          14 : "Cool white fluorescent (W 3900 - 4500K)",
          15 : "White fluorescent (WW 3200 - 3700K)",
          17 : "Standard light A",
          18 : "Standard light B",
          19 : "Standard light C",
          20 : "D55",
          21 : "D65",
          22 : "D75",
          23 : "D50",
          24 : "ISO studio tungsten",
          255 : "Other"
      },
      Flash : {
          0x0000 : "Flash did not fire",
          0x0001 : "Flash fired",
          0x0005 : "Strobe return light not detected",
          0x0007 : "Strobe return light detected",
          0x0009 : "Flash fired, compulsory flash mode",
          0x000D : "Flash fired, compulsory flash mode, return light not detected",
          0x000F : "Flash fired, compulsory flash mode, return light detected",
          0x0010 : "Flash did not fire, compulsory flash mode",
          0x0018 : "Flash did not fire, auto mode",
          0x0019 : "Flash fired, auto mode",
          0x001D : "Flash fired, auto mode, return light not detected",
          0x001F : "Flash fired, auto mode, return light detected",
          0x0020 : "No flash function",
          0x0041 : "Flash fired, red-eye reduction mode",
          0x0045 : "Flash fired, red-eye reduction mode, return light not detected",
          0x0047 : "Flash fired, red-eye reduction mode, return light detected",
          0x0049 : "Flash fired, compulsory flash mode, red-eye reduction mode",
          0x004D : "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
          0x004F : "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
          0x0059 : "Flash fired, auto mode, red-eye reduction mode",
          0x005D : "Flash fired, auto mode, return light not detected, red-eye reduction mode",
          0x005F : "Flash fired, auto mode, return light detected, red-eye reduction mode"
      },
      SensingMethod : {
          1 : "Not defined",
          2 : "One-chip color area sensor",
          3 : "Two-chip color area sensor",
          4 : "Three-chip color area sensor",
          5 : "Color sequential area sensor",
          7 : "Trilinear sensor",
          8 : "Color sequential linear sensor"
      },
      SceneCaptureType : {
          0 : "Standard",
          1 : "Landscape",
          2 : "Portrait",
          3 : "Night scene"
      },
      SceneType : {
          1 : "Directly photographed"
      },
      CustomRendered : {
          0 : "Normal process",
          1 : "Custom process"
      },
      WhiteBalance : {
          0 : "Auto white balance",
          1 : "Manual white balance"
      },
      GainControl : {
          0 : "None",
          1 : "Low gain up",
          2 : "High gain up",
          3 : "Low gain down",
          4 : "High gain down"
      },
      Contrast : {
          0 : "Normal",
          1 : "Soft",
          2 : "Hard"
      },
      Saturation : {
          0 : "Normal",
          1 : "Low saturation",
          2 : "High saturation"
      },
      Sharpness : {
          0 : "Normal",
          1 : "Soft",
          2 : "Hard"
      },
      SubjectDistanceRange : {
          0 : "Unknown",
          1 : "Macro",
          2 : "Close view",
          3 : "Distant view"
      },
      FileSource : {
          3 : "DSC"
      },

      Components : {
          0 : "",
          1 : "Y",
          2 : "Cb",
          3 : "Cr",
          4 : "R",
          5 : "G",
          6 : "B"
      }
  };

  function addEvent(element, event, handler) {
      if (element.addEventListener) {
          element.addEventListener(event, handler, false);
      } else if (element.attachEvent) {
          element.attachEvent("on" + event, handler);
      }
  }

  function imageHasData(img) {
      return !!(img.exifdata);
  }

  function base64ToArrayBuffer(base64, contentType) {
      contentType = contentType || base64.match(/^data\:([^\;]+)\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'
      base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, '');
      var binary = atob(base64);
      var len = binary.length;
      var buffer = new ArrayBuffer(len);
      var view = new Uint8Array(buffer);
      for (var i = 0; i < len; i++) {
          view[i] = binary.charCodeAt(i);
      }
      return buffer;
  }

  function objectURLToBlob(url, callback) {
      var http = new XMLHttpRequest();
      http.open("GET", url, true);
      http.responseType = "blob";
      http.onload = function(e) {
          if (this.status == 200 || this.status === 0) {
              callback(this.response);
          }
      };
      http.send();
  }

  function getImageData(img, callback) {
      function handleBinaryFile(binFile) {
          var data = findEXIFinJPEG(binFile);
          var iptcdata = findIPTCinJPEG(binFile);
          img.exifdata = data || {};
          img.iptcdata = iptcdata || {};
          if (callback) {
              callback.call(img);
          }
      }

      if (img.src) {
          if (/^data\:/i.test(img.src)) { // Data URI
              var arrayBuffer = base64ToArrayBuffer(img.src);
              handleBinaryFile(arrayBuffer);

          } else if (/^blob\:/i.test(img.src)) { // Object URL
              var fileReader = new FileReader();
              fileReader.onload = function(e) {
                  handleBinaryFile(e.target.result);
              };
              objectURLToBlob(img.src, function (blob) {
                  fileReader.readAsArrayBuffer(blob);
              });
          } else {
              var http = new XMLHttpRequest();
              http.onload = function() {
                  if (this.status == 200 || this.status === 0) {
                      handleBinaryFile(http.response);
                  } else {
                      throw "Could not load image";
                  }
                  http = null;
              };
              http.open("GET", img.src, true);
              http.responseType = "arraybuffer";
              http.send(null);
          }
      } else if (window.FileReader && (img instanceof window.Blob || img instanceof window.File)) {
          var fileReader = new FileReader();
          fileReader.onload = function(e) {
              if (debug) console.log("Got file of length " + e.target.result.byteLength);
              handleBinaryFile(e.target.result);
          };

          fileReader.readAsArrayBuffer(img);
      }
  }

  function findEXIFinJPEG(file) {
      var dataView = new DataView(file);

      if (debug) console.log("Got file of length " + file.byteLength);
      if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
          if (debug) console.log("Not a valid JPEG");
          return false; // not a valid jpeg
      }

      var offset = 2,
          length = file.byteLength,
          marker;

      while (offset < length) {
          if (dataView.getUint8(offset) != 0xFF) {
              if (debug) console.log("Not a valid marker at offset " + offset + ", found: " + dataView.getUint8(offset));
              return false; // not a valid marker, something is wrong
          }

          marker = dataView.getUint8(offset + 1);
          if (debug) console.log(marker);

          // we could implement handling for other markers here,
          // but we're only looking for 0xFFE1 for EXIF data

          if (marker == 225) {
              if (debug) console.log("Found 0xFFE1 marker");

              return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);

              // offset += 2 + file.getShortAt(offset+2, true);

          } else {
              offset += 2 + dataView.getUint16(offset+2);
          }

      }

  }

  function findIPTCinJPEG(file) {
      var dataView = new DataView(file);

      if (debug) console.log("Got file of length " + file.byteLength);
      if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
          if (debug) console.log("Not a valid JPEG");
          return false; // not a valid jpeg
      }

      var offset = 2,
          length = file.byteLength;

      var isFieldSegmentStart = function(dataView, offset){
          return (
              dataView.getUint8(offset) === 0x38 &&
              dataView.getUint8(offset+1) === 0x42 &&
              dataView.getUint8(offset+2) === 0x49 &&
              dataView.getUint8(offset+3) === 0x4D &&
              dataView.getUint8(offset+4) === 0x04 &&
              dataView.getUint8(offset+5) === 0x04
          );
      };

      while (offset < length) {

          if ( isFieldSegmentStart(dataView, offset )){

              // Get the length of the name header (which is padded to an even number of bytes)
              var nameHeaderLength = dataView.getUint8(offset+7);
              if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;
              // Check for pre photoshop 6 format
              if(nameHeaderLength === 0) {
                  // Always 4
                  nameHeaderLength = 4;
              }

              var startOffset = offset + 8 + nameHeaderLength;
              var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);

              return readIPTCData(file, startOffset, sectionLength);

              break;

          }

          // Not the marker, continue searching
          offset++;

      }

  }
  var IptcFieldMap = {
      0x78 : 'caption',
      0x6E : 'credit',
      0x19 : 'keywords',
      0x37 : 'dateCreated',
      0x50 : 'byline',
      0x55 : 'bylineTitle',
      0x7A : 'captionWriter',
      0x69 : 'headline',
      0x74 : 'copyright',
      0x0F : 'category'
  };
  function readIPTCData(file, startOffset, sectionLength){
      var dataView = new DataView(file);
      var data = {};
      var fieldValue, fieldName, dataSize, segmentType, segmentSize;
      var segmentStartPos = startOffset;
      while(segmentStartPos < startOffset+sectionLength) {
          if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){
              segmentType = dataView.getUint8(segmentStartPos+2);
              if(segmentType in IptcFieldMap) {
                  dataSize = dataView.getInt16(segmentStartPos+3);
                  segmentSize = dataSize + 5;
                  fieldName = IptcFieldMap[segmentType];
                  fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);
                  // Check if we already stored a value with this name
                  if(data.hasOwnProperty(fieldName)) {
                      // Value already stored with this name, create multivalue field
                      if(data[fieldName] instanceof Array) {
                          data[fieldName].push(fieldValue);
                      }
                      else {
                          data[fieldName] = [data[fieldName], fieldValue];
                      }
                  }
                  else {
                      data[fieldName] = fieldValue;
                  }
              }

          }
          segmentStartPos++;
      }
      return data;
  }

  function readTags(file, tiffStart, dirStart, strings, bigEnd) {
      var entries = file.getUint16(dirStart, !bigEnd),
          tags = {},
          entryOffset, tag,
          i;

      for (i=0;i<entries;i++) {
          entryOffset = dirStart + i*12 + 2;
          tag = strings[file.getUint16(entryOffset, !bigEnd)];
          if (!tag && debug) console.log("Unknown tag: " + file.getUint16(entryOffset, !bigEnd));
          tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
      }
      return tags;
  }

  function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
      var type = file.getUint16(entryOffset+2, !bigEnd),
          numValues = file.getUint32(entryOffset+4, !bigEnd),
          valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,
          offset,
          vals, val, n,
          numerator, denominator;

      switch (type) {
          case 1: // byte, 8-bit unsigned int
          case 7: // undefined, 8-bit byte, value depending on field
              if (numValues == 1) {
                  return file.getUint8(entryOffset + 8, !bigEnd);
              } else {
                  offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                  vals = [];
                  for (n=0;n<numValues;n++) {
                      vals[n] = file.getUint8(offset + n);
                  }
                  return vals;
              }

          case 2: // ascii, 8-bit byte
              offset = numValues > 4 ? valueOffset : (entryOffset + 8);
              return getStringFromDB(file, offset, numValues-1);

          case 3: // short, 16 bit int
              if (numValues == 1) {
                  return file.getUint16(entryOffset + 8, !bigEnd);
              } else {
                  offset = numValues > 2 ? valueOffset : (entryOffset + 8);
                  vals = [];
                  for (n=0;n<numValues;n++) {
                      vals[n] = file.getUint16(offset + 2*n, !bigEnd);
                  }
                  return vals;
              }

          case 4: // long, 32 bit int
              if (numValues == 1) {
                  return file.getUint32(entryOffset + 8, !bigEnd);
              } else {
                  vals = [];
                  for (n=0;n<numValues;n++) {
                      vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);
                  }
                  return vals;
              }

          case 5:    // rational = two long values, first is numerator, second is denominator
              if (numValues == 1) {
                  numerator = file.getUint32(valueOffset, !bigEnd);
                  denominator = file.getUint32(valueOffset+4, !bigEnd);
                  val = new Number(numerator / denominator);
                  val.numerator = numerator;
                  val.denominator = denominator;
                  return val;
              } else {
                  vals = [];
                  for (n=0;n<numValues;n++) {
                      numerator = file.getUint32(valueOffset + 8*n, !bigEnd);
                      denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);
                      vals[n] = new Number(numerator / denominator);
                      vals[n].numerator = numerator;
                      vals[n].denominator = denominator;
                  }
                  return vals;
              }

          case 9: // slong, 32 bit signed int
              if (numValues == 1) {
                  return file.getInt32(entryOffset + 8, !bigEnd);
              } else {
                  vals = [];
                  for (n=0;n<numValues;n++) {
                      vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);
                  }
                  return vals;
              }

          case 10: // signed rational, two slongs, first is numerator, second is denominator
              if (numValues == 1) {
                  return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);
              } else {
                  vals = [];
                  for (n=0;n<numValues;n++) {
                      vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);
                  }
                  return vals;
              }
      }
  }

  function getStringFromDB(buffer, start, length) {
      var outstr = "";
      for (var n = start; n < start+length; n++) {
          outstr += String.fromCharCode(buffer.getUint8(n));
      }
      return outstr;
  }

  function readEXIFData(file, start) {
      if (getStringFromDB(file, start, 4) != "Exif") {
          if (debug) console.log("Not valid EXIF data! " + getStringFromDB(file, start, 4));
          return false;
      }

      var bigEnd,
          tags, tag,
          exifData, gpsData,
          tiffOffset = start + 6;

      // test for TIFF validity and endianness
      if (file.getUint16(tiffOffset) == 0x4949) {
          bigEnd = false;
      } else if (file.getUint16(tiffOffset) == 0x4D4D) {
          bigEnd = true;
      } else {
          if (debug) console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
          return false;
      }

      if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {
          if (debug) console.log("Not valid TIFF data! (no 0x002A)");
          return false;
      }

      var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);

      if (firstIFDOffset < 0x00000008) {
          if (debug) console.log("Not valid TIFF data! (First offset less than 8)", file.getUint32(tiffOffset+4, !bigEnd));
          return false;
      }

      tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);

      if (tags.ExifIFDPointer) {
          exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);
          for (tag in exifData) {
              switch (tag) {
                  case "LightSource" :
                  case "Flash" :
                  case "MeteringMode" :
                  case "ExposureProgram" :
                  case "SensingMethod" :
                  case "SceneCaptureType" :
                  case "SceneType" :
                  case "CustomRendered" :
                  case "WhiteBalance" :
                  case "GainControl" :
                  case "Contrast" :
                  case "Saturation" :
                  case "Sharpness" :
                  case "SubjectDistanceRange" :
                  case "FileSource" :
                      exifData[tag] = StringValues[tag][exifData[tag]];
                      break;

                  case "ExifVersion" :
                  case "FlashpixVersion" :
                      exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
                      break;

                  case "ComponentsConfiguration" :
                      exifData[tag] =
                          StringValues.Components[exifData[tag][0]] +
                          StringValues.Components[exifData[tag][1]] +
                          StringValues.Components[exifData[tag][2]] +
                          StringValues.Components[exifData[tag][3]];
                      break;
              }
              tags[tag] = exifData[tag];
          }
      }

      if (tags.GPSInfoIFDPointer) {
          gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);
          for (tag in gpsData) {
              switch (tag) {
                  case "GPSVersionID" :
                      gpsData[tag] = gpsData[tag][0] +
                          "." + gpsData[tag][1] +
                          "." + gpsData[tag][2] +
                          "." + gpsData[tag][3];
                      break;
              }
              tags[tag] = gpsData[tag];
          }
      }

      return tags;
  }

  this.getData = function(img, callback) {
      if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) return false;

      if (!imageHasData(img)) {
          getImageData(img, callback);
      } else {
          if (callback) {
              callback.call(img);
          }
      }
      return true;
  }

  this.getTag = function(img, tag) {
      if (!imageHasData(img)) return;
      return img.exifdata[tag];
  }

  this.getAllTags = function(img) {
      if (!imageHasData(img)) return {};
      var a,
          data = img.exifdata,
          tags = {};
      for (a in data) {
          if (data.hasOwnProperty(a)) {
              tags[a] = data[a];
          }
      }
      return tags;
  }

  this.pretty = function(img) {
      if (!imageHasData(img)) return "";
      var a,
          data = img.exifdata,
          strPretty = "";
      for (a in data) {
          if (data.hasOwnProperty(a)) {
              if (typeof data[a] == "object") {
                  if (data[a] instanceof Number) {
                      strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
                  } else {
                      strPretty += a + " : [" + data[a].length + " values]\r\n";
                  }
              } else {
                  strPretty += a + " : " + data[a] + "\r\n";
              }
          }
      }
      return strPretty;
  }

  this.readFromBinaryFile = function(file) {
      return findEXIFinJPEG(file);
  }
}]);

crop.factory('cropHost', ['$document',  'cropAreaSquare', 'cropEXIF', function($document,  CropAreaSquare, cropEXIF) {
  /* STATIC FUNCTIONS */

  // Get Element's Offset
  var getElementOffset=function(elem) {
      var box = elem.getBoundingClientRect();

      var body = document.body;
      var docElem = document.documentElement;

      var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
      var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;

      var clientTop = docElem.clientTop || body.clientTop || 0;
      var clientLeft = docElem.clientLeft || body.clientLeft || 0;

      var top  = box.top +  scrollTop - clientTop;
      var left = box.left + scrollLeft - clientLeft;

      return { top: Math.round(top), left: Math.round(left) };
  };

  return function(elCanvas, opts, events){
    /* PRIVATE VARIABLES */

    // Object Pointers
    var ctx=null,
        image=null,
        theArea=null;

    // Dimensions
    var minCanvasDims=[100,100],
        maxCanvasDims=[300,300];

    // Result Image size
    var resImgSizeX=200;
    var resImgSizeY=200;

    // Result Image type
    var resImgFormat='image/png';

    // Result Image quality
    var resImgQuality=null;

    /* PRIVATE FUNCTIONS */

    // Draw Scene
    function drawScene() {
      // clear canvas
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

      if(image!==null) {
        // draw source image
        ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);

        ctx.save();

        // and make it darker
        ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

        ctx.restore();

        // draw Area
        theArea.draw();
      }
    }

    // Resets CropHost
    var resetCropHost=function() {
      if(image!==null) {
        theArea.setImage(image);
        var imageDims=[image.width, image.height],
            imageRatio=image.width/image.height,
            canvasDims=imageDims;

        if(canvasDims[0]>maxCanvasDims[0]) {
          canvasDims[0]=maxCanvasDims[0];
          canvasDims[1]=canvasDims[0]/imageRatio;
        } else if(canvasDims[0]<minCanvasDims[0]) {
          canvasDims[0]=minCanvasDims[0];
          canvasDims[1]=canvasDims[0]/imageRatio;
        }
        if(canvasDims[1]>maxCanvasDims[1]) {
          canvasDims[1]=maxCanvasDims[1];
          canvasDims[0]=canvasDims[1]*imageRatio;
        } else if(canvasDims[1]<minCanvasDims[1]) {
          canvasDims[1]=minCanvasDims[1];
          canvasDims[0]=canvasDims[1]*imageRatio;
        }
        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});

        theArea.setX(ctx.canvas.width/2);
        theArea.setY(ctx.canvas.height/2);
        theArea.setSize([Math.min(200, ctx.canvas.width/2),Math.min(200, ctx.canvas.height/2)]);
      } else {
        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});
      }

      drawScene();
    };

    /**
     * Returns event.changedTouches directly if event is a TouchEvent.
     * If event is a jQuery event, return changedTouches of event.originalEvent
     */
    var getChangedTouches=function(event){
      if(angular.isDefined(event.changedTouches)){
        return event.changedTouches;
      }else{
        return event.originalEvent.changedTouches;
      }
    };

    var onMouseMove=function(e) {
      if(image!==null) {
        var offset=getElementOffset(ctx.canvas),
            pageX, pageY;
        if(e.type === 'touchmove') {
          pageX=getChangedTouches(e)[0].pageX;
          pageY=getChangedTouches(e)[0].pageY;
        } else {
          pageX=e.pageX;
          pageY=e.pageY;
        }
        theArea.processMouseMove(pageX-offset.left, pageY-offset.top);
        drawScene();
      }
    };

    var onMouseDown=function(e) {
      e.preventDefault();
      e.stopPropagation();
      if(image!==null) {
        var offset=getElementOffset(ctx.canvas),
            pageX, pageY;
        if(e.type === 'touchstart') {
          pageX=getChangedTouches(e)[0].pageX;
          pageY=getChangedTouches(e)[0].pageY;
        } else {
          pageX=e.pageX;
          pageY=e.pageY;
        }
        theArea.processMouseDown(pageX-offset.left, pageY-offset.top);
        drawScene();
      }
    };

    var onMouseUp=function(e) {
      if(image!==null) {
        var offset=getElementOffset(ctx.canvas),
            pageX, pageY;
        if(e.type === 'touchend') {
          pageX=getChangedTouches(e)[0].pageX;
          pageY=getChangedTouches(e)[0].pageY;
        } else {
          pageX=e.pageX;
          pageY=e.pageY;
        }
        theArea.processMouseUp(pageX-offset.left, pageY-offset.top);
        drawScene();
      }
    };

    this.getResultImageDataURI=function() {
      var temp_ctx, temp_canvas;
      temp_canvas = angular.element('<canvas></canvas>')[0];
      temp_ctx = temp_canvas.getContext('2d');
	  temp_canvas.width = resImgSizeX;
      temp_canvas.height = resImgSizeY;
      if(image!==null){

        temp_ctx.drawImage(image, (theArea.getX()-theArea.getSize()[0]/2)*(image.width/ctx.canvas.width), (theArea.getY()-theArea.getSize()[1]/2)*(image.height/ctx.canvas.height), theArea.getSize()[0]*(image.width/ctx.canvas.width), theArea.getSize()[1]*(image.height/ctx.canvas.height), 0, 0, resImgSizeX, resImgSizeY);

      }
      if (resImgQuality!==null ){
        return temp_canvas.toDataURL(resImgFormat, resImgQuality);
      }
      return temp_canvas.toDataURL(resImgFormat);
    };

    this.setNewImageSource=function(imageSource) {
      image=null;
      resetCropHost();
      events.trigger('image-updated');
      if(!!imageSource) {
        var newImage = new Image();
        if(imageSource.substring(0,4).toLowerCase()==='http') {
          newImage.crossOrigin = 'anonymous';
        }
        newImage.onload = function(){
          events.trigger('load-done');

          cropEXIF.getData(newImage,function(){
            var orientation=cropEXIF.getTag(newImage,'Orientation');

            if([3,6,8].indexOf(orientation)>-1) {
              var canvas = document.createElement("canvas"),
                  ctx=canvas.getContext("2d"),
                  cw = newImage.width, ch = newImage.height, cx = 0, cy = 0, deg=0;
              switch(orientation) {
                case 3:
                  cx=-newImage.width;
                  cy=-newImage.height;
                  deg=180;
                  break;
                case 6:
                  cw = newImage.height;
                  ch = newImage.width;
                  cy=-newImage.height;
                  deg=90;
                  break;
                case 8:
                  cw = newImage.height;
                  ch = newImage.width;
                  cx=-newImage.width;
                  deg=270;
                  break;
              }

              canvas.width = cw;
              canvas.height = ch;
              ctx.rotate(deg*Math.PI/180);
              ctx.drawImage(newImage, cx, cy);

              image=new Image();
              image.src = canvas.toDataURL("image/png");
            } else {
              image=newImage;
            }
            resetCropHost();
            events.trigger('image-updated');
          });
        };
        newImage.onerror=function() {
          events.trigger('load-error');
        };
        events.trigger('load-start');
        newImage.src=imageSource;
      }
    };

    this.setMaxDimensions=function(width, height) {
      maxCanvasDims=[width,height];

      if(image!==null) {
        var curWidth=ctx.canvas.width,
            curHeight=ctx.canvas.height;

        var imageDims=[image.width, image.height],
            imageRatio=image.width/image.height,
            canvasDims=imageDims;

        if(canvasDims[0]>maxCanvasDims[0]) {
          canvasDims[0]=maxCanvasDims[0];
          canvasDims[1]=canvasDims[0]/imageRatio;
        } else if(canvasDims[0]<minCanvasDims[0]) {
          canvasDims[0]=minCanvasDims[0];
          canvasDims[1]=canvasDims[0]/imageRatio;
        }
        if(canvasDims[1]>maxCanvasDims[1]) {
          canvasDims[1]=maxCanvasDims[1];
          canvasDims[0]=canvasDims[1]*imageRatio;
        } else if(canvasDims[1]<minCanvasDims[1]) {
          canvasDims[1]=minCanvasDims[1];
          canvasDims[0]=canvasDims[1]*imageRatio;
        }
        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});
		var ratioNewCurWidth=ctx.canvas.width/curWidth,
            ratioNewCurHeight=ctx.canvas.height/curHeight;

        theArea.setX(theArea.getX()*ratioNewCurWidth);
        theArea.setY(theArea.getY()*ratioNewCurHeight);
        theArea.setSize([theArea.getSize()[0]*ratioNewCurWidth,theArea.getSize()[1]*ratioNewCurHeight]);
      } else {
        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});
      }

      drawScene();

    };

    this.setAreaMinSize=function(size) {
      if(!isNaN(size[0]) && !isNaN(size[1])) {
        theArea.setMinSize(Math.max(size[0],size[1]));
        drawScene();
      }
    };

    this.setResultImageSize=function(size) {
      if(!isNaN(size[0]) && !isNaN(size[1])) {
        resImgSizeX=size[0];
        resImgSizeY=size[1];
      }
    };

    this.setResultImageFormat=function(format) {
      resImgFormat = format;
    };

    this.setResultImageQuality=function(quality){
      quality = parseFloat(quality);
      if (!isNaN(quality) && quality>=0 && quality<=1){
        resImgQuality = quality;
      }
    };

    this.setAreaType=function(type) {
      var curSize=theArea.getSize(),
          curMinSize=theArea.getMinSize(),
          curX=theArea.getX(),
          curY=theArea.getY();

      var AreaClass=CropAreaSquare;

      theArea = new AreaClass(ctx, events);
      theArea.setMinSize(curMinSize);
      theArea.setSize(curSize);
      theArea.setX(curX);
      theArea.setY(curY);

      // resetCropHost();
      if(image!==null) {
        theArea.setImage(image);
      }

      drawScene();
    };

	this.setResRatio = function(ratio){
		theArea.setResRatio(ratio);
	};

    /* Life Cycle begins */

    // Init Context var
    ctx = elCanvas[0].getContext('2d');

    // Init CropArea
    theArea = new CropAreaSquare(ctx, events);

    // Init Mouse Event Listeners
    $document.on('mousemove',onMouseMove);
    elCanvas.on('mousedown',onMouseDown);
    $document.on('mouseup',onMouseUp);

    // Init Touch Event Listeners
    $document.on('touchmove',onMouseMove);
    elCanvas.on('touchstart',onMouseDown);
    $document.on('touchend',onMouseUp);

    // CropHost Destructor
    this.destroy=function() {
      $document.off('mousemove',onMouseMove);
      elCanvas.off('mousedown',onMouseDown);
      $document.off('mouseup',onMouseMove);

      $document.off('touchmove',onMouseMove);
      elCanvas.off('touchstart',onMouseDown);
      $document.off('touchend',onMouseMove);

      elCanvas.remove();
    };
  };

}]);


crop.factory('cropPubSub', [function() {
  return function() {
    var events = {};
    // Subscribe
    this.on = function(names, handler) {
      names.split(' ').forEach(function(name) {
        if (!events[name]) {
          events[name] = [];
        }
        events[name].push(handler);
      });
      return this;
    };
    // Publish
    this.trigger = function(name, args) {
      angular.forEach(events[name], function(handler) {
        handler.call(null, args);
      });
      return this;
    };
  };
}]);

crop.directive('imgCrop', ['$timeout', 'cropHost', 'cropPubSub', function($timeout, CropHost, CropPubSub) {
  return {
    restrict: 'E',
    scope: {
      image: '=',
      resultImage: '=',

      changeOnFly: '=',
      areaType: '@',
      areaMinSize: '=',
      resultImageSize: '=',
      resultImageFormat: '@',
      resultImageQuality: '=',
	  resImgHight:'=',
	  resImgWidth:'=',
	  resImgRatio:'=',

      onChange: '&',
      onLoadBegin: '&',
      onLoadDone: '&',
      onLoadError: '&',

    },
    template: '<canvas></canvas>',
    controller: ['$scope', function($scope) {
      $scope.events = new CropPubSub();
    }],
    link: function(scope, element/*, attrs*/) {
      // Init Events Manager
      var events = scope.events;

      // Init Crop Host
      var cropHost=new CropHost(element.find('canvas'), {}, events);

      // Store Result Image to check if it's changed
      var storedResultImage;

      var updateResultImage=function(scope) {
        var resultImage=cropHost.getResultImageDataURI();
        if(storedResultImage!==resultImage) {
          storedResultImage=resultImage;
          if(angular.isDefined(scope.resultImage)) {
            scope.resultImage=resultImage;
          }
          scope.onChange({$dataURI: scope.resultImage});
        }
      };

      // Wrapper to safely exec functions within $apply on a running $digest cycle
      var fnSafeApply=function(fn) {
        return function(){
          $timeout(function(){
            scope.$apply(function(scope){
              fn(scope);
            });
          });
        };
      };

      // Setup CropHost Event Handlers
      events
        .on('load-start', fnSafeApply(function(scope){
          scope.onLoadBegin({});
        }))
        .on('load-done', fnSafeApply(function(scope){
          scope.onLoadDone({});
        }))
        .on('load-error', fnSafeApply(function(scope){
          scope.onLoadError({});
        }))
        .on('area-move area-resize', fnSafeApply(function(scope){
          if(!!scope.changeOnFly) {
            updateResultImage(scope);
          }
        }))
        .on('area-move-end area-resize-end image-updated', fnSafeApply(function(scope){
          updateResultImage(scope);
        }));

      // Sync CropHost with Directive's options
      scope.$watch('image',function(){
        cropHost.setNewImageSource(scope.image);
      });
      scope.$watch('areaType',function(){
        cropHost.setAreaType(scope.areaType);
        updateResultImage(scope);
      });
      scope.$watch('areaMinSize',function(){
        cropHost.setAreaMinSize(scope.areaMinSize);
        updateResultImage(scope);
      });
      scope.$watch('resImgWidth',function(){
				if(scope.resImgHight != "="){
					var imgSize = [];
					imgSize[0] = scope.resImgWidth;
					imgSize[1] = scope.resImgHight;
	        cropHost.setResultImageSize(imgSize);
	        updateResultImage(scope);
				}
      });
			scope.$watch('resImgHight',function(){
				if(scope.resImgWidth != "="){
					var imgSize = [];
					imgSize[0] = scope.resImgWidth;
					imgSize[1] = scope.resImgHight;
	        cropHost.setResultImageSize(imgSize);
	        updateResultImage(scope);
				}
      });
      scope.$watch('resultImageFormat',function(){
        cropHost.setResultImageFormat(scope.resultImageFormat);
        updateResultImage(scope);
      });
      scope.$watch('resultImageQuality',function(){
        cropHost.setResultImageQuality(scope.resultImageQuality);
        updateResultImage(scope);
      });

	  //固定比例
	  scope.$watch('resImgRatio',function(){
        cropHost.setResRatio(scope.resImgRatio);
        updateResultImage(scope);
      });

      // Update CropHost dimensions when the directive element is resized
      scope.$watch(
        function () {
          return [element[0].clientWidth, element[0].clientHeight];
        },
        function (value) {
          cropHost.setMaxDimensions(value[0],value[1]);
          updateResultImage(scope);
        },
        true
      );

      // Destroy CropHost Instance when the directive is destroying
      scope.$on('$destroy', function(){
          cropHost.destroy();
      });
    }
  };
}]);
}());
/*!
 * ngHyCalendar
 *
 *
 * author:gengws gengws@163.com
 *
 */
(function() {

  var calendar = angular.module('ngHyCalendar', []);

  calendar.factory('hyCalendar', ['calendarData', 'HyDate', function(calendarData, HyDate) {

    var HyCalendar = function(options, calId) {

      this.dayData = "day_of_month";
      this.monthData = "month_of_year";
      this.yearData = "year";

      this.calId = calId;

      this.headId = "calHead" + calId;
      this.headDateId = "calHeadDate" + calId;
      this.bodyId = "calBody" + calId;
      this.footId = "calFoot" + calId;
      this.dayId = "calDay" + calId;
      this.weekId = "calWeek" + calId;
      this.monthId = "calMonth" + calId;

      //config
      this.language = options.language ? options.language : HyCalendar.defaults.language;
      this.calendarClass = options.calendarClass ? options.calendarClass : HyCalendar.defaults.calendarClass;
      this.head_class = options.headClass ? options.headClass : HyCalendar.defaults.headClass;
      this.headDateClass = options.headDateClass ? options.headDateClass : HyCalendar.defaults.headDateClass;
      this.bodyClass = options.bodyClass ? options.bodyClass : HyCalendar.defaults.bodyClass;
      this.footClass = options.footClass ? options.footClass : HyCalendar.defaults.footClass;
      this.dayClass = options.dayClass ? options.dayClass : HyCalendar.defaults.dayClass;

      this.headTempl = options.headTempl ? options.headTempl : HyCalendar.defaults.headTempl;
      this.dayTempl = options.dayTempl ? options.dayTempl : HyCalendar.defaults.dayTempl;
      this.monthTempl = options.monthTempl ? options.monthTempl : HyCalendar.defaults.monthTempl;
      this.yearTempl = options.yearTempl ? options.yearTempl : HyCalendar.defaults.yearTempl;

      this.dayClick = options.dayClick ? options.dayClick : HyCalendar.defaults.dayClick;
      this.fillDay = options.fillDay ? options.fillDay : HyCalendar.defaults.fillDay;
      this.monthChange = options.monthChange ? options.monthChange : HyCalendar.defaults.monthChange;

      this.headClickable = options.headClickable ? options.headClickable : HyCalendar.defaults.headClickable;
      this.oldAndNewClickable = options.oldAndNewClickable ? options.oldAndNewClickable : HyCalendar.defaults.oldAndNewClickable;

      this.useShort = options.useShort ? options.useShort : HyCalendar.defaults.useShort;

      this.headPosition = options.headPosition ? options.headPosition : HyCalendar.defaults.headPosition;

      //当前显示模式 年/月/日
      this.viewMode = options.viewMode ? options.viewMode : HyCalendar.defaults.viewMode;
      this.nowViewMode = this._getViewMode(this.viewMode);

      this.dayOldFlag = options.dayOldFlag ? options.dayOldFlag : HyCalendar.defaults.dayOldFlag;
      this.dayNewFlag = options.dayNewFlag ? options.dayNewFlag : HyCalendar.defaults.dayNewFlag;

      this.beforeViewDate = options.viewDate ? options.viewDate : HyCalendar.defaults.viewDate;
      this.viewDate = this._formatDate(this.beforeViewDate);
			this.startDate = options.calendarStartDate ? this._formatDate(options.calendarStartDate) : HyCalendar.defaults.calendarStartDate;
			this.endDate = options.calendarEndDate ? this._formatDate(options.calendarEndDate) : HyCalendar.defaults.calendarEndDate;

      this.nowDate = HyDate.UTCToday();

      this.clickDays = [];
      this.showDates = [];

      this.headDate = '';
      this.headColspan = 5;
      this.weeks = [];
      this.weekDay = [];
      this.monthDays = [];
    };

    HyCalendar.defaults = {
      calendarClass: "calClass",
      headClass: "calHead",
      headDateClass: "calHeadDate",
      bodyClass: "calBody",
      footClass: "calFoot",
      language: "cn",
      headPosition:'top',

      dayOldFlag: "old",
      dayNewFlag: "new",

      headClickable: false,
      oldAndNewClickable: false,

      viewMode: 0,
      viewDate: HyDate.UTCToday(),
      calendarStartDate: -Infinity,
      calendarEndDate: Infinity,

      headTempl: "<th>{{date}}</th>",
      dayTempl: "<td>{{day}}</td>",
      monthTempl: "<td>{{month}}</td>",
      yearTempl: "<td>{{year}}</td>",

      useShort: false,

      //点击天
      dayClick: function(target, datetime) {
        console.log(target);
        console.log(datetime.getHours());
      },
      //自定义填充天的内容
      fillDay: function(target, datetime) {},
      monthChange: function(datetime) {}

    };

    HyCalendar.prototype = {

      //设置显示的时间
      _formatDate: function(date) {
        var type = Object.prototype.toString.call(date);
        if (type === "[object Date]") {
          return HyDate.UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);
        } else if (type === "[object String]") {
          return this._formatStringTime(date);
        } else if (type === "[object Number]") {
          return this._formatNumberTime(date);
        }
      },

      //当时间是yyyy-mm-dd格式时的转换
      _formatStringTime: function(date) {
        if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
          var rs = date.match(/^(\d{4})\-(\d{1,2})\-(\d{1,2})$/);
					var resultDate = new Date();
          resultDate.setFullYear(rs[1]);
          resultDate.setMonth(rs[2] - 1);
          resultDate.setDate(rs[3]);
          resultDate.setHours(0);
          resultDate.setMinutes(0);
          resultDate.setSeconds(0);
          resultDate.setMilliseconds(0);
          return resultDate;
        } else {
          throw new Error('Invalid date format.');
        }
      },

      //
      _formatNumberTime: function(date) {
        if (date < 10000000000) {
          return new Date(date * 1000);
        } else {
          return new Date(date);
        }
      },

      _getViewMode: function(viewMode) {
        var type = Object.prototype.toString.call(viewMode);
        if (type === "[object Number]") {
          return viewMode;
        } else if (type === "[object String]") {
          return calendarData.viewModesStr[viewMode];
        }
      },

      //生成天的视图
      _fillDay: function(date, flag) {
        var day = date.getDate();
        var weekDay = date.getDay();
        var monthDay = {};
        // day = day < 10 ? ("0" + day) : day;
        // if (weekDay == 1) {
        //   html += "<tr>";
        // }

        monthDay.class = "calendar_day "+flag;

        monthDay.day = day;
        monthDay.id = this.dayId;

        monthDay.date = Date.parse(date);
        //处于被点击状态
        if (this._inShowDates(date)) {

        }

        //自定义的填充内容
        monthDay.myhtml = this.fillDay(monthDay, date, flag);
        // if (weekDay === 0) {
        //   html += "</tr>";
        // }
        // return html;
        this.monthDays.push(monthDay);
      },

      _setShowDates: function(data) {

        for (var i = 0; i < data.length; i++) {
          var date = this._formatDate(data[i]);
          this.showDates.push(date);
        }

        this.fill();
      },

      _inShowDates: function(date) {
        for (var i = 0; i < this.showDates.length; i++) {
          if (date.getFullYear() == this.showDates[i].getFullYear() && date.getMonth() == this.showDates[i].getMonth() && date.getDate() == this.showDates[i].getDate()) {

            return true;
          }
        }
        return false;
      },

      //添加星期的内容
      _setWeekHead: function() {
        this.weeks = [];
        for (var i = 1; i < 8; i++) {
          var week = {};
          if (this.useShort) {
            week.data = calendarData.dates[this.language].daysShort[i];
          } else {
            week.data = calendarData.dates[this.language].days[i];
          }
          week.class = "week";
          week.id = this.weekId;
          this.weeks.push(week);
        }
      },

      //生成月的视图
      _fillMonth: function(isReFill) {

        this._setWeekHead();

        if (!isReFill) {
          this.monthChange(this.viewDate);
        }
        this.monthDays = [];
        var year = this.viewDate.getFullYear();
        var month = this.viewDate.getMonth();
        var dayMonth = this.viewDate.getDate();
        var dayWeek = this.viewDate.getDay();

        var nowMonth = HyDate.UTCDate(year, month, 1, 0, 0, 0, 0);
        //获取需要显示的最早日期
        var prevDayTmp = nowMonth.getDay() - 1;
        if (prevDayTmp < 0) {
          prevDay = 6;
        } else if (prevDayTmp === 0) {
          prevDay = 7;
        } else {
          prevDay = prevDayTmp;
        }
        var prevMonth = new Date(nowMonth);
        prevMonth.setDate(prevMonth.getDate() - prevDay);
        //获取需要显示的最晚日期
        var nextMonth = new Date(prevMonth).setDate(prevMonth.getDate() + 42).valueOf();
        //显示日期
        while (prevMonth.valueOf() < nextMonth) {

          if (prevMonth.getFullYear() < year || (prevMonth.getFullYear() == year && prevMonth.getMonth() < month)) {
            this._fillDay(prevMonth, "old");
          } else if (prevMonth.getFullYear() > year || (prevMonth.getFullYear() == year && prevMonth.getMonth() > month)) {
            this._fillDay(prevMonth, "new");
          } else {
						if(!this.dateWithinRange(prevMonth)){
							this._fillDay(prevMonth, "old");
						}else{
							if (this.nowDate.getFullYear() == prevMonth.getFullYear() && this.nowDate.getMonth() == prevMonth.getMonth() && this.nowDate.getDate() == prevMonth.getDate()) {
	              this._fillDay(prevMonth, "today");
	            } else {
	              this._fillDay(prevMonth, "");
	            }
						}
          }
          prevMonth.setDate(prevMonth.getDate() + 1);
        }
        this._setMonthDaysToWeekDay();
        this._fillHeadDate(year + "年 " + calendarData.dates[this.language].months[month], 5);
      },

      _setMonthDaysToWeekDay: function(){
        this.weekDay = [];
        var oneWeek = [];
        for(var i = 0;i<this.monthDays.length;i++){
          if(oneWeek.length<7){
            oneWeek.push(this.monthDays[i]);
          }else{
            this.weekDay.push(oneWeek.slice(0));
            oneWeek = [];
            oneWeek.push(this.monthDays[i]);
          }
        }
        if(oneWeek.length>0){
          this.weekDay.push(oneWeek.slice(0));
        }
      },

      //生成年的视图
      _fillYear: function() {
        var html = "<tr>";
        for (var i = 0; i < 12; i++) {
          if (i % 4 === 0) {
            html += "</tr><tr>";
          }
          var month = calendarData.dates[this.language].months[i];
          // 显示月份
          var monthHtml = $(this.monthTempl.replace("{{month}}", month));
          monthHtml.addClass("calendar_month");

          if (i == this.viewDate.getMonth()) {
            monthHtml.addClass("now_month");
          }

          monthHtml.attr(this.monthData, i);
          monthHtml.attr('id', this.monthId);
          html += monthHtml[0].outerHTML;

        }
        html += "</tr>";
        this.picker.find("#" + this.bodyId).append(html);
        this._fillHeadDate(this.viewDate.getFullYear(), 2);
      },

      //显示9个年份
      _showYear: function() {

        var year = this.viewDate.getFullYear();
        year = parseInt(year);
        var startYear = year - 4;
        var endYear = year + 4;
        var headInfo = startYear + "-" + endYear;

        var html = "<tr>";

        for (var i = 0; i < 9; i++) {
          if (i % 3 === 0) {
            html += "</tr><tr>";
          }
          var showYear = startYear + i;
          var yearHtml = $(this.yearTempl.replace("{{year}}", showYear));
          yearHtml.addClass("calendar_year");
          if (showYear == this.viewDate.getFullYear()) {
            yearHtml.addClass("now_year");
          }
          yearHtml.attr(this.yearData, showYear);
          html += yearHtml[0].outerHTML;
        }
        html += "</tr>";
        this.picker.find("#" + this.bodyId).append(html);
        this._fillHeadDate(headInfo, 1);
      },

      //修改头部的日期信息
      _fillHeadDate: function(data, colspan) {
        this.headColspan = colspan;
        this.headDate = data;
      },

      //改变指定目标的样式
      _changeClass: function(target, classContent) {

      },

      //点击天
      _dayClick: function(ele) {
        var clickDay = new Date(this.viewDate);
        var position = $.inArray(clickDay.valueOf(), this.clickDays);
        if (position != -1) {
          this.clickDays = this.clickDays.slice(position, 1);
        } else {
          this.clickDays.push(clickDay.valueOf());
        }
        this.dayClick(ele, this.viewDate);
      },

      //清除显示的内容
      _clear: function() {
        // this.picker.find("#" + this.bodyId).html("");
        // this.picker.find("#" + this.headDateId).html("");
        // this.picker.find("#" + this.footId).html("");
      },

      show: function() {
        this.fill();
      },

      //填充日历内容
      fill: function(isReFill) {
        this._clear();
        switch (calendarData.viewModes[this.nowViewMode].nodes) {
          case 'day':
            this._fillMonth(isReFill);
            break;
          case 'month':
            this._fillYear();
            break;
          case 'year':
            this._showYear();
            break;
        }

      },

      //点击日历内容
      click: function(e) {
        e.stopPropagation();
        e.preventDefault();
        var target = $(e.target);
				target = target.closest('td');
        var targetClass = $(target[0])[0].classList;
        var reFill = true;
        if ($.inArray("calendar_day", targetClass) != -1) {
          //判断是否为当前月
          var canChange = true;
					var dateTmp = new Date(this.viewDate);
          if (this.oldAndNewClickable) {
            if ($.inArray(this.dayOldFlag, targetClass) != -1) {
							dateTmp.setMonth(this.viewDate.getMonth() - 1);
							dateTmp.setDate(target.attr(this.dayData));
							if(this.dateWithinRange(dateTmp)){
								this.viewDate.setMonth(this.viewDate.getMonth() - 1);
							}
              canChange = false;
            } else if ($.inArray(this.dayNewFlag, targetClass) != -1) {
							dateTmp.setMonth(this.viewDate.getMonth() + 1);
							dateTmp.setDate(target.attr(this.dayData));
							if(this.dateWithinRange(dateTmp)){
								this.viewDate.setMonth(this.viewDate.getMonth() + 1);
							}
              canChange = false;
            }
          } else {
            reFill = false;
          }
          this.viewDate.setDate(target.attr(this.dayData));
          this._dayClick(target);
        } else if ($.inArray("head_date", targetClass) != -1) {
          if (this.headClickable) {
            this.changeViewMode(1);
          }
        } else if ($.inArray("calendar_month", targetClass) != -1) {
          this.viewDate.setMonth(target.attr(this.monthData));
          this.nowViewMode = 0;
        } else if ($.inArray("calendar_year", targetClass) != -1) {
          this.viewDate.setFullYear(target.attr(this.yearData));
          this.nowViewMode = 1;
        } else if ($.inArray("left_arrow", targetClass) != -1) {
          this.changeContent(-1);
        } else if ($.inArray("right_arrow", targetClass) != -1) {
          this.changeContent(1);
        } else {
					reFill = false;
        }
        if (reFill) {
          this.fill();
        }
      },

      prevMonth: function(){
        this.changeContent(-1);
        this.fill();
      },

      nextMonth: function(){
        this.changeContent(1);
        this.fill();
      },

      //改变显示的级别
      changeViewMode: function(change) {
        if (change > 0) {
          if (this.nowViewMode >= calendarData.viewModes.length - 1) {
            this.nowViewMode = calendarData.viewModes.length - 1;
          } else {
            this.nowViewMode += change;
          }
        } else {
          if (this.nowViewMode > 0) {
            this.nowViewMode += change;
          }
        }
      },

      //改变显示的内容
      changeContent: function(change) {
				var dateTmp = new Date(this.viewDate);
        switch (calendarData.viewModes[this.nowViewMode].nodes) {
          case "day":
						dateTmp.setMonth(this.viewDate.getMonth() + change);
						if(change > 0){
							dateTmp.setDate(1);
						}else{
							dateTmp.setDate(31);
						}
						if(this.dateWithinRange(dateTmp)){
							this.viewDate.setMonth(this.viewDate.getMonth() + change);
						}
            // this.viewDate.setMonth(this.viewDate.getMonth() + change);
            break;
          case "month":
						dateTmp.setFullYear(this.viewDate.getFullYear() + change);
						if(change > 0){
							dateTmp.setMonth(0);
							dateTmp.setDate(1);
						}else{
							dateTmp.setMonth(11);
							dateTmp.setDate(31);
						}
						if(this.dateWithinRange(dateTmp)){
							this.viewDate.setFullYear(this.viewDate.getFullYear() + change);
						}
            // this.viewDate.setFullYear(this.viewDate.getFullYear() + change);
            break;
          case "year":
						dateTmp.setFullYear(this.viewDate.getFullYear() + change * 9);
						if(change > 0){
							dateTmp.setMonth(0);
							dateTmp.setDate(1);
						}else{
							dateTmp.setMonth(11);
							dateTmp.setDate(31);
						}
						if(this.dateWithinRange(dateTmp)){
							this.viewDate.setFullYear(this.viewDate.getFullYear() + change * 9);
						}
            // this.viewDate.setFullYear(this.viewDate.getFullYear() + change * 9);
            break;
        }

      },

			//判断时间是否再指定时间之内
			dateWithinRange: function(date){
				return date >= this.startDate && date <= this.endDate;
			},

    };

    return HyCalendar;
  }]);

  calendar.service('calendarData', [function() {
    this.viewModes = [{
      nodes: "day",
      nav: 1
    }, {
      nodes: "month",
      nav: 2
    }, {
      nodes: "year",
      nav: 3
    }];

    this.viewModesStr = {
      day: 0,
      month: 1,
      year: 2
    };

    this.dates = {
      en: {
        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        daysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        daysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        meridiem: ['am', 'pm'],
        suffix: ['st', 'nd', 'rd', 'th'],
        today: 'Today'
      },
      cn: {
        days: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'],
        daysShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六', '周日'],
        months: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
        monthsShort: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
        meridiem: ['上午', '下午'],
        suffix: ['st', 'nd', 'rd', 'th'],
        today: '今天'
      }
    };

  }]);

  calendar.factory('HyDate', function() {
    var fac = {
      UTCDate: function() {
        var date = new Date(Date.UTC.apply(Date, arguments));
        return new Date(date.valueOf() + date.getTimezoneOffset() * 60000);
      },

      UTCToday: function() {
        var today = new Date();
        return fac.UTCDate(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);
      }
    };
    return fac;
  });

  calendar.directive('hyCal', ['hyCalendar', function(HyCalendar) {
    return {
      restrict: 'ACE',
      scope: {
        options: '=options',
        reFill: '=reFill',
        calId: '=calId',
        dayHtml: '=dayHtml',
        dayClickEvent : '=dayClickEvent',
        operate : '=operate'
      },
      templateUrl: '/public/angularView/common/components/calendar/calendar.html',
      link: function($scope, element, attrs) {
        var target = $('.calendar');
        var calendar = new HyCalendar(target, $scope.options, $scope.calId);
        calendar.fill();
        $scope.$watch("reFill", function(value) {
          if (value === true) {
            calendar.fill(true);
            $scope.reFill = false;
            console.log("reFill");
          }
        });

        $scope.$watch("calId", function(value) {
          calendar = new HyCalendar($scope.options, $scope.calId);
          calendar.fill();
          $scope.calendar = calendar;
        });

        $scope.prevMonth = function(){
          calendar.prevMonth();
        };

        $scope.nextMonth = function(){
          calendar.nextMonth();
        };
      },
    };
  }]);

}());
/*
 * ngDialog - easy modals and popup windows
 * http://github.com/likeastore/ngDialog
 * (c) 2013-2015 MIT License, https://likeastore.com
 */

(function (root, factory) {
    if (typeof module !== 'undefined' && module.exports) {
        // CommonJS
        if (typeof angular === 'undefined') {
            factory(require('angular'));
            module.exports = 'ngDialog';
        } else {
            factory(angular);
            module.exports = 'ngDialog';
        }
    } else if (typeof define === 'function' && define.amd) {
        // AMD
        define(['angular'], factory);
    } else {
        // Global Variables
        factory(root.angular);
    }
}(this, function (angular) {
    'use strict';

    var m = angular.module('ngDialog', []);

    var $el = angular.element;
    var isDef = angular.isDefined;
    var style = (document.body || document.documentElement).style;
    var animationEndSupport = isDef(style.animation) || isDef(style.WebkitAnimation) || isDef(style.MozAnimation) || isDef(style.MsAnimation) || isDef(style.OAnimation);
    var animationEndEvent = 'animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend';
    var focusableElementSelector = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';
    var disabledAnimationClass = 'ngdialog-disabled-animation';
    var forceElementsReload = { html: false, body: false };
    var scopes = {};
    var openIdStack = [];
    var keydownIsBound = false;

    m.provider('ngDialog', function () {
        var defaults = this.defaults = {
            className: 'ngdialog-theme-default',
            disableAnimation: false,
            plain: false,
            showClose: true,
            closeByDocument: true,
            closeByEscape: true,
            closeByNavigation: false,
            appendTo: false,
            preCloseCallback: false,
            overlay: true,
            cache: true,
            trapFocus: true,
            preserveFocus: true,
            ariaAuto: true,
            ariaRole: null,
            ariaLabelledById: null,
            ariaLabelledBySelector: null,
            ariaDescribedById: null,
            ariaDescribedBySelector: null
        };

        this.setForceHtmlReload = function (_useIt) {
            forceElementsReload.html = _useIt || false;
        };

        this.setForceBodyReload = function (_useIt) {
            forceElementsReload.body = _useIt || false;
        };

        this.setDefaults = function (newDefaults) {
            angular.extend(defaults, newDefaults);
        };

        var globalID = 0, dialogsCount = 0, closeByDocumentHandler, defers = {};

        this.$get = ['$document', '$templateCache', '$compile', '$q', '$http', '$rootScope', '$timeout', '$window', '$controller', '$injector',
            function ($document, $templateCache, $compile, $q, $http, $rootScope, $timeout, $window, $controller, $injector) {
                var $elements = [];

                var privateMethods = {
                    onDocumentKeydown: function (event) {
                        if (event.keyCode === 27) {
                            publicMethods.close('$escape');
                        }
                    },

                    activate: function($dialog) {
                        var options = $dialog.data('$ngDialogOptions');

                        if (options.trapFocus) {
                            $dialog.on('keydown', privateMethods.onTrapFocusKeydown);

                            // Catch rogue changes (eg. after unfocusing everything by clicking a non-focusable element)
                            $elements.body.on('keydown', privateMethods.onTrapFocusKeydown);
                        }
                    },

                    deactivate: function ($dialog) {
                        $dialog.off('keydown', privateMethods.onTrapFocusKeydown);
                        $elements.body.off('keydown', privateMethods.onTrapFocusKeydown);
                    },

                    deactivateAll: function (els) {
                        angular.forEach(els,function(el) {
                            var $dialog = angular.element(el);
                            privateMethods.deactivate($dialog);
                        });
                    },

                    setBodyPadding: function (width) {
                        var originalBodyPadding = parseInt(($elements.body.css('padding-right') || 0), 10);
                        $elements.body.css('padding-right', (originalBodyPadding + width) + 'px');
                        $elements.body.data('ng-dialog-original-padding', originalBodyPadding);
                        $rootScope.$broadcast('ngDialog.setPadding', width);
                    },

                    resetBodyPadding: function () {
                        var originalBodyPadding = $elements.body.data('ng-dialog-original-padding');
                        if (originalBodyPadding) {
                            $elements.body.css('padding-right', originalBodyPadding + 'px');
                        } else {
                            $elements.body.css('padding-right', '');
                        }
                        $rootScope.$broadcast('ngDialog.setPadding', 0);
                    },

                    performCloseDialog: function ($dialog, value) {
                        var options = $dialog.data('$ngDialogOptions');
                        var id = $dialog.attr('id');
                        var scope = scopes[id];

                        if (!scope) {
                            // Already closed
                            return;
                        }

                        if (typeof $window.Hammer !== 'undefined') {
                            var hammerTime = scope.hammerTime;
                            hammerTime.off('tap', closeByDocumentHandler);
                            hammerTime.destroy && hammerTime.destroy();
                            delete scope.hammerTime;
                        } else {
                            $dialog.unbind('click');
                        }

                        if (dialogsCount === 1) {
                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);
                        }

                        if (!$dialog.hasClass('ngdialog-closing')){
                            dialogsCount -= 1;
                        }

                        var previousFocus = $dialog.data('$ngDialogPreviousFocus');
                        if (previousFocus && previousFocus.focus) {
                            previousFocus.focus();
                        }

                        $rootScope.$broadcast('ngDialog.closing', $dialog, value);
                        dialogsCount = dialogsCount < 0 ? 0 : dialogsCount;
                        if (animationEndSupport && !options.disableAnimation) {
                            scope.$destroy();
                            $dialog.unbind(animationEndEvent).bind(animationEndEvent, function () {
                                privateMethods.closeDialogElement($dialog, value);
                            }).addClass('ngdialog-closing');
                        } else {
                            scope.$destroy();
                            privateMethods.closeDialogElement($dialog, value);
                        }
                        if (defers[id]) {
                            defers[id].resolve({
                                id: id,
                                value: value,
                                $dialog: $dialog,
                                remainingDialogs: dialogsCount
                            });
                            delete defers[id];
                        }
                        if (scopes[id]) {
                            delete scopes[id];
                        }
                        openIdStack.splice(openIdStack.indexOf(id), 1);
                        if (!openIdStack.length) {
                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);
                            keydownIsBound = false;
                        }
                    },

                    closeDialogElement: function($dialog, value) {
                        $dialog.remove();
                        if (dialogsCount === 0) {
                            $elements.html.removeClass('ngdialog-open');
                            $elements.body.removeClass('ngdialog-open');
                            privateMethods.resetBodyPadding();
                        }
                        $rootScope.$broadcast('ngDialog.closed', $dialog, value);
                    },

                    closeDialog: function ($dialog, value) {
                        var preCloseCallback = $dialog.data('$ngDialogPreCloseCallback');

                        if (preCloseCallback && angular.isFunction(preCloseCallback)) {

                            var preCloseCallbackResult = preCloseCallback.call($dialog, value);

                            if (angular.isObject(preCloseCallbackResult)) {
                                if (preCloseCallbackResult.closePromise) {
                                    preCloseCallbackResult.closePromise.then(function () {
                                        privateMethods.performCloseDialog($dialog, value);
                                    });
                                } else {
                                    preCloseCallbackResult.then(function () {
                                        privateMethods.performCloseDialog($dialog, value);
                                    }, function () {
                                        return;
                                    });
                                }
                            } else if (preCloseCallbackResult !== false) {
                                privateMethods.performCloseDialog($dialog, value);
                            }
                        } else {
                            privateMethods.performCloseDialog($dialog, value);
                        }
                    },

                    onTrapFocusKeydown: function(ev) {
                        var el = angular.element(ev.currentTarget);
                        var $dialog;

                        if (el.hasClass('ngdialog')) {
                            $dialog = el;
                        } else {
                            $dialog = privateMethods.getActiveDialog();

                            if ($dialog === null) {
                                return;
                            }
                        }

                        var isTab = (ev.keyCode === 9);
                        var backward = (ev.shiftKey === true);

                        if (isTab) {
                            privateMethods.handleTab($dialog, ev, backward);
                        }
                    },

                    handleTab: function($dialog, ev, backward) {
                        var focusableElements = privateMethods.getFocusableElements($dialog);

                        if (focusableElements.length === 0) {
                            if (document.activeElement) {
                                document.activeElement.blur();
                            }
                            return;
                        }

                        var currentFocus = document.activeElement;
                        var focusIndex = Array.prototype.indexOf.call(focusableElements, currentFocus);

                        var isFocusIndexUnknown = (focusIndex === -1);
                        var isFirstElementFocused = (focusIndex === 0);
                        var isLastElementFocused = (focusIndex === focusableElements.length - 1);

                        var cancelEvent = false;

                        if (backward) {
                            if (isFocusIndexUnknown || isFirstElementFocused) {
                                focusableElements[focusableElements.length - 1].focus();
                                cancelEvent = true;
                            }
                        } else {
                            if (isFocusIndexUnknown || isLastElementFocused) {
                                focusableElements[0].focus();
                                cancelEvent = true;
                            }
                        }

                        if (cancelEvent) {
                            ev.preventDefault();
                            ev.stopPropagation();
                        }
                    },

                    autoFocus: function($dialog) {
                        var dialogEl = $dialog[0];

                        // Browser's (Chrome 40, Forefix 37, IE 11) don't appear to honor autofocus on the dialog, but we should
                        var autoFocusEl = dialogEl.querySelector('*[autofocus]');
                        if (autoFocusEl !== null) {
                            autoFocusEl.focus();

                            if (document.activeElement === autoFocusEl) {
                                return;
                            }

                            // Autofocus element might was display: none, so let's continue
                        }

                        var focusableElements = privateMethods.getFocusableElements($dialog);

                        if (focusableElements.length > 0) {
                            focusableElements[0].focus();
                            return;
                        }

                        // We need to focus something for the screen readers to notice the dialog
                        var contentElements = privateMethods.filterVisibleElements(dialogEl.querySelectorAll('h1,h2,h3,h4,h5,h6,p,span'));

                        if (contentElements.length > 0) {
                            var contentElement = contentElements[0];
                            $el(contentElement).attr('tabindex', '-1').css('outline', '0');
                            contentElement.focus();
                        }
                    },

                    getFocusableElements: function ($dialog) {
                        var dialogEl = $dialog[0];

                        var rawElements = dialogEl.querySelectorAll(focusableElementSelector);

                        // Ignore untabbable elements, ie. those with tabindex = -1
                        var tabbableElements = privateMethods.filterTabbableElements(rawElements);

                        return privateMethods.filterVisibleElements(tabbableElements);
                    },

                    filterTabbableElements: function (els) {
                        var tabbableFocusableElements = [];

                        for (var i = 0; i < els.length; i++) {
                            var el = els[i];

                            if ($el(el).attr('tabindex') !== '-1') {
                                tabbableFocusableElements.push(el);
                            }
                        }

                        return tabbableFocusableElements;
                    },

                    filterVisibleElements: function (els) {
                        var visibleFocusableElements = [];

                        for (var i = 0; i < els.length; i++) {
                            var el = els[i];

                            if (el.offsetWidth > 0 || el.offsetHeight > 0) {
                                visibleFocusableElements.push(el);
                            }
                        }

                        return visibleFocusableElements;
                    },

                    getActiveDialog: function () {
                        var dialogs = document.querySelectorAll('.ngdialog');

                        if (dialogs.length === 0) {
                            return null;
                        }

                        // TODO: This might be incorrect if there are a mix of open dialogs with different 'appendTo' values
                        return $el(dialogs[dialogs.length - 1]);
                    },

                    applyAriaAttributes: function ($dialog, options) {
                        if (options.ariaAuto) {
                            if (!options.ariaRole) {
                                var detectedRole = (privateMethods.getFocusableElements($dialog).length > 0) ?
                                    'dialog' :
                                    'alertdialog';

                                options.ariaRole = detectedRole;
                            }

                            if (!options.ariaLabelledBySelector) {
                                options.ariaLabelledBySelector = 'h1,h2,h3,h4,h5,h6';
                            }

                            if (!options.ariaDescribedBySelector) {
                                options.ariaDescribedBySelector = 'article,section,p';
                            }
                        }

                        if (options.ariaRole) {
                            $dialog.attr('role', options.ariaRole);
                        }

                        privateMethods.applyAriaAttribute(
                            $dialog, 'aria-labelledby', options.ariaLabelledById, options.ariaLabelledBySelector);

                        privateMethods.applyAriaAttribute(
                            $dialog, 'aria-describedby', options.ariaDescribedById, options.ariaDescribedBySelector);
                    },

                    applyAriaAttribute: function($dialog, attr, id, selector) {
                        if (id) {
                            $dialog.attr(attr, id);
                        }

                        if (selector) {
                            var dialogId = $dialog.attr('id');

                            var firstMatch = $dialog[0].querySelector(selector);

                            if (!firstMatch) {
                                return;
                            }

                            var generatedId = dialogId + '-' + attr;

                            $el(firstMatch).attr('id', generatedId);

                            $dialog.attr(attr, generatedId);

                            return generatedId;
                        }
                    },

                    detectUIRouter: function() {
                        //Detect if ui-router module is installed if not return false
                        try {
                            angular.module('ui.router');
                            return true;
                        } catch(err) {
                            return false;
                        }
                    },

                    getRouterLocationEventName: function() {
                        if(privateMethods.detectUIRouter()) {
                            return '$stateChangeSuccess';
                        }
                        return '$locationChangeSuccess';
                    }
                };

                var publicMethods = {
                    __PRIVATE__: privateMethods,

                    /*
                     * @param {Object} options:
                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)
                     * - plain {Boolean} - enable plain string templates, default false
                     * - scope {Object}
                     * - controller {String}
                     * - controllerAs {String}
                     * - className {String} - dialog theme class
                     * - disableAnimation {Boolean} - set to true to disable animation
                     * - showClose {Boolean} - show close button, default true
                     * - closeByEscape {Boolean} - default true
                     * - closeByDocument {Boolean} - default true
                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set)
                     *
                     * @return {Object} dialog
                     */
                    open: function (opts) {
                        var options = angular.copy(defaults);
                        var localID = ++globalID;
                        var dialogID = 'ngdialog' + localID;
                        openIdStack.push(dialogID);

                        opts = opts || {};
                        angular.extend(options, opts);

                        var defer;
                        defers[dialogID] = defer = $q.defer();

                        var scope;
                        scopes[dialogID] = scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();

                        var $dialog, $dialogParent;

                        var resolve = angular.extend({}, options.resolve);

                        angular.forEach(resolve, function (value, key) {
                            resolve[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);
                        });

                        $q.all({
                            template: loadTemplate(options.template || options.templateUrl),
                            locals: $q.all(resolve)
                        }).then(function (setup) {
                            var template = setup.template,
                                locals = setup.locals;

                            if (options.showClose) {
                                template += '<div class="ngdialog-close"></div>';
                            }

                            var hasOverlayClass = options.overlay ? '' : ' ngdialog-no-overlay';
                            $dialog = $el('<div id="ngdialog' + localID + '" class="ngdialog' + hasOverlayClass + '"></div>');
                            $dialog.html((options.overlay ?
                                '<div class="ngdialog-overlay"></div><div class="ngdialog-content" role="document">' + template + '</div>' :
                                '<div class="ngdialog-content" role="document">' + template + '</div>'));

                            $dialog.data('$ngDialogOptions', options);

                            scope.ngDialogId = dialogID;

                            if (options.data && angular.isString(options.data)) {
                                var firstLetter = options.data.replace(/^\s*/, '')[0];
                                scope.ngDialogData = (firstLetter === '{' || firstLetter === '[') ? angular.fromJson(options.data) : options.data;
                                scope.ngDialogData.ngDialogId = dialogID;
                            } else if (options.data && angular.isObject(options.data)) {
                                scope.ngDialogData = options.data;
                                scope.ngDialogData.ngDialogId = dialogID;
                            }

                            if (options.className) {
                                $dialog.addClass(options.className);
                            }

                            if (options.disableAnimation) {
                                $dialog.addClass(disabledAnimationClass);
                            }

                            if (options.appendTo && angular.isString(options.appendTo)) {
                                $dialogParent = angular.element(document.querySelector(options.appendTo));
                            } else {
                                $dialogParent = $elements.body;
                            }

                            privateMethods.applyAriaAttributes($dialog, options);

                            if (options.preCloseCallback) {
                                var preCloseCallback;

                                if (angular.isFunction(options.preCloseCallback)) {
                                    preCloseCallback = options.preCloseCallback;
                                } else if (angular.isString(options.preCloseCallback)) {
                                    if (scope) {
                                        if (angular.isFunction(scope[options.preCloseCallback])) {
                                            preCloseCallback = scope[options.preCloseCallback];
                                        } else if (scope.$parent && angular.isFunction(scope.$parent[options.preCloseCallback])) {
                                            preCloseCallback = scope.$parent[options.preCloseCallback];
                                        } else if ($rootScope && angular.isFunction($rootScope[options.preCloseCallback])) {
                                            preCloseCallback = $rootScope[options.preCloseCallback];
                                        }
                                    }
                                }

                                if (preCloseCallback) {
                                    $dialog.data('$ngDialogPreCloseCallback', preCloseCallback);
                                }
                            }

                            scope.closeThisDialog = function (value) {
                                privateMethods.closeDialog($dialog, value);
                            };

                            if (options.controller && (angular.isString(options.controller) || angular.isArray(options.controller) || angular.isFunction(options.controller))) {

                                var label;

                                if (options.controllerAs && angular.isString(options.controllerAs)) {
                                    label = options.controllerAs;
                                }

                                var controllerInstance = $controller(options.controller, angular.extend(
                                    locals,
                                    {
                                        $scope: scope,
                                        $element: $dialog
                                    }),
                                    null,
                                    label
                                );
                                $dialog.data('$ngDialogControllerController', controllerInstance);
                            }

                            $timeout(function () {
                                var $activeDialogs = document.querySelectorAll('.ngdialog');
                                privateMethods.deactivateAll($activeDialogs);

                                $compile($dialog)(scope);
                                var widthDiffs = $window.innerWidth - $elements.body.prop('clientWidth');
                                $elements.html.addClass('ngdialog-open');
                                $elements.body.addClass('ngdialog-open');
                                var scrollBarWidth = widthDiffs - ($window.innerWidth - $elements.body.prop('clientWidth'));
                                if (scrollBarWidth > 0) {
                                    privateMethods.setBodyPadding(scrollBarWidth);
                                }
                                $dialogParent.append($dialog);

                                privateMethods.activate($dialog);

                                if (options.trapFocus) {
                                    privateMethods.autoFocus($dialog);
                                }

                                if (options.name) {
                                    $rootScope.$broadcast('ngDialog.opened', {dialog: $dialog, name: options.name});
                                } else {
                                    $rootScope.$broadcast('ngDialog.opened', $dialog);
                                }
                            });

                            if (!keydownIsBound) {
                                $elements.body.bind('keydown', privateMethods.onDocumentKeydown);
                                keydownIsBound = true;
                            }

                            if (options.closeByNavigation) {
                                var eventName = privateMethods.getRouterLocationEventName();
                                $rootScope.$on(eventName, function () {
                                    privateMethods.closeDialog($dialog);
                                });
                            }

                            if (options.preserveFocus) {
                                $dialog.data('$ngDialogPreviousFocus', document.activeElement);
                            }

                            closeByDocumentHandler = function (event) {
                                event.stopPropagation();
                                var isOverlay = options.closeByDocument ? $el(event.target).hasClass('ngdialog-overlay') : false;
                                var isCloseBtn = $el(event.target).hasClass('ngdialog-close');

                                if (isOverlay || isCloseBtn) {
                                    publicMethods.close($dialog.attr('id'), isCloseBtn ? '$closeButton' : '$document');
                                }
                            };

                            if (typeof $window.Hammer !== 'undefined') {
                                var hammerTime = scope.hammerTime = $window.Hammer($dialog[0]);
                                hammerTime.on('tap', closeByDocumentHandler);
                            } else {
                                $dialog.bind('click', closeByDocumentHandler);
                            }

                            dialogsCount += 1;

                            return publicMethods;
                        });

                        return {
                            id: dialogID,
                            closePromise: defer.promise,
                            close: function (value) {
                                privateMethods.closeDialog($dialog, value);
                            }
                        };

                        function loadTemplateUrl (tmpl, config) {
                            $rootScope.$broadcast('ngDialog.templateLoading', tmpl);
                            return $http.get(tmpl, (config || {})).then(function(res) {
                                $rootScope.$broadcast('ngDialog.templateLoaded', tmpl);
                                return res.data || '';
                            });
                        }

                        function loadTemplate (tmpl) {
                            if (!tmpl) {
                                return 'Empty template';
                            }

                            if (angular.isString(tmpl) && options.plain) {
                                return tmpl;
                            }

                            if (typeof options.cache === 'boolean' && !options.cache) {
                                return loadTemplateUrl(tmpl, {cache: false});
                            }

                            return loadTemplateUrl(tmpl, {cache: $templateCache});
                        }
                    },

                    /*
                     * @param {Object} options:
                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)
                     * - plain {Boolean} - enable plain string templates, default false
                     * - name {String}
                     * - scope {Object}
                     * - controller {String}
                     * - controllerAs {String}
                     * - className {String} - dialog theme class
                     * - showClose {Boolean} - show close button, default true
                     * - closeByEscape {Boolean} - default false
                     * - closeByDocument {Boolean} - default false
                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set); not called on confirm
                     *
                     * @return {Object} dialog
                     */
                    openConfirm: function (opts) {
                        var defer = $q.defer();

                        var options = {
                            closeByEscape: false,
                            closeByDocument: false
                        };
                        angular.extend(options, opts);

                        options.scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();
                        options.scope.confirm = function (value) {
                            defer.resolve(value);
                            var $dialog = $el(document.getElementById(openResult.id));
                            privateMethods.performCloseDialog($dialog, value);
                        };

                        var openResult = publicMethods.open(options);
                        openResult.closePromise.then(function (data) {
                            if (data) {
                                return defer.reject(data.value);
                            }
                            return defer.reject();
                        });

                        return defer.promise;
                    },

                    isOpen: function(id) {
                        var $dialog = $el(document.getElementById(id));
                        return $dialog.length > 0;
                    },

                    /*
                     * @param {String} id
                     * @return {Object} dialog
                     */
                    close: function (id, value) {
                        var $dialog = $el(document.getElementById(id));

                        if ($dialog.length) {
                            privateMethods.closeDialog($dialog, value);
                        } else {
                            if (id === '$escape') {
                                var topDialogId = openIdStack[openIdStack.length - 1];
                                $dialog = $el(document.getElementById(topDialogId));
                                if ($dialog.data('$ngDialogOptions').closeByEscape) {
                                    privateMethods.closeDialog($dialog, '$escape');
                                }
                            } else {
                                publicMethods.closeAll(value);
                            }
                        }

                        return publicMethods;
                    },

                    closeAll: function (value) {
                        var $all = document.querySelectorAll('.ngdialog');

                        // Reverse order to ensure focus restoration works as expected
                        for (var i = $all.length - 1; i >= 0; i--) {
                            var dialog = $all[i];
                            privateMethods.closeDialog($el(dialog), value);
                        }
                    },

                    getOpenDialogs: function() {
                        return openIdStack;
                    },

                    getDefaults: function () {
                        return defaults;
                    }
                };

                angular.forEach(
                    ['html', 'body'],
                    function(elementName) {
                        $elements[elementName] = $document.find(elementName);
                        if (forceElementsReload[elementName]) {
                            var eventName = privateMethods.getRouterLocationEventName();
                            $rootScope.$on(eventName, function () {
                                $elements[elementName] = $document.find(elementName);
                            });
                        }
                    }
                );

                return publicMethods;
            }];
    });

    m.directive('ngDialog', ['ngDialog', function (ngDialog) {
        return {
            restrict: 'A',
            scope: {
                ngDialogScope: '='
            },
            link: function (scope, elem, attrs) {
                elem.on('click', function (e) {
                    e.preventDefault();

                    var ngDialogScope = angular.isDefined(scope.ngDialogScope) ? scope.ngDialogScope : 'noScope';
                    angular.isDefined(attrs.ngDialogClosePrevious) && ngDialog.close(attrs.ngDialogClosePrevious);

                    var defaults = ngDialog.getDefaults();

                    ngDialog.open({
                        template: attrs.ngDialog,
                        className: attrs.ngDialogClass || defaults.className,
                        controller: attrs.ngDialogController,
                        controllerAs: attrs.ngDialogControllerAs,
                        bindToController: attrs.ngDialogBindToController,
                        scope: ngDialogScope,
                        data: attrs.ngDialogData,
                        showClose: attrs.ngDialogShowClose === 'false' ? false : (attrs.ngDialogShowClose === 'true' ? true : defaults.showClose),
                        closeByDocument: attrs.ngDialogCloseByDocument === 'false' ? false : (attrs.ngDialogCloseByDocument === 'true' ? true : defaults.closeByDocument),
                        closeByEscape: attrs.ngDialogCloseByEscape === 'false' ? false : (attrs.ngDialogCloseByEscape === 'true' ? true : defaults.closeByEscape),
                        overlay: attrs.ngDialogOverlay === 'false' ? false : (attrs.ngDialogOverlay === 'true' ? true : defaults.overlay),
                        preCloseCallback: attrs.ngDialogPreCloseCallback || defaults.preCloseCallback
                    });
                });
            }
        };
    }]);

    return m;
}));
var socketio = angular.module("socketio", ["HY"]);

socketio.factory("connectIO", function($rootScope, $http, $timeout, openSubView, getPersonnel, getPersonnelPhotos, addRefreshPageByID,
    $sce) {
    var connectIO = function() {

    };

    //连接服务器
    connectIO.prototype.connect = function() {
        $rootScope.ioConnect = io.connect(socketUrl);
    };

    //登录
    connectIO.prototype.login = function(token) {
        var param = "token=" + token;
        $http({
            method: "POST",
            url: socketUrl + "crmLogin",
            data: param,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        }).then(function(response) {
            console.log(response);
        });
    };

    //发送消息
    connectIO.prototype.sendMessage = function(type, data) {
        $rootScope.ioConnect.emit(type, data);
    };

    //开始监听
    connectIO.prototype.startListen = function() {

        $rootScope.ioConnect.on('displayReminds', function(data) {
            $rootScope.notice = data;
            console.log(data);
            var targetIDs = [];
            var removeData = null;
            $rootScope.notice.forEach(function(note) {
                if (note.messageType == 1 && note.applyUserID) {
                    targetIDs.push(note.applyUserID);
                } else if (note.subType == 47) {
                    removeData = note;
                }
            });
            if (null !== removeData) {
                $rootScope.notice = _.without($rootScope.notice, removeData);
            }
            if (targetIDs.length > 0) {
                getPersonnelPhotos(targetIDs, function(response) {
                    $rootScope.notice.forEach(function(note) {
                        note.applyUserIcon = response[note.applyUserID];
                    });
                });
            }
        });

        $rootScope.ioConnect.on("remindInsuranceMsg", function(data) {
            $rootScope.insuranceNotice = data;
            if (data.length > 0) {
                $rootScope.showLatestUnread = true;
                $rootScope.newNotice = data[0];
                $rootScope.clearNewRemind = $timeout(function() {
                    $rootScope.showLatestUnread = false;
                    $rootScope.clearNewRemind = null;
                    $rootScope.$apply();
                }, 3000);
            }
        });

        //有新的提醒
        $rootScope.ioConnect.on('remindMsg', function(data) {
            if (!$rootScope.IntentionCustomer.addHistory) {
                $rootScope.IntentionCustomer.addHistory = [];
            }
            var baseData = {
                CustomerTelAreaCode: "0574",
                addType: 1,
                RecordType_ID: 1,
                memberNotEditable: false,
                Is_Activity: 0,
                SDID: "000000000000000000000001",
                Record_Type: 1,
                HavePassport: 0,
                HaveVisa: 0,
                CustomerName: "",
                CompanyCustomer: false,
                destinations: [],
                canPickSalesman: false,
                salesLoading: true,
                MessyDegree: 1,
                Adult_Num: 1,
                GenderTypeID: 2
            };
            // if ($rootScope.callingInTelNo) {
            //     if (!$rootScope.ICEAData) {
            //         $rootScope.ICEAData = angular.copy(baseData);
            //     }
            //     console.log("旧值拷贝一下");
            //     $rootScope.IntentionCustomer.addHistory[$rootScope.callingInTelNo] = angular.copy($rootScope.ICEAData);
            // }
            if (data.messageType === 3) {
                if (data.subType === 28) {
                    $rootScope.callingInTelNo = data.content;
                    $rootScope.currentCallingInNo = data.content;
                    if ($rootScope.callingInTelNos == undefined) {
                        $rootScope.callingInTelNos = [];
                    }
                    if ($rootScope.callingInTelNos.indexOf(data.content) < 0) {
                        console.log("设置一个新值");
                        //$rootScope.ICEAData = angular.copy(baseData);
                        $rootScope.IntentionCustomer.addHistory[data.content] = angular.copy(baseData);
                    }
                    if ((/^1[3|4|5|7|8]\d{9}$/.test(data.content))) { // 如果是手机号码
                        $rootScope.currentCallingInNoCellphone = data.content;
                        $rootScope.currentCallingInNoTel = undefined;
                        $rootScope.IntentionCustomer.addHistory[data.content].MobileNotChangable = true;
                        $rootScope.IntentionCustomer.addHistory[data.content].TelNotChangable = false;
                    } else if (/^\d+$/.test(data.content)) {
                        $rootScope.currentCallingInNoTel = data.content;
                        $rootScope.currentCallingInNoCellphone = undefined;
                        $rootScope.IntentionCustomer.addHistory[data.content].MobileNotChangable = false;
                        $rootScope.IntentionCustomer.addHistory[data.content].TelNotChangable = false;
                    }

                    $rootScope.callingInTelNos.push(data.content);
                    $rootScope.callingInTelNos = _.uniq($rootScope.callingInTelNos);
                    $rootScope.IntentionCustomerEditor = "Add";

                    $rootScope.fetch("intentionCustomer/ICOrder/add?telno=" + data.content);
                    openSubView();
                }
            } else {
                if (data.messageType == 1) {
                    getPersonnel({
                        id: data.applyUserID
                    }, function(response) {
                        if (response.list.length == 1) {
                            data.applyUserIcon = $sce.trustAsResourceUrl(response.list[0].LargePhoto);
                            $rootScope.newNotice = data;
                            $rootScope.showLatestUnread = true;
                            if (null === $rootScope.notice || undefined === $rootScope.notice) {
                                $rootScope.notice = [];
                            }
                            if (($rootScope.notice.length + $rootScope.insuranceNotice.length) >= 8) {
                                $rootScope.notice.pop();
                            }
                            $rootScope.notice.unshift(data);
                            if ($rootScope.clearNewRemind) {
                                $timeout.cancel($rootScope.clearNewRemind);
                            }
                            $rootScope.clearNewRemind = $timeout(function() {
                                $rootScope.showLatestUnread = false;
                                $rootScope.clearNewRemind = null;
                                $rootScope.$apply();
                            }, 3000);

                            if (!$rootScope.$$phase) {
                                $rootScope.$apply();
                            } else {
                                $timeout(function() {
                                    $rootScope.$apply();
                                });
                            }
                        }
                    });
                } else {
                    $rootScope.newNotice = data;
                    $rootScope.showLatestUnread = true;
                    if (null === $rootScope.notice || undefined === $rootScope.notice) {
                        $rootScope.notice = [];
                    }
                    if (($rootScope.notice.length + $rootScope.insuranceNotice.length) >= 8) {
                        $rootScope.notice.pop();
                    }
                    $rootScope.notice.unshift(data);
                    if ($rootScope.clearNewRemind) {
                        $timeout.cancel($rootScope.clearNewRemind);
                    }
                    $rootScope.clearNewRemind = $timeout(function() {
                        $rootScope.showLatestUnread = false;
                        $rootScope.clearNewRemind = null;
                        $rootScope.$apply();
                    }, 3000);
                    $rootScope.$apply();
                }
            }
        });

    };

    //取消显示指定id的提醒
    connectIO.prototype.cancelDisplayMessage = function(msgId) {
        console.log(msgId);
    };

    return connectIO;
});
/*
*  AngularJs Fullcalendar Wrapper for the JQuery FullCalendar
*  API @ http://arshaw.com/fullcalendar/
*
*  Angular Calendar Directive that takes in the [eventSources] nested array object as the ng-model and watches it deeply changes.
*       Can also take in multiple event urls as a source object(s) and feed the events per view.
*       The calendar will watch any eventSource array and update itself when a change is made.
*
*/

angular.module('ui.calendar', [])
  .constant('uiCalendarConfig', {calendars: {}})
  .controller('uiCalendarCtrl', ['$scope', 
                                 '$locale', function(
                                  $scope, 
                                  $locale){

      var sources = $scope.eventSources,
          extraEventSignature = $scope.calendarWatchEvent ? $scope.calendarWatchEvent : angular.noop,

          wrapFunctionWithScopeApply = function(functionToWrap){
              return function(){
                  // This may happen outside of angular context, so create one if outside.

                  if ($scope.$root.$$phase) {
                      return functionToWrap.apply(this, arguments);
                  } else {
                      var args = arguments;
                      var self = this;
                      return $scope.$root.$apply(function(){
                          return functionToWrap.apply(self, args);
                      });
                  }
              };
          };

      var eventSerialId = 1;
      // @return {String} fingerprint of the event object and its properties
      this.eventFingerprint = function(e) {
        if (!e._id) {
          e._id = eventSerialId++;
        }
        
        var extraSignature = extraEventSignature({event: e}) || '';
        var start = moment.isMoment(e.start) ? e.start.unix() : (e.start ? moment(e.start).unix() : '');
        var end =   moment.isMoment(e.end)   ? e.end.unix()   : (e.end   ? moment(e.end).unix()   : '');
        
        // This extracts all the information we need from the event. http://jsperf.com/angular-calendar-events-fingerprint/3
        return "" + e._id + (e.id || '') + (e.title || '') + (e.url || '') + start + end +
          (e.allDay || '') + (e.className || '') + extraSignature;
      };

      var sourceSerialId = 1, sourceEventsSerialId = 1;
      // @return {String} fingerprint of the source object and its events array
      this.sourceFingerprint = function(source) {
          var fp = '' + (source.__id || (source.__id = sourceSerialId++)),
              events = angular.isObject(source) && source.events;
          if (events) {
              fp = fp + '-' + (events.__id || (events.__id = sourceEventsSerialId++));
          }
          return fp;
      };

      // @return {Array} all events from all sources
      this.allEvents = function() {
        // do sources.map(&:events).flatten(), but we don't have flatten
        var arraySources = [];
        for (var i = 0, srcLen = sources.length; i < srcLen; i++) {
          var source = sources[i];
          if (angular.isArray(source)) {
            // event source as array
            arraySources.push(source);
          } else if(angular.isObject(source) && angular.isArray(source.events)){
            // event source as object, ie extended form
            var extEvent = {};
            for(var key in source){
              if(key !== '_id' && key !== 'events'){
                 extEvent[key] = source[key];
              }
            }
            for(var eI = 0;eI < source.events.length;eI++){
              angular.extend(source.events[eI],extEvent);
            }
            arraySources.push(source.events);
          }
        }
        return Array.prototype.concat.apply([], arraySources);
      };

      // Track changes in array of objects by assigning id tokens to each element and watching the scope for changes in the tokens
      // @param {Array|Function} arraySource array of objects to watch
      // @param tokenFn {Function} that returns the token for a given object
      // @return {Object}
      //  subscribe: function(scope, function(newTokens, oldTokens))
      //    called when source has changed. return false to prevent individual callbacks from firing
      //  onAdded/Removed/Changed:
      //    when set to a callback, called each item where a respective change is detected
      this.changeWatcher = function(arraySource, tokenFn) {
        var self;
        var getTokens = function() {
          var array = angular.isFunction(arraySource) ? arraySource() : arraySource;
          var result = [], token, el;
          for (var i = 0, n = array.length; i < n; i++) {
            el = array[i];
            token = tokenFn(el);
            map[token] = el;
            result.push(token);
          }
          return result;
        };

        // @param {Array} a
        // @param {Array} b
        // @return {Array} elements in that are in a but not in b
        // @example
        //  subtractAsSets([6, 100, 4, 5], [4, 5, 7]) // [6, 100]
        var subtractAsSets = function(a, b) {
          var result = [], inB = {}, i, n;
          for (i = 0, n = b.length; i < n; i++) {
            inB[b[i]] = true;
          }
          for (i = 0, n = a.length; i < n; i++) {
            if (!inB[a[i]]) {
              result.push(a[i]);
            }
          }
          return result;
        };

        // Map objects to tokens and vice-versa
        var map = {};

        // Compare newTokens to oldTokens and call onAdded, onRemoved, and onChanged handlers for each affected event respectively.
        var applyChanges = function(newTokens, oldTokens) {
          var i, n, el, token;
          var replacedTokens = {};
          var removedTokens = subtractAsSets(oldTokens, newTokens);
          for (i = 0, n = removedTokens.length; i < n; i++) {
            var removedToken = removedTokens[i];
            el = map[removedToken];
            delete map[removedToken];
            var newToken = tokenFn(el);
            // if the element wasn't removed but simply got a new token, its old token will be different from the current one
            if (newToken === removedToken) {
              self.onRemoved(el);
            } else {
              replacedTokens[newToken] = removedToken;
              self.onChanged(el);
            }
          }

          var addedTokens = subtractAsSets(newTokens, oldTokens);
          for (i = 0, n = addedTokens.length; i < n; i++) {
            token = addedTokens[i];
            el = map[token];
            if (!replacedTokens[token]) {
              self.onAdded(el);
            }
          }
        };
        return self = {
          subscribe: function(scope, onArrayChanged) {
            scope.$watch(getTokens, function(newTokens, oldTokens) {
              var notify = !(onArrayChanged && onArrayChanged(newTokens, oldTokens) === false);
              if (notify) {
                applyChanges(newTokens, oldTokens);
              }
            }, true);
          },
          onAdded: angular.noop,
          onChanged: angular.noop,
          onRemoved: angular.noop
        };
      };

      this.getFullCalendarConfig = function(calendarSettings, uiCalendarConfig){
          var config = {};

          angular.extend(config, uiCalendarConfig);
          angular.extend(config, calendarSettings);

          angular.forEach(config, function(value,key){
            if (typeof value === 'function'){
              config[key] = wrapFunctionWithScopeApply(config[key]);
            }
          });

          return config;
      };

    this.getLocaleConfig = function(fullCalendarConfig) {
      if (!fullCalendarConfig.lang || fullCalendarConfig.useNgLocale) {
        // Configure to use locale names by default
        var tValues = function(data) {
          // convert {0: "Jan", 1: "Feb", ...} to ["Jan", "Feb", ...]
          var r, k;
          r = [];
          for (k in data) {
            r[k] = data[k];
          }
          return r;
        };
        var dtf = $locale.DATETIME_FORMATS;
        return {
          monthNames: tValues(dtf.MONTH),
          monthNamesShort: tValues(dtf.SHORTMONTH),
          dayNames: tValues(dtf.DAY),
          dayNamesShort: tValues(dtf.SHORTDAY)
        };
      }
      return {};
    };
  }])
  .directive('uiCalendar', ['uiCalendarConfig', function(uiCalendarConfig) {
    return {
      restrict: 'A',
      scope: {eventSources:'=ngModel',calendarWatchEvent: '&'},
      controller: 'uiCalendarCtrl',
      link: function(scope, elm, attrs, controller) {

        var sources = scope.eventSources,
            sourcesChanged = false,
            calendar,
            eventSourcesWatcher = controller.changeWatcher(sources, controller.sourceFingerprint),
            eventsWatcher = controller.changeWatcher(controller.allEvents, controller.eventFingerprint),
            options = null;

        function getOptions(){
          var calendarSettings = attrs.uiCalendar ? scope.$parent.$eval(attrs.uiCalendar) : {},
              fullCalendarConfig;

          fullCalendarConfig = controller.getFullCalendarConfig(calendarSettings, uiCalendarConfig);

          var localeFullCalendarConfig = controller.getLocaleConfig(fullCalendarConfig);
          angular.extend(localeFullCalendarConfig, fullCalendarConfig);
          options = { eventSources: sources };
          angular.extend(options, localeFullCalendarConfig);
          //remove calendars from options
          options.calendars = null;

          var options2 = {};
          for(var o in options){
            if(o !== 'eventSources'){
              options2[o] = options[o];
            }
          }
          return JSON.stringify(options2);
        }

        scope.destroyCalendar = function(){
          if(calendar && calendar.fullCalendar){
            calendar.fullCalendar('destroy');
          }
          if(attrs.calendar) {
            calendar = uiCalendarConfig.calendars[attrs.calendar] = $(elm).html('');
          } else {
            calendar = $(elm).html('');
          }
        };

        scope.initCalendar = function(){
          if (!calendar) {
            calendar = angular.element(elm).html('');
          }
          calendar.fullCalendar(options);
          if(attrs.calendar) {
            uiCalendarConfig.calendars[attrs.calendar] = calendar;
          }          
        };
        scope.$on('$destroy', function() {
          scope.destroyCalendar();
        });

        eventSourcesWatcher.onAdded = function(source) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar(options);
            if (attrs.calendar) {
                uiCalendarConfig.calendars[attrs.calendar] = calendar;
            }
            calendar.fullCalendar('addEventSource', source);
            sourcesChanged = true;
          }
        };

        eventSourcesWatcher.onRemoved = function(source) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('removeEventSource', source);
            sourcesChanged = true;
          }
        };

        eventSourcesWatcher.onChanged = function() {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('refetchEvents');
            sourcesChanged = true;
          }

        };

        eventsWatcher.onAdded = function(event) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('renderEvent', event, (event.stick ? true : false));
          }
        };

        eventsWatcher.onRemoved = function(event) {
          if (calendar && calendar.fullCalendar) {
            calendar.fullCalendar('removeEvents', event._id);
          }
        };

        eventsWatcher.onChanged = function(event) {
          if (calendar && calendar.fullCalendar) {
            var clientEvents = calendar.fullCalendar('clientEvents', event._id);
            for (var i = 0; i < clientEvents.length; i++) {
              var clientEvent = clientEvents[i];
              clientEvent = angular.extend(clientEvent, event);
              calendar.fullCalendar('updateEvent', clientEvent);
            }
          }
        };

        eventSourcesWatcher.subscribe(scope);
        eventsWatcher.subscribe(scope, function() {
          if (sourcesChanged === true) {
            sourcesChanged = false;
            // return false to prevent onAdded/Removed/Changed handlers from firing in this case
            return false;
          }
        });

        scope.$watch(getOptions, function(newValue, oldValue) {
          if(newValue !== oldValue) {
            scope.destroyCalendar();
            scope.initCalendar();
          } else if((newValue && angular.isUndefined(calendar))) {
            scope.initCalendar();
          }
        });
      }
    };
}]);
/**
 * 状态转移公用服务
 */

function StateFlow() {
	var StateFlow = {};
	StateFlow.setStep = setStep;
	StateFlow.setFirstStep = setFirstStep;
	StateFlow.run = run;
	// StateFlow.newFlow=newFlow;
	// StateFlow.state=state;
	StateFlow.steps = {};
	// StateFlow.stepCounts=0;
	// StateFlow.currentStep={};
	StateFlow.runStep = runStep;
	StateFlow.run1stStep = run1stStep;
	StateFlow.firstStep = ""
	StateFlow.response = response;
	return StateFlow;

	/**
	 * 工作流响应对象，所有的响应应该封装成这种格式。
	 */
	function response(text, data) {
		var code = "success";
		if (text != undefined) {
			code = text
		}
		return {
			code : code,
			data : data
		};
	}
	/**
	 * 设置第一个步骤
	 */
	function setFirstStep(stepName) {
		StateFlow.firstStep = stepName;
	}
	/**
	 * 运行第一个步骤
	 */
	function run1stStep(params) {
		// 第一个步骤要运行当前的方法
		var stepName = StateFlow.firstStep;
		var stepObj = StateFlow.steps[stepName];
		var response = stepObj["func"](params);
		// 通过第一个方法运行之后，再运行第一步响应方法
		if (stepObj[response.code]["params"] == [] || stepObj[response.code]["params"] == [ true ]) {
			
			var nextResponse = stepObj[response.code]["callback"](response.data);
		} else {
			var nextResponse = stepObj[response.code]["callback"](stepObj[response.code]["params"]);
		}
		if (checkResponse(nextResponse)// 带有父节点方法的响应
				&& StateFlow.steps[stepObj[response.code]['name']] != undefined) {// 步骤中含有此状态转移配置
			nextResponse.name = stepObj[response.code]['name'];
			return nextResponse;
		}
		return false;
	}
	/**
	 * 检查一个响应是否是StateFlow的响应 如果不是SF响应，则一定是叶子节点的方法，反之则是父节点的方法。
	 */
	function checkResponse(response) {
		if (response instanceof Object) {
			return true;
		} else {
			return false;
		}
	}
	/**
	 * 运行一个步骤（不能是第一个步骤）
	 */
	function runStep(response) {
		var stepName = response.name;
		var stepObj = StateFlow.steps[stepName];
		var funcObj = stepObj[response.code];
		if (funcObj["params"] == [] || funcObj["params"] == [ true ]) {
			var nextResponse = funcObj["callback"](response.data);
		} else {
			var nextResponse = funcObj["callback"](funcObj["params"]);
		}
		if (checkResponse(nextResponse) && StateFlow.steps[funcObj['name']] != undefined) {
			nextResponse.name = funcObj['name'];
			return nextResponse;
		}
		return false;
	}
	/**
	 * 检查一个步骤的对象是否符合要求
	 */
	function checkStep(stepObject) {
		angular.forEach(stepObject, checkFunction);
		return true;

		function checkFunction(funcObj, responseName) {
			if (responseName == "func") {
				if (!(funcObj instanceof Function)) {
					return false;
				}
			} else {
				if (!(funcObj.callback instanceof Function) || !(funcObj.params instanceof Array) || !(typeof funcObj.name === "string")) {
					console.log(funcObj)
					console
							.log("Function Object for "
									+ responseName
									+ " is not correct. callback must be a Function, name must be the function's name and params must be an Array. If the callback function uses last step's response, leave the params to be [] or [true].")
					return false;
				}
			}
		}
	}

	/**
	 * 设置一个步骤
	 */
	function setStep(stepObject, stepName) {
		if (checkStep(stepObject)) {
			if (isEmpty(StateFlow.steps)) {
				StateFlow.setFirstStep(stepName);
			}
			StateFlow.steps[stepName] = stepObject;

		} else {
			console.log("Step object incorrect.");
		}
	}

	/**
	 * 执行整个过程
	 */
	function run(input) {
		var response = StateFlow.run1stStep(input);
		// console.log("Response for "+response.name+":")
		// console.log(response);
		while (response) {
			response = StateFlow.runStep(response);
			// console.log("Response for "+response.name+":")
			// console.log(response);
		}
	}

	// /**
	// * 获取下一个状态要执行的方法
	// */
	// function getNextStateStep(step,response){
	// var code=response.code;
	// return step[code];
	// }
}
PublicWorkflow=StateFlow();
/*
 * 检测对象是否是空对象(不包含任何可读属性)。 方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使hasOwnProperty)。
 */
function isEmpty(obj) {
	for ( var name in obj) {
		return false;
	}
	return true;
};